
Interface OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  08009e0c  08009e0c  0000ae0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abd0  0800abd0  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abd0  0800abd0  0000bbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abd8  0800abd8  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abd8  0800abd8  0000bbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abdc  0800abdc  0000bbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800abe0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000e28  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ea4  20000ea4  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016054  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cdc  00000000  00000000  00022100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00025de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd9  00000000  00000000  00027028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024622  00000000  00000000  00027e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019dce  00000000  00000000  0004c423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc923  00000000  00000000  000661f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132b14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050e0  00000000  00000000  00132b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000099  00000000  00000000  00137c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009df4 	.word	0x08009df4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08009df4 	.word	0x08009df4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fe51 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f831 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f92d 	bl	8000808 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ae:	f000 f897 	bl	80006e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005b2:	f000 f8c3 	bl	800073c <MX_I2S3_Init>
  MX_SPI1_Init();
 80005b6:	f000 f8f1 	bl	800079c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005ba:	f008 fc61 	bl	8008e80 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80005be:	f000 fa5f 	bl	8000a80 <ssd1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005c2:	f008 fc83 	bl	8008ecc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    char buffer[20];

    ssd1306_Fill(Black);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 fac4 	bl	8000b54 <ssd1306_Fill>

    sprintf(buffer, "Count: %d", encoder_counter);
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <main+0x64>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	490c      	ldr	r1, [pc, #48]	@ (8000604 <main+0x68>)
 80005d4:	4618      	mov	r0, r3
 80005d6:	f009 f81b 	bl	8009610 <siprintf>
    ssd1306_SetCursor(0, 0);
 80005da:	2100      	movs	r1, #0
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fc05 	bl	8000dec <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, Font_11x18, White);
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <main+0x6c>)
 80005e4:	1d38      	adds	r0, r7, #4
 80005e6:	2201      	movs	r2, #1
 80005e8:	9200      	str	r2, [sp, #0]
 80005ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005ec:	f000 fbd8 	bl	8000da0 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80005f0:	f000 fac8 	bl	8000b84 <ssd1306_UpdateScreen>

    HAL_Delay(100);  // small delay
 80005f4:	2064      	movs	r0, #100	@ 0x64
 80005f6:	f000 fe99 	bl	800132c <HAL_Delay>
  {
 80005fa:	bf00      	nop
 80005fc:	e7e1      	b.n	80005c2 <main+0x26>
 80005fe:	bf00      	nop
 8000600:	2000018c 	.word	0x2000018c
 8000604:	08009e0c 	.word	0x08009e0c
 8000608:	0800ab78 	.word	0x0800ab78

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f009 f834 	bl	8009688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000680:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000684:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068a:	2307      	movs	r3, #7
 800068c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fbb8 	bl	8004e08 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069e:	f000 f9af 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2105      	movs	r1, #5
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fe19 	bl	80052f8 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006cc:	f000 f998 	bl	8000a00 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	@ 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006e6:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <MX_I2C1_Init+0x54>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006ec:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <MX_I2C1_Init+0x58>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_I2C1_Init+0x50>)
 800071e:	f003 fa25 	bl	8003b6c <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 f96a 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000098 	.word	0x20000098
 8000734:	40005400 	.word	0x40005400
 8000738:	00061a80 	.word	0x00061a80

0800073c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000742:	4a14      	ldr	r2, [pc, #80]	@ (8000794 <MX_I2S3_Init+0x58>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000746:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800075a:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <MX_I2S3_Init+0x54>)
 800075c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000760:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000764:	4a0c      	ldr	r2, [pc, #48]	@ (8000798 <MX_I2S3_Init+0x5c>)
 8000766:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_I2S3_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_I2S3_Init+0x54>)
 800077c:	f003 fea4 	bl	80044c8 <HAL_I2S_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000786:	f000 f93b 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000ec 	.word	0x200000ec
 8000794:	40003c00 	.word	0x40003c00
 8000798:	00017700 	.word	0x00017700

0800079c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007a2:	4a18      	ldr	r2, [pc, #96]	@ (8000804 <MX_SPI1_Init+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007e8:	220a      	movs	r2, #10
 80007ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007ee:	f005 f8d1 	bl	8005994 <HAL_SPI_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f8:	f000 f902 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000134 	.word	0x20000134
 8000804:	40013000 	.word	0x40013000

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	@ 0x30
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	4b72      	ldr	r3, [pc, #456]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a71      	ldr	r2, [pc, #452]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000828:	f043 0310 	orr.w	r3, r3, #16
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b6f      	ldr	r3, [pc, #444]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0310 	and.w	r3, r3, #16
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	4b6b      	ldr	r3, [pc, #428]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a6a      	ldr	r2, [pc, #424]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b68      	ldr	r3, [pc, #416]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b64      	ldr	r3, [pc, #400]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a63      	ldr	r2, [pc, #396]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b61      	ldr	r3, [pc, #388]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b5d      	ldr	r3, [pc, #372]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a5c      	ldr	r2, [pc, #368]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b5a      	ldr	r3, [pc, #360]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b56      	ldr	r3, [pc, #344]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a55      	ldr	r2, [pc, #340]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b53      	ldr	r3, [pc, #332]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b4f      	ldr	r3, [pc, #316]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a4e      	ldr	r2, [pc, #312]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b4c      	ldr	r3, [pc, #304]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2108      	movs	r1, #8
 80008ca:	4849      	ldr	r0, [pc, #292]	@ (80009f0 <MX_GPIO_Init+0x1e8>)
 80008cc:	f001 f800 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	4847      	ldr	r0, [pc, #284]	@ (80009f4 <MX_GPIO_Init+0x1ec>)
 80008d6:	f000 fffb 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008da:	2200      	movs	r2, #0
 80008dc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008e0:	4845      	ldr	r0, [pc, #276]	@ (80009f8 <MX_GPIO_Init+0x1f0>)
 80008e2:	f000 fff5 	bl	80018d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008e6:	2308      	movs	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	483c      	ldr	r0, [pc, #240]	@ (80009f0 <MX_GPIO_Init+0x1e8>)
 80008fe:	f000 fe4b 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4836      	ldr	r0, [pc, #216]	@ (80009f4 <MX_GPIO_Init+0x1ec>)
 800091a:	f000 fe3d 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800091e:	2308      	movs	r3, #8
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092e:	2305      	movs	r3, #5
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	482e      	ldr	r0, [pc, #184]	@ (80009f4 <MX_GPIO_Init+0x1ec>)
 800093a:	f000 fe2d 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800093e:	2304      	movs	r3, #4
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	482a      	ldr	r0, [pc, #168]	@ (80009fc <MX_GPIO_Init+0x1f4>)
 8000952:	f000 fe21 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000968:	2305      	movs	r3, #5
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4822      	ldr	r0, [pc, #136]	@ (80009fc <MX_GPIO_Init+0x1f4>)
 8000974:	f000 fe10 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000978:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800097c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4819      	ldr	r0, [pc, #100]	@ (80009f8 <MX_GPIO_Init+0x1f0>)
 8000992:	f000 fe01 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000996:	2320      	movs	r3, #32
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4813      	ldr	r0, [pc, #76]	@ (80009f8 <MX_GPIO_Init+0x1f0>)
 80009aa:	f000 fdf5 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	480b      	ldr	r0, [pc, #44]	@ (80009f0 <MX_GPIO_Init+0x1e8>)
 80009c4:	f000 fde8 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009cc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_GPIO_Init+0x1e8>)
 80009de:	f000 fddb 	bl	8001598 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e2:	bf00      	nop
 80009e4:	3730      	adds	r7, #48	@ 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	40020400 	.word	0x40020400

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af04      	add	r7, sp, #16
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	9302      	str	r3, [sp, #8]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2301      	movs	r3, #1
 8000a36:	2200      	movs	r2, #0
 8000a38:	2178      	movs	r1, #120	@ 0x78
 8000a3a:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <ssd1306_WriteCommand+0x2c>)
 8000a3c:	f003 f9da 	bl	8003df4 <HAL_I2C_Mem_Write>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000098 	.word	0x20000098

08000a4c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af04      	add	r7, sp, #16
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5e:	9202      	str	r2, [sp, #8]
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2301      	movs	r3, #1
 8000a68:	2240      	movs	r2, #64	@ 0x40
 8000a6a:	2178      	movs	r1, #120	@ 0x78
 8000a6c:	4803      	ldr	r0, [pc, #12]	@ (8000a7c <ssd1306_WriteData+0x30>)
 8000a6e:	f003 f9c1 	bl	8003df4 <HAL_I2C_Mem_Write>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000098 	.word	0x20000098

08000a80 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000a84:	f7ff ffc2 	bl	8000a0c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000a88:	2064      	movs	r0, #100	@ 0x64
 8000a8a:	f000 fc4f 	bl	800132c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f9d8 	bl	8000e44 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000a94:	2020      	movs	r0, #32
 8000a96:	f7ff ffc1 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff ffbe 	bl	8000a1c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000aa0:	20b0      	movs	r0, #176	@ 0xb0
 8000aa2:	f7ff ffbb 	bl	8000a1c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000aa6:	20c8      	movs	r0, #200	@ 0xc8
 8000aa8:	f7ff ffb8 	bl	8000a1c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff ffb5 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000ab2:	2010      	movs	r0, #16
 8000ab4:	f7ff ffb2 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ab8:	2040      	movs	r0, #64	@ 0x40
 8000aba:	f7ff ffaf 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000abe:	20ff      	movs	r0, #255	@ 0xff
 8000ac0:	f000 f9ac 	bl	8000e1c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000ac4:	20a1      	movs	r0, #161	@ 0xa1
 8000ac6:	f7ff ffa9 	bl	8000a1c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000aca:	20a6      	movs	r0, #166	@ 0xa6
 8000acc:	f7ff ffa6 	bl	8000a1c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000ad0:	20a8      	movs	r0, #168	@ 0xa8
 8000ad2:	f7ff ffa3 	bl	8000a1c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000ad6:	203f      	movs	r0, #63	@ 0x3f
 8000ad8:	f7ff ffa0 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000adc:	20a4      	movs	r0, #164	@ 0xa4
 8000ade:	f7ff ff9d 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000ae2:	20d3      	movs	r0, #211	@ 0xd3
 8000ae4:	f7ff ff9a 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff ff97 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000aee:	20d5      	movs	r0, #213	@ 0xd5
 8000af0:	f7ff ff94 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000af4:	20f0      	movs	r0, #240	@ 0xf0
 8000af6:	f7ff ff91 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000afa:	20d9      	movs	r0, #217	@ 0xd9
 8000afc:	f7ff ff8e 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000b00:	2022      	movs	r0, #34	@ 0x22
 8000b02:	f7ff ff8b 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000b06:	20da      	movs	r0, #218	@ 0xda
 8000b08:	f7ff ff88 	bl	8000a1c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000b0c:	2012      	movs	r0, #18
 8000b0e:	f7ff ff85 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000b12:	20db      	movs	r0, #219	@ 0xdb
 8000b14:	f7ff ff82 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000b18:	2020      	movs	r0, #32
 8000b1a:	f7ff ff7f 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000b1e:	208d      	movs	r0, #141	@ 0x8d
 8000b20:	f7ff ff7c 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000b24:	2014      	movs	r0, #20
 8000b26:	f7ff ff79 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f000 f98a 	bl	8000e44 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000b30:	2000      	movs	r0, #0
 8000b32:	f000 f80f 	bl	8000b54 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000b36:	f000 f825 	bl	8000b84 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000b3a:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <ssd1306_Init+0xd0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <ssd1306_Init+0xd0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000b46:	4b02      	ldr	r3, [pc, #8]	@ (8000b50 <ssd1306_Init+0xd0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	711a      	strb	r2, [r3, #4]
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000590 	.word	0x20000590

08000b54 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <ssd1306_Fill+0x14>
 8000b64:	2300      	movs	r3, #0
 8000b66:	e000      	b.n	8000b6a <ssd1306_Fill+0x16>
 8000b68:	23ff      	movs	r3, #255	@ 0xff
 8000b6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <ssd1306_Fill+0x2c>)
 8000b72:	f008 fd89 	bl	8009688 <memset>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000190 	.word	0x20000190

08000b84 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71fb      	strb	r3, [r7, #7]
 8000b8e:	e016      	b.n	8000bbe <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	3b50      	subs	r3, #80	@ 0x50
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff40 	bl	8000a1c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff ff3d 	bl	8000a1c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000ba2:	2010      	movs	r0, #16
 8000ba4:	f7ff ff3a 	bl	8000a1c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	01db      	lsls	r3, r3, #7
 8000bac:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <ssd1306_UpdateScreen+0x4c>)
 8000bae:	4413      	add	r3, r2
 8000bb0:	2180      	movs	r1, #128	@ 0x80
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff4a 	bl	8000a4c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	71fb      	strb	r3, [r7, #7]
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b07      	cmp	r3, #7
 8000bc2:	d9e5      	bls.n	8000b90 <ssd1306_UpdateScreen+0xc>
    }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000190 	.word	0x20000190

08000bd4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	460b      	mov	r3, r1
 8000be0:	71bb      	strb	r3, [r7, #6]
 8000be2:	4613      	mov	r3, r2
 8000be4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db3d      	blt.n	8000c6a <ssd1306_DrawPixel+0x96>
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bf2:	d83a      	bhi.n	8000c6a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000bf4:	797b      	ldrb	r3, [r7, #5]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d11a      	bne.n	8000c30 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000bfa:	79fa      	ldrb	r2, [r7, #7]
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	08db      	lsrs	r3, r3, #3
 8000c00:	b2d8      	uxtb	r0, r3
 8000c02:	4603      	mov	r3, r0
 8000c04:	01db      	lsls	r3, r3, #7
 8000c06:	4413      	add	r3, r2
 8000c08:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <ssd1306_DrawPixel+0xa4>)
 8000c0a:	5cd3      	ldrb	r3, [r2, r3]
 8000c0c:	b25a      	sxtb	r2, r3
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	f003 0307 	and.w	r3, r3, #7
 8000c14:	2101      	movs	r1, #1
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b259      	sxtb	r1, r3
 8000c20:	79fa      	ldrb	r2, [r7, #7]
 8000c22:	4603      	mov	r3, r0
 8000c24:	01db      	lsls	r3, r3, #7
 8000c26:	4413      	add	r3, r2
 8000c28:	b2c9      	uxtb	r1, r1
 8000c2a:	4a13      	ldr	r2, [pc, #76]	@ (8000c78 <ssd1306_DrawPixel+0xa4>)
 8000c2c:	54d1      	strb	r1, [r2, r3]
 8000c2e:	e01d      	b.n	8000c6c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c30:	79fa      	ldrb	r2, [r7, #7]
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	08db      	lsrs	r3, r3, #3
 8000c36:	b2d8      	uxtb	r0, r3
 8000c38:	4603      	mov	r3, r0
 8000c3a:	01db      	lsls	r3, r3, #7
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c78 <ssd1306_DrawPixel+0xa4>)
 8000c40:	5cd3      	ldrb	r3, [r2, r3]
 8000c42:	b25a      	sxtb	r2, r3
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	4013      	ands	r3, r2
 8000c58:	b259      	sxtb	r1, r3
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	01db      	lsls	r3, r3, #7
 8000c60:	4413      	add	r3, r2
 8000c62:	b2c9      	uxtb	r1, r1
 8000c64:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <ssd1306_DrawPixel+0xa4>)
 8000c66:	54d1      	strb	r1, [r2, r3]
 8000c68:	e000      	b.n	8000c6c <ssd1306_DrawPixel+0x98>
        return;
 8000c6a:	bf00      	nop
    }
}
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000190 	.word	0x20000190

08000c7c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b089      	sub	sp, #36	@ 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	4638      	mov	r0, r7
 8000c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	2b1f      	cmp	r3, #31
 8000c92:	d902      	bls.n	8000c9a <ssd1306_WriteChar+0x1e>
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	2b7e      	cmp	r3, #126	@ 0x7e
 8000c98:	d901      	bls.n	8000c9e <ssd1306_WriteChar+0x22>
        return 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e079      	b.n	8000d92 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d005      	beq.n	8000cb0 <ssd1306_WriteChar+0x34>
 8000ca4:	68ba      	ldr	r2, [r7, #8]
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	3b20      	subs	r3, #32
 8000caa:	4413      	add	r3, r2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	e000      	b.n	8000cb2 <ssd1306_WriteChar+0x36>
 8000cb0:	783b      	ldrb	r3, [r7, #0]
 8000cb2:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000cb4:	4b39      	ldr	r3, [pc, #228]	@ (8000d9c <ssd1306_WriteChar+0x120>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	7dfb      	ldrb	r3, [r7, #23]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	2b80      	cmp	r3, #128	@ 0x80
 8000cc0:	dc06      	bgt.n	8000cd0 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000cc2:	4b36      	ldr	r3, [pc, #216]	@ (8000d9c <ssd1306_WriteChar+0x120>)
 8000cc4:	885b      	ldrh	r3, [r3, #2]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	787b      	ldrb	r3, [r7, #1]
 8000cca:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000ccc:	2b40      	cmp	r3, #64	@ 0x40
 8000cce:	dd01      	ble.n	8000cd4 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e05e      	b.n	8000d92 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	e04d      	b.n	8000d76 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	3b20      	subs	r3, #32
 8000ce0:	7879      	ldrb	r1, [r7, #1]
 8000ce2:	fb01 f303 	mul.w	r3, r1, r3
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	440b      	add	r3, r1
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	e036      	b.n	8000d68 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d013      	beq.n	8000d32 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000d0a:	4b24      	ldr	r3, [pc, #144]	@ (8000d9c <ssd1306_WriteChar+0x120>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	4413      	add	r3, r2
 8000d16:	b2d8      	uxtb	r0, r3
 8000d18:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <ssd1306_WriteChar+0x120>)
 8000d1a:	885b      	ldrh	r3, [r3, #2]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4413      	add	r3, r2
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f7ff ff52 	bl	8000bd4 <ssd1306_DrawPixel>
 8000d30:	e017      	b.n	8000d62 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <ssd1306_WriteChar+0x120>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	4413      	add	r3, r2
 8000d3e:	b2d8      	uxtb	r0, r3
 8000d40:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <ssd1306_WriteChar+0x120>)
 8000d42:	885b      	ldrh	r3, [r3, #2]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2d9      	uxtb	r1, r3
 8000d4e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf0c      	ite	eq
 8000d56:	2301      	moveq	r3, #1
 8000d58:	2300      	movne	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f7ff ff39 	bl	8000bd4 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	3301      	adds	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d3c4      	bcc.n	8000cfa <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	3301      	adds	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	787b      	ldrb	r3, [r7, #1]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d3ac      	bcc.n	8000cda <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <ssd1306_WriteChar+0x120>)
 8000d82:	881a      	ldrh	r2, [r3, #0]
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4413      	add	r3, r2
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <ssd1306_WriteChar+0x120>)
 8000d8e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	@ 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000590 	.word	0x20000590

08000da0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	4638      	mov	r0, r7
 8000daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000dae:	e013      	b.n	8000dd8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	7818      	ldrb	r0, [r3, #0]
 8000db4:	7e3b      	ldrb	r3, [r7, #24]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	463b      	mov	r3, r7
 8000dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dbc:	f7ff ff5e 	bl	8000c7c <ssd1306_WriteChar>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d002      	beq.n	8000dd2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	e008      	b.n	8000de4 <ssd1306_WriteString+0x44>
        }
        str++;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1e7      	bne.n	8000db0 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	460a      	mov	r2, r1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <ssd1306_SetCursor+0x2c>)
 8000e02:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <ssd1306_SetCursor+0x2c>)
 8000e0a:	805a      	strh	r2, [r3, #2]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	20000590 	.word	0x20000590

08000e1c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000e26:	2381      	movs	r3, #129	@ 0x81
 8000e28:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fdf5 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fdf1 	bl	8000a1c <ssd1306_WriteCommand>
}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d005      	beq.n	8000e60 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000e54:	23af      	movs	r3, #175	@ 0xaf
 8000e56:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <ssd1306_SetDisplayOn+0x38>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	715a      	strb	r2, [r3, #5]
 8000e5e:	e004      	b.n	8000e6a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000e60:	23ae      	movs	r3, #174	@ 0xae
 8000e62:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <ssd1306_SetDisplayOn+0x38>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fdd5 	bl	8000a1c <ssd1306_WriteCommand>
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000590 	.word	0x20000590

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ebe:	2007      	movs	r0, #7
 8000ec0:	f000 fb28 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <HAL_I2C_MspInit+0x84>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12c      	bne.n	8000f4c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_I2C_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <HAL_I2C_MspInit+0x88>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_I2C_MspInit+0x88>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f14:	2312      	movs	r3, #18
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f20:	2304      	movs	r3, #4
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <HAL_I2C_MspInit+0x8c>)
 8000f2c:	f000 fb34 	bl	8001598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <HAL_I2C_MspInit+0x88>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <HAL_I2C_MspInit+0x88>)
 8000f3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <HAL_I2C_MspInit+0x88>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	@ 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40005400 	.word	0x40005400
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020400 	.word	0x40020400

08000f60 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	@ 0x38
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a31      	ldr	r2, [pc, #196]	@ (8001050 <HAL_I2S_MspInit+0xf0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d15a      	bne.n	8001046 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f90:	2301      	movs	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f94:	23c0      	movs	r3, #192	@ 0xc0
 8000f96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 fbb5 	bl	8005710 <HAL_RCCEx_PeriphCLKConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000fac:	f7ff fd28 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <HAL_I2S_MspInit+0xf4>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	4a26      	ldr	r2, [pc, #152]	@ (8001054 <HAL_I2S_MspInit+0xf4>)
 8000fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <HAL_I2S_MspInit+0xf4>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <HAL_I2S_MspInit+0xf4>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001054 <HAL_I2S_MspInit+0xf4>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <HAL_I2S_MspInit+0xf4>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <HAL_I2S_MspInit+0xf4>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff0:	4a18      	ldr	r2, [pc, #96]	@ (8001054 <HAL_I2S_MspInit+0xf4>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff8:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <HAL_I2S_MspInit+0xf4>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001004:	2310      	movs	r3, #16
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001014:	2306      	movs	r3, #6
 8001016:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	480e      	ldr	r0, [pc, #56]	@ (8001058 <HAL_I2S_MspInit+0xf8>)
 8001020:	f000 faba 	bl	8001598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001024:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001036:	2306      	movs	r3, #6
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	4806      	ldr	r0, [pc, #24]	@ (800105c <HAL_I2S_MspInit+0xfc>)
 8001042:	f000 faa9 	bl	8001598 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001046:	bf00      	nop
 8001048:	3738      	adds	r7, #56	@ 0x38
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40003c00 	.word	0x40003c00
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000
 800105c:	40020800 	.word	0x40020800

08001060 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	@ (80010e4 <HAL_SPI_MspInit+0x84>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d12b      	bne.n	80010da <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_SPI_MspInit+0x88>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <HAL_SPI_MspInit+0x88>)
 800108c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001090:	6453      	str	r3, [r2, #68]	@ 0x44
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_SPI_MspInit+0x88>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HAL_SPI_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a10      	ldr	r2, [pc, #64]	@ (80010e8 <HAL_SPI_MspInit+0x88>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <HAL_SPI_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010ba:	23e0      	movs	r3, #224	@ 0xe0
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ca:	2305      	movs	r3, #5
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	@ (80010ec <HAL_SPI_MspInit+0x8c>)
 80010d6:	f000 fa5f 	bl	8001598 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	@ 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40013000 	.word	0x40013000
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001146:	f000 f8d1 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <OTG_FS_IRQHandler+0x10>)
 8001156:	f000 feb5 	bl	8001ec4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000097c 	.word	0x2000097c

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f008 fa90 	bl	80096b8 <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	220c      	movs	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20020000 	.word	0x20020000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	20000598 	.word	0x20000598
 80011cc:	20000ea8 	.word	0x20000ea8

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800122c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011f8:	f7ff ffea 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011fc:	480c      	ldr	r0, [pc, #48]	@ (8001230 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011fe:	490d      	ldr	r1, [pc, #52]	@ (8001234 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001200:	4a0d      	ldr	r2, [pc, #52]	@ (8001238 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001214:	4c0a      	ldr	r4, [pc, #40]	@ (8001240 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001222:	f008 fa4f 	bl	80096c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff f9b9 	bl	800059c <main>
  bx  lr    
 800122a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800122c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001238:	0800abe0 	.word	0x0800abe0
  ldr r2, =_sbss
 800123c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001240:	20000ea4 	.word	0x20000ea4

08001244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800124c:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <HAL_Init+0x40>)
 8001252:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <HAL_Init+0x40>)
 800125e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <HAL_Init+0x40>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f94f 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	2000      	movs	r0, #0
 8001278:	f000 f808 	bl	800128c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff fe00 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023c00 	.word	0x40023c00

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_InitTick+0x54>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_InitTick+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f967 	bl	800157e <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00e      	b.n	80012d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d80a      	bhi.n	80012d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f000 f92f 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4a06      	ldr	r2, [pc, #24]	@ (80012e8 <HAL_InitTick+0x5c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_IncTick+0x20>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_IncTick+0x24>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <HAL_IncTick+0x24>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000008 	.word	0x20000008
 8001310:	2000059c 	.word	0x2000059c

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <HAL_GetTick+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	2000059c 	.word	0x2000059c

0800132c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff ffee 	bl	8001314 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d005      	beq.n	8001352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_Delay+0x44>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001352:	bf00      	nop
 8001354:	f7ff ffde 	bl	8001314 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	429a      	cmp	r2, r3
 8001362:	d8f7      	bhi.n	8001354 <HAL_Delay+0x28>
  {
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000008 	.word	0x20000008

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4907      	ldr	r1, [pc, #28]	@ (8001410 <__NVIC_EnableIRQ+0x38>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	@ (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	@ (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	@ 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	@ 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff8e 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff29 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff3e 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff8e 	bl	8001468 <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5d 	bl	8001414 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff31 	bl	80013d8 <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa2 	bl	80014d0 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	e16b      	b.n	800188c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b4:	2201      	movs	r2, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	f040 815a 	bne.w	8001886 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d005      	beq.n	80015ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d130      	bne.n	800164c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001620:	2201      	movs	r2, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 0201 	and.w	r2, r3, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b03      	cmp	r3, #3
 8001656:	d017      	beq.n	8001688 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d123      	bne.n	80016dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	08da      	lsrs	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3208      	adds	r2, #8
 800169c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	08da      	lsrs	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3208      	adds	r2, #8
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80b4 	beq.w	8001886 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b60      	ldr	r3, [pc, #384]	@ (80018a4 <HAL_GPIO_Init+0x30c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	4a5f      	ldr	r2, [pc, #380]	@ (80018a4 <HAL_GPIO_Init+0x30c>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172c:	6453      	str	r3, [r2, #68]	@ 0x44
 800172e:	4b5d      	ldr	r3, [pc, #372]	@ (80018a4 <HAL_GPIO_Init+0x30c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800173a:	4a5b      	ldr	r2, [pc, #364]	@ (80018a8 <HAL_GPIO_Init+0x310>)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a52      	ldr	r2, [pc, #328]	@ (80018ac <HAL_GPIO_Init+0x314>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d02b      	beq.n	80017be <HAL_GPIO_Init+0x226>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a51      	ldr	r2, [pc, #324]	@ (80018b0 <HAL_GPIO_Init+0x318>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d025      	beq.n	80017ba <HAL_GPIO_Init+0x222>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a50      	ldr	r2, [pc, #320]	@ (80018b4 <HAL_GPIO_Init+0x31c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01f      	beq.n	80017b6 <HAL_GPIO_Init+0x21e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4f      	ldr	r2, [pc, #316]	@ (80018b8 <HAL_GPIO_Init+0x320>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d019      	beq.n	80017b2 <HAL_GPIO_Init+0x21a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4e      	ldr	r2, [pc, #312]	@ (80018bc <HAL_GPIO_Init+0x324>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d013      	beq.n	80017ae <HAL_GPIO_Init+0x216>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4d      	ldr	r2, [pc, #308]	@ (80018c0 <HAL_GPIO_Init+0x328>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_GPIO_Init+0x212>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4c      	ldr	r2, [pc, #304]	@ (80018c4 <HAL_GPIO_Init+0x32c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0x20e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4b      	ldr	r2, [pc, #300]	@ (80018c8 <HAL_GPIO_Init+0x330>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_GPIO_Init+0x20a>
 800179e:	2307      	movs	r3, #7
 80017a0:	e00e      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017a2:	2308      	movs	r3, #8
 80017a4:	e00c      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017a6:	2306      	movs	r3, #6
 80017a8:	e00a      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017aa:	2305      	movs	r3, #5
 80017ac:	e008      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017ae:	2304      	movs	r3, #4
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017be:	2300      	movs	r3, #0
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f002 0203 	and.w	r2, r2, #3
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4093      	lsls	r3, r2
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d0:	4935      	ldr	r1, [pc, #212]	@ (80018a8 <HAL_GPIO_Init+0x310>)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017de:	4b3b      	ldr	r3, [pc, #236]	@ (80018cc <HAL_GPIO_Init+0x334>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001802:	4a32      	ldr	r2, [pc, #200]	@ (80018cc <HAL_GPIO_Init+0x334>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001808:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <HAL_GPIO_Init+0x334>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800182c:	4a27      	ldr	r2, [pc, #156]	@ (80018cc <HAL_GPIO_Init+0x334>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001832:	4b26      	ldr	r3, [pc, #152]	@ (80018cc <HAL_GPIO_Init+0x334>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001856:	4a1d      	ldr	r2, [pc, #116]	@ (80018cc <HAL_GPIO_Init+0x334>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185c:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <HAL_GPIO_Init+0x334>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001880:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <HAL_GPIO_Init+0x334>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b0f      	cmp	r3, #15
 8001890:	f67f ae90 	bls.w	80015b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3724      	adds	r7, #36	@ 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40013800 	.word	0x40013800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40021400 	.word	0x40021400
 80018c4:	40021800 	.word	0x40021800
 80018c8:	40021c00 	.word	0x40021c00
 80018cc:	40013c00 	.word	0x40013c00

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018ec:	e003      	b.n	80018f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	619a      	str	r2, [r3, #24]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af02      	add	r7, sp, #8
 8001908:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e059      	b.n	80019c8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f007 fb04 	bl	8008f3c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2203      	movs	r2, #3
 8001938:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001942:	d102      	bne.n	800194a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f004 f91e 	bl	8005b90 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7c1a      	ldrb	r2, [r3, #16]
 800195c:	f88d 2000 	strb.w	r2, [sp]
 8001960:	3304      	adds	r3, #4
 8001962:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001964:	f004 f89f 	bl	8005aa6 <USB_CoreInit>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e026      	b.n	80019c8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2101      	movs	r1, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f004 f916 	bl	8005bb2 <USB_SetCurrentMode>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e017      	b.n	80019c8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7c1a      	ldrb	r2, [r3, #16]
 80019a0:	f88d 2000 	strb.w	r2, [sp]
 80019a4:	3304      	adds	r3, #4
 80019a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019a8:	f004 fab8 	bl	8005f1c <USB_HostInit>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2202      	movs	r2, #2
 80019b6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e004      	b.n	80019c8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b08b      	sub	sp, #44	@ 0x2c
 80019d4:	af04      	add	r7, sp, #16
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	70fb      	strb	r3, [r7, #3]
 80019e2:	460b      	mov	r3, r1
 80019e4:	70bb      	strb	r3, [r7, #2]
 80019e6:	4613      	mov	r3, r2
 80019e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80019ea:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80019ec:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_HCD_HC_Init+0x2c>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e09d      	b.n	8001b38 <HAL_HCD_HC_Init+0x168>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	3319      	adds	r3, #25
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	3314      	adds	r3, #20
 8001a28:	787a      	ldrb	r2, [r7, #1]
 8001a2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	3315      	adds	r3, #21
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3326      	adds	r3, #38	@ 0x26
 8001a50:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001a54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	78bb      	ldrb	r3, [r7, #2]
 8001a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a5e:	b2d8      	uxtb	r0, r3
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3316      	adds	r3, #22
 8001a6e:	4602      	mov	r2, r0
 8001a70:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fbc8 	bl	800220c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001a7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	da0a      	bge.n	8001a9a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	3317      	adds	r3, #23
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]
 8001a98:	e009      	b.n	8001aae <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3317      	adds	r3, #23
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f004 fb96 	bl	80061e4 <USB_GetHostSpeed>
 8001ab8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001aba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d10b      	bne.n	8001ada <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_HCD_HC_Init+0x10a>
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2bbc      	cmp	r3, #188	@ 0xbc
 8001ad4:	d901      	bls.n	8001ada <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001ad6:	23bc      	movs	r3, #188	@ 0xbc
 8001ad8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	1a9b      	subs	r3, r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3318      	adds	r3, #24
 8001aea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001aee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	b298      	uxth	r0, r3
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	3328      	adds	r3, #40	@ 0x28
 8001b04:	4602      	mov	r2, r0
 8001b06:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	787c      	ldrb	r4, [r7, #1]
 8001b12:	78ba      	ldrb	r2, [r7, #2]
 8001b14:	78f9      	ldrb	r1, [r7, #3]
 8001b16:	9302      	str	r3, [sp, #8]
 8001b18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	4623      	mov	r3, r4
 8001b26:	f004 fb85 	bl	8006234 <USB_HC_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd90      	pop	{r4, r7, pc}

08001b40 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_HCD_HC_Halt+0x1e>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e00f      	b.n	8001b7e <HAL_HCD_HC_Halt+0x3e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	78fa      	ldrb	r2, [r7, #3]
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 ff17 	bl	80069a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	4608      	mov	r0, r1
 8001b92:	4611      	mov	r1, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	70fb      	strb	r3, [r7, #3]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	70bb      	strb	r3, [r7, #2]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	3317      	adds	r3, #23
 8001bb2:	78ba      	ldrb	r2, [r7, #2]
 8001bb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	3326      	adds	r3, #38	@ 0x26
 8001bc6:	787a      	ldrb	r2, [r7, #1]
 8001bc8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001bca:	7c3b      	ldrb	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d114      	bne.n	8001bfa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	332a      	adds	r3, #42	@ 0x2a
 8001be0:	2203      	movs	r2, #3
 8001be2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3319      	adds	r3, #25
 8001bf4:	7f3a      	ldrb	r2, [r7, #28]
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	e009      	b.n	8001c0e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	332a      	adds	r3, #42	@ 0x2a
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c0e:	787b      	ldrb	r3, [r7, #1]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	f200 8102 	bhi.w	8001e1a <HAL_HCD_HC_SubmitRequest+0x292>
 8001c16:	a201      	add	r2, pc, #4	@ (adr r2, 8001c1c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001e05 	.word	0x08001e05
 8001c24:	08001cf1 	.word	0x08001cf1
 8001c28:	08001d7b 	.word	0x08001d7b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001c2c:	7c3b      	ldrb	r3, [r7, #16]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	f040 80f5 	bne.w	8001e1e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001c34:	78bb      	ldrb	r3, [r7, #2]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d12d      	bne.n	8001c96 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001c3a:	8b3b      	ldrh	r3, [r7, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	333d      	adds	r3, #61	@ 0x3d
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	1a9b      	subs	r3, r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	333d      	adds	r3, #61	@ 0x3d
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	332a      	adds	r3, #42	@ 0x2a
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001c7e:	e0ce      	b.n	8001e1e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	332a      	adds	r3, #42	@ 0x2a
 8001c90:	2202      	movs	r2, #2
 8001c92:	701a      	strb	r2, [r3, #0]
      break;
 8001c94:	e0c3      	b.n	8001e1e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001c96:	78fa      	ldrb	r2, [r7, #3]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	331a      	adds	r3, #26
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	f040 80b8 	bne.w	8001e1e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	333c      	adds	r3, #60	@ 0x3c
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10a      	bne.n	8001cda <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	332a      	adds	r3, #42	@ 0x2a
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
      break;
 8001cd8:	e0a1      	b.n	8001e1e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	332a      	adds	r3, #42	@ 0x2a
 8001cea:	2202      	movs	r2, #2
 8001cec:	701a      	strb	r2, [r3, #0]
      break;
 8001cee:	e096      	b.n	8001e1e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001cf0:	78bb      	ldrb	r3, [r7, #2]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d120      	bne.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cf6:	78fa      	ldrb	r2, [r7, #3]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	333d      	adds	r3, #61	@ 0x3d
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10a      	bne.n	8001d22 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	332a      	adds	r3, #42	@ 0x2a
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d20:	e07e      	b.n	8001e20 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	332a      	adds	r3, #42	@ 0x2a
 8001d32:	2202      	movs	r2, #2
 8001d34:	701a      	strb	r2, [r3, #0]
      break;
 8001d36:	e073      	b.n	8001e20 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	333c      	adds	r3, #60	@ 0x3c
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10a      	bne.n	8001d64 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	332a      	adds	r3, #42	@ 0x2a
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
      break;
 8001d62:	e05d      	b.n	8001e20 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	332a      	adds	r3, #42	@ 0x2a
 8001d74:	2202      	movs	r2, #2
 8001d76:	701a      	strb	r2, [r3, #0]
      break;
 8001d78:	e052      	b.n	8001e20 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d7a:	78bb      	ldrb	r3, [r7, #2]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d120      	bne.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	333d      	adds	r3, #61	@ 0x3d
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10a      	bne.n	8001dac <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d96:	78fa      	ldrb	r2, [r7, #3]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	332a      	adds	r3, #42	@ 0x2a
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001daa:	e039      	b.n	8001e20 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	332a      	adds	r3, #42	@ 0x2a
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	701a      	strb	r2, [r3, #0]
      break;
 8001dc0:	e02e      	b.n	8001e20 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001dc2:	78fa      	ldrb	r2, [r7, #3]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	333c      	adds	r3, #60	@ 0x3c
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	332a      	adds	r3, #42	@ 0x2a
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
      break;
 8001dec:	e018      	b.n	8001e20 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	332a      	adds	r3, #42	@ 0x2a
 8001dfe:	2202      	movs	r2, #2
 8001e00:	701a      	strb	r2, [r3, #0]
      break;
 8001e02:	e00d      	b.n	8001e20 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	332a      	adds	r3, #42	@ 0x2a
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
      break;
 8001e18:	e002      	b.n	8001e20 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001e1a:	bf00      	nop
 8001e1c:	e000      	b.n	8001e20 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001e1e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	332c      	adds	r3, #44	@ 0x2c
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	8b39      	ldrh	r1, [r7, #24]
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	1a9b      	subs	r3, r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4403      	add	r3, r0
 8001e44:	3334      	adds	r3, #52	@ 0x34
 8001e46:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	334c      	adds	r3, #76	@ 0x4c
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3338      	adds	r3, #56	@ 0x38
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3315      	adds	r3, #21
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	334d      	adds	r3, #77	@ 0x4d
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	3310      	adds	r3, #16
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	1d19      	adds	r1, r3, #4
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	799b      	ldrb	r3, [r3, #6]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f004 faea 	bl	800648c <USB_HC_StartXfer>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop

08001ec4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 ffdf 	bl	8005e9e <USB_GetMode>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	f040 80fb 	bne.w	80020de <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 ffa2 	bl	8005e36 <USB_ReadInterrupts>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80f1 	beq.w	80020dc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 ff99 	bl	8005e36 <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f0e:	d104      	bne.n	8001f1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001f18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 ff89 	bl	8005e36 <USB_ReadInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f2e:	d104      	bne.n	8001f3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 ff79 	bl	8005e36 <USB_ReadInterrupts>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001f4e:	d104      	bne.n	8001f5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 ff69 	bl	8005e36 <USB_ReadInterrupts>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d103      	bne.n	8001f76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2202      	movs	r2, #2
 8001f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 ff5b 	bl	8005e36 <USB_ReadInterrupts>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f8a:	d120      	bne.n	8001fce <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f94:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d113      	bne.n	8001fce <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	6938      	ldr	r0, [r7, #16]
 8001faa:	f003 fe4e 	bl	8005c4a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001fae:	6938      	ldr	r0, [r7, #16]
 8001fb0:	f003 fe7d 	bl	8005cae <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7a5b      	ldrb	r3, [r3, #9]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d105      	bne.n	8001fc8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 f86e 	bl	80060a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f007 f835 	bl	8009038 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 ff2f 	bl	8005e36 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe2:	d102      	bne.n	8001fea <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f001 fd4d 	bl	8003a84 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 ff21 	bl	8005e36 <USB_ReadInterrupts>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d106      	bne.n	800200c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f006 fffe 	bl	8009000 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2208      	movs	r2, #8
 800200a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f003 ff10 	bl	8005e36 <USB_ReadInterrupts>
 8002016:	4603      	mov	r3, r0
 8002018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002020:	d139      	bne.n	8002096 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f004 fcaa 	bl	8006980 <USB_HC_ReadInterrupt>
 800202c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e025      	b.n	8002080 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d018      	beq.n	800207a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800205a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800205e:	d106      	bne.n	800206e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f905 	bl	8002276 <HCD_HC_IN_IRQHandler>
 800206c:	e005      	b.n	800207a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 ff67 	bl	8002f48 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	795b      	ldrb	r3, [r3, #5]
 8002084:	461a      	mov	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	4293      	cmp	r3, r2
 800208a:	d3d3      	bcc.n	8002034 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002094:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f003 fecb 	bl	8005e36 <USB_ReadInterrupts>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d101      	bne.n	80020ae <HAL_HCD_IRQHandler+0x1ea>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_HCD_IRQHandler+0x1ec>
 80020ae:	2300      	movs	r3, #0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d014      	beq.n	80020de <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0210 	bic.w	r2, r2, #16
 80020c2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f001 fbfe 	bl	80038c6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699a      	ldr	r2, [r3, #24]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0210 	orr.w	r2, r2, #16
 80020d8:	619a      	str	r2, [r3, #24]
 80020da:	e000      	b.n	80020de <HAL_HCD_IRQHandler+0x21a>
      return;
 80020dc:	bf00      	nop
    }
  }
}
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_HCD_Start+0x16>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e013      	b.n	8002122 <HAL_HCD_Start+0x3e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2101      	movs	r1, #1
 8002108:	4618      	mov	r0, r3
 800210a:	f004 f832 	bl	8006172 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fd2b 	bl	8005b6e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_HCD_Stop+0x16>
 800213c:	2302      	movs	r3, #2
 800213e:	e00d      	b.n	800215c <HAL_HCD_Stop+0x32>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f004 fd85 	bl	8006c5c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f003 ffd4 	bl	800611e <USB_ResetPort>
 8002176:	4603      	mov	r3, r0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	334c      	adds	r3, #76	@ 0x4c
 800219c:	781b      	ldrb	r3, [r3, #0]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3338      	adds	r3, #56	@ 0x38
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f004 f816 	bl	8006212 <USB_GetCurrentFrame>
 80021e6:	4603      	mov	r3, r0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fff1 	bl	80061e4 <USB_GetHostSpeed>
 8002202:	4603      	mov	r3, r0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	331a      	adds	r3, #26
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	331b      	adds	r3, #27
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3325      	adds	r3, #37	@ 0x25
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3324      	adds	r3, #36	@ 0x24
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f003 fde1 	bl	8005e5c <USB_ReadChInterrupts>
 800229a:	4603      	mov	r3, r0
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d11a      	bne.n	80022da <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022b0:	461a      	mov	r2, r3
 80022b2:	2304      	movs	r3, #4
 80022b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	334d      	adds	r3, #77	@ 0x4d
 80022c6:	2207      	movs	r2, #7
 80022c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f004 fb65 	bl	80069a2 <USB_HC_Halt>
 80022d8:	e09e      	b.n	8002418 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 fdba 	bl	8005e5c <USB_ReadChInterrupts>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022f2:	d11b      	bne.n	800232c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002300:	461a      	mov	r2, r3
 8002302:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002306:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	334d      	adds	r3, #77	@ 0x4d
 8002318:	2208      	movs	r2, #8
 800231a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f004 fb3c 	bl	80069a2 <USB_HC_Halt>
 800232a:	e075      	b.n	8002418 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f003 fd91 	bl	8005e5c <USB_ReadChInterrupts>
 800233a:	4603      	mov	r3, r0
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b08      	cmp	r3, #8
 8002342:	d11a      	bne.n	800237a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4413      	add	r3, r2
 800234c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002350:	461a      	mov	r2, r3
 8002352:	2308      	movs	r3, #8
 8002354:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	334d      	adds	r3, #77	@ 0x4d
 8002366:	2206      	movs	r2, #6
 8002368:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f004 fb15 	bl	80069a2 <USB_HC_Halt>
 8002378:	e04e      	b.n	8002418 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fd6a 	bl	8005e5c <USB_ReadChInterrupts>
 8002388:	4603      	mov	r3, r0
 800238a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002392:	d11b      	bne.n	80023cc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	334d      	adds	r3, #77	@ 0x4d
 80023b8:	2209      	movs	r2, #9
 80023ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f004 faec 	bl	80069a2 <USB_HC_Halt>
 80023ca:	e025      	b.n	8002418 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 fd41 	bl	8005e5c <USB_ReadChInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e0:	2b80      	cmp	r3, #128	@ 0x80
 80023e2:	d119      	bne.n	8002418 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f0:	461a      	mov	r2, r3
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	334d      	adds	r3, #77	@ 0x4d
 8002406:	2207      	movs	r2, #7
 8002408:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f004 fac5 	bl	80069a2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f003 fd1b 	bl	8005e5c <USB_ReadChInterrupts>
 8002426:	4603      	mov	r3, r0
 8002428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800242c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002430:	d112      	bne.n	8002458 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f004 fab1 	bl	80069a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800244c:	461a      	mov	r2, r3
 800244e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002452:	6093      	str	r3, [r2, #8]
 8002454:	f000 bd75 	b.w	8002f42 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f003 fcfb 	bl	8005e5c <USB_ReadChInterrupts>
 8002466:	4603      	mov	r3, r0
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	f040 8128 	bne.w	80026c2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800247e:	461a      	mov	r2, r3
 8002480:	2320      	movs	r3, #32
 8002482:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	331b      	adds	r3, #27
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d119      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	331b      	adds	r3, #27
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	0151      	lsls	r1, r2, #5
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	440a      	add	r2, r1
 80024c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024cc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	799b      	ldrb	r3, [r3, #6]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01b      	beq.n	800250e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	3330      	adds	r3, #48	@ 0x30
 80024e6:	6819      	ldr	r1, [r3, #0]
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	1ac9      	subs	r1, r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4403      	add	r3, r0
 800250a:	3338      	adds	r3, #56	@ 0x38
 800250c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	334d      	adds	r3, #77	@ 0x4d
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3344      	adds	r3, #68	@ 0x44
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002542:	461a      	mov	r2, r3
 8002544:	2301      	movs	r3, #1
 8002546:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	3326      	adds	r3, #38	@ 0x26
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	3326      	adds	r3, #38	@ 0x26
 800256e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002570:	2b02      	cmp	r3, #2
 8002572:	d110      	bne.n	8002596 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fa10 	bl	80069a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800258e:	461a      	mov	r2, r3
 8002590:	2310      	movs	r3, #16
 8002592:	6093      	str	r3, [r2, #8]
 8002594:	e03d      	b.n	8002612 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	3326      	adds	r3, #38	@ 0x26
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d00a      	beq.n	80025c2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3326      	adds	r3, #38	@ 0x26
 80025bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d127      	bne.n	8002612 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	0151      	lsls	r1, r2, #5
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	440a      	add	r2, r1
 80025d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80025e0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	334c      	adds	r3, #76	@ 0x4c
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	334c      	adds	r3, #76	@ 0x4c
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f006 fd21 	bl	8009054 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	799b      	ldrb	r3, [r3, #6]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d13b      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	3338      	adds	r3, #56	@ 0x38
 800262a:	6819      	ldr	r1, [r3, #0]
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4403      	add	r3, r0
 800263a:	3328      	adds	r3, #40	@ 0x28
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	440b      	add	r3, r1
 8002640:	1e59      	subs	r1, r3, #1
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4403      	add	r3, r0
 8002650:	3328      	adds	r3, #40	@ 0x28
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	fbb1 f3f3 	udiv	r3, r1, r3
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8470 	beq.w	8002f42 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	333c      	adds	r3, #60	@ 0x3c
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2d8      	uxtb	r0, r3
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	333c      	adds	r3, #60	@ 0x3c
 800268a:	4602      	mov	r2, r0
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	f000 bc58 	b.w	8002f42 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	333c      	adds	r3, #60	@ 0x3c
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	f083 0301 	eor.w	r3, r3, #1
 80026aa:	b2d8      	uxtb	r0, r3
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	333c      	adds	r3, #60	@ 0x3c
 80026ba:	4602      	mov	r2, r0
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	f000 bc40 	b.w	8002f42 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fbc6 	bl	8005e5c <USB_ReadChInterrupts>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d131      	bne.n	800273e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e6:	461a      	mov	r2, r3
 80026e8:	2320      	movs	r3, #32
 80026ea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	331a      	adds	r3, #26
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	f040 841f 	bne.w	8002f42 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	331b      	adds	r3, #27
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	334d      	adds	r3, #77	@ 0x4d
 8002728:	2203      	movs	r2, #3
 800272a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f004 f934 	bl	80069a2 <USB_HC_Halt>
 800273a:	f000 bc02 	b.w	8002f42 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f003 fb88 	bl	8005e5c <USB_ReadChInterrupts>
 800274c:	4603      	mov	r3, r0
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b02      	cmp	r3, #2
 8002754:	f040 8305 	bne.w	8002d62 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002764:	461a      	mov	r2, r3
 8002766:	2302      	movs	r3, #2
 8002768:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	334d      	adds	r3, #77	@ 0x4d
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d114      	bne.n	80027aa <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	334d      	adds	r3, #77	@ 0x4d
 8002790:	2202      	movs	r2, #2
 8002792:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	334c      	adds	r3, #76	@ 0x4c
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e2cc      	b.n	8002d44 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	1a9b      	subs	r3, r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	334d      	adds	r3, #77	@ 0x4d
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b06      	cmp	r3, #6
 80027be:	d114      	bne.n	80027ea <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	334d      	adds	r3, #77	@ 0x4d
 80027d0:	2202      	movs	r2, #2
 80027d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	334c      	adds	r3, #76	@ 0x4c
 80027e4:	2205      	movs	r2, #5
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e2ac      	b.n	8002d44 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	334d      	adds	r3, #77	@ 0x4d
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b07      	cmp	r3, #7
 80027fe:	d00b      	beq.n	8002818 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	334d      	adds	r3, #77	@ 0x4d
 8002810:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002812:	2b09      	cmp	r3, #9
 8002814:	f040 80a6 	bne.w	8002964 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	334d      	adds	r3, #77	@ 0x4d
 8002828:	2202      	movs	r2, #2
 800282a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	3344      	adds	r3, #68	@ 0x44
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	1c59      	adds	r1, r3, #1
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4403      	add	r3, r0
 800284c:	3344      	adds	r3, #68	@ 0x44
 800284e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	3344      	adds	r3, #68	@ 0x44
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d943      	bls.n	80028ee <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3344      	adds	r3, #68	@ 0x44
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	331a      	adds	r3, #26
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d123      	bne.n	80028d8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	331b      	adds	r3, #27
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	331c      	adds	r3, #28
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	0151      	lsls	r1, r2, #5
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	440a      	add	r2, r1
 80028ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	334c      	adds	r3, #76	@ 0x4c
 80028e8:	2204      	movs	r2, #4
 80028ea:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028ec:	e229      	b.n	8002d42 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	334c      	adds	r3, #76	@ 0x4c
 80028fe:	2202      	movs	r2, #2
 8002900:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	3326      	adds	r3, #38	@ 0x26
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3326      	adds	r3, #38	@ 0x26
 8002928:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800292a:	2b02      	cmp	r3, #2
 800292c:	f040 8209 	bne.w	8002d42 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002946:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800294e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800295c:	461a      	mov	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002962:	e1ee      	b.n	8002d42 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	334d      	adds	r3, #77	@ 0x4d
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b05      	cmp	r3, #5
 8002978:	f040 80c8 	bne.w	8002b0c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	334d      	adds	r3, #77	@ 0x4d
 800298c:	2202      	movs	r2, #2
 800298e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	331b      	adds	r3, #27
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	f040 81ce 	bne.w	8002d44 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3326      	adds	r3, #38	@ 0x26
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d16b      	bne.n	8002a96 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3348      	adds	r3, #72	@ 0x48
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	1c59      	adds	r1, r3, #1
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4403      	add	r3, r0
 80029de:	3348      	adds	r3, #72	@ 0x48
 80029e0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3348      	adds	r3, #72	@ 0x48
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d943      	bls.n	8002a80 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3348      	adds	r3, #72	@ 0x48
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	331b      	adds	r3, #27
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3344      	adds	r3, #68	@ 0x44
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d809      	bhi.n	8002a4a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	331c      	adds	r3, #28
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	0151      	lsls	r1, r2, #5
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	440a      	add	r2, r1
 8002a60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a68:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	334c      	adds	r3, #76	@ 0x4c
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e014      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	334c      	adds	r3, #76	@ 0x4c
 8002a90:	2202      	movs	r2, #2
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e009      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	334c      	adds	r3, #76	@ 0x4c
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3326      	adds	r3, #38	@ 0x26
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00b      	beq.n	8002ad8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	3326      	adds	r3, #38	@ 0x26
 8002ad0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	f040 8136 	bne.w	8002d44 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002aee:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002af6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b04:	461a      	mov	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e11b      	b.n	8002d44 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	334d      	adds	r3, #77	@ 0x4d
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	f040 8081 	bne.w	8002c26 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	334d      	adds	r3, #77	@ 0x4d
 8002b34:	2202      	movs	r2, #2
 8002b36:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	331b      	adds	r3, #27
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	f040 80fa 	bne.w	8002d44 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	334c      	adds	r3, #76	@ 0x4c
 8002b60:	2202      	movs	r2, #2
 8002b62:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	0151      	lsls	r1, r2, #5
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	440a      	add	r2, r1
 8002b7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b82:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	0151      	lsls	r1, r2, #5
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	440a      	add	r2, r1
 8002b9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ba2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	0151      	lsls	r1, r2, #5
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	440a      	add	r2, r1
 8002bba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bbe:	f023 0320 	bic.w	r3, r3, #32
 8002bc2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3326      	adds	r3, #38	@ 0x26
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	3326      	adds	r3, #38	@ 0x26
 8002bea:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	f040 80a9 	bne.w	8002d44 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c08:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c10:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	e08e      	b.n	8002d44 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	334d      	adds	r3, #77	@ 0x4d
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d143      	bne.n	8002cc4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	334d      	adds	r3, #77	@ 0x4d
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	334c      	adds	r3, #76	@ 0x4c
 8002c60:	2202      	movs	r2, #2
 8002c62:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3326      	adds	r3, #38	@ 0x26
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3326      	adds	r3, #38	@ 0x26
 8002c8a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d159      	bne.n	8002d44 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ca6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002cae:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e03f      	b.n	8002d44 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	334d      	adds	r3, #77	@ 0x4d
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d126      	bne.n	8002d28 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	334d      	adds	r3, #77	@ 0x4d
 8002cea:	2202      	movs	r2, #2
 8002cec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3344      	adds	r3, #68	@ 0x44
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	1c59      	adds	r1, r3, #1
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4403      	add	r3, r0
 8002d0e:	3344      	adds	r3, #68	@ 0x44
 8002d10:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	334c      	adds	r3, #76	@ 0x4c
 8002d22:	2204      	movs	r2, #4
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	e00d      	b.n	8002d44 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	334d      	adds	r3, #77	@ 0x4d
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	f000 8100 	beq.w	8002f40 <HCD_HC_IN_IRQHandler+0xcca>
 8002d40:	e000      	b.n	8002d44 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d42:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	334c      	adds	r3, #76	@ 0x4c
 8002d54:	781a      	ldrb	r2, [r3, #0]
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f006 f97a 	bl	8009054 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d60:	e0ef      	b.n	8002f42 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 f876 	bl	8005e5c <USB_ReadChInterrupts>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d76:	2b40      	cmp	r3, #64	@ 0x40
 8002d78:	d12f      	bne.n	8002dda <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d86:	461a      	mov	r2, r3
 8002d88:	2340      	movs	r3, #64	@ 0x40
 8002d8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	334d      	adds	r3, #77	@ 0x4d
 8002d9c:	2205      	movs	r2, #5
 8002d9e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	331a      	adds	r3, #26
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3344      	adds	r3, #68	@ 0x44
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 fde5 	bl	80069a2 <USB_HC_Halt>
 8002dd8:	e0b3      	b.n	8002f42 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 f83a 	bl	8005e5c <USB_ReadChInterrupts>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	f040 80a7 	bne.w	8002f42 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	3326      	adds	r3, #38	@ 0x26
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d11b      	bne.n	8002e42 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3344      	adds	r3, #68	@ 0x44
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	334d      	adds	r3, #77	@ 0x4d
 8002e2e:	2204      	movs	r2, #4
 8002e30:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 fdb1 	bl	80069a2 <USB_HC_Halt>
 8002e40:	e03f      	b.n	8002ec2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3326      	adds	r3, #38	@ 0x26
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3326      	adds	r3, #38	@ 0x26
 8002e68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d129      	bne.n	8002ec2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3344      	adds	r3, #68	@ 0x44
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	799b      	ldrb	r3, [r3, #6]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HCD_HC_IN_IRQHandler+0xc2a>
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	331b      	adds	r3, #27
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d110      	bne.n	8002ec2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	334d      	adds	r3, #77	@ 0x4d
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 fd70 	bl	80069a2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	331b      	adds	r3, #27
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d129      	bne.n	8002f2c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	331b      	adds	r3, #27
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	0151      	lsls	r1, r2, #5
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	440a      	add	r2, r1
 8002f02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	0151      	lsls	r1, r2, #5
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	440a      	add	r2, r1
 8002f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f26:	f043 0320 	orr.w	r3, r3, #32
 8002f2a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2310      	movs	r3, #16
 8002f3c:	6093      	str	r3, [r2, #8]
 8002f3e:	e000      	b.n	8002f42 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002f40:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f002 ff78 	bl	8005e5c <USB_ReadChInterrupts>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d11b      	bne.n	8002fae <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f82:	461a      	mov	r2, r3
 8002f84:	2304      	movs	r3, #4
 8002f86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	334d      	adds	r3, #77	@ 0x4d
 8002f98:	2207      	movs	r2, #7
 8002f9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f003 fcfc 	bl	80069a2 <USB_HC_Halt>
 8002faa:	f000 bc89 	b.w	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 ff50 	bl	8005e5c <USB_ReadChInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	f040 8082 	bne.w	80030cc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2320      	movs	r3, #32
 8002fd8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3319      	adds	r3, #25
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d124      	bne.n	800303a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3319      	adds	r3, #25
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	334c      	adds	r3, #76	@ 0x4c
 8003014:	2202      	movs	r2, #2
 8003016:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	334d      	adds	r3, #77	@ 0x4d
 8003028:	2203      	movs	r2, #3
 800302a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f003 fcb4 	bl	80069a2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	331a      	adds	r3, #26
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	f040 8437 	bne.w	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	331b      	adds	r3, #27
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 842b 	bne.w	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	3326      	adds	r3, #38	@ 0x26
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d009      	beq.n	8003094 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	331b      	adds	r3, #27
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	334d      	adds	r3, #77	@ 0x4d
 80030a4:	2203      	movs	r2, #3
 80030a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 fc76 	bl	80069a2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	3344      	adds	r3, #68	@ 0x44
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e3f9      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f002 fec1 	bl	8005e5c <USB_ReadChInterrupts>
 80030da:	4603      	mov	r3, r0
 80030dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030e4:	d111      	bne.n	800310a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f2:	461a      	mov	r2, r3
 80030f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fc4d 	bl	80069a2 <USB_HC_Halt>
 8003108:	e3da      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f002 fea2 	bl	8005e5c <USB_ReadChInterrupts>
 8003118:	4603      	mov	r3, r0
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d168      	bne.n	80031f4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3344      	adds	r3, #68	@ 0x44
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f002 fe8c 	bl	8005e5c <USB_ReadChInterrupts>
 8003144:	4603      	mov	r3, r0
 8003146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800314a:	2b40      	cmp	r3, #64	@ 0x40
 800314c:	d112      	bne.n	8003174 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3319      	adds	r3, #25
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316e:	461a      	mov	r2, r3
 8003170:	2340      	movs	r3, #64	@ 0x40
 8003172:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	331b      	adds	r3, #27
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d019      	beq.n	80031be <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	331b      	adds	r3, #27
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	0151      	lsls	r1, r2, #5
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	440a      	add	r2, r1
 80031b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031bc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ca:	461a      	mov	r2, r3
 80031cc:	2301      	movs	r3, #1
 80031ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	334d      	adds	r3, #77	@ 0x4d
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fbd8 	bl	80069a2 <USB_HC_Halt>
 80031f2:	e365      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 fe2d 	bl	8005e5c <USB_ReadChInterrupts>
 8003202:	4603      	mov	r3, r0
 8003204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003208:	2b40      	cmp	r3, #64	@ 0x40
 800320a:	d139      	bne.n	8003280 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	334d      	adds	r3, #77	@ 0x4d
 800321c:	2205      	movs	r2, #5
 800321e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	331a      	adds	r3, #26
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	3319      	adds	r3, #25
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	3344      	adds	r3, #68	@ 0x44
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fb9b 	bl	80069a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003278:	461a      	mov	r2, r3
 800327a:	2340      	movs	r3, #64	@ 0x40
 800327c:	6093      	str	r3, [r2, #8]
 800327e:	e31f      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f002 fde7 	bl	8005e5c <USB_ReadChInterrupts>
 800328e:	4603      	mov	r3, r0
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b08      	cmp	r3, #8
 8003296:	d11a      	bne.n	80032ce <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a4:	461a      	mov	r2, r3
 80032a6:	2308      	movs	r3, #8
 80032a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	334d      	adds	r3, #77	@ 0x4d
 80032ba:	2206      	movs	r2, #6
 80032bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 fb6b 	bl	80069a2 <USB_HC_Halt>
 80032cc:	e2f8      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 fdc0 	bl	8005e5c <USB_ReadChInterrupts>
 80032dc:	4603      	mov	r3, r0
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d144      	bne.n	8003370 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3344      	adds	r3, #68	@ 0x44
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	334d      	adds	r3, #77	@ 0x4d
 800330a:	2204      	movs	r2, #4
 800330c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	3319      	adds	r3, #25
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d114      	bne.n	800334e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3318      	adds	r3, #24
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3319      	adds	r3, #25
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	4611      	mov	r1, r2
 8003356:	4618      	mov	r0, r3
 8003358:	f003 fb23 	bl	80069a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003368:	461a      	mov	r2, r3
 800336a:	2310      	movs	r3, #16
 800336c:	6093      	str	r3, [r2, #8]
 800336e:	e2a7      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f002 fd6f 	bl	8005e5c <USB_ReadChInterrupts>
 800337e:	4603      	mov	r3, r0
 8003380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003384:	2b80      	cmp	r3, #128	@ 0x80
 8003386:	f040 8083 	bne.w	8003490 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	799b      	ldrb	r3, [r3, #6]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d111      	bne.n	80033b6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	334d      	adds	r3, #77	@ 0x4d
 80033a2:	2207      	movs	r2, #7
 80033a4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 faf7 	bl	80069a2 <USB_HC_Halt>
 80033b4:	e062      	b.n	800347c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3344      	adds	r3, #68	@ 0x44
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	1c59      	adds	r1, r3, #1
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4403      	add	r3, r0
 80033d6:	3344      	adds	r3, #68	@ 0x44
 80033d8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3344      	adds	r3, #68	@ 0x44
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d922      	bls.n	8003436 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	3344      	adds	r3, #68	@ 0x44
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334c      	adds	r3, #76	@ 0x4c
 8003414:	2204      	movs	r2, #4
 8003416:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	334c      	adds	r3, #76	@ 0x4c
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f005 fe10 	bl	8009054 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003434:	e022      	b.n	800347c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	334c      	adds	r3, #76	@ 0x4c
 8003446:	2202      	movs	r2, #2
 8003448:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4413      	add	r3, r2
 8003452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003460:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003468:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003476:	461a      	mov	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003488:	461a      	mov	r2, r3
 800348a:	2380      	movs	r3, #128	@ 0x80
 800348c:	6093      	str	r3, [r2, #8]
 800348e:	e217      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f002 fcdf 	bl	8005e5c <USB_ReadChInterrupts>
 800349e:	4603      	mov	r3, r0
 80034a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a8:	d11b      	bne.n	80034e2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	334d      	adds	r3, #77	@ 0x4d
 80034ba:	2209      	movs	r2, #9
 80034bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f003 fa6b 	bl	80069a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034d8:	461a      	mov	r2, r3
 80034da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034de:	6093      	str	r3, [r2, #8]
 80034e0:	e1ee      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	4611      	mov	r1, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f002 fcb6 	bl	8005e5c <USB_ReadChInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	f040 81df 	bne.w	80038ba <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003508:	461a      	mov	r2, r3
 800350a:	2302      	movs	r3, #2
 800350c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	334d      	adds	r3, #77	@ 0x4d
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	f040 8093 	bne.w	800364c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	334d      	adds	r3, #77	@ 0x4d
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	334c      	adds	r3, #76	@ 0x4c
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3326      	adds	r3, #38	@ 0x26
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d00b      	beq.n	800357c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	3326      	adds	r3, #38	@ 0x26
 8003574:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003576:	2b03      	cmp	r3, #3
 8003578:	f040 8190 	bne.w	800389c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	799b      	ldrb	r3, [r3, #6]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d115      	bne.n	80035b0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	333d      	adds	r3, #61	@ 0x3d
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	f083 0301 	eor.w	r3, r3, #1
 800359c:	b2d8      	uxtb	r0, r3
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	333d      	adds	r3, #61	@ 0x3d
 80035ac:	4602      	mov	r2, r0
 80035ae:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	799b      	ldrb	r3, [r3, #6]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	f040 8171 	bne.w	800389c <HCD_HC_OUT_IRQHandler+0x954>
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	3334      	adds	r3, #52	@ 0x34
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8165 	beq.w	800389c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3334      	adds	r3, #52	@ 0x34
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4403      	add	r3, r0
 80035f2:	3328      	adds	r3, #40	@ 0x28
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	440b      	add	r3, r1
 80035f8:	1e59      	subs	r1, r3, #1
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4403      	add	r3, r0
 8003608:	3328      	adds	r3, #40	@ 0x28
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003610:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 813f 	beq.w	800389c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	333d      	adds	r3, #61	@ 0x3d
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	f083 0301 	eor.w	r3, r3, #1
 8003636:	b2d8      	uxtb	r0, r3
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	333d      	adds	r3, #61	@ 0x3d
 8003646:	4602      	mov	r2, r0
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	e127      	b.n	800389c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334d      	adds	r3, #77	@ 0x4d
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b03      	cmp	r3, #3
 8003660:	d120      	bne.n	80036a4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	334d      	adds	r3, #77	@ 0x4d
 8003672:	2202      	movs	r2, #2
 8003674:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	331b      	adds	r3, #27
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b01      	cmp	r3, #1
 800368a:	f040 8107 	bne.w	800389c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	334c      	adds	r3, #76	@ 0x4c
 800369e:	2202      	movs	r2, #2
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e0fb      	b.n	800389c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	334d      	adds	r3, #77	@ 0x4d
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d13a      	bne.n	8003730 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	334d      	adds	r3, #77	@ 0x4d
 80036ca:	2202      	movs	r2, #2
 80036cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	334c      	adds	r3, #76	@ 0x4c
 80036de:	2202      	movs	r2, #2
 80036e0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	331b      	adds	r3, #27
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f040 80d1 	bne.w	800389c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	331b      	adds	r3, #27
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	0151      	lsls	r1, r2, #5
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	440a      	add	r2, r1
 8003724:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800372c:	6053      	str	r3, [r2, #4]
 800372e:	e0b5      	b.n	800389c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	334d      	adds	r3, #77	@ 0x4d
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b05      	cmp	r3, #5
 8003744:	d114      	bne.n	8003770 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	334d      	adds	r3, #77	@ 0x4d
 8003756:	2202      	movs	r2, #2
 8003758:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	334c      	adds	r3, #76	@ 0x4c
 800376a:	2202      	movs	r2, #2
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	e095      	b.n	800389c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	334d      	adds	r3, #77	@ 0x4d
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b06      	cmp	r3, #6
 8003784:	d114      	bne.n	80037b0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	334d      	adds	r3, #77	@ 0x4d
 8003796:	2202      	movs	r2, #2
 8003798:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	334c      	adds	r3, #76	@ 0x4c
 80037aa:	2205      	movs	r2, #5
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e075      	b.n	800389c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	334d      	adds	r3, #77	@ 0x4d
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b07      	cmp	r3, #7
 80037c4:	d00a      	beq.n	80037dc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	334d      	adds	r3, #77	@ 0x4d
 80037d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80037d8:	2b09      	cmp	r3, #9
 80037da:	d170      	bne.n	80038be <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	334d      	adds	r3, #77	@ 0x4d
 80037ec:	2202      	movs	r2, #2
 80037ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3344      	adds	r3, #68	@ 0x44
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	1c59      	adds	r1, r3, #1
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4403      	add	r3, r0
 8003810:	3344      	adds	r3, #68	@ 0x44
 8003812:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	3344      	adds	r3, #68	@ 0x44
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d914      	bls.n	8003854 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	3344      	adds	r3, #68	@ 0x44
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	334c      	adds	r3, #76	@ 0x4c
 800384e:	2204      	movs	r2, #4
 8003850:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003852:	e022      	b.n	800389a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	334c      	adds	r3, #76	@ 0x4c
 8003864:	2202      	movs	r2, #2
 8003866:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4413      	add	r3, r2
 8003870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800387e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003886:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4413      	add	r3, r2
 8003890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003894:	461a      	mov	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800389a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	334c      	adds	r3, #76	@ 0x4c
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	4619      	mov	r1, r3
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f005 fbce 	bl	8009054 <HAL_HCD_HC_NotifyURBChange_Callback>
 80038b8:	e002      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80038be:	bf00      	nop
  }
}
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b08a      	sub	sp, #40	@ 0x28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	0c5b      	lsrs	r3, r3, #17
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038fa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d004      	beq.n	800390c <HCD_RXQLVL_IRQHandler+0x46>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b05      	cmp	r3, #5
 8003906:	f000 80b6 	beq.w	8003a76 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800390a:	e0b7      	b.n	8003a7c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80b3 	beq.w	8003a7a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4613      	mov	r3, r2
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	332c      	adds	r3, #44	@ 0x2c
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80a7 	beq.w	8003a7a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4613      	mov	r3, r2
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	3338      	adds	r3, #56	@ 0x38
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	18d1      	adds	r1, r2, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4403      	add	r3, r0
 8003950:	3334      	adds	r3, #52	@ 0x34
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4299      	cmp	r1, r3
 8003956:	f200 8083 	bhi.w	8003a60 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	332c      	adds	r3, #44	@ 0x2c
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	b292      	uxth	r2, r2
 8003974:	4619      	mov	r1, r3
 8003976:	f002 fa06 	bl	8005d86 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	332c      	adds	r3, #44	@ 0x2c
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	18d1      	adds	r1, r2, r3
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4403      	add	r3, r0
 800399e:	332c      	adds	r3, #44	@ 0x2c
 80039a0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	3338      	adds	r3, #56	@ 0x38
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	18d1      	adds	r1, r2, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4403      	add	r3, r0
 80039c6:	3338      	adds	r3, #56	@ 0x38
 80039c8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	0cdb      	lsrs	r3, r3, #19
 80039da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039de:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4613      	mov	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	3328      	adds	r3, #40	@ 0x28
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d13f      	bne.n	8003a7a <HCD_RXQLVL_IRQHandler+0x1b4>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d03c      	beq.n	8003a7a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a16:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a1e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	333c      	adds	r3, #60	@ 0x3c
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	f083 0301 	eor.w	r3, r3, #1
 8003a48:	b2d8      	uxtb	r0, r3
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	333c      	adds	r3, #60	@ 0x3c
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	701a      	strb	r2, [r3, #0]
      break;
 8003a5e:	e00c      	b.n	8003a7a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	334c      	adds	r3, #76	@ 0x4c
 8003a70:	2204      	movs	r2, #4
 8003a72:	701a      	strb	r2, [r3, #0]
      break;
 8003a74:	e001      	b.n	8003a7a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003a76:	bf00      	nop
 8003a78:	e000      	b.n	8003a7c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003a7a:	bf00      	nop
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3728      	adds	r7, #40	@ 0x28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003ab0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d10b      	bne.n	8003ad4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d102      	bne.n	8003acc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f005 faa8 	bl	800901c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f043 0302 	orr.w	r3, r3, #2
 8003ad2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d132      	bne.n	8003b44 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f043 0308 	orr.w	r3, r3, #8
 8003ae4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d126      	bne.n	8003b3e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7a5b      	ldrb	r3, [r3, #9]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d113      	bne.n	8003b20 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003afe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b02:	d106      	bne.n	8003b12 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2102      	movs	r1, #2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f002 faca 	bl	80060a4 <USB_InitFSLSPClkSel>
 8003b10:	e011      	b.n	8003b36 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f002 fac3 	bl	80060a4 <USB_InitFSLSPClkSel>
 8003b1e:	e00a      	b.n	8003b36 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	79db      	ldrb	r3, [r3, #7]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d106      	bne.n	8003b36 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003b34:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f005 fa9a 	bl	8009070 <HAL_HCD_PortEnabled_Callback>
 8003b3c:	e002      	b.n	8003b44 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f005 faa4 	bl	800908c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d103      	bne.n	8003b56 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f043 0320 	orr.w	r3, r3, #32
 8003b54:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	6013      	str	r3, [r2, #0]
}
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e12b      	b.n	8003dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd f99c 	bl	8000ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	@ 0x24
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bd0:	f001 fd8a 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8003bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a81      	ldr	r2, [pc, #516]	@ (8003de0 <HAL_I2C_Init+0x274>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d807      	bhi.n	8003bf0 <HAL_I2C_Init+0x84>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a80      	ldr	r2, [pc, #512]	@ (8003de4 <HAL_I2C_Init+0x278>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bf94      	ite	ls
 8003be8:	2301      	movls	r3, #1
 8003bea:	2300      	movhi	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e006      	b.n	8003bfe <HAL_I2C_Init+0x92>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a7d      	ldr	r2, [pc, #500]	@ (8003de8 <HAL_I2C_Init+0x27c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bf94      	ite	ls
 8003bf8:	2301      	movls	r3, #1
 8003bfa:	2300      	movhi	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0e7      	b.n	8003dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a78      	ldr	r2, [pc, #480]	@ (8003dec <HAL_I2C_Init+0x280>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0c9b      	lsrs	r3, r3, #18
 8003c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4a6a      	ldr	r2, [pc, #424]	@ (8003de0 <HAL_I2C_Init+0x274>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d802      	bhi.n	8003c40 <HAL_I2C_Init+0xd4>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	e009      	b.n	8003c54 <HAL_I2C_Init+0xe8>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	4a69      	ldr	r2, [pc, #420]	@ (8003df0 <HAL_I2C_Init+0x284>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	3301      	adds	r3, #1
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	495c      	ldr	r1, [pc, #368]	@ (8003de0 <HAL_I2C_Init+0x274>)
 8003c70:	428b      	cmp	r3, r1
 8003c72:	d819      	bhi.n	8003ca8 <HAL_I2C_Init+0x13c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1e59      	subs	r1, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c82:	1c59      	adds	r1, r3, #1
 8003c84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c88:	400b      	ands	r3, r1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_I2C_Init+0x138>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1e59      	subs	r1, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca2:	e051      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	e04f      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d111      	bne.n	8003cd4 <HAL_I2C_Init+0x168>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e58      	subs	r0, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	440b      	add	r3, r1
 8003cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e012      	b.n	8003cfa <HAL_I2C_Init+0x18e>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1e58      	subs	r0, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	0099      	lsls	r1, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Init+0x196>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e022      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10e      	bne.n	8003d28 <HAL_I2C_Init+0x1bc>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e58      	subs	r0, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	440b      	add	r3, r1
 8003d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d26:	e00f      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e58      	subs	r0, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	0099      	lsls	r1, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	6809      	ldr	r1, [r1, #0]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6911      	ldr	r1, [r2, #16]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68d2      	ldr	r2, [r2, #12]
 8003d82:	4311      	orrs	r1, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	000186a0 	.word	0x000186a0
 8003de4:	001e847f 	.word	0x001e847f
 8003de8:	003d08ff 	.word	0x003d08ff
 8003dec:	431bde83 	.word	0x431bde83
 8003df0:	10624dd3 	.word	0x10624dd3

08003df4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	461a      	mov	r2, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	817b      	strh	r3, [r7, #10]
 8003e06:	460b      	mov	r3, r1
 8003e08:	813b      	strh	r3, [r7, #8]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e0e:	f7fd fa81 	bl	8001314 <HAL_GetTick>
 8003e12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	f040 80d9 	bne.w	8003fd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	2319      	movs	r3, #25
 8003e28:	2201      	movs	r2, #1
 8003e2a:	496d      	ldr	r1, [pc, #436]	@ (8003fe0 <HAL_I2C_Mem_Write+0x1ec>)
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f971 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e0cc      	b.n	8003fd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_I2C_Mem_Write+0x56>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e0c5      	b.n	8003fd6 <HAL_I2C_Mem_Write+0x1e2>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d007      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2221      	movs	r2, #33	@ 0x21
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2240      	movs	r2, #64	@ 0x40
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a3a      	ldr	r2, [r7, #32]
 8003e9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a4d      	ldr	r2, [pc, #308]	@ (8003fe4 <HAL_I2C_Mem_Write+0x1f0>)
 8003eb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eb2:	88f8      	ldrh	r0, [r7, #6]
 8003eb4:	893a      	ldrh	r2, [r7, #8]
 8003eb6:	8979      	ldrh	r1, [r7, #10]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f890 	bl	8003fe8 <I2C_RequestMemoryWrite>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d052      	beq.n	8003f74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e081      	b.n	8003fd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fa36 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d107      	bne.n	8003efa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e06b      	b.n	8003fd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	781a      	ldrb	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d11b      	bne.n	8003f74 <HAL_I2C_Mem_Write+0x180>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d017      	beq.n	8003f74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	781a      	ldrb	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1aa      	bne.n	8003ed2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fa29 	bl	80043d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d107      	bne.n	8003fa4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e016      	b.n	8003fd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	00100002 	.word	0x00100002
 8003fe4:	ffff0000 	.word	0xffff0000

08003fe8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	817b      	strh	r3, [r7, #10]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	813b      	strh	r3, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004010:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	2200      	movs	r2, #0
 800401a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f878 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004038:	d103      	bne.n	8004042 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004040:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e05f      	b.n	8004106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004046:	897b      	ldrh	r3, [r7, #10]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004054:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	6a3a      	ldr	r2, [r7, #32]
 800405a:	492d      	ldr	r1, [pc, #180]	@ (8004110 <I2C_RequestMemoryWrite+0x128>)
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f8d3 	bl	8004208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e04c      	b.n	8004106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004084:	6a39      	ldr	r1, [r7, #32]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f95e 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	2b04      	cmp	r3, #4
 8004098:	d107      	bne.n	80040aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e02b      	b.n	8004106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d105      	bne.n	80040c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040b4:	893b      	ldrh	r3, [r7, #8]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]
 80040be:	e021      	b.n	8004104 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d0:	6a39      	ldr	r1, [r7, #32]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f938 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d107      	bne.n	80040f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e005      	b.n	8004106 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040fa:	893b      	ldrh	r3, [r7, #8]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	00010002 	.word	0x00010002

08004114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004124:	e048      	b.n	80041b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d044      	beq.n	80041b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fd f8f1 	bl	8001314 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d139      	bne.n	80041b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	0c1b      	lsrs	r3, r3, #16
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d10d      	bne.n	800416a <I2C_WaitOnFlagUntilTimeout+0x56>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	43da      	mvns	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4013      	ands	r3, r2
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	e00c      	b.n	8004184 <I2C_WaitOnFlagUntilTimeout+0x70>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	43da      	mvns	r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4013      	ands	r3, r2
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	429a      	cmp	r2, r3
 8004188:	d116      	bne.n	80041b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e023      	b.n	8004200 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	0c1b      	lsrs	r3, r3, #16
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d10d      	bne.n	80041de <I2C_WaitOnFlagUntilTimeout+0xca>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	43da      	mvns	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4013      	ands	r3, r2
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bf0c      	ite	eq
 80041d4:	2301      	moveq	r3, #1
 80041d6:	2300      	movne	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	e00c      	b.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	43da      	mvns	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	4013      	ands	r3, r2
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d093      	beq.n	8004126 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004216:	e071      	b.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004226:	d123      	bne.n	8004270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004236:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425c:	f043 0204 	orr.w	r2, r3, #4
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e067      	b.n	8004340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d041      	beq.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004278:	f7fd f84c 	bl	8001314 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	429a      	cmp	r2, r3
 8004286:	d302      	bcc.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d136      	bne.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10c      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	43da      	mvns	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2300      	moveq	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	e00b      	b.n	80042ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	43da      	mvns	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e8:	f043 0220 	orr.w	r2, r3, #32
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e021      	b.n	8004340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	0c1b      	lsrs	r3, r3, #16
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10c      	bne.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	43da      	mvns	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4013      	ands	r3, r2
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf14      	ite	ne
 8004318:	2301      	movne	r3, #1
 800431a:	2300      	moveq	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	e00b      	b.n	8004338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	43da      	mvns	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4013      	ands	r3, r2
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	bf14      	ite	ne
 8004332:	2301      	movne	r3, #1
 8004334:	2300      	moveq	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	f47f af6d 	bne.w	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004354:	e034      	b.n	80043c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f886 	bl	8004468 <I2C_IsAcknowledgeFailed>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e034      	b.n	80043d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d028      	beq.n	80043c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436e:	f7fc ffd1 	bl	8001314 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	d302      	bcc.n	8004384 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d11d      	bne.n	80043c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438e:	2b80      	cmp	r3, #128	@ 0x80
 8004390:	d016      	beq.n	80043c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	f043 0220 	orr.w	r2, r3, #32
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e007      	b.n	80043d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ca:	2b80      	cmp	r3, #128	@ 0x80
 80043cc:	d1c3      	bne.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043e4:	e034      	b.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f83e 	bl	8004468 <I2C_IsAcknowledgeFailed>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e034      	b.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d028      	beq.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fe:	f7fc ff89 	bl	8001314 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d11d      	bne.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b04      	cmp	r3, #4
 8004420:	d016      	beq.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e007      	b.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b04      	cmp	r3, #4
 800445c:	d1c3      	bne.n	80043e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800447a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800447e:	d11b      	bne.n	80044b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004488:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	f043 0204 	orr.w	r2, r3, #4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e128      	b.n	800472c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a90      	ldr	r2, [pc, #576]	@ (8004734 <HAL_I2S_Init+0x26c>)
 80044f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fc fd33 	bl	8000f60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004510:	f023 030f 	bic.w	r3, r3, #15
 8004514:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2202      	movs	r2, #2
 800451c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d060      	beq.n	80045e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800452e:	2310      	movs	r3, #16
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e001      	b.n	8004538 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004534:	2320      	movs	r3, #32
 8004536:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b20      	cmp	r3, #32
 800453e:	d802      	bhi.n	8004546 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004546:	2001      	movs	r0, #1
 8004548:	f001 f9c4 	bl	80058d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800454c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004556:	d125      	bne.n	80045a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d010      	beq.n	8004582 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	fbb2 f2f3 	udiv	r2, r2, r3
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	461a      	mov	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	3305      	adds	r3, #5
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	e01f      	b.n	80045c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	fbb2 f2f3 	udiv	r2, r2, r3
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	461a      	mov	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	fbb2 f3f3 	udiv	r3, r2, r3
 800459e:	3305      	adds	r3, #5
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	e00e      	b.n	80045c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80045be:	3305      	adds	r3, #5
 80045c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4a5c      	ldr	r2, [pc, #368]	@ (8004738 <HAL_I2S_Init+0x270>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	08db      	lsrs	r3, r3, #3
 80045cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	e003      	b.n	80045f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80045e8:	2302      	movs	r3, #2
 80045ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d902      	bls.n	80045fc <HAL_I2S_Init+0x134>
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	2bff      	cmp	r3, #255	@ 0xff
 80045fa:	d907      	bls.n	800460c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004600:	f043 0210 	orr.w	r2, r3, #16
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e08f      	b.n	800472c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	ea42 0103 	orr.w	r1, r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	430a      	orrs	r2, r1
 800461e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800462a:	f023 030f 	bic.w	r3, r3, #15
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6851      	ldr	r1, [r2, #4]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6892      	ldr	r2, [r2, #8]
 8004636:	4311      	orrs	r1, r2
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68d2      	ldr	r2, [r2, #12]
 800463c:	4311      	orrs	r1, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6992      	ldr	r2, [r2, #24]
 8004642:	430a      	orrs	r2, r1
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800464e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d161      	bne.n	800471c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a38      	ldr	r2, [pc, #224]	@ (800473c <HAL_I2S_Init+0x274>)
 800465c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a37      	ldr	r2, [pc, #220]	@ (8004740 <HAL_I2S_Init+0x278>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_I2S_Init+0x1a4>
 8004668:	4b36      	ldr	r3, [pc, #216]	@ (8004744 <HAL_I2S_Init+0x27c>)
 800466a:	e001      	b.n	8004670 <HAL_I2S_Init+0x1a8>
 800466c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	4932      	ldr	r1, [pc, #200]	@ (8004740 <HAL_I2S_Init+0x278>)
 8004678:	428a      	cmp	r2, r1
 800467a:	d101      	bne.n	8004680 <HAL_I2S_Init+0x1b8>
 800467c:	4a31      	ldr	r2, [pc, #196]	@ (8004744 <HAL_I2S_Init+0x27c>)
 800467e:	e001      	b.n	8004684 <HAL_I2S_Init+0x1bc>
 8004680:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004684:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004688:	f023 030f 	bic.w	r3, r3, #15
 800468c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a2b      	ldr	r2, [pc, #172]	@ (8004740 <HAL_I2S_Init+0x278>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d101      	bne.n	800469c <HAL_I2S_Init+0x1d4>
 8004698:	4b2a      	ldr	r3, [pc, #168]	@ (8004744 <HAL_I2S_Init+0x27c>)
 800469a:	e001      	b.n	80046a0 <HAL_I2S_Init+0x1d8>
 800469c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046a0:	2202      	movs	r2, #2
 80046a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a25      	ldr	r2, [pc, #148]	@ (8004740 <HAL_I2S_Init+0x278>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d101      	bne.n	80046b2 <HAL_I2S_Init+0x1ea>
 80046ae:	4b25      	ldr	r3, [pc, #148]	@ (8004744 <HAL_I2S_Init+0x27c>)
 80046b0:	e001      	b.n	80046b6 <HAL_I2S_Init+0x1ee>
 80046b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c2:	d003      	beq.n	80046cc <HAL_I2S_Init+0x204>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80046cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	e001      	b.n	80046d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80046e2:	4313      	orrs	r3, r2
 80046e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80046ec:	4313      	orrs	r3, r2
 80046ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80046f6:	4313      	orrs	r3, r2
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	897b      	ldrh	r3, [r7, #10]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004704:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a0d      	ldr	r2, [pc, #52]	@ (8004740 <HAL_I2S_Init+0x278>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d101      	bne.n	8004714 <HAL_I2S_Init+0x24c>
 8004710:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <HAL_I2S_Init+0x27c>)
 8004712:	e001      	b.n	8004718 <HAL_I2S_Init+0x250>
 8004714:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004718:	897a      	ldrh	r2, [r7, #10]
 800471a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	0800483f 	.word	0x0800483f
 8004738:	cccccccd 	.word	0xcccccccd
 800473c:	08004955 	.word	0x08004955
 8004740:	40003800 	.word	0x40003800
 8004744:	40003400 	.word	0x40003400

08004748 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	881a      	ldrh	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	1c9a      	adds	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10e      	bne.n	80047d8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff ffb8 	bl	8004748 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	b292      	uxth	r2, r2
 80047f4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	1c9a      	adds	r2, r3, #2
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10e      	bne.n	8004836 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004826:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff ff93 	bl	800475c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b04      	cmp	r3, #4
 8004858:	d13a      	bne.n	80048d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b01      	cmp	r3, #1
 8004862:	d109      	bne.n	8004878 <I2S_IRQHandler+0x3a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486e:	2b40      	cmp	r3, #64	@ 0x40
 8004870:	d102      	bne.n	8004878 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ffb4 	bl	80047e0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487e:	2b40      	cmp	r3, #64	@ 0x40
 8004880:	d126      	bne.n	80048d0 <I2S_IRQHandler+0x92>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b20      	cmp	r3, #32
 800488e:	d11f      	bne.n	80048d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800489e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c2:	f043 0202 	orr.w	r2, r3, #2
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff ff50 	bl	8004770 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d136      	bne.n	800494a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d109      	bne.n	80048fa <I2S_IRQHandler+0xbc>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f0:	2b80      	cmp	r3, #128	@ 0x80
 80048f2:	d102      	bne.n	80048fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff45 	bl	8004784 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b08      	cmp	r3, #8
 8004902:	d122      	bne.n	800494a <I2S_IRQHandler+0x10c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b20      	cmp	r3, #32
 8004910:	d11b      	bne.n	800494a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004920:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493c:	f043 0204 	orr.w	r2, r3, #4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff ff13 	bl	8004770 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a92      	ldr	r2, [pc, #584]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d101      	bne.n	8004972 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800496e:	4b92      	ldr	r3, [pc, #584]	@ (8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004970:	e001      	b.n	8004976 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004972:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a8b      	ldr	r2, [pc, #556]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d101      	bne.n	8004990 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800498c:	4b8a      	ldr	r3, [pc, #552]	@ (8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800498e:	e001      	b.n	8004994 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004990:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049a0:	d004      	beq.n	80049ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f040 8099 	bne.w	8004ade <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d107      	bne.n	80049c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f925 	bl	8004c10 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d107      	bne.n	80049e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f9c8 	bl	8004d70 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e6:	2b40      	cmp	r3, #64	@ 0x40
 80049e8:	d13a      	bne.n	8004a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d035      	beq.n	8004a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a6e      	ldr	r2, [pc, #440]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80049fe:	4b6e      	ldr	r3, [pc, #440]	@ (8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a00:	e001      	b.n	8004a06 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004a02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4969      	ldr	r1, [pc, #420]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a0e:	428b      	cmp	r3, r1
 8004a10:	d101      	bne.n	8004a16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004a12:	4b69      	ldr	r3, [pc, #420]	@ (8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a14:	e001      	b.n	8004a1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004a16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a1e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a52:	f043 0202 	orr.w	r2, r3, #2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff fe88 	bl	8004770 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	f040 80c3 	bne.w	8004bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80bd 	beq.w	8004bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a86:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a49      	ldr	r2, [pc, #292]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004a92:	4b49      	ldr	r3, [pc, #292]	@ (8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a94:	e001      	b.n	8004a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004a96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4944      	ldr	r1, [pc, #272]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004aa2:	428b      	cmp	r3, r1
 8004aa4:	d101      	bne.n	8004aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004aa6:	4b44      	ldr	r3, [pc, #272]	@ (8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aa8:	e001      	b.n	8004aae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004aaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004aae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ab2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ace:	f043 0204 	orr.w	r2, r3, #4
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff fe4a 	bl	8004770 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004adc:	e089      	b.n	8004bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d107      	bne.n	8004af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f8be 	bl	8004c74 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d107      	bne.n	8004b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f8fd 	bl	8004d0c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b18:	2b40      	cmp	r3, #64	@ 0x40
 8004b1a:	d12f      	bne.n	8004b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d02a      	beq.n	8004b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b34:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d101      	bne.n	8004b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004b40:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b42:	e001      	b.n	8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004b44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4919      	ldr	r1, [pc, #100]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b50:	428b      	cmp	r3, r1
 8004b52:	d101      	bne.n	8004b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004b54:	4b18      	ldr	r3, [pc, #96]	@ (8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b56:	e001      	b.n	8004b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004b58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6e:	f043 0202 	orr.w	r2, r3, #2
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff fdfa 	bl	8004770 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d136      	bne.n	8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d031      	beq.n	8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a07      	ldr	r2, [pc, #28]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d101      	bne.n	8004b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004b9a:	4b07      	ldr	r3, [pc, #28]	@ (8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b9c:	e001      	b.n	8004ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004b9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4902      	ldr	r1, [pc, #8]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004baa:	428b      	cmp	r3, r1
 8004bac:	d106      	bne.n	8004bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004bae:	4b02      	ldr	r3, [pc, #8]	@ (8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bb0:	e006      	b.n	8004bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004bb2:	bf00      	nop
 8004bb4:	40003800 	.word	0x40003800
 8004bb8:	40003400 	.word	0x40003400
 8004bbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bc0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bc4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004bd4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	f043 0204 	orr.w	r2, r3, #4
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fdc0 	bl	8004770 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bf0:	e000      	b.n	8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bf2:	bf00      	nop
}
 8004bf4:	bf00      	nop
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1c:	1c99      	adds	r1, r3, #2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6251      	str	r1, [r2, #36]	@ 0x24
 8004c22:	881a      	ldrh	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d113      	bne.n	8004c6a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c50:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d106      	bne.n	8004c6a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff ffc9 	bl	8004bfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	1c99      	adds	r1, r3, #2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6251      	str	r1, [r2, #36]	@ 0x24
 8004c86:	8819      	ldrh	r1, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d04 <I2SEx_TxISR_I2SExt+0x90>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <I2SEx_TxISR_I2SExt+0x22>
 8004c92:	4b1d      	ldr	r3, [pc, #116]	@ (8004d08 <I2SEx_TxISR_I2SExt+0x94>)
 8004c94:	e001      	b.n	8004c9a <I2SEx_TxISR_I2SExt+0x26>
 8004c96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d121      	bne.n	8004cfa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a12      	ldr	r2, [pc, #72]	@ (8004d04 <I2SEx_TxISR_I2SExt+0x90>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d101      	bne.n	8004cc4 <I2SEx_TxISR_I2SExt+0x50>
 8004cc0:	4b11      	ldr	r3, [pc, #68]	@ (8004d08 <I2SEx_TxISR_I2SExt+0x94>)
 8004cc2:	e001      	b.n	8004cc8 <I2SEx_TxISR_I2SExt+0x54>
 8004cc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	490d      	ldr	r1, [pc, #52]	@ (8004d04 <I2SEx_TxISR_I2SExt+0x90>)
 8004cd0:	428b      	cmp	r3, r1
 8004cd2:	d101      	bne.n	8004cd8 <I2SEx_TxISR_I2SExt+0x64>
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d08 <I2SEx_TxISR_I2SExt+0x94>)
 8004cd6:	e001      	b.n	8004cdc <I2SEx_TxISR_I2SExt+0x68>
 8004cd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cdc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ce0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff ff81 	bl	8004bfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40003800 	.word	0x40003800
 8004d08:	40003400 	.word	0x40003400

08004d0c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68d8      	ldr	r0, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1e:	1c99      	adds	r1, r3, #2
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004d24:	b282      	uxth	r2, r0
 8004d26:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d113      	bne.n	8004d68 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d4e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff ff4a 	bl	8004bfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a20      	ldr	r2, [pc, #128]	@ (8004e00 <I2SEx_RxISR_I2SExt+0x90>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d101      	bne.n	8004d86 <I2SEx_RxISR_I2SExt+0x16>
 8004d82:	4b20      	ldr	r3, [pc, #128]	@ (8004e04 <I2SEx_RxISR_I2SExt+0x94>)
 8004d84:	e001      	b.n	8004d8a <I2SEx_RxISR_I2SExt+0x1a>
 8004d86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d8a:	68d8      	ldr	r0, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	1c99      	adds	r1, r3, #2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004d96:	b282      	uxth	r2, r0
 8004d98:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d121      	bne.n	8004df6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a12      	ldr	r2, [pc, #72]	@ (8004e00 <I2SEx_RxISR_I2SExt+0x90>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d101      	bne.n	8004dc0 <I2SEx_RxISR_I2SExt+0x50>
 8004dbc:	4b11      	ldr	r3, [pc, #68]	@ (8004e04 <I2SEx_RxISR_I2SExt+0x94>)
 8004dbe:	e001      	b.n	8004dc4 <I2SEx_RxISR_I2SExt+0x54>
 8004dc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	490d      	ldr	r1, [pc, #52]	@ (8004e00 <I2SEx_RxISR_I2SExt+0x90>)
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	d101      	bne.n	8004dd4 <I2SEx_RxISR_I2SExt+0x64>
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e04 <I2SEx_RxISR_I2SExt+0x94>)
 8004dd2:	e001      	b.n	8004dd8 <I2SEx_RxISR_I2SExt+0x68>
 8004dd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dd8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ddc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff ff03 	bl	8004bfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40003800 	.word	0x40003800
 8004e04:	40003400 	.word	0x40003400

08004e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e267      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d075      	beq.n	8004f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e26:	4b88      	ldr	r3, [pc, #544]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d00c      	beq.n	8004e4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e32:	4b85      	ldr	r3, [pc, #532]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d112      	bne.n	8004e64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3e:	4b82      	ldr	r3, [pc, #520]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e4a:	d10b      	bne.n	8004e64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e4c:	4b7e      	ldr	r3, [pc, #504]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d05b      	beq.n	8004f10 <HAL_RCC_OscConfig+0x108>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d157      	bne.n	8004f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e242      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e6c:	d106      	bne.n	8004e7c <HAL_RCC_OscConfig+0x74>
 8004e6e:	4b76      	ldr	r3, [pc, #472]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a75      	ldr	r2, [pc, #468]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e01d      	b.n	8004eb8 <HAL_RCC_OscConfig+0xb0>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x98>
 8004e86:	4b70      	ldr	r3, [pc, #448]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a6f      	ldr	r2, [pc, #444]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	4b6d      	ldr	r3, [pc, #436]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a6c      	ldr	r2, [pc, #432]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e00b      	b.n	8004eb8 <HAL_RCC_OscConfig+0xb0>
 8004ea0:	4b69      	ldr	r3, [pc, #420]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a68      	ldr	r2, [pc, #416]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	4b66      	ldr	r3, [pc, #408]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a65      	ldr	r2, [pc, #404]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d013      	beq.n	8004ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec0:	f7fc fa28 	bl	8001314 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fc fa24 	bl	8001314 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	@ 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e207      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	4b5b      	ldr	r3, [pc, #364]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0xc0>
 8004ee6:	e014      	b.n	8004f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7fc fa14 	bl	8001314 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7fc fa10 	bl	8001314 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	@ 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e1f3      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f02:	4b51      	ldr	r3, [pc, #324]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0xe8>
 8004f0e:	e000      	b.n	8004f12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d063      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00b      	beq.n	8004f42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2a:	4b47      	ldr	r3, [pc, #284]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d11c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f36:	4b44      	ldr	r3, [pc, #272]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d116      	bne.n	8004f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f42:	4b41      	ldr	r3, [pc, #260]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_RCC_OscConfig+0x152>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d001      	beq.n	8004f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e1c7      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4937      	ldr	r1, [pc, #220]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6e:	e03a      	b.n	8004fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f78:	4b34      	ldr	r3, [pc, #208]	@ (800504c <HAL_RCC_OscConfig+0x244>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7e:	f7fc f9c9 	bl	8001314 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f86:	f7fc f9c5 	bl	8001314 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e1a8      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f98:	4b2b      	ldr	r3, [pc, #172]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa4:	4b28      	ldr	r3, [pc, #160]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4925      	ldr	r1, [pc, #148]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	600b      	str	r3, [r1, #0]
 8004fb8:	e015      	b.n	8004fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fba:	4b24      	ldr	r3, [pc, #144]	@ (800504c <HAL_RCC_OscConfig+0x244>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc0:	f7fc f9a8 	bl	8001314 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc8:	f7fc f9a4 	bl	8001314 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e187      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fda:	4b1b      	ldr	r3, [pc, #108]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d036      	beq.n	8005060 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ffa:	4b15      	ldr	r3, [pc, #84]	@ (8005050 <HAL_RCC_OscConfig+0x248>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005000:	f7fc f988 	bl	8001314 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005008:	f7fc f984 	bl	8001314 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e167      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501a:	4b0b      	ldr	r3, [pc, #44]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 800501c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x200>
 8005026:	e01b      	b.n	8005060 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005028:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <HAL_RCC_OscConfig+0x248>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800502e:	f7fc f971 	bl	8001314 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005034:	e00e      	b.n	8005054 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005036:	f7fc f96d 	bl	8001314 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d907      	bls.n	8005054 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e150      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
 8005048:	40023800 	.word	0x40023800
 800504c:	42470000 	.word	0x42470000
 8005050:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005054:	4b88      	ldr	r3, [pc, #544]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1ea      	bne.n	8005036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8097 	beq.w	800519c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800506e:	2300      	movs	r3, #0
 8005070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005072:	4b81      	ldr	r3, [pc, #516]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10f      	bne.n	800509e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507e:	2300      	movs	r3, #0
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	4b7d      	ldr	r3, [pc, #500]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	4a7c      	ldr	r2, [pc, #496]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800508c:	6413      	str	r3, [r2, #64]	@ 0x40
 800508e:	4b7a      	ldr	r3, [pc, #488]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800509a:	2301      	movs	r3, #1
 800509c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509e:	4b77      	ldr	r3, [pc, #476]	@ (800527c <HAL_RCC_OscConfig+0x474>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d118      	bne.n	80050dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050aa:	4b74      	ldr	r3, [pc, #464]	@ (800527c <HAL_RCC_OscConfig+0x474>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a73      	ldr	r2, [pc, #460]	@ (800527c <HAL_RCC_OscConfig+0x474>)
 80050b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b6:	f7fc f92d 	bl	8001314 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050be:	f7fc f929 	bl	8001314 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e10c      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d0:	4b6a      	ldr	r3, [pc, #424]	@ (800527c <HAL_RCC_OscConfig+0x474>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d106      	bne.n	80050f2 <HAL_RCC_OscConfig+0x2ea>
 80050e4:	4b64      	ldr	r3, [pc, #400]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e8:	4a63      	ldr	r2, [pc, #396]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f0:	e01c      	b.n	800512c <HAL_RCC_OscConfig+0x324>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b05      	cmp	r3, #5
 80050f8:	d10c      	bne.n	8005114 <HAL_RCC_OscConfig+0x30c>
 80050fa:	4b5f      	ldr	r3, [pc, #380]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fe:	4a5e      	ldr	r2, [pc, #376]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005100:	f043 0304 	orr.w	r3, r3, #4
 8005104:	6713      	str	r3, [r2, #112]	@ 0x70
 8005106:	4b5c      	ldr	r3, [pc, #368]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510a:	4a5b      	ldr	r2, [pc, #364]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	6713      	str	r3, [r2, #112]	@ 0x70
 8005112:	e00b      	b.n	800512c <HAL_RCC_OscConfig+0x324>
 8005114:	4b58      	ldr	r3, [pc, #352]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005118:	4a57      	ldr	r2, [pc, #348]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005120:	4b55      	ldr	r3, [pc, #340]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005124:	4a54      	ldr	r2, [pc, #336]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005126:	f023 0304 	bic.w	r3, r3, #4
 800512a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d015      	beq.n	8005160 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005134:	f7fc f8ee 	bl	8001314 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513a:	e00a      	b.n	8005152 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513c:	f7fc f8ea 	bl	8001314 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514a:	4293      	cmp	r3, r2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e0cb      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005152:	4b49      	ldr	r3, [pc, #292]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0ee      	beq.n	800513c <HAL_RCC_OscConfig+0x334>
 800515e:	e014      	b.n	800518a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005160:	f7fc f8d8 	bl	8001314 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005166:	e00a      	b.n	800517e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7fc f8d4 	bl	8001314 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e0b5      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517e:	4b3e      	ldr	r3, [pc, #248]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1ee      	bne.n	8005168 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800518a:	7dfb      	ldrb	r3, [r7, #23]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d105      	bne.n	800519c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005190:	4b39      	ldr	r3, [pc, #228]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	4a38      	ldr	r2, [pc, #224]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005196:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800519a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 80a1 	beq.w	80052e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051a6:	4b34      	ldr	r3, [pc, #208]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 030c 	and.w	r3, r3, #12
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d05c      	beq.n	800526c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d141      	bne.n	800523e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ba:	4b31      	ldr	r3, [pc, #196]	@ (8005280 <HAL_RCC_OscConfig+0x478>)
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fc f8a8 	bl	8001314 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c8:	f7fc f8a4 	bl	8001314 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e087      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051da:	4b27      	ldr	r3, [pc, #156]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	019b      	lsls	r3, r3, #6
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	3b01      	subs	r3, #1
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005208:	061b      	lsls	r3, r3, #24
 800520a:	491b      	ldr	r1, [pc, #108]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 800520c:	4313      	orrs	r3, r2
 800520e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005210:	4b1b      	ldr	r3, [pc, #108]	@ (8005280 <HAL_RCC_OscConfig+0x478>)
 8005212:	2201      	movs	r2, #1
 8005214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005216:	f7fc f87d 	bl	8001314 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800521e:	f7fc f879 	bl	8001314 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e05c      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005230:	4b11      	ldr	r3, [pc, #68]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0f0      	beq.n	800521e <HAL_RCC_OscConfig+0x416>
 800523c:	e054      	b.n	80052e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523e:	4b10      	ldr	r3, [pc, #64]	@ (8005280 <HAL_RCC_OscConfig+0x478>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005244:	f7fc f866 	bl	8001314 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fc f862 	bl	8001314 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e045      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525e:	4b06      	ldr	r3, [pc, #24]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x444>
 800526a:	e03d      	b.n	80052e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d107      	bne.n	8005284 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e038      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
 8005278:	40023800 	.word	0x40023800
 800527c:	40007000 	.word	0x40007000
 8005280:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005284:	4b1b      	ldr	r3, [pc, #108]	@ (80052f4 <HAL_RCC_OscConfig+0x4ec>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d028      	beq.n	80052e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800529c:	429a      	cmp	r2, r3
 800529e:	d121      	bne.n	80052e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d11a      	bne.n	80052e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052b4:	4013      	ands	r3, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052bc:	4293      	cmp	r3, r2
 80052be:	d111      	bne.n	80052e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	3b01      	subs	r3, #1
 80052ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d107      	bne.n	80052e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d001      	beq.n	80052e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40023800 	.word	0x40023800

080052f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0cc      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800530c:	4b68      	ldr	r3, [pc, #416]	@ (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d90c      	bls.n	8005334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531a:	4b65      	ldr	r3, [pc, #404]	@ (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005322:	4b63      	ldr	r3, [pc, #396]	@ (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d001      	beq.n	8005334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0b8      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d020      	beq.n	8005382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800534c:	4b59      	ldr	r3, [pc, #356]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4a58      	ldr	r2, [pc, #352]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005356:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005364:	4b53      	ldr	r3, [pc, #332]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a52      	ldr	r2, [pc, #328]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800536e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005370:	4b50      	ldr	r3, [pc, #320]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	494d      	ldr	r1, [pc, #308]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d044      	beq.n	8005418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d107      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005396:	4b47      	ldr	r3, [pc, #284]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d119      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e07f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d003      	beq.n	80053b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d107      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b6:	4b3f      	ldr	r3, [pc, #252]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e06f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c6:	4b3b      	ldr	r3, [pc, #236]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e067      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053d6:	4b37      	ldr	r3, [pc, #220]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 0203 	bic.w	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4934      	ldr	r1, [pc, #208]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053e8:	f7fb ff94 	bl	8001314 <HAL_GetTick>
 80053ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	e00a      	b.n	8005406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f0:	f7fb ff90 	bl	8001314 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e04f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005406:	4b2b      	ldr	r3, [pc, #172]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 020c 	and.w	r2, r3, #12
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	429a      	cmp	r2, r3
 8005416:	d1eb      	bne.n	80053f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005418:	4b25      	ldr	r3, [pc, #148]	@ (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d20c      	bcs.n	8005440 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005426:	4b22      	ldr	r3, [pc, #136]	@ (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	4b20      	ldr	r3, [pc, #128]	@ (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e032      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800544c:	4b19      	ldr	r3, [pc, #100]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4916      	ldr	r1, [pc, #88]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	4313      	orrs	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d009      	beq.n	800547e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800546a:	4b12      	ldr	r3, [pc, #72]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	490e      	ldr	r1, [pc, #56]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800547e:	f000 f821 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8005482:	4602      	mov	r2, r0
 8005484:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	490a      	ldr	r1, [pc, #40]	@ (80054b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005490:	5ccb      	ldrb	r3, [r1, r3]
 8005492:	fa22 f303 	lsr.w	r3, r2, r3
 8005496:	4a09      	ldr	r2, [pc, #36]	@ (80054bc <HAL_RCC_ClockConfig+0x1c4>)
 8005498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800549a:	4b09      	ldr	r3, [pc, #36]	@ (80054c0 <HAL_RCC_ClockConfig+0x1c8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fb fef4 	bl	800128c <HAL_InitTick>

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40023c00 	.word	0x40023c00
 80054b4:	40023800 	.word	0x40023800
 80054b8:	0800ab84 	.word	0x0800ab84
 80054bc:	20000000 	.word	0x20000000
 80054c0:	20000004 	.word	0x20000004

080054c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c8:	b094      	sub	sp, #80	@ 0x50
 80054ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054dc:	4b79      	ldr	r3, [pc, #484]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 030c 	and.w	r3, r3, #12
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d00d      	beq.n	8005504 <HAL_RCC_GetSysClockFreq+0x40>
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	f200 80e1 	bhi.w	80056b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0x34>
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d003      	beq.n	80054fe <HAL_RCC_GetSysClockFreq+0x3a>
 80054f6:	e0db      	b.n	80056b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054f8:	4b73      	ldr	r3, [pc, #460]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80054fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054fc:	e0db      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054fe:	4b73      	ldr	r3, [pc, #460]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x208>)
 8005500:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005502:	e0d8      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005504:	4b6f      	ldr	r3, [pc, #444]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800550c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800550e:	4b6d      	ldr	r3, [pc, #436]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d063      	beq.n	80055e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551a:	4b6a      	ldr	r3, [pc, #424]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	099b      	lsrs	r3, r3, #6
 8005520:	2200      	movs	r2, #0
 8005522:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005524:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552c:	633b      	str	r3, [r7, #48]	@ 0x30
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	@ 0x34
 8005532:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005536:	4622      	mov	r2, r4
 8005538:	462b      	mov	r3, r5
 800553a:	f04f 0000 	mov.w	r0, #0
 800553e:	f04f 0100 	mov.w	r1, #0
 8005542:	0159      	lsls	r1, r3, #5
 8005544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005548:	0150      	lsls	r0, r2, #5
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4621      	mov	r1, r4
 8005550:	1a51      	subs	r1, r2, r1
 8005552:	6139      	str	r1, [r7, #16]
 8005554:	4629      	mov	r1, r5
 8005556:	eb63 0301 	sbc.w	r3, r3, r1
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005568:	4659      	mov	r1, fp
 800556a:	018b      	lsls	r3, r1, #6
 800556c:	4651      	mov	r1, sl
 800556e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005572:	4651      	mov	r1, sl
 8005574:	018a      	lsls	r2, r1, #6
 8005576:	4651      	mov	r1, sl
 8005578:	ebb2 0801 	subs.w	r8, r2, r1
 800557c:	4659      	mov	r1, fp
 800557e:	eb63 0901 	sbc.w	r9, r3, r1
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800558e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005596:	4690      	mov	r8, r2
 8005598:	4699      	mov	r9, r3
 800559a:	4623      	mov	r3, r4
 800559c:	eb18 0303 	adds.w	r3, r8, r3
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	462b      	mov	r3, r5
 80055a4:	eb49 0303 	adc.w	r3, r9, r3
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055b6:	4629      	mov	r1, r5
 80055b8:	024b      	lsls	r3, r1, #9
 80055ba:	4621      	mov	r1, r4
 80055bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055c0:	4621      	mov	r1, r4
 80055c2:	024a      	lsls	r2, r1, #9
 80055c4:	4610      	mov	r0, r2
 80055c6:	4619      	mov	r1, r3
 80055c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ca:	2200      	movs	r2, #0
 80055cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055d4:	f7fa fe4c 	bl	8000270 <__aeabi_uldivmod>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4613      	mov	r3, r2
 80055de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e0:	e058      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e2:	4b38      	ldr	r3, [pc, #224]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	2200      	movs	r2, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	4611      	mov	r1, r2
 80055ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055f2:	623b      	str	r3, [r7, #32]
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055fc:	4642      	mov	r2, r8
 80055fe:	464b      	mov	r3, r9
 8005600:	f04f 0000 	mov.w	r0, #0
 8005604:	f04f 0100 	mov.w	r1, #0
 8005608:	0159      	lsls	r1, r3, #5
 800560a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800560e:	0150      	lsls	r0, r2, #5
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4641      	mov	r1, r8
 8005616:	ebb2 0a01 	subs.w	sl, r2, r1
 800561a:	4649      	mov	r1, r9
 800561c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800562c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005630:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005634:	ebb2 040a 	subs.w	r4, r2, sl
 8005638:	eb63 050b 	sbc.w	r5, r3, fp
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	00eb      	lsls	r3, r5, #3
 8005646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800564a:	00e2      	lsls	r2, r4, #3
 800564c:	4614      	mov	r4, r2
 800564e:	461d      	mov	r5, r3
 8005650:	4643      	mov	r3, r8
 8005652:	18e3      	adds	r3, r4, r3
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	464b      	mov	r3, r9
 8005658:	eb45 0303 	adc.w	r3, r5, r3
 800565c:	607b      	str	r3, [r7, #4]
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800566a:	4629      	mov	r1, r5
 800566c:	028b      	lsls	r3, r1, #10
 800566e:	4621      	mov	r1, r4
 8005670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005674:	4621      	mov	r1, r4
 8005676:	028a      	lsls	r2, r1, #10
 8005678:	4610      	mov	r0, r2
 800567a:	4619      	mov	r1, r3
 800567c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800567e:	2200      	movs	r2, #0
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	61fa      	str	r2, [r7, #28]
 8005684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005688:	f7fa fdf2 	bl	8000270 <__aeabi_uldivmod>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4613      	mov	r3, r2
 8005692:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005694:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	3301      	adds	r3, #1
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80056a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056ae:	e002      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b0:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80056b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3750      	adds	r7, #80	@ 0x50
 80056bc:	46bd      	mov	sp, r7
 80056be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800
 80056c8:	00f42400 	.word	0x00f42400
 80056cc:	007a1200 	.word	0x007a1200

080056d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d4:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000000 	.word	0x20000000

080056e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056ec:	f7ff fff0 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	0a9b      	lsrs	r3, r3, #10
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	4903      	ldr	r1, [pc, #12]	@ (800570c <HAL_RCC_GetPCLK1Freq+0x24>)
 80056fe:	5ccb      	ldrb	r3, [r1, r3]
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005704:	4618      	mov	r0, r3
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40023800 	.word	0x40023800
 800570c:	0800ab94 	.word	0x0800ab94

08005710 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d105      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005734:	2b00      	cmp	r3, #0
 8005736:	d035      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005738:	4b62      	ldr	r3, [pc, #392]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800573e:	f7fb fde9 	bl	8001314 <HAL_GetTick>
 8005742:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005744:	e008      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005746:	f7fb fde5 	bl	8001314 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e0b0      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005758:	4b5b      	ldr	r3, [pc, #364]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f0      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	019a      	lsls	r2, r3, #6
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	071b      	lsls	r3, r3, #28
 8005770:	4955      	ldr	r1, [pc, #340]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005778:	4b52      	ldr	r3, [pc, #328]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800577e:	f7fb fdc9 	bl	8001314 <HAL_GetTick>
 8005782:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005784:	e008      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005786:	f7fb fdc5 	bl	8001314 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e090      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005798:	4b4b      	ldr	r3, [pc, #300]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8083 	beq.w	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	4b44      	ldr	r3, [pc, #272]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	4a43      	ldr	r2, [pc, #268]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80057c2:	4b41      	ldr	r3, [pc, #260]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80057ce:	4b3f      	ldr	r3, [pc, #252]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a3e      	ldr	r2, [pc, #248]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057da:	f7fb fd9b 	bl	8001314 <HAL_GetTick>
 80057de:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80057e0:	e008      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e2:	f7fb fd97 	bl	8001314 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e062      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80057f4:	4b35      	ldr	r3, [pc, #212]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005800:	4b31      	ldr	r3, [pc, #196]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005804:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005808:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d02f      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	429a      	cmp	r2, r3
 800581c:	d028      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800581e:	4b2a      	ldr	r3, [pc, #168]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005826:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005828:	4b29      	ldr	r3, [pc, #164]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800582e:	4b28      	ldr	r3, [pc, #160]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005834:	4a24      	ldr	r2, [pc, #144]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800583a:	4b23      	ldr	r3, [pc, #140]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b01      	cmp	r3, #1
 8005844:	d114      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005846:	f7fb fd65 	bl	8001314 <HAL_GetTick>
 800584a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584c:	e00a      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800584e:	f7fb fd61 	bl	8001314 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800585c:	4293      	cmp	r3, r2
 800585e:	d901      	bls.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e02a      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005864:	4b18      	ldr	r3, [pc, #96]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0ee      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005878:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800587c:	d10d      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800587e:	4b12      	ldr	r3, [pc, #72]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800588e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005892:	490d      	ldr	r1, [pc, #52]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005894:	4313      	orrs	r3, r2
 8005896:	608b      	str	r3, [r1, #8]
 8005898:	e005      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	4a0a      	ldr	r2, [pc, #40]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80058a4:	6093      	str	r3, [r2, #8]
 80058a6:	4b08      	ldr	r3, [pc, #32]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058b2:	4905      	ldr	r1, [pc, #20]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	42470068 	.word	0x42470068
 80058c8:	40023800 	.word	0x40023800
 80058cc:	40007000 	.word	0x40007000
 80058d0:	42470e40 	.word	0x42470e40

080058d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d13f      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80058f2:	4b24      	ldr	r3, [pc, #144]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058fa:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d006      	beq.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005908:	d12f      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800590a:	4b1f      	ldr	r3, [pc, #124]	@ (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800590c:	617b      	str	r3, [r7, #20]
          break;
 800590e:	e02f      	b.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005910:	4b1c      	ldr	r3, [pc, #112]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005918:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800591c:	d108      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800591e:	4b19      	ldr	r3, [pc, #100]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005926:	4a19      	ldr	r2, [pc, #100]	@ (800598c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005928:	fbb2 f3f3 	udiv	r3, r2, r3
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e007      	b.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005930:	4b14      	ldr	r3, [pc, #80]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005938:	4a15      	ldr	r2, [pc, #84]	@ (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005940:	4b10      	ldr	r3, [pc, #64]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005946:	099b      	lsrs	r3, r3, #6
 8005948:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	fb02 f303 	mul.w	r3, r2, r3
 8005952:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005954:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800595a:	0f1b      	lsrs	r3, r3, #28
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	fbb2 f3f3 	udiv	r3, r2, r3
 8005966:	617b      	str	r3, [r7, #20]
          break;
 8005968:	e002      	b.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
          break;
 800596e:	bf00      	nop
        }
      }
      break;
 8005970:	e000      	b.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005972:	bf00      	nop
    }
  }
  return frequency;
 8005974:	697b      	ldr	r3, [r7, #20]
}
 8005976:	4618      	mov	r0, r3
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40023800 	.word	0x40023800
 8005988:	00bb8000 	.word	0x00bb8000
 800598c:	007a1200 	.word	0x007a1200
 8005990:	00f42400 	.word	0x00f42400

08005994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e07b      	b.n	8005a9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d108      	bne.n	80059c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059b6:	d009      	beq.n	80059cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	61da      	str	r2, [r3, #28]
 80059be:	e005      	b.n	80059cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fb fb3a 	bl	8001060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a50:	ea42 0103 	orr.w	r1, r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	0c1b      	lsrs	r3, r3, #16
 8005a6a:	f003 0104 	and.w	r1, r3, #4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a72:	f003 0210 	and.w	r2, r3, #16
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	f107 001c 	add.w	r0, r7, #28
 8005ab4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ab8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d123      	bne.n	8005b08 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ae8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d105      	bne.n	8005afc <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f9dc 	bl	8005eba <USB_CoreReset>
 8005b02:	4603      	mov	r3, r0
 8005b04:	73fb      	strb	r3, [r7, #15]
 8005b06:	e01b      	b.n	8005b40 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f9d0 	bl	8005eba <USB_CoreReset>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b1e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b32:	e005      	b.n	8005b40 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b40:	7fbb      	ldrb	r3, [r7, #30]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d10b      	bne.n	8005b5e <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f043 0206 	orr.w	r2, r3, #6
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f043 0220 	orr.w	r2, r3, #32
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b6a:	b004      	add	sp, #16
 8005b6c:	4770      	bx	lr

08005b6e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f043 0201 	orr.w	r2, r3, #1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f023 0201 	bic.w	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bce:	78fb      	ldrb	r3, [r7, #3]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d115      	bne.n	8005c00 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005be0:	200a      	movs	r0, #10
 8005be2:	f7fb fba3 	bl	800132c <HAL_Delay>
      ms += 10U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	330a      	adds	r3, #10
 8005bea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f956 	bl	8005e9e <USB_GetMode>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d01e      	beq.n	8005c36 <USB_SetCurrentMode+0x84>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2bc7      	cmp	r3, #199	@ 0xc7
 8005bfc:	d9f0      	bls.n	8005be0 <USB_SetCurrentMode+0x2e>
 8005bfe:	e01a      	b.n	8005c36 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d115      	bne.n	8005c32 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c12:	200a      	movs	r0, #10
 8005c14:	f7fb fb8a 	bl	800132c <HAL_Delay>
      ms += 10U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	330a      	adds	r3, #10
 8005c1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f93d 	bl	8005e9e <USB_GetMode>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <USB_SetCurrentMode+0x84>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c2e:	d9f0      	bls.n	8005c12 <USB_SetCurrentMode+0x60>
 8005c30:	e001      	b.n	8005c36 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e005      	b.n	8005c42 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2bc8      	cmp	r3, #200	@ 0xc8
 8005c3a:	d101      	bne.n	8005c40 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c64:	d901      	bls.n	8005c6a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e01b      	b.n	8005ca2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	daf2      	bge.n	8005c58 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	019b      	lsls	r3, r3, #6
 8005c7a:	f043 0220 	orr.w	r2, r3, #32
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3301      	adds	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c8e:	d901      	bls.n	8005c94 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e006      	b.n	8005ca2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d0f0      	beq.n	8005c82 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cc6:	d901      	bls.n	8005ccc <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e018      	b.n	8005cfe <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	daf2      	bge.n	8005cba <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2210      	movs	r2, #16
 8005cdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cea:	d901      	bls.n	8005cf0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e006      	b.n	8005cfe <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f003 0310 	and.w	r3, r3, #16
 8005cf8:	2b10      	cmp	r3, #16
 8005cfa:	d0f0      	beq.n	8005cde <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b089      	sub	sp, #36	@ 0x24
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	4611      	mov	r1, r2
 8005d16:	461a      	mov	r2, r3
 8005d18:	460b      	mov	r3, r1
 8005d1a:	71fb      	strb	r3, [r7, #7]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d28:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d123      	bne.n	8005d78 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d30:	88bb      	ldrh	r3, [r7, #4]
 8005d32:	3303      	adds	r3, #3
 8005d34:	089b      	lsrs	r3, r3, #2
 8005d36:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61bb      	str	r3, [r7, #24]
 8005d3c:	e018      	b.n	8005d70 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	031a      	lsls	r2, r3, #12
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3301      	adds	r3, #1
 8005d56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	3301      	adds	r3, #1
 8005d62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	3301      	adds	r3, #1
 8005d68:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	61bb      	str	r3, [r7, #24]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d3e2      	bcc.n	8005d3e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3724      	adds	r7, #36	@ 0x24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b08b      	sub	sp, #44	@ 0x2c
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	4613      	mov	r3, r2
 8005d92:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	089b      	lsrs	r3, r3, #2
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005da4:	88fb      	ldrh	r3, [r7, #6]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005dac:	2300      	movs	r3, #0
 8005dae:	623b      	str	r3, [r7, #32]
 8005db0:	e014      	b.n	8005ddc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	601a      	str	r2, [r3, #0]
    pDest++;
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	3301      	adds	r3, #1
 8005dce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	623b      	str	r3, [r7, #32]
 8005ddc:	6a3a      	ldr	r2, [r7, #32]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d3e6      	bcc.n	8005db2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005de4:	8bfb      	ldrh	r3, [r7, #30]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d01e      	beq.n	8005e28 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005df4:	461a      	mov	r2, r3
 8005df6:	f107 0310 	add.w	r3, r7, #16
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	701a      	strb	r2, [r3, #0]
      i++;
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	3301      	adds	r3, #1
 8005e14:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	3301      	adds	r3, #1
 8005e1a:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005e1c:	8bfb      	ldrh	r3, [r7, #30]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e22:	8bfb      	ldrh	r3, [r7, #30]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1ea      	bne.n	8005dfe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	372c      	adds	r7, #44	@ 0x2c
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e90:	68bb      	ldr	r3, [r7, #8]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ed2:	d901      	bls.n	8005ed8 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e01b      	b.n	8005f10 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	daf2      	bge.n	8005ec6 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f043 0201 	orr.w	r2, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005efc:	d901      	bls.n	8005f02 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e006      	b.n	8005f10 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d0f0      	beq.n	8005ef0 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b086      	sub	sp, #24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	2300      	movs	r3, #0
 8005f40:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f52:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d119      	bne.n	8005fa6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005f72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d10a      	bne.n	8005f90 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f88:	f043 0304 	orr.w	r3, r3, #4
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	e014      	b.n	8005fba <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f9e:	f023 0304 	bic.w	r3, r3, #4
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	e009      	b.n	8005fba <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005fb4:	f023 0304 	bic.w	r3, r3, #4
 8005fb8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fba:	2110      	movs	r1, #16
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff fe44 	bl	8005c4a <USB_FlushTxFifo>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff fe6e 	bl	8005cae <USB_FlushRxFifo>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	613b      	str	r3, [r7, #16]
 8005fe0:	e015      	b.n	800600e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006002:	461a      	mov	r2, r3
 8006004:	2300      	movs	r3, #0
 8006006:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	3301      	adds	r3, #1
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006012:	461a      	mov	r2, r3
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4293      	cmp	r3, r2
 8006018:	d3e3      	bcc.n	8005fe2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f04f 32ff 	mov.w	r2, #4294967295
 8006026:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a18      	ldr	r2, [pc, #96]	@ (800608c <USB_HostInit+0x170>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d10b      	bne.n	8006048 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006036:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a15      	ldr	r2, [pc, #84]	@ (8006090 <USB_HostInit+0x174>)
 800603c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a14      	ldr	r2, [pc, #80]	@ (8006094 <USB_HostInit+0x178>)
 8006042:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006046:	e009      	b.n	800605c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2280      	movs	r2, #128	@ 0x80
 800604c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a11      	ldr	r2, [pc, #68]	@ (8006098 <USB_HostInit+0x17c>)
 8006052:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a11      	ldr	r2, [pc, #68]	@ (800609c <USB_HostInit+0x180>)
 8006058:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800605c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	f043 0210 	orr.w	r2, r3, #16
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	699a      	ldr	r2, [r3, #24]
 8006074:	4b0a      	ldr	r3, [pc, #40]	@ (80060a0 <USB_HostInit+0x184>)
 8006076:	4313      	orrs	r3, r2
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006088:	b004      	add	sp, #16
 800608a:	4770      	bx	lr
 800608c:	40040000 	.word	0x40040000
 8006090:	01000200 	.word	0x01000200
 8006094:	00e00300 	.word	0x00e00300
 8006098:	00600080 	.word	0x00600080
 800609c:	004000e0 	.word	0x004000e0
 80060a0:	a3200008 	.word	0xa3200008

080060a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	68f9      	ldr	r1, [r7, #12]
 80060d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80060dc:	4313      	orrs	r3, r2
 80060de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d107      	bne.n	80060f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060ec:	461a      	mov	r2, r3
 80060ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80060f2:	6053      	str	r3, [r2, #4]
 80060f4:	e00c      	b.n	8006110 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d107      	bne.n	800610c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006102:	461a      	mov	r2, r3
 8006104:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006108:	6053      	str	r3, [r2, #4]
 800610a:	e001      	b.n	8006110 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800613e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800614c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800614e:	2064      	movs	r0, #100	@ 0x64
 8006150:	f7fb f8ec 	bl	800132c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800615c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006160:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006162:	200a      	movs	r0, #10
 8006164:	f7fb f8e2 	bl	800132c <HAL_Delay>

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006172:	b480      	push	{r7}
 8006174:	b085      	sub	sp, #20
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	460b      	mov	r3, r1
 800617c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006196:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d109      	bne.n	80061b6 <USB_DriveVbus+0x44>
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d106      	bne.n	80061b6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80061b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80061b4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c0:	d109      	bne.n	80061d6 <USB_DriveVbus+0x64>
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d106      	bne.n	80061d6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80061d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061d4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	0c5b      	lsrs	r3, r3, #17
 8006202:	f003 0303 	and.w	r3, r3, #3
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	b29b      	uxth	r3, r3
}
 8006228:	4618      	mov	r0, r3
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	4608      	mov	r0, r1
 800623e:	4611      	mov	r1, r2
 8006240:	461a      	mov	r2, r3
 8006242:	4603      	mov	r3, r0
 8006244:	70fb      	strb	r3, [r7, #3]
 8006246:	460b      	mov	r3, r1
 8006248:	70bb      	strb	r3, [r7, #2]
 800624a:	4613      	mov	r3, r2
 800624c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	4413      	add	r3, r2
 800625e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006262:	461a      	mov	r2, r3
 8006264:	f04f 33ff 	mov.w	r3, #4294967295
 8006268:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800626a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800626e:	2b03      	cmp	r3, #3
 8006270:	d87c      	bhi.n	800636c <USB_HC_Init+0x138>
 8006272:	a201      	add	r2, pc, #4	@ (adr r2, 8006278 <USB_HC_Init+0x44>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	08006289 	.word	0x08006289
 800627c:	0800632f 	.word	0x0800632f
 8006280:	08006289 	.word	0x08006289
 8006284:	080062f1 	.word	0x080062f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	4413      	add	r3, r2
 8006290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006294:	461a      	mov	r2, r3
 8006296:	f240 439d 	movw	r3, #1181	@ 0x49d
 800629a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800629c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	da10      	bge.n	80062c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062c2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80062c4:	e055      	b.n	8006372 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a6f      	ldr	r2, [pc, #444]	@ (8006488 <USB_HC_Init+0x254>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d151      	bne.n	8006372 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	78fa      	ldrb	r2, [r7, #3]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062e8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80062ec:	60d3      	str	r3, [r2, #12]
      break;
 80062ee:	e040      	b.n	8006372 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062fc:	461a      	mov	r2, r3
 80062fe:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006302:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006304:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006308:	2b00      	cmp	r3, #0
 800630a:	da34      	bge.n	8006376 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4413      	add	r3, r2
 8006314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	440a      	add	r2, r1
 8006322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800632a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800632c:	e023      	b.n	8006376 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800633a:	461a      	mov	r2, r3
 800633c:	f240 2325 	movw	r3, #549	@ 0x225
 8006340:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006342:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006346:	2b00      	cmp	r3, #0
 8006348:	da17      	bge.n	800637a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	4413      	add	r3, r2
 8006352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	78fa      	ldrb	r2, [r7, #3]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	440a      	add	r2, r1
 8006360:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006364:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006368:	60d3      	str	r3, [r2, #12]
      }
      break;
 800636a:	e006      	b.n	800637a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	77fb      	strb	r3, [r7, #31]
      break;
 8006370:	e004      	b.n	800637c <USB_HC_Init+0x148>
      break;
 8006372:	bf00      	nop
 8006374:	e002      	b.n	800637c <USB_HC_Init+0x148>
      break;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <USB_HC_Init+0x148>
      break;
 800637a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006388:	461a      	mov	r2, r3
 800638a:	2300      	movs	r3, #0
 800638c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	4413      	add	r3, r2
 8006396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	78fa      	ldrb	r2, [r7, #3]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063a8:	f043 0302 	orr.w	r3, r3, #2
 80063ac:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	2101      	movs	r1, #1
 80063be:	fa01 f303 	lsl.w	r3, r1, r3
 80063c2:	6939      	ldr	r1, [r7, #16]
 80063c4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80063c8:	4313      	orrs	r3, r2
 80063ca:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80063d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	da03      	bge.n	80063e8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80063e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063e4:	61bb      	str	r3, [r7, #24]
 80063e6:	e001      	b.n	80063ec <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff fef9 	bl	80061e4 <USB_GetHostSpeed>
 80063f2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80063f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d106      	bne.n	800640a <USB_HC_Init+0x1d6>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d003      	beq.n	800640a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006402:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	e001      	b.n	800640e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800640e:	787b      	ldrb	r3, [r7, #1]
 8006410:	059b      	lsls	r3, r3, #22
 8006412:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006416:	78bb      	ldrb	r3, [r7, #2]
 8006418:	02db      	lsls	r3, r3, #11
 800641a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800641e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006420:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006424:	049b      	lsls	r3, r3, #18
 8006426:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800642a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800642c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800642e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006432:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	431a      	orrs	r2, r3
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800643c:	78fa      	ldrb	r2, [r7, #3]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	440a      	add	r2, r1
 8006444:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006448:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800644c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800644e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006452:	2b03      	cmp	r3, #3
 8006454:	d003      	beq.n	800645e <USB_HC_Init+0x22a>
 8006456:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800645a:	2b01      	cmp	r3, #1
 800645c:	d10f      	bne.n	800647e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	4413      	add	r3, r2
 8006466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	78fa      	ldrb	r2, [r7, #3]
 800646e:	0151      	lsls	r1, r2, #5
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	440a      	add	r2, r1
 8006474:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006478:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800647c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800647e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40040000 	.word	0x40040000

0800648c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08c      	sub	sp, #48	@ 0x30
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	4613      	mov	r3, r2
 8006498:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	785b      	ldrb	r3, [r3, #1]
 80064a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80064a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80064a8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4a5d      	ldr	r2, [pc, #372]	@ (8006624 <USB_HC_StartXfer+0x198>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d12f      	bne.n	8006512 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d11c      	bne.n	80064f2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	7c9b      	ldrb	r3, [r3, #18]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <USB_HC_StartXfer+0x3c>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	7c9b      	ldrb	r3, [r3, #18]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d124      	bne.n	8006512 <USB_HC_StartXfer+0x86>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	799b      	ldrb	r3, [r3, #6]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d120      	bne.n	8006512 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	6a3a      	ldr	r2, [r7, #32]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ee:	60d3      	str	r3, [r2, #12]
 80064f0:	e00f      	b.n	8006512 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	791b      	ldrb	r3, [r3, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <USB_HC_StartXfer+0x86>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	795b      	ldrb	r3, [r3, #5]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d107      	bne.n	8006512 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	4619      	mov	r1, r3
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 fb6b 	bl	8006be4 <USB_DoPing>
        return HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	e232      	b.n	8006978 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	799b      	ldrb	r3, [r3, #6]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d158      	bne.n	80065cc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800651a:	2301      	movs	r3, #1
 800651c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	78db      	ldrb	r3, [r3, #3]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d007      	beq.n	8006536 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006526:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	8a92      	ldrh	r2, [r2, #20]
 800652c:	fb03 f202 	mul.w	r2, r3, r2
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	61da      	str	r2, [r3, #28]
 8006534:	e07c      	b.n	8006630 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	7c9b      	ldrb	r3, [r3, #18]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d130      	bne.n	80065a0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	2bbc      	cmp	r3, #188	@ 0xbc
 8006544:	d918      	bls.n	8006578 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	8a9b      	ldrh	r3, [r3, #20]
 800654a:	461a      	mov	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d003      	beq.n	8006568 <USB_HC_StartXfer+0xdc>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d103      	bne.n	8006570 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2202      	movs	r2, #2
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	e05f      	b.n	8006630 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2201      	movs	r2, #1
 8006574:	60da      	str	r2, [r3, #12]
 8006576:	e05b      	b.n	8006630 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6a1a      	ldr	r2, [r3, #32]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d007      	beq.n	8006598 <USB_HC_StartXfer+0x10c>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d003      	beq.n	8006598 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2204      	movs	r2, #4
 8006594:	60da      	str	r2, [r3, #12]
 8006596:	e04b      	b.n	8006630 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2203      	movs	r2, #3
 800659c:	60da      	str	r2, [r3, #12]
 800659e:	e047      	b.n	8006630 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d10d      	bne.n	80065c2 <USB_HC_StartXfer+0x136>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	8a92      	ldrh	r2, [r2, #20]
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d907      	bls.n	80065c2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	8a92      	ldrh	r2, [r2, #20]
 80065b8:	fb03 f202 	mul.w	r2, r3, r2
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	61da      	str	r2, [r3, #28]
 80065c0:	e036      	b.n	8006630 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	6a1a      	ldr	r2, [r3, #32]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	61da      	str	r2, [r3, #28]
 80065ca:	e031      	b.n	8006630 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d018      	beq.n	8006606 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	8a92      	ldrh	r2, [r2, #20]
 80065dc:	4413      	add	r3, r2
 80065de:	3b01      	subs	r3, #1
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	8a92      	ldrh	r2, [r2, #20]
 80065e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065e8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80065ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80065ec:	8b7b      	ldrh	r3, [r7, #26]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d90b      	bls.n	800660a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80065f2:	8b7b      	ldrh	r3, [r7, #26]
 80065f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	8a92      	ldrh	r2, [r2, #20]
 80065fc:	fb03 f202 	mul.w	r2, r3, r2
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	61da      	str	r2, [r3, #28]
 8006604:	e001      	b.n	800660a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006606:	2301      	movs	r3, #1
 8006608:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	78db      	ldrb	r3, [r3, #3]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006612:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	8a92      	ldrh	r2, [r2, #20]
 8006618:	fb03 f202 	mul.w	r2, r3, r2
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	61da      	str	r2, [r3, #28]
 8006620:	e006      	b.n	8006630 <USB_HC_StartXfer+0x1a4>
 8006622:	bf00      	nop
 8006624:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6a1a      	ldr	r2, [r3, #32]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006638:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800663a:	04d9      	lsls	r1, r3, #19
 800663c:	4ba3      	ldr	r3, [pc, #652]	@ (80068cc <USB_HC_StartXfer+0x440>)
 800663e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006640:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	7d9b      	ldrb	r3, [r3, #22]
 8006646:	075b      	lsls	r3, r3, #29
 8006648:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800664c:	69f9      	ldr	r1, [r7, #28]
 800664e:	0148      	lsls	r0, r1, #5
 8006650:	6a39      	ldr	r1, [r7, #32]
 8006652:	4401      	add	r1, r0
 8006654:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006658:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800665a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800665c:	79fb      	ldrb	r3, [r7, #7]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d009      	beq.n	8006676 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	6999      	ldr	r1, [r3, #24]
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	4413      	add	r3, r2
 800666e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006672:	460a      	mov	r2, r1
 8006674:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	bf0c      	ite	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	2300      	movne	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	0151      	lsls	r1, r2, #5
 80066a0:	6a3a      	ldr	r2, [r7, #32]
 80066a2:	440a      	add	r2, r1
 80066a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80066ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	7e7b      	ldrb	r3, [r7, #25]
 80066be:	075b      	lsls	r3, r3, #29
 80066c0:	69f9      	ldr	r1, [r7, #28]
 80066c2:	0148      	lsls	r0, r1, #5
 80066c4:	6a39      	ldr	r1, [r7, #32]
 80066c6:	4401      	add	r1, r0
 80066c8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80066cc:	4313      	orrs	r3, r2
 80066ce:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	799b      	ldrb	r3, [r3, #6]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	f040 80c3 	bne.w	8006860 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	7c5b      	ldrb	r3, [r3, #17]
 80066de:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80066e4:	4313      	orrs	r3, r2
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	6a3a      	ldr	r2, [r7, #32]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80066f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80066f6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	0151      	lsls	r1, r2, #5
 800670a:	6a3a      	ldr	r2, [r7, #32]
 800670c:	440a      	add	r2, r1
 800670e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006712:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006716:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	79db      	ldrb	r3, [r3, #7]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d123      	bne.n	8006768 <USB_HC_StartXfer+0x2dc>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	78db      	ldrb	r3, [r3, #3]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d11f      	bne.n	8006768 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	4413      	add	r3, r2
 8006730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	0151      	lsls	r1, r2, #5
 800673a:	6a3a      	ldr	r2, [r7, #32]
 800673c:	440a      	add	r2, r1
 800673e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006746:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	4413      	add	r3, r2
 8006750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	0151      	lsls	r1, r2, #5
 800675a:	6a3a      	ldr	r2, [r7, #32]
 800675c:	440a      	add	r2, r1
 800675e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006766:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	7c9b      	ldrb	r3, [r3, #18]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d003      	beq.n	8006778 <USB_HC_StartXfer+0x2ec>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	7c9b      	ldrb	r3, [r3, #18]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d117      	bne.n	80067a8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800677c:	2b01      	cmp	r3, #1
 800677e:	d113      	bne.n	80067a8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	78db      	ldrb	r3, [r3, #3]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d10f      	bne.n	80067a8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	4413      	add	r3, r2
 8006790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	69fa      	ldr	r2, [r7, #28]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	6a3a      	ldr	r2, [r7, #32]
 800679c:	440a      	add	r2, r1
 800679e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067a6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	7c9b      	ldrb	r3, [r3, #18]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d162      	bne.n	8006876 <USB_HC_StartXfer+0x3ea>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	78db      	ldrb	r3, [r3, #3]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d15e      	bne.n	8006876 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	3b01      	subs	r3, #1
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d858      	bhi.n	8006874 <USB_HC_StartXfer+0x3e8>
 80067c2:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <USB_HC_StartXfer+0x33c>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	080067fb 	.word	0x080067fb
 80067d0:	0800681d 	.word	0x0800681d
 80067d4:	0800683f 	.word	0x0800683f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	0151      	lsls	r1, r2, #5
 80067ea:	6a3a      	ldr	r2, [r7, #32]
 80067ec:	440a      	add	r2, r1
 80067ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f6:	6053      	str	r3, [r2, #4]
          break;
 80067f8:	e03d      	b.n	8006876 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	69fa      	ldr	r2, [r7, #28]
 800680a:	0151      	lsls	r1, r2, #5
 800680c:	6a3a      	ldr	r2, [r7, #32]
 800680e:	440a      	add	r2, r1
 8006810:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006814:	f043 030e 	orr.w	r3, r3, #14
 8006818:	6053      	str	r3, [r2, #4]
          break;
 800681a:	e02c      	b.n	8006876 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	4413      	add	r3, r2
 8006824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	6a3a      	ldr	r2, [r7, #32]
 8006830:	440a      	add	r2, r1
 8006832:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006836:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800683a:	6053      	str	r3, [r2, #4]
          break;
 800683c:	e01b      	b.n	8006876 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	69fa      	ldr	r2, [r7, #28]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	6a3a      	ldr	r2, [r7, #32]
 8006852:	440a      	add	r2, r1
 8006854:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006858:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800685c:	6053      	str	r3, [r2, #4]
          break;
 800685e:	e00a      	b.n	8006876 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	4413      	add	r3, r2
 8006868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800686c:	461a      	mov	r2, r3
 800686e:	2300      	movs	r3, #0
 8006870:	6053      	str	r3, [r2, #4]
 8006872:	e000      	b.n	8006876 <USB_HC_StartXfer+0x3ea>
          break;
 8006874:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800688c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	78db      	ldrb	r3, [r3, #3]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d004      	beq.n	80068a0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	e003      	b.n	80068a8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068a6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068ae:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068bc:	461a      	mov	r2, r3
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	e055      	b.n	8006978 <USB_HC_StartXfer+0x4ec>
 80068cc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	78db      	ldrb	r3, [r3, #3]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d14e      	bne.n	8006976 <USB_HC_StartXfer+0x4ea>
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d04a      	beq.n	8006976 <USB_HC_StartXfer+0x4ea>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	79db      	ldrb	r3, [r3, #7]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d146      	bne.n	8006976 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	7c9b      	ldrb	r3, [r3, #18]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d831      	bhi.n	8006954 <USB_HC_StartXfer+0x4c8>
 80068f0:	a201      	add	r2, pc, #4	@ (adr r2, 80068f8 <USB_HC_StartXfer+0x46c>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	08006909 	.word	0x08006909
 80068fc:	0800692d 	.word	0x0800692d
 8006900:	08006909 	.word	0x08006909
 8006904:	0800692d 	.word	0x0800692d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	3303      	adds	r3, #3
 800690e:	089b      	lsrs	r3, r3, #2
 8006910:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006912:	8afa      	ldrh	r2, [r7, #22]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006918:	b29b      	uxth	r3, r3
 800691a:	429a      	cmp	r2, r3
 800691c:	d91c      	bls.n	8006958 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	619a      	str	r2, [r3, #24]
        }
        break;
 800692a:	e015      	b.n	8006958 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	3303      	adds	r3, #3
 8006932:	089b      	lsrs	r3, r3, #2
 8006934:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006936:	8afa      	ldrh	r2, [r7, #22]
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	b29b      	uxth	r3, r3
 8006942:	429a      	cmp	r2, r3
 8006944:	d90a      	bls.n	800695c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	619a      	str	r2, [r3, #24]
        }
        break;
 8006952:	e003      	b.n	800695c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006954:	bf00      	nop
 8006956:	e002      	b.n	800695e <USB_HC_StartXfer+0x4d2>
        break;
 8006958:	bf00      	nop
 800695a:	e000      	b.n	800695e <USB_HC_StartXfer+0x4d2>
        break;
 800695c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	6999      	ldr	r1, [r3, #24]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	785a      	ldrb	r2, [r3, #1]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	b29b      	uxth	r3, r3
 800696c:	2000      	movs	r0, #0
 800696e:	9000      	str	r0, [sp, #0]
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7ff f9ca 	bl	8005d0a <USB_WritePacket>
  }

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3728      	adds	r7, #40	@ 0x28
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	b29b      	uxth	r3, r3
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b089      	sub	sp, #36	@ 0x24
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	460b      	mov	r3, r1
 80069ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	0c9b      	lsrs	r3, r3, #18
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	0fdb      	lsrs	r3, r3, #31
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	0fdb      	lsrs	r3, r3, #31
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 0320 	and.w	r3, r3, #32
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d10d      	bne.n	8006a24 <USB_HC_Halt+0x82>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10a      	bne.n	8006a24 <USB_HC_Halt+0x82>
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d005      	beq.n	8006a20 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d002      	beq.n	8006a20 <USB_HC_Halt+0x7e>
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d101      	bne.n	8006a24 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	e0d8      	b.n	8006bd6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <USB_HC_Halt+0x8e>
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d173      	bne.n	8006b18 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a4e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d14a      	bne.n	8006af2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d133      	bne.n	8006ad0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	0151      	lsls	r1, r2, #5
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a86:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	0151      	lsls	r1, r2, #5
 8006a9a:	69fa      	ldr	r2, [r7, #28]
 8006a9c:	440a      	add	r2, r1
 8006a9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006aa6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ab4:	d82e      	bhi.n	8006b14 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006acc:	d0ec      	beq.n	8006aa8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ace:	e081      	b.n	8006bd4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	69fa      	ldr	r2, [r7, #28]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006aea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006aee:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006af0:	e070      	b.n	8006bd4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	0151      	lsls	r1, r2, #5
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	440a      	add	r2, r1
 8006b08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b10:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b12:	e05f      	b.n	8006bd4 <USB_HC_Halt+0x232>
            break;
 8006b14:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b16:	e05d      	b.n	8006bd4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	0151      	lsls	r1, r2, #5
 8006b2a:	69fa      	ldr	r2, [r7, #28]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b36:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d133      	bne.n	8006bb0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	0151      	lsls	r1, r2, #5
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	440a      	add	r2, r1
 8006b5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b66:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	0151      	lsls	r1, r2, #5
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b86:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b94:	d81d      	bhi.n	8006bd2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bac:	d0ec      	beq.n	8006b88 <USB_HC_Halt+0x1e6>
 8006bae:	e011      	b.n	8006bd4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	e000      	b.n	8006bd4 <USB_HC_Halt+0x232>
          break;
 8006bd2:	bf00      	nop
    }
  }

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3724      	adds	r7, #36	@ 0x24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	04da      	lsls	r2, r3, #19
 8006c00:	4b15      	ldr	r3, [pc, #84]	@ (8006c58 <USB_DoPing+0x74>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	0151      	lsls	r1, r2, #5
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	440a      	add	r2, r1
 8006c0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c14:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c2c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c34:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c42:	461a      	mov	r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	371c      	adds	r7, #28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	1ff80000 	.word	0x1ff80000

08006c5c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7fe ff8d 	bl	8005b90 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c76:	2110      	movs	r1, #16
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7fe ffe6 	bl	8005c4a <USB_FlushTxFifo>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff f810 	bl	8005cae <USB_FlushRxFifo>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	e01f      	b.n	8006cde <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cc4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	61bb      	str	r3, [r7, #24]
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d9dc      	bls.n	8006c9e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61bb      	str	r3, [r7, #24]
 8006ce8:	e034      	b.n	8006d54 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d1e:	461a      	mov	r2, r3
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3301      	adds	r3, #1
 8006d28:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d30:	d80c      	bhi.n	8006d4c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d48:	d0ec      	beq.n	8006d24 <USB_StopHost+0xc8>
 8006d4a:	e000      	b.n	8006d4e <USB_StopHost+0xf2>
        break;
 8006d4c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	3301      	adds	r3, #1
 8006d52:	61bb      	str	r3, [r7, #24]
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2b0f      	cmp	r3, #15
 8006d58:	d9c7      	bls.n	8006cea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d60:	461a      	mov	r2, r3
 8006d62:	f04f 33ff 	mov.w	r3, #4294967295
 8006d66:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7fe fefc 	bl	8005b6e <USB_EnableGlobalInt>

  return ret;
 8006d76:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3720      	adds	r7, #32
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006d80:	b590      	push	{r4, r7, lr}
 8006d82:	b089      	sub	sp, #36	@ 0x24
 8006d84:	af04      	add	r7, sp, #16
 8006d86:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006d88:	2301      	movs	r3, #1
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	2102      	movs	r1, #2
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fc85 	bl	800769e <USBH_FindInterface>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2bff      	cmp	r3, #255	@ 0xff
 8006d9c:	d002      	beq.n	8006da4 <USBH_CDC_InterfaceInit+0x24>
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d901      	bls.n	8006da8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006da4:	2302      	movs	r3, #2
 8006da6:	e13d      	b.n	8007024 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fc5a 	bl	8007666 <USBH_SelectInterface>
 8006db2:	4603      	mov	r3, r0
 8006db4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e131      	b.n	8007024 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006dc6:	2050      	movs	r0, #80	@ 0x50
 8006dc8:	f002 fb64 	bl	8009494 <malloc>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006de0:	2302      	movs	r3, #2
 8006de2:	e11f      	b.n	8007024 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006de4:	2250      	movs	r2, #80	@ 0x50
 8006de6:	2100      	movs	r1, #0
 8006de8:	68b8      	ldr	r0, [r7, #8]
 8006dea:	f002 fc4d 	bl	8009688 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	211a      	movs	r1, #26
 8006df4:	fb01 f303 	mul.w	r3, r1, r3
 8006df8:	4413      	add	r3, r2
 8006dfa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	b25b      	sxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	da15      	bge.n	8006e32 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	211a      	movs	r1, #26
 8006e0c:	fb01 f303 	mul.w	r3, r1, r3
 8006e10:	4413      	add	r3, r2
 8006e12:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	211a      	movs	r1, #26
 8006e22:	fb01 f303 	mul.w	r3, r1, r3
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006e2c:	881a      	ldrh	r2, [r3, #0]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 ffbe 	bl	8008dba <USBH_AllocPipe>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	461a      	mov	r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	7819      	ldrb	r1, [r3, #0]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	7858      	ldrb	r0, [r3, #1]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	8952      	ldrh	r2, [r2, #10]
 8006e5e:	9202      	str	r2, [sp, #8]
 8006e60:	2203      	movs	r2, #3
 8006e62:	9201      	str	r2, [sp, #4]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	4623      	mov	r3, r4
 8006e68:	4602      	mov	r2, r0
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 ff76 	bl	8008d5c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2200      	movs	r2, #0
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f002 fa85 	bl	8009388 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2200      	movs	r2, #0
 8006e82:	210a      	movs	r1, #10
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fc0a 	bl	800769e <USBH_FindInterface>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
 8006e90:	2bff      	cmp	r3, #255	@ 0xff
 8006e92:	d002      	beq.n	8006e9a <USBH_CDC_InterfaceInit+0x11a>
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d901      	bls.n	8006e9e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e0c2      	b.n	8007024 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	211a      	movs	r1, #26
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	b25b      	sxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	da16      	bge.n	8006ee4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	211a      	movs	r1, #26
 8006ebc:	fb01 f303 	mul.w	r3, r1, r3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ec6:	781a      	ldrb	r2, [r3, #0]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	211a      	movs	r1, #26
 8006ed2:	fb01 f303 	mul.w	r3, r1, r3
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006edc:	881a      	ldrh	r2, [r3, #0]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	835a      	strh	r2, [r3, #26]
 8006ee2:	e015      	b.n	8006f10 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	211a      	movs	r1, #26
 8006eea:	fb01 f303 	mul.w	r3, r1, r3
 8006eee:	4413      	add	r3, r2
 8006ef0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ef4:	781a      	ldrb	r2, [r3, #0]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	211a      	movs	r1, #26
 8006f00:	fb01 f303 	mul.w	r3, r1, r3
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006f0a:	881a      	ldrh	r2, [r3, #0]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	211a      	movs	r1, #26
 8006f16:	fb01 f303 	mul.w	r3, r1, r3
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	b25b      	sxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	da16      	bge.n	8006f56 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	211a      	movs	r1, #26
 8006f2e:	fb01 f303 	mul.w	r3, r1, r3
 8006f32:	4413      	add	r3, r2
 8006f34:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006f38:	781a      	ldrb	r2, [r3, #0]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	211a      	movs	r1, #26
 8006f44:	fb01 f303 	mul.w	r3, r1, r3
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006f4e:	881a      	ldrh	r2, [r3, #0]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	835a      	strh	r2, [r3, #26]
 8006f54:	e015      	b.n	8006f82 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	211a      	movs	r1, #26
 8006f5c:	fb01 f303 	mul.w	r3, r1, r3
 8006f60:	4413      	add	r3, r2
 8006f62:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	211a      	movs	r1, #26
 8006f72:	fb01 f303 	mul.w	r3, r1, r3
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006f7c:	881a      	ldrh	r2, [r3, #0]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	7b9b      	ldrb	r3, [r3, #14]
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 ff16 	bl	8008dba <USBH_AllocPipe>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	461a      	mov	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	7bdb      	ldrb	r3, [r3, #15]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 ff0c 	bl	8008dba <USBH_AllocPipe>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	7b59      	ldrb	r1, [r3, #13]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	7b98      	ldrb	r0, [r3, #14]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	8b12      	ldrh	r2, [r2, #24]
 8006fc2:	9202      	str	r2, [sp, #8]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	9201      	str	r2, [sp, #4]
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	4623      	mov	r3, r4
 8006fcc:	4602      	mov	r2, r0
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f001 fec4 	bl	8008d5c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	7b19      	ldrb	r1, [r3, #12]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	7bd8      	ldrb	r0, [r3, #15]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	8b52      	ldrh	r2, [r2, #26]
 8006fec:	9202      	str	r2, [sp, #8]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	9201      	str	r2, [sp, #4]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	4623      	mov	r3, r4
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 feaf 	bl	8008d5c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	7b5b      	ldrb	r3, [r3, #13]
 800700a:	2200      	movs	r2, #0
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f002 f9ba 	bl	8009388 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	7b1b      	ldrb	r3, [r3, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f002 f9b3 	bl	8009388 <USBH_LL_SetToggle>

  return USBH_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	bd90      	pop	{r4, r7, pc}

0800702c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00e      	beq.n	8007064 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 fea4 	bl	8008d9a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 fecf 	bl	8008dfc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	7b1b      	ldrb	r3, [r3, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00e      	beq.n	800708a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	7b1b      	ldrb	r3, [r3, #12]
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 fe91 	bl	8008d9a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	7b1b      	ldrb	r3, [r3, #12]
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 febc 	bl	8008dfc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	7b5b      	ldrb	r3, [r3, #13]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00e      	beq.n	80070b0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	7b5b      	ldrb	r3, [r3, #13]
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 fe7e 	bl	8008d9a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	7b5b      	ldrb	r3, [r3, #13]
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 fea9 	bl	8008dfc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f002 f9ed 	bl	80094a4 <free>
    phost->pActiveClass->pData = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070d0:	2200      	movs	r2, #0
 80070d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3340      	adds	r3, #64	@ 0x40
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f8b1 	bl	800725e <GetLineCoding>
 80070fc:	4603      	mov	r3, r0
 80070fe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007100:	7afb      	ldrb	r3, [r7, #11]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d105      	bne.n	8007112 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800710c:	2102      	movs	r1, #2
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007112:	7afb      	ldrb	r3, [r7, #11]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007124:	2301      	movs	r3, #1
 8007126:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800713c:	2b04      	cmp	r3, #4
 800713e:	d877      	bhi.n	8007230 <USBH_CDC_Process+0x114>
 8007140:	a201      	add	r2, pc, #4	@ (adr r2, 8007148 <USBH_CDC_Process+0x2c>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	0800715d 	.word	0x0800715d
 800714c:	08007163 	.word	0x08007163
 8007150:	08007193 	.word	0x08007193
 8007154:	08007207 	.word	0x08007207
 8007158:	08007215 	.word	0x08007215
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	73fb      	strb	r3, [r7, #15]
      break;
 8007160:	e06d      	b.n	800723e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f897 	bl	800729c <SetLineCoding>
 800716e:	4603      	mov	r3, r0
 8007170:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d104      	bne.n	8007182 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007180:	e058      	b.n	8007234 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d055      	beq.n	8007234 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2204      	movs	r2, #4
 800718c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007190:	e050      	b.n	8007234 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	3340      	adds	r3, #64	@ 0x40
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f860 	bl	800725e <GetLineCoding>
 800719e:	4603      	mov	r3, r0
 80071a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d126      	bne.n	80071f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ba:	791b      	ldrb	r3, [r3, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d13b      	bne.n	8007238 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d133      	bne.n	8007238 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80071dc:	429a      	cmp	r2, r3
 80071de:	d12b      	bne.n	8007238 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d124      	bne.n	8007238 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f958 	bl	80074a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80071f4:	e020      	b.n	8007238 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d01d      	beq.n	8007238 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2204      	movs	r2, #4
 8007200:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007204:	e018      	b.n	8007238 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f867 	bl	80072da <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f8da 	bl	80073c6 <CDC_ProcessReception>
      break;
 8007212:	e014      	b.n	800723e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007214:	2100      	movs	r1, #0
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 f81a 	bl	8008250 <USBH_ClrFeature>
 800721c:	4603      	mov	r3, r0
 800721e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007220:	7bbb      	ldrb	r3, [r7, #14]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800722e:	e005      	b.n	800723c <USBH_CDC_Process+0x120>

    default:
      break;
 8007230:	bf00      	nop
 8007232:	e004      	b.n	800723e <USBH_CDC_Process+0x122>
      break;
 8007234:	bf00      	nop
 8007236:	e002      	b.n	800723e <USBH_CDC_Process+0x122>
      break;
 8007238:	bf00      	nop
 800723a:	e000      	b.n	800723e <USBH_CDC_Process+0x122>
      break;
 800723c:	bf00      	nop

  }

  return status;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	22a1      	movs	r2, #161	@ 0xa1
 800726c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2221      	movs	r2, #33	@ 0x21
 8007272:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2207      	movs	r2, #7
 8007284:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2207      	movs	r2, #7
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 fb14 	bl	80088ba <USBH_CtlReq>
 8007292:	4603      	mov	r3, r0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2221      	movs	r2, #33	@ 0x21
 80072aa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2207      	movs	r2, #7
 80072c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2207      	movs	r2, #7
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 faf5 	bl	80088ba <USBH_CtlReq>
 80072d0:	4603      	mov	r3, r0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b086      	sub	sp, #24
 80072de:	af02      	add	r7, sp, #8
 80072e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d002      	beq.n	8007300 <CDC_ProcessTransmission+0x26>
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d023      	beq.n	8007346 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80072fe:	e05e      	b.n	80073be <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	8b12      	ldrh	r2, [r2, #24]
 8007308:	4293      	cmp	r3, r2
 800730a:	d90b      	bls.n	8007324 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	69d9      	ldr	r1, [r3, #28]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8b1a      	ldrh	r2, [r3, #24]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	7b5b      	ldrb	r3, [r3, #13]
 8007318:	2001      	movs	r0, #1
 800731a:	9000      	str	r0, [sp, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 fcda 	bl	8008cd6 <USBH_BulkSendData>
 8007322:	e00b      	b.n	800733c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800732c:	b29a      	uxth	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	7b5b      	ldrb	r3, [r3, #13]
 8007332:	2001      	movs	r0, #1
 8007334:	9000      	str	r0, [sp, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fccd 	bl	8008cd6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007344:	e03b      	b.n	80073be <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	7b5b      	ldrb	r3, [r3, #13]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 fff1 	bl	8009334 <USBH_LL_GetURBState>
 8007352:	4603      	mov	r3, r0
 8007354:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d128      	bne.n	80073ae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	8b12      	ldrh	r2, [r2, #24]
 8007364:	4293      	cmp	r3, r2
 8007366:	d90e      	bls.n	8007386 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	8b12      	ldrh	r2, [r2, #24]
 8007370:	1a9a      	subs	r2, r3, r2
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	8b12      	ldrh	r2, [r2, #24]
 800737e:	441a      	add	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	61da      	str	r2, [r3, #28]
 8007384:	e002      	b.n	800738c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d004      	beq.n	800739e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800739c:	e00e      	b.n	80073bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f868 	bl	800747c <USBH_CDC_TransmitCallback>
      break;
 80073ac:	e006      	b.n	80073bc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80073ae:	7afb      	ldrb	r3, [r7, #11]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d103      	bne.n	80073bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80073bc:	bf00      	nop
  }
}
 80073be:	bf00      	nop
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b086      	sub	sp, #24
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073d8:	2300      	movs	r3, #0
 80073da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d002      	beq.n	80073ec <CDC_ProcessReception+0x26>
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d00e      	beq.n	8007408 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80073ea:	e043      	b.n	8007474 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	6a19      	ldr	r1, [r3, #32]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	8b5a      	ldrh	r2, [r3, #26]
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	7b1b      	ldrb	r3, [r3, #12]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 fc91 	bl	8008d20 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2204      	movs	r2, #4
 8007402:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007406:	e035      	b.n	8007474 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	7b1b      	ldrb	r3, [r3, #12]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 ff90 	bl	8009334 <USBH_LL_GetURBState>
 8007414:	4603      	mov	r3, r0
 8007416:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007418:	7cfb      	ldrb	r3, [r7, #19]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d129      	bne.n	8007472 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	7b1b      	ldrb	r3, [r3, #12]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 fef3 	bl	8009210 <USBH_LL_GetLastXferSize>
 800742a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	429a      	cmp	r2, r3
 8007434:	d016      	beq.n	8007464 <CDC_ProcessReception+0x9e>
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	8b5b      	ldrh	r3, [r3, #26]
 800743a:	461a      	mov	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4293      	cmp	r3, r2
 8007440:	d110      	bne.n	8007464 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	1ad2      	subs	r2, r2, r3
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	6a1a      	ldr	r2, [r3, #32]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	441a      	add	r2, r3
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2203      	movs	r2, #3
 800745e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007462:	e006      	b.n	8007472 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f80f 	bl	8007490 <USBH_CDC_ReceiveCallback>
      break;
 8007472:	bf00      	nop
  }
}
 8007474:	bf00      	nop
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	4613      	mov	r3, r2
 80074c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80074cc:	2302      	movs	r3, #2
 80074ce:	e029      	b.n	8007524 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	79fa      	ldrb	r2, [r7, #7]
 80074d4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 f81f 	bl	800752c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f001 fdc3 	bl	80090a8 <USBH_LL_Init>

  return USBH_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	e009      	b.n	8007552 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	33e0      	adds	r3, #224	@ 0xe0
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	2200      	movs	r2, #0
 800754a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3301      	adds	r3, #1
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b0f      	cmp	r3, #15
 8007556:	d9f2      	bls.n	800753e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007558:	2300      	movs	r3, #0
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	e009      	b.n	8007572 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4413      	add	r3, r2
 8007564:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007568:	2200      	movs	r2, #0
 800756a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3301      	adds	r3, #1
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007578:	d3f1      	bcc.n	800755e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2240      	movs	r2, #64	@ 0x40
 800759e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	331c      	adds	r3, #28
 80075ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80075ce:	2100      	movs	r1, #0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f002 f859 	bl	8009688 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80075dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075e0:	2100      	movs	r1, #0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f002 f850 	bl	8009688 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80075ee:	2212      	movs	r2, #18
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f002 f848 	bl	8009688 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80075fe:	223e      	movs	r2, #62	@ 0x3e
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f002 f840 	bl	8009688 <memset>

  return USBH_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007612:	b480      	push	{r7}
 8007614:	b085      	sub	sp, #20
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d016      	beq.n	8007654 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10e      	bne.n	800764e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007636:	1c59      	adds	r1, r3, #1
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	33de      	adds	r3, #222	@ 0xde
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]
 800764c:	e004      	b.n	8007658 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800764e:	2302      	movs	r3, #2
 8007650:	73fb      	strb	r3, [r7, #15]
 8007652:	e001      	b.n	8007658 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007654:	2302      	movs	r3, #2
 8007656:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	429a      	cmp	r2, r3
 8007680:	d204      	bcs.n	800768c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	78fa      	ldrb	r2, [r7, #3]
 8007686:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800768a:	e001      	b.n	8007690 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800768c:	2302      	movs	r3, #2
 800768e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007690:	7bfb      	ldrb	r3, [r7, #15]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800769e:	b480      	push	{r7}
 80076a0:	b087      	sub	sp, #28
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	4608      	mov	r0, r1
 80076a8:	4611      	mov	r1, r2
 80076aa:	461a      	mov	r2, r3
 80076ac:	4603      	mov	r3, r0
 80076ae:	70fb      	strb	r3, [r7, #3]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70bb      	strb	r3, [r7, #2]
 80076b4:	4613      	mov	r3, r2
 80076b6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80076c6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80076c8:	e025      	b.n	8007716 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	221a      	movs	r2, #26
 80076ce:	fb02 f303 	mul.w	r3, r2, r3
 80076d2:	3308      	adds	r3, #8
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	3302      	adds	r3, #2
 80076da:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	795b      	ldrb	r3, [r3, #5]
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d002      	beq.n	80076ec <USBH_FindInterface+0x4e>
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	2bff      	cmp	r3, #255	@ 0xff
 80076ea:	d111      	bne.n	8007710 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80076f0:	78ba      	ldrb	r2, [r7, #2]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d002      	beq.n	80076fc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076f6:	78bb      	ldrb	r3, [r7, #2]
 80076f8:	2bff      	cmp	r3, #255	@ 0xff
 80076fa:	d109      	bne.n	8007710 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007700:	787a      	ldrb	r2, [r7, #1]
 8007702:	429a      	cmp	r2, r3
 8007704:	d002      	beq.n	800770c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007706:	787b      	ldrb	r3, [r7, #1]
 8007708:	2bff      	cmp	r3, #255	@ 0xff
 800770a:	d101      	bne.n	8007710 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	e006      	b.n	800771e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	3301      	adds	r3, #1
 8007714:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d9d6      	bls.n	80076ca <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800771c:	23ff      	movs	r3, #255	@ 0xff
}
 800771e:	4618      	mov	r0, r3
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 fcf4 	bl	8009120 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007738:	2101      	movs	r1, #1
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fe0d 	bl	800935a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af04      	add	r7, sp, #16
 8007752:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007754:	2302      	movs	r3, #2
 8007756:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b01      	cmp	r3, #1
 8007766:	d102      	bne.n	800776e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2203      	movs	r2, #3
 800776c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b0b      	cmp	r3, #11
 8007776:	f200 81bb 	bhi.w	8007af0 <USBH_Process+0x3a4>
 800777a:	a201      	add	r2, pc, #4	@ (adr r2, 8007780 <USBH_Process+0x34>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	080077b1 	.word	0x080077b1
 8007784:	080077e3 	.word	0x080077e3
 8007788:	0800784b 	.word	0x0800784b
 800778c:	08007a8b 	.word	0x08007a8b
 8007790:	08007af1 	.word	0x08007af1
 8007794:	080078eb 	.word	0x080078eb
 8007798:	08007a31 	.word	0x08007a31
 800779c:	08007921 	.word	0x08007921
 80077a0:	08007941 	.word	0x08007941
 80077a4:	0800795f 	.word	0x0800795f
 80077a8:	080079a3 	.word	0x080079a3
 80077ac:	08007a73 	.word	0x08007a73
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 819b 	beq.w	8007af4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80077c4:	20c8      	movs	r0, #200	@ 0xc8
 80077c6:	f001 fe12 	bl	80093ee <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 fd05 	bl	80091da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077e0:	e188      	b.n	8007af4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d107      	bne.n	80077fc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077fa:	e18a      	b.n	8007b12 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007802:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007806:	d914      	bls.n	8007832 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800780e:	3301      	adds	r3, #1
 8007810:	b2da      	uxtb	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800781e:	2b03      	cmp	r3, #3
 8007820:	d903      	bls.n	800782a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	220d      	movs	r2, #13
 8007826:	701a      	strb	r2, [r3, #0]
      break;
 8007828:	e173      	b.n	8007b12 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
      break;
 8007830:	e16f      	b.n	8007b12 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007838:	f103 020a 	add.w	r2, r3, #10
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007842:	200a      	movs	r0, #10
 8007844:	f001 fdd3 	bl	80093ee <USBH_Delay>
      break;
 8007848:	e163      	b.n	8007b12 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800785a:	2104      	movs	r1, #4
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007860:	2064      	movs	r0, #100	@ 0x64
 8007862:	f001 fdc4 	bl	80093ee <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 fc90 	bl	800918c <USBH_LL_GetSpeed>
 800786c:	4603      	mov	r3, r0
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2205      	movs	r2, #5
 800787a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800787c:	2100      	movs	r1, #0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 fa9b 	bl	8008dba <USBH_AllocPipe>
 8007884:	4603      	mov	r3, r0
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800788c:	2180      	movs	r1, #128	@ 0x80
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 fa93 	bl	8008dba <USBH_AllocPipe>
 8007894:	4603      	mov	r3, r0
 8007896:	461a      	mov	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7919      	ldrb	r1, [r3, #4]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80078b0:	9202      	str	r2, [sp, #8]
 80078b2:	2200      	movs	r2, #0
 80078b4:	9201      	str	r2, [sp, #4]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4603      	mov	r3, r0
 80078ba:	2280      	movs	r2, #128	@ 0x80
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 fa4d 	bl	8008d5c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	7959      	ldrb	r1, [r3, #5]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80078d6:	9202      	str	r2, [sp, #8]
 80078d8:	2200      	movs	r2, #0
 80078da:	9201      	str	r2, [sp, #4]
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	4603      	mov	r3, r0
 80078e0:	2200      	movs	r2, #0
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 fa3a 	bl	8008d5c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078e8:	e113      	b.n	8007b12 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f916 	bl	8007b1c <USBH_HandleEnum>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f040 80fd 	bne.w	8007af8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800790c:	2b01      	cmp	r3, #1
 800790e:	d103      	bne.n	8007918 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2208      	movs	r2, #8
 8007914:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007916:	e0ef      	b.n	8007af8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2207      	movs	r2, #7
 800791c:	701a      	strb	r2, [r3, #0]
      break;
 800791e:	e0eb      	b.n	8007af8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 80e8 	beq.w	8007afc <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007932:	2101      	movs	r1, #1
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2208      	movs	r2, #8
 800793c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800793e:	e0dd      	b.n	8007afc <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fc3a 	bl	80081c2 <USBH_SetCfg>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	f040 80d5 	bne.w	8007b00 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2209      	movs	r2, #9
 800795a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800795c:	e0d0      	b.n	8007b00 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b00      	cmp	r3, #0
 800796a:	d016      	beq.n	800799a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800796c:	2101      	movs	r1, #1
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fc4a 	bl	8008208 <USBH_SetFeature>
 8007974:	4603      	mov	r3, r0
 8007976:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d103      	bne.n	8007988 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	220a      	movs	r2, #10
 8007984:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007986:	e0bd      	b.n	8007b04 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b03      	cmp	r3, #3
 800798e:	f040 80b9 	bne.w	8007b04 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	220a      	movs	r2, #10
 8007996:	701a      	strb	r2, [r3, #0]
      break;
 8007998:	e0b4      	b.n	8007b04 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	220a      	movs	r2, #10
 800799e:	701a      	strb	r2, [r3, #0]
      break;
 80079a0:	e0b0      	b.n	8007b04 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 80ad 	beq.w	8007b08 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
 80079ba:	e016      	b.n	80079ea <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80079bc:	7bfa      	ldrb	r2, [r7, #15]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	32de      	adds	r2, #222	@ 0xde
 80079c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c6:	791a      	ldrb	r2, [r3, #4]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d108      	bne.n	80079e4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80079d2:	7bfa      	ldrb	r2, [r7, #15]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	32de      	adds	r2, #222	@ 0xde
 80079d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80079e2:	e005      	b.n	80079f0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	3301      	adds	r3, #1
 80079e8:	73fb      	strb	r3, [r7, #15]
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0e5      	beq.n	80079bc <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d016      	beq.n	8007a28 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d109      	bne.n	8007a20 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2206      	movs	r2, #6
 8007a10:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a18:	2103      	movs	r1, #3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a1e:	e073      	b.n	8007b08 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	220d      	movs	r2, #13
 8007a24:	701a      	strb	r2, [r3, #0]
      break;
 8007a26:	e06f      	b.n	8007b08 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	220d      	movs	r2, #13
 8007a2c:	701a      	strb	r2, [r3, #0]
      break;
 8007a2e:	e06b      	b.n	8007b08 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d017      	beq.n	8007a6a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3
 8007a46:	4603      	mov	r3, r0
 8007a48:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d103      	bne.n	8007a5a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	220b      	movs	r2, #11
 8007a56:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a58:	e058      	b.n	8007b0c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d154      	bne.n	8007b0c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	220d      	movs	r2, #13
 8007a66:	701a      	strb	r2, [r3, #0]
      break;
 8007a68:	e050      	b.n	8007b0c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	220d      	movs	r2, #13
 8007a6e:	701a      	strb	r2, [r3, #0]
      break;
 8007a70:	e04c      	b.n	8007b0c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d049      	beq.n	8007b10 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	4798      	blx	r3
      }
      break;
 8007a88:	e042      	b.n	8007b10 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7ff fd4a 	bl	800752c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d009      	beq.n	8007ab6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ac6:	2105      	movs	r1, #5
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d107      	bne.n	8007ae8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff fe22 	bl	800772a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ae6:	e014      	b.n	8007b12 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 fb19 	bl	8009120 <USBH_LL_Start>
      break;
 8007aee:	e010      	b.n	8007b12 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007af0:	bf00      	nop
 8007af2:	e00e      	b.n	8007b12 <USBH_Process+0x3c6>
      break;
 8007af4:	bf00      	nop
 8007af6:	e00c      	b.n	8007b12 <USBH_Process+0x3c6>
      break;
 8007af8:	bf00      	nop
 8007afa:	e00a      	b.n	8007b12 <USBH_Process+0x3c6>
    break;
 8007afc:	bf00      	nop
 8007afe:	e008      	b.n	8007b12 <USBH_Process+0x3c6>
      break;
 8007b00:	bf00      	nop
 8007b02:	e006      	b.n	8007b12 <USBH_Process+0x3c6>
      break;
 8007b04:	bf00      	nop
 8007b06:	e004      	b.n	8007b12 <USBH_Process+0x3c6>
      break;
 8007b08:	bf00      	nop
 8007b0a:	e002      	b.n	8007b12 <USBH_Process+0x3c6>
      break;
 8007b0c:	bf00      	nop
 8007b0e:	e000      	b.n	8007b12 <USBH_Process+0x3c6>
      break;
 8007b10:	bf00      	nop
  }
  return USBH_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af04      	add	r7, sp, #16
 8007b22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b24:	2301      	movs	r3, #1
 8007b26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	785b      	ldrb	r3, [r3, #1]
 8007b30:	2b07      	cmp	r3, #7
 8007b32:	f200 81bd 	bhi.w	8007eb0 <USBH_HandleEnum+0x394>
 8007b36:	a201      	add	r2, pc, #4	@ (adr r2, 8007b3c <USBH_HandleEnum+0x20>)
 8007b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3c:	08007b5d 	.word	0x08007b5d
 8007b40:	08007c17 	.word	0x08007c17
 8007b44:	08007c81 	.word	0x08007c81
 8007b48:	08007d0b 	.word	0x08007d0b
 8007b4c:	08007d75 	.word	0x08007d75
 8007b50:	08007de5 	.word	0x08007de5
 8007b54:	08007e2b 	.word	0x08007e2b
 8007b58:	08007e71 	.word	0x08007e71
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007b5c:	2108      	movs	r1, #8
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fa4c 	bl	8007ffc <USBH_Get_DevDesc>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d12e      	bne.n	8007bcc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	7919      	ldrb	r1, [r3, #4]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b92:	9202      	str	r2, [sp, #8]
 8007b94:	2200      	movs	r2, #0
 8007b96:	9201      	str	r2, [sp, #4]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2280      	movs	r2, #128	@ 0x80
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f001 f8dc 	bl	8008d5c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	7959      	ldrb	r1, [r3, #5]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bb8:	9202      	str	r2, [sp, #8]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	9201      	str	r2, [sp, #4]
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 f8c9 	bl	8008d5c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007bca:	e173      	b.n	8007eb4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	f040 8170 	bne.w	8007eb4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bda:	3301      	adds	r3, #1
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d903      	bls.n	8007bf6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	220d      	movs	r2, #13
 8007bf2:	701a      	strb	r2, [r3, #0]
      break;
 8007bf4:	e15e      	b.n	8007eb4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	795b      	ldrb	r3, [r3, #5]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 f8fd 	bl	8008dfc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	791b      	ldrb	r3, [r3, #4]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 f8f7 	bl	8008dfc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	701a      	strb	r2, [r3, #0]
      break;
 8007c14:	e14e      	b.n	8007eb4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007c16:	2112      	movs	r1, #18
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f9ef 	bl	8007ffc <USBH_Get_DevDesc>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d103      	bne.n	8007c30 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c2e:	e143      	b.n	8007eb8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	f040 8140 	bne.w	8007eb8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c3e:	3301      	adds	r3, #1
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d903      	bls.n	8007c5a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	220d      	movs	r2, #13
 8007c56:	701a      	strb	r2, [r3, #0]
      break;
 8007c58:	e12e      	b.n	8007eb8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	795b      	ldrb	r3, [r3, #5]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 f8cb 	bl	8008dfc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	791b      	ldrb	r3, [r3, #4]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 f8c5 	bl	8008dfc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	701a      	strb	r2, [r3, #0]
      break;
 8007c7e:	e11b      	b.n	8007eb8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007c80:	2101      	movs	r1, #1
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa79 	bl	800817a <USBH_SetAddress>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d130      	bne.n	8007cf4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007c92:	2002      	movs	r0, #2
 8007c94:	f001 fbab 	bl	80093ee <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2203      	movs	r2, #3
 8007ca4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	7919      	ldrb	r1, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007cba:	9202      	str	r2, [sp, #8]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	9201      	str	r2, [sp, #4]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2280      	movs	r2, #128	@ 0x80
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 f848 	bl	8008d5c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7959      	ldrb	r1, [r3, #5]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ce0:	9202      	str	r2, [sp, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	9201      	str	r2, [sp, #4]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2200      	movs	r2, #0
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 f835 	bl	8008d5c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007cf2:	e0e3      	b.n	8007ebc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cf4:	7bbb      	ldrb	r3, [r7, #14]
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	f040 80e0 	bne.w	8007ebc <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	220d      	movs	r2, #13
 8007d00:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	705a      	strb	r2, [r3, #1]
      break;
 8007d08:	e0d8      	b.n	8007ebc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007d0a:	2109      	movs	r1, #9
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f9a1 	bl	8008054 <USBH_Get_CfgDesc>
 8007d12:	4603      	mov	r3, r0
 8007d14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d103      	bne.n	8007d24 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2204      	movs	r2, #4
 8007d20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d22:	e0cd      	b.n	8007ec0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	f040 80ca 	bne.w	8007ec0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d32:	3301      	adds	r3, #1
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d903      	bls.n	8007d4e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	220d      	movs	r2, #13
 8007d4a:	701a      	strb	r2, [r3, #0]
      break;
 8007d4c:	e0b8      	b.n	8007ec0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	795b      	ldrb	r3, [r3, #5]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 f851 	bl	8008dfc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	791b      	ldrb	r3, [r3, #4]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 f84b 	bl	8008dfc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	701a      	strb	r2, [r3, #0]
      break;
 8007d72:	e0a5      	b.n	8007ec0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f969 	bl	8008054 <USBH_Get_CfgDesc>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d103      	bne.n	8007d94 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2205      	movs	r2, #5
 8007d90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d92:	e097      	b.n	8007ec4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	f040 8094 	bne.w	8007ec4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007da2:	3301      	adds	r3, #1
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d903      	bls.n	8007dbe <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	220d      	movs	r2, #13
 8007dba:	701a      	strb	r2, [r3, #0]
      break;
 8007dbc:	e082      	b.n	8007ec4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	795b      	ldrb	r3, [r3, #5]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 f819 	bl	8008dfc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	791b      	ldrb	r3, [r3, #4]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 f813 	bl	8008dfc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	701a      	strb	r2, [r3, #0]
      break;
 8007de2:	e06f      	b.n	8007ec4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d019      	beq.n	8007e22 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007dfa:	23ff      	movs	r3, #255	@ 0xff
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f953 	bl	80080a8 <USBH_Get_StringDesc>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d103      	bne.n	8007e14 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2206      	movs	r2, #6
 8007e10:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e12:	e059      	b.n	8007ec8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d156      	bne.n	8007ec8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2206      	movs	r2, #6
 8007e1e:	705a      	strb	r2, [r3, #1]
      break;
 8007e20:	e052      	b.n	8007ec8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2206      	movs	r2, #6
 8007e26:	705a      	strb	r2, [r3, #1]
      break;
 8007e28:	e04e      	b.n	8007ec8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d019      	beq.n	8007e68 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e40:	23ff      	movs	r3, #255	@ 0xff
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f930 	bl	80080a8 <USBH_Get_StringDesc>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d103      	bne.n	8007e5a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2207      	movs	r2, #7
 8007e56:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e58:	e038      	b.n	8007ecc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d135      	bne.n	8007ecc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2207      	movs	r2, #7
 8007e64:	705a      	strb	r2, [r3, #1]
      break;
 8007e66:	e031      	b.n	8007ecc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2207      	movs	r2, #7
 8007e6c:	705a      	strb	r2, [r3, #1]
      break;
 8007e6e:	e02d      	b.n	8007ecc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d017      	beq.n	8007eaa <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e86:	23ff      	movs	r3, #255	@ 0xff
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f90d 	bl	80080a8 <USBH_Get_StringDesc>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d102      	bne.n	8007e9e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007e9c:	e018      	b.n	8007ed0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d115      	bne.n	8007ed0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea8:	e012      	b.n	8007ed0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73fb      	strb	r3, [r7, #15]
      break;
 8007eae:	e00f      	b.n	8007ed0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007eb0:	bf00      	nop
 8007eb2:	e00e      	b.n	8007ed2 <USBH_HandleEnum+0x3b6>
      break;
 8007eb4:	bf00      	nop
 8007eb6:	e00c      	b.n	8007ed2 <USBH_HandleEnum+0x3b6>
      break;
 8007eb8:	bf00      	nop
 8007eba:	e00a      	b.n	8007ed2 <USBH_HandleEnum+0x3b6>
      break;
 8007ebc:	bf00      	nop
 8007ebe:	e008      	b.n	8007ed2 <USBH_HandleEnum+0x3b6>
      break;
 8007ec0:	bf00      	nop
 8007ec2:	e006      	b.n	8007ed2 <USBH_HandleEnum+0x3b6>
      break;
 8007ec4:	bf00      	nop
 8007ec6:	e004      	b.n	8007ed2 <USBH_HandleEnum+0x3b6>
      break;
 8007ec8:	bf00      	nop
 8007eca:	e002      	b.n	8007ed2 <USBH_HandleEnum+0x3b6>
      break;
 8007ecc:	bf00      	nop
 8007ece:	e000      	b.n	8007ed2 <USBH_HandleEnum+0x3b6>
      break;
 8007ed0:	bf00      	nop
  }
  return Status;
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007eee:	bf00      	nop
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f804 	bl	8007f1e <USBH_HandleSof>
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b0b      	cmp	r3, #11
 8007f2e:	d10a      	bne.n	8007f46 <USBH_HandleSof+0x28>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d005      	beq.n	8007f46 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3
  }
}
 8007f46:	bf00      	nop
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007f5e:	bf00      	nop
}
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007f7a:	bf00      	nop
}
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 f8be 	bl	8009156 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	791b      	ldrb	r3, [r3, #4]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 ff0b 	bl	8008dfc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	795b      	ldrb	r3, [r3, #5]
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 ff05 	bl	8008dfc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af02      	add	r7, sp, #8
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008008:	887b      	ldrh	r3, [r7, #2]
 800800a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800800e:	d901      	bls.n	8008014 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008010:	2303      	movs	r3, #3
 8008012:	e01b      	b.n	800804c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800801a:	887b      	ldrh	r3, [r7, #2]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	4613      	mov	r3, r2
 8008020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008024:	2100      	movs	r1, #0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f872 	bl	8008110 <USBH_GetDescriptor>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800803c:	887a      	ldrh	r2, [r7, #2]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f929 	bl	8008298 <USBH_ParseDevDesc>
 8008046:	4603      	mov	r3, r0
 8008048:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800804a:	7bfb      	ldrb	r3, [r7, #15]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af02      	add	r7, sp, #8
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	331c      	adds	r3, #28
 8008064:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008066:	887b      	ldrh	r3, [r7, #2]
 8008068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800806c:	d901      	bls.n	8008072 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800806e:	2303      	movs	r3, #3
 8008070:	e016      	b.n	80080a0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008072:	887b      	ldrh	r3, [r7, #2]
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800807c:	2100      	movs	r1, #0
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f846 	bl	8008110 <USBH_GetDescriptor>
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d107      	bne.n	800809e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800808e:	887b      	ldrh	r3, [r7, #2]
 8008090:	461a      	mov	r2, r3
 8008092:	68b9      	ldr	r1, [r7, #8]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f9af 	bl	80083f8 <USBH_ParseCfgDesc>
 800809a:	4603      	mov	r3, r0
 800809c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800809e:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af02      	add	r7, sp, #8
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	607a      	str	r2, [r7, #4]
 80080b2:	461a      	mov	r2, r3
 80080b4:	460b      	mov	r3, r1
 80080b6:	72fb      	strb	r3, [r7, #11]
 80080b8:	4613      	mov	r3, r2
 80080ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80080bc:	893b      	ldrh	r3, [r7, #8]
 80080be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c2:	d802      	bhi.n	80080ca <USBH_Get_StringDesc+0x22>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e01c      	b.n	8008108 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80080ce:	7afb      	ldrb	r3, [r7, #11]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80080d6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80080de:	893b      	ldrh	r3, [r7, #8]
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	460b      	mov	r3, r1
 80080e4:	2100      	movs	r1, #0
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f812 	bl	8008110 <USBH_GetDescriptor>
 80080ec:	4603      	mov	r3, r0
 80080ee:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d107      	bne.n	8008106 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80080fc:	893a      	ldrh	r2, [r7, #8]
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fb8d 	bl	8008820 <USBH_ParseStringDesc>
  }

  return status;
 8008106:	7dfb      	ldrb	r3, [r7, #23]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	607b      	str	r3, [r7, #4]
 800811a:	460b      	mov	r3, r1
 800811c:	72fb      	strb	r3, [r7, #11]
 800811e:	4613      	mov	r3, r2
 8008120:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	789b      	ldrb	r3, [r3, #2]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d11c      	bne.n	8008164 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008130:	b2da      	uxtb	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2206      	movs	r2, #6
 800813a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	893a      	ldrh	r2, [r7, #8]
 8008140:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008142:	893b      	ldrh	r3, [r7, #8]
 8008144:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800814c:	d104      	bne.n	8008158 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f240 4209 	movw	r2, #1033	@ 0x409
 8008154:	829a      	strh	r2, [r3, #20]
 8008156:	e002      	b.n	800815e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	8b3a      	ldrh	r2, [r7, #24]
 8008162:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008164:	8b3b      	ldrh	r3, [r7, #24]
 8008166:	461a      	mov	r2, r3
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fba5 	bl	80088ba <USBH_CtlReq>
 8008170:	4603      	mov	r3, r0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	460b      	mov	r3, r1
 8008184:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	789b      	ldrb	r3, [r3, #2]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d10f      	bne.n	80081ae <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2205      	movs	r2, #5
 8008198:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	b29a      	uxth	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081ae:	2200      	movs	r2, #0
 80081b0:	2100      	movs	r1, #0
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fb81 	bl	80088ba <USBH_CtlReq>
 80081b8:	4603      	mov	r3, r0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	789b      	ldrb	r3, [r3, #2]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d10e      	bne.n	80081f4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2209      	movs	r2, #9
 80081e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	887a      	ldrh	r2, [r7, #2]
 80081e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081f4:	2200      	movs	r2, #0
 80081f6:	2100      	movs	r1, #0
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fb5e 	bl	80088ba <USBH_CtlReq>
 80081fe:	4603      	mov	r3, r0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	789b      	ldrb	r3, [r3, #2]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d10f      	bne.n	800823c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2203      	movs	r2, #3
 8008226:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	b29a      	uxth	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800823c:	2200      	movs	r2, #0
 800823e:	2100      	movs	r1, #0
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fb3a 	bl	80088ba <USBH_CtlReq>
 8008246:	4603      	mov	r3, r0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	789b      	ldrb	r3, [r3, #2]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d10f      	bne.n	8008284 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008276:	78fb      	ldrb	r3, [r7, #3]
 8008278:	b29a      	uxth	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008284:	2200      	movs	r2, #0
 8008286:	2100      	movs	r1, #0
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fb16 	bl	80088ba <USBH_CtlReq>
 800828e:	4603      	mov	r3, r0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4613      	mov	r3, r2
 80082a4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80082ac:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80082b8:	2302      	movs	r3, #2
 80082ba:	e094      	b.n	80083e6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	781a      	ldrb	r2, [r3, #0]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	785a      	ldrb	r2, [r3, #1]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	3302      	adds	r3, #2
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	3303      	adds	r3, #3
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	021b      	lsls	r3, r3, #8
 80082dc:	b29b      	uxth	r3, r3
 80082de:	4313      	orrs	r3, r2
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	791a      	ldrb	r2, [r3, #4]
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	795a      	ldrb	r2, [r3, #5]
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	799a      	ldrb	r2, [r3, #6]
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	79da      	ldrb	r2, [r3, #7]
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800830c:	2b00      	cmp	r3, #0
 800830e:	d004      	beq.n	800831a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008316:	2b01      	cmp	r3, #1
 8008318:	d11b      	bne.n	8008352 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	79db      	ldrb	r3, [r3, #7]
 800831e:	2b20      	cmp	r3, #32
 8008320:	dc0f      	bgt.n	8008342 <USBH_ParseDevDesc+0xaa>
 8008322:	2b08      	cmp	r3, #8
 8008324:	db0f      	blt.n	8008346 <USBH_ParseDevDesc+0xae>
 8008326:	3b08      	subs	r3, #8
 8008328:	4a32      	ldr	r2, [pc, #200]	@ (80083f4 <USBH_ParseDevDesc+0x15c>)
 800832a:	fa22 f303 	lsr.w	r3, r2, r3
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	bf14      	ite	ne
 8008336:	2301      	movne	r3, #1
 8008338:	2300      	moveq	r3, #0
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d106      	bne.n	800834e <USBH_ParseDevDesc+0xb6>
 8008340:	e001      	b.n	8008346 <USBH_ParseDevDesc+0xae>
 8008342:	2b40      	cmp	r3, #64	@ 0x40
 8008344:	d003      	beq.n	800834e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2208      	movs	r2, #8
 800834a:	71da      	strb	r2, [r3, #7]
        break;
 800834c:	e000      	b.n	8008350 <USBH_ParseDevDesc+0xb8>
        break;
 800834e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008350:	e00e      	b.n	8008370 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008358:	2b02      	cmp	r3, #2
 800835a:	d107      	bne.n	800836c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	79db      	ldrb	r3, [r3, #7]
 8008360:	2b08      	cmp	r3, #8
 8008362:	d005      	beq.n	8008370 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2208      	movs	r2, #8
 8008368:	71da      	strb	r2, [r3, #7]
 800836a:	e001      	b.n	8008370 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800836c:	2303      	movs	r3, #3
 800836e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008370:	88fb      	ldrh	r3, [r7, #6]
 8008372:	2b08      	cmp	r3, #8
 8008374:	d936      	bls.n	80083e4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	3308      	adds	r3, #8
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	3309      	adds	r3, #9
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	b29b      	uxth	r3, r3
 8008388:	4313      	orrs	r3, r2
 800838a:	b29a      	uxth	r2, r3
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	330a      	adds	r3, #10
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	330b      	adds	r3, #11
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	021b      	lsls	r3, r3, #8
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	4313      	orrs	r3, r2
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	330c      	adds	r3, #12
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	330d      	adds	r3, #13
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	4313      	orrs	r3, r2
 80083be:	b29a      	uxth	r2, r3
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	7b9a      	ldrb	r2, [r3, #14]
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	7bda      	ldrb	r2, [r3, #15]
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	7c1a      	ldrb	r2, [r3, #16]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	7c5a      	ldrb	r2, [r3, #17]
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	01000101 	.word	0x01000101

080083f8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08c      	sub	sp, #48	@ 0x30
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4613      	mov	r3, r2
 8008404:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800840c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008414:	2300      	movs	r3, #0
 8008416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008426:	2302      	movs	r3, #2
 8008428:	e0da      	b.n	80085e0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800842e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	2b09      	cmp	r3, #9
 8008434:	d002      	beq.n	800843c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008438:	2209      	movs	r2, #9
 800843a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	781a      	ldrb	r2, [r3, #0]
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	785a      	ldrb	r2, [r3, #1]
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	3302      	adds	r3, #2
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	3303      	adds	r3, #3
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	b29b      	uxth	r3, r3
 800845e:	4313      	orrs	r3, r2
 8008460:	b29b      	uxth	r3, r3
 8008462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008466:	bf28      	it	cs
 8008468:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800846c:	b29a      	uxth	r2, r3
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	791a      	ldrb	r2, [r3, #4]
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	795a      	ldrb	r2, [r3, #5]
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	799a      	ldrb	r2, [r3, #6]
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	79da      	ldrb	r2, [r3, #7]
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	7a1a      	ldrb	r2, [r3, #8]
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800849a:	88fb      	ldrh	r3, [r7, #6]
 800849c:	2b09      	cmp	r3, #9
 800849e:	f240 809d 	bls.w	80085dc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80084a2:	2309      	movs	r3, #9
 80084a4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084aa:	e081      	b.n	80085b0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084ac:	f107 0316 	add.w	r3, r7, #22
 80084b0:	4619      	mov	r1, r3
 80084b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084b4:	f000 f9e7 	bl	8008886 <USBH_GetNextDesc>
 80084b8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80084ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084bc:	785b      	ldrb	r3, [r3, #1]
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d176      	bne.n	80085b0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80084c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b09      	cmp	r3, #9
 80084c8:	d002      	beq.n	80084d0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80084ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084cc:	2209      	movs	r2, #9
 80084ce:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80084d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084d4:	221a      	movs	r2, #26
 80084d6:	fb02 f303 	mul.w	r3, r2, r3
 80084da:	3308      	adds	r3, #8
 80084dc:	6a3a      	ldr	r2, [r7, #32]
 80084de:	4413      	add	r3, r2
 80084e0:	3302      	adds	r3, #2
 80084e2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80084e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084e6:	69f8      	ldr	r0, [r7, #28]
 80084e8:	f000 f87e 	bl	80085e8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084f6:	e043      	b.n	8008580 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084f8:	f107 0316 	add.w	r3, r7, #22
 80084fc:	4619      	mov	r1, r3
 80084fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008500:	f000 f9c1 	bl	8008886 <USBH_GetNextDesc>
 8008504:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008508:	785b      	ldrb	r3, [r3, #1]
 800850a:	2b05      	cmp	r3, #5
 800850c:	d138      	bne.n	8008580 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	795b      	ldrb	r3, [r3, #5]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d113      	bne.n	800853e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800851a:	2b02      	cmp	r3, #2
 800851c:	d003      	beq.n	8008526 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	799b      	ldrb	r3, [r3, #6]
 8008522:	2b03      	cmp	r3, #3
 8008524:	d10b      	bne.n	800853e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	79db      	ldrb	r3, [r3, #7]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10b      	bne.n	8008546 <USBH_ParseCfgDesc+0x14e>
 800852e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	2b09      	cmp	r3, #9
 8008534:	d007      	beq.n	8008546 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008538:	2209      	movs	r2, #9
 800853a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800853c:	e003      	b.n	8008546 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800853e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008540:	2207      	movs	r2, #7
 8008542:	701a      	strb	r2, [r3, #0]
 8008544:	e000      	b.n	8008548 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008546:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800854c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008550:	3201      	adds	r2, #1
 8008552:	00d2      	lsls	r2, r2, #3
 8008554:	211a      	movs	r1, #26
 8008556:	fb01 f303 	mul.w	r3, r1, r3
 800855a:	4413      	add	r3, r2
 800855c:	3308      	adds	r3, #8
 800855e:	6a3a      	ldr	r2, [r7, #32]
 8008560:	4413      	add	r3, r2
 8008562:	3304      	adds	r3, #4
 8008564:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008568:	69b9      	ldr	r1, [r7, #24]
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 f870 	bl	8008650 <USBH_ParseEPDesc>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008576:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800857a:	3301      	adds	r3, #1
 800857c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	791b      	ldrb	r3, [r3, #4]
 8008584:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008588:	429a      	cmp	r2, r3
 800858a:	d204      	bcs.n	8008596 <USBH_ParseCfgDesc+0x19e>
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	885a      	ldrh	r2, [r3, #2]
 8008590:	8afb      	ldrh	r3, [r7, #22]
 8008592:	429a      	cmp	r2, r3
 8008594:	d8b0      	bhi.n	80084f8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	791b      	ldrb	r3, [r3, #4]
 800859a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800859e:	429a      	cmp	r2, r3
 80085a0:	d201      	bcs.n	80085a6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e01c      	b.n	80085e0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80085a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085aa:	3301      	adds	r3, #1
 80085ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d805      	bhi.n	80085c4 <USBH_ParseCfgDesc+0x1cc>
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	885a      	ldrh	r2, [r3, #2]
 80085bc:	8afb      	ldrh	r3, [r7, #22]
 80085be:	429a      	cmp	r2, r3
 80085c0:	f63f af74 	bhi.w	80084ac <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	791b      	ldrb	r3, [r3, #4]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	bf28      	it	cs
 80085cc:	2302      	movcs	r3, #2
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d201      	bcs.n	80085dc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80085d8:	2303      	movs	r3, #3
 80085da:	e001      	b.n	80085e0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80085dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3730      	adds	r7, #48	@ 0x30
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781a      	ldrb	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	785a      	ldrb	r2, [r3, #1]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	789a      	ldrb	r2, [r3, #2]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	78da      	ldrb	r2, [r3, #3]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	3304      	adds	r3, #4
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b02      	cmp	r3, #2
 800861a:	bf28      	it	cs
 800861c:	2302      	movcs	r3, #2
 800861e:	b2da      	uxtb	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	795a      	ldrb	r2, [r3, #5]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	799a      	ldrb	r2, [r3, #6]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	79da      	ldrb	r2, [r3, #7]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	7a1a      	ldrb	r2, [r3, #8]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	721a      	strb	r2, [r3, #8]
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	781a      	ldrb	r2, [r3, #0]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	785a      	ldrb	r2, [r3, #1]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	789a      	ldrb	r2, [r3, #2]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	78da      	ldrb	r2, [r3, #3]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3304      	adds	r3, #4
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	3305      	adds	r3, #5
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	021b      	lsls	r3, r3, #8
 8008690:	b29b      	uxth	r3, r3
 8008692:	4313      	orrs	r3, r2
 8008694:	b29a      	uxth	r2, r3
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	799a      	ldrb	r2, [r3, #6]
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	889b      	ldrh	r3, [r3, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80086ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086b2:	d804      	bhi.n	80086be <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80086b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086bc:	d901      	bls.n	80086c2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80086be:	2303      	movs	r3, #3
 80086c0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d136      	bne.n	800873a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	78db      	ldrb	r3, [r3, #3]
 80086d0:	f003 0303 	and.w	r3, r3, #3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d108      	bne.n	80086ea <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	889b      	ldrh	r3, [r3, #4]
 80086dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086e0:	f240 8097 	bls.w	8008812 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086e4:	2303      	movs	r3, #3
 80086e6:	75fb      	strb	r3, [r7, #23]
 80086e8:	e093      	b.n	8008812 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	78db      	ldrb	r3, [r3, #3]
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d107      	bne.n	8008706 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	889b      	ldrh	r3, [r3, #4]
 80086fa:	2b40      	cmp	r3, #64	@ 0x40
 80086fc:	f240 8089 	bls.w	8008812 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008700:	2303      	movs	r3, #3
 8008702:	75fb      	strb	r3, [r7, #23]
 8008704:	e085      	b.n	8008812 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	78db      	ldrb	r3, [r3, #3]
 800870a:	f003 0303 	and.w	r3, r3, #3
 800870e:	2b01      	cmp	r3, #1
 8008710:	d005      	beq.n	800871e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	78db      	ldrb	r3, [r3, #3]
 8008716:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800871a:	2b03      	cmp	r3, #3
 800871c:	d10a      	bne.n	8008734 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	799b      	ldrb	r3, [r3, #6]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <USBH_ParseEPDesc+0xde>
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	799b      	ldrb	r3, [r3, #6]
 800872a:	2b10      	cmp	r3, #16
 800872c:	d970      	bls.n	8008810 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800872e:	2303      	movs	r3, #3
 8008730:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008732:	e06d      	b.n	8008810 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008734:	2303      	movs	r3, #3
 8008736:	75fb      	strb	r3, [r7, #23]
 8008738:	e06b      	b.n	8008812 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008740:	2b01      	cmp	r3, #1
 8008742:	d13c      	bne.n	80087be <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	78db      	ldrb	r3, [r3, #3]
 8008748:	f003 0303 	and.w	r3, r3, #3
 800874c:	2b02      	cmp	r3, #2
 800874e:	d005      	beq.n	800875c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	78db      	ldrb	r3, [r3, #3]
 8008754:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008758:	2b00      	cmp	r3, #0
 800875a:	d106      	bne.n	800876a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	889b      	ldrh	r3, [r3, #4]
 8008760:	2b40      	cmp	r3, #64	@ 0x40
 8008762:	d956      	bls.n	8008812 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008764:	2303      	movs	r3, #3
 8008766:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008768:	e053      	b.n	8008812 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	78db      	ldrb	r3, [r3, #3]
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	2b01      	cmp	r3, #1
 8008774:	d10e      	bne.n	8008794 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	799b      	ldrb	r3, [r3, #6]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d007      	beq.n	800878e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008782:	2b10      	cmp	r3, #16
 8008784:	d803      	bhi.n	800878e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800878a:	2b40      	cmp	r3, #64	@ 0x40
 800878c:	d941      	bls.n	8008812 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800878e:	2303      	movs	r3, #3
 8008790:	75fb      	strb	r3, [r7, #23]
 8008792:	e03e      	b.n	8008812 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	78db      	ldrb	r3, [r3, #3]
 8008798:	f003 0303 	and.w	r3, r3, #3
 800879c:	2b03      	cmp	r3, #3
 800879e:	d10b      	bne.n	80087b8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	799b      	ldrb	r3, [r3, #6]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d004      	beq.n	80087b2 <USBH_ParseEPDesc+0x162>
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	889b      	ldrh	r3, [r3, #4]
 80087ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087b0:	d32f      	bcc.n	8008812 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087b2:	2303      	movs	r3, #3
 80087b4:	75fb      	strb	r3, [r7, #23]
 80087b6:	e02c      	b.n	8008812 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80087b8:	2303      	movs	r3, #3
 80087ba:	75fb      	strb	r3, [r7, #23]
 80087bc:	e029      	b.n	8008812 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d120      	bne.n	800880a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	78db      	ldrb	r3, [r3, #3]
 80087cc:	f003 0303 	and.w	r3, r3, #3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d106      	bne.n	80087e2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	889b      	ldrh	r3, [r3, #4]
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d01a      	beq.n	8008812 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087dc:	2303      	movs	r3, #3
 80087de:	75fb      	strb	r3, [r7, #23]
 80087e0:	e017      	b.n	8008812 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	78db      	ldrb	r3, [r3, #3]
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d10a      	bne.n	8008804 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	799b      	ldrb	r3, [r3, #6]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <USBH_ParseEPDesc+0x1ae>
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	889b      	ldrh	r3, [r3, #4]
 80087fa:	2b08      	cmp	r3, #8
 80087fc:	d909      	bls.n	8008812 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087fe:	2303      	movs	r3, #3
 8008800:	75fb      	strb	r3, [r7, #23]
 8008802:	e006      	b.n	8008812 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008804:	2303      	movs	r3, #3
 8008806:	75fb      	strb	r3, [r7, #23]
 8008808:	e003      	b.n	8008812 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800880a:	2303      	movs	r3, #3
 800880c:	75fb      	strb	r3, [r7, #23]
 800880e:	e000      	b.n	8008812 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008810:	bf00      	nop
  }

  return status;
 8008812:	7dfb      	ldrb	r3, [r7, #23]
}
 8008814:	4618      	mov	r0, r3
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	4613      	mov	r3, r2
 800882c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3301      	adds	r3, #1
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	2b03      	cmp	r3, #3
 8008836:	d120      	bne.n	800887a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	1e9a      	subs	r2, r3, #2
 800883e:	88fb      	ldrh	r3, [r7, #6]
 8008840:	4293      	cmp	r3, r2
 8008842:	bf28      	it	cs
 8008844:	4613      	movcs	r3, r2
 8008846:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3302      	adds	r3, #2
 800884c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800884e:	2300      	movs	r3, #0
 8008850:	82fb      	strh	r3, [r7, #22]
 8008852:	e00b      	b.n	800886c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008854:	8afb      	ldrh	r3, [r7, #22]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	4413      	add	r3, r2
 800885a:	781a      	ldrb	r2, [r3, #0]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	3301      	adds	r3, #1
 8008864:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008866:	8afb      	ldrh	r3, [r7, #22]
 8008868:	3302      	adds	r3, #2
 800886a:	82fb      	strh	r3, [r7, #22]
 800886c:	8afa      	ldrh	r2, [r7, #22]
 800886e:	8abb      	ldrh	r3, [r7, #20]
 8008870:	429a      	cmp	r2, r3
 8008872:	d3ef      	bcc.n	8008854 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2200      	movs	r2, #0
 8008878:	701a      	strb	r2, [r3, #0]
  }
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008886:	b480      	push	{r7}
 8008888:	b085      	sub	sp, #20
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	7812      	ldrb	r2, [r2, #0]
 8008898:	4413      	add	r3, r2
 800889a:	b29a      	uxth	r2, r3
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4413      	add	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80088ac:	68fb      	ldr	r3, [r7, #12]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b086      	sub	sp, #24
 80088be:	af00      	add	r7, sp, #0
 80088c0:	60f8      	str	r0, [r7, #12]
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	4613      	mov	r3, r2
 80088c6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80088c8:	2301      	movs	r3, #1
 80088ca:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	789b      	ldrb	r3, [r3, #2]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d002      	beq.n	80088da <USBH_CtlReq+0x20>
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d00f      	beq.n	80088f8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80088d8:	e027      	b.n	800892a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	88fa      	ldrh	r2, [r7, #6]
 80088e4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2201      	movs	r2, #1
 80088ea:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2202      	movs	r2, #2
 80088f0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80088f2:	2301      	movs	r3, #1
 80088f4:	75fb      	strb	r3, [r7, #23]
      break;
 80088f6:	e018      	b.n	800892a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 f81b 	bl	8008934 <USBH_HandleControl>
 80088fe:	4603      	mov	r3, r0
 8008900:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <USBH_CtlReq+0x54>
 8008908:	7dfb      	ldrb	r3, [r7, #23]
 800890a:	2b03      	cmp	r3, #3
 800890c:	d106      	bne.n	800891c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	761a      	strb	r2, [r3, #24]
      break;
 800891a:	e005      	b.n	8008928 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d102      	bne.n	8008928 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	709a      	strb	r2, [r3, #2]
      break;
 8008928:	bf00      	nop
  }
  return status;
 800892a:	7dfb      	ldrb	r3, [r7, #23]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3718      	adds	r7, #24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af02      	add	r7, sp, #8
 800893a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008940:	2300      	movs	r3, #0
 8008942:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	7e1b      	ldrb	r3, [r3, #24]
 8008948:	3b01      	subs	r3, #1
 800894a:	2b0a      	cmp	r3, #10
 800894c:	f200 8156 	bhi.w	8008bfc <USBH_HandleControl+0x2c8>
 8008950:	a201      	add	r2, pc, #4	@ (adr r2, 8008958 <USBH_HandleControl+0x24>)
 8008952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008956:	bf00      	nop
 8008958:	08008985 	.word	0x08008985
 800895c:	0800899f 	.word	0x0800899f
 8008960:	08008a09 	.word	0x08008a09
 8008964:	08008a2f 	.word	0x08008a2f
 8008968:	08008a67 	.word	0x08008a67
 800896c:	08008a91 	.word	0x08008a91
 8008970:	08008ae3 	.word	0x08008ae3
 8008974:	08008b05 	.word	0x08008b05
 8008978:	08008b41 	.word	0x08008b41
 800897c:	08008b67 	.word	0x08008b67
 8008980:	08008ba5 	.word	0x08008ba5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f103 0110 	add.w	r1, r3, #16
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	795b      	ldrb	r3, [r3, #5]
 800898e:	461a      	mov	r2, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f943 	bl	8008c1c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	761a      	strb	r2, [r3, #24]
      break;
 800899c:	e139      	b.n	8008c12 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	795b      	ldrb	r3, [r3, #5]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fcc5 	bl	8009334 <USBH_LL_GetURBState>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d11e      	bne.n	80089f2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	7c1b      	ldrb	r3, [r3, #16]
 80089b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80089bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	8adb      	ldrh	r3, [r3, #22]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00a      	beq.n	80089dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80089c6:	7b7b      	ldrb	r3, [r7, #13]
 80089c8:	2b80      	cmp	r3, #128	@ 0x80
 80089ca:	d103      	bne.n	80089d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2203      	movs	r2, #3
 80089d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089d2:	e115      	b.n	8008c00 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2205      	movs	r2, #5
 80089d8:	761a      	strb	r2, [r3, #24]
      break;
 80089da:	e111      	b.n	8008c00 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80089dc:	7b7b      	ldrb	r3, [r7, #13]
 80089de:	2b80      	cmp	r3, #128	@ 0x80
 80089e0:	d103      	bne.n	80089ea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2209      	movs	r2, #9
 80089e6:	761a      	strb	r2, [r3, #24]
      break;
 80089e8:	e10a      	b.n	8008c00 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2207      	movs	r2, #7
 80089ee:	761a      	strb	r2, [r3, #24]
      break;
 80089f0:	e106      	b.n	8008c00 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	d003      	beq.n	8008a00 <USBH_HandleControl+0xcc>
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	f040 8100 	bne.w	8008c00 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	220b      	movs	r2, #11
 8008a04:	761a      	strb	r2, [r3, #24]
      break;
 8008a06:	e0fb      	b.n	8008c00 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6899      	ldr	r1, [r3, #8]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	899a      	ldrh	r2, [r3, #12]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	791b      	ldrb	r3, [r3, #4]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f93a 	bl	8008c9a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2204      	movs	r2, #4
 8008a2a:	761a      	strb	r2, [r3, #24]
      break;
 8008a2c:	e0f1      	b.n	8008c12 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	791b      	ldrb	r3, [r3, #4]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fc7d 	bl	8009334 <USBH_LL_GetURBState>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d102      	bne.n	8008a4a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2209      	movs	r2, #9
 8008a48:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
 8008a4c:	2b05      	cmp	r3, #5
 8008a4e:	d102      	bne.n	8008a56 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008a50:	2303      	movs	r3, #3
 8008a52:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a54:	e0d6      	b.n	8008c04 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	2b04      	cmp	r3, #4
 8008a5a:	f040 80d3 	bne.w	8008c04 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	220b      	movs	r2, #11
 8008a62:	761a      	strb	r2, [r3, #24]
      break;
 8008a64:	e0ce      	b.n	8008c04 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6899      	ldr	r1, [r3, #8]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	899a      	ldrh	r2, [r3, #12]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	795b      	ldrb	r3, [r3, #5]
 8008a72:	2001      	movs	r0, #1
 8008a74:	9000      	str	r0, [sp, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f8ea 	bl	8008c50 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2206      	movs	r2, #6
 8008a8c:	761a      	strb	r2, [r3, #24]
      break;
 8008a8e:	e0c0      	b.n	8008c12 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	795b      	ldrb	r3, [r3, #5]
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fc4c 	bl	8009334 <USBH_LL_GetURBState>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d103      	bne.n	8008aae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2207      	movs	r2, #7
 8008aaa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008aac:	e0ac      	b.n	8008c08 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008aae:	7bbb      	ldrb	r3, [r7, #14]
 8008ab0:	2b05      	cmp	r3, #5
 8008ab2:	d105      	bne.n	8008ac0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	220c      	movs	r2, #12
 8008ab8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008aba:	2303      	movs	r3, #3
 8008abc:	73fb      	strb	r3, [r7, #15]
      break;
 8008abe:	e0a3      	b.n	8008c08 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d103      	bne.n	8008ace <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2205      	movs	r2, #5
 8008aca:	761a      	strb	r2, [r3, #24]
      break;
 8008acc:	e09c      	b.n	8008c08 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	f040 8099 	bne.w	8008c08 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	220b      	movs	r2, #11
 8008ada:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008adc:	2302      	movs	r3, #2
 8008ade:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae0:	e092      	b.n	8008c08 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	791b      	ldrb	r3, [r3, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2100      	movs	r1, #0
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f8d5 	bl	8008c9a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2208      	movs	r2, #8
 8008b00:	761a      	strb	r2, [r3, #24]

      break;
 8008b02:	e086      	b.n	8008c12 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	791b      	ldrb	r3, [r3, #4]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fc12 	bl	8009334 <USBH_LL_GetURBState>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d105      	bne.n	8008b26 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	220d      	movs	r2, #13
 8008b1e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b24:	e072      	b.n	8008c0c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	d103      	bne.n	8008b34 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	220b      	movs	r2, #11
 8008b30:	761a      	strb	r2, [r3, #24]
      break;
 8008b32:	e06b      	b.n	8008c0c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	2b05      	cmp	r3, #5
 8008b38:	d168      	bne.n	8008c0c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b3e:	e065      	b.n	8008c0c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	795b      	ldrb	r3, [r3, #5]
 8008b44:	2201      	movs	r2, #1
 8008b46:	9200      	str	r2, [sp, #0]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f87f 	bl	8008c50 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	220a      	movs	r2, #10
 8008b62:	761a      	strb	r2, [r3, #24]
      break;
 8008b64:	e055      	b.n	8008c12 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	795b      	ldrb	r3, [r3, #5]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fbe1 	bl	8009334 <USBH_LL_GetURBState>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d105      	bne.n	8008b88 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	220d      	movs	r2, #13
 8008b84:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b86:	e043      	b.n	8008c10 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d103      	bne.n	8008b96 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2209      	movs	r2, #9
 8008b92:	761a      	strb	r2, [r3, #24]
      break;
 8008b94:	e03c      	b.n	8008c10 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b04      	cmp	r3, #4
 8008b9a:	d139      	bne.n	8008c10 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	220b      	movs	r2, #11
 8008ba0:	761a      	strb	r2, [r3, #24]
      break;
 8008ba2:	e035      	b.n	8008c10 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	7e5b      	ldrb	r3, [r3, #25]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	765a      	strb	r2, [r3, #25]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7e5b      	ldrb	r3, [r3, #25]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d806      	bhi.n	8008bc6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008bc4:	e025      	b.n	8008c12 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bcc:	2106      	movs	r1, #6
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	795b      	ldrb	r3, [r3, #5]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f90c 	bl	8008dfc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	791b      	ldrb	r3, [r3, #4]
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f906 	bl	8008dfc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8008bfa:	e00a      	b.n	8008c12 <USBH_HandleControl+0x2de>

    default:
      break;
 8008bfc:	bf00      	nop
 8008bfe:	e008      	b.n	8008c12 <USBH_HandleControl+0x2de>
      break;
 8008c00:	bf00      	nop
 8008c02:	e006      	b.n	8008c12 <USBH_HandleControl+0x2de>
      break;
 8008c04:	bf00      	nop
 8008c06:	e004      	b.n	8008c12 <USBH_HandleControl+0x2de>
      break;
 8008c08:	bf00      	nop
 8008c0a:	e002      	b.n	8008c12 <USBH_HandleControl+0x2de>
      break;
 8008c0c:	bf00      	nop
 8008c0e:	e000      	b.n	8008c12 <USBH_HandleControl+0x2de>
      break;
 8008c10:	bf00      	nop
  }

  return status;
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af04      	add	r7, sp, #16
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4613      	mov	r3, r2
 8008c28:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c2a:	79f9      	ldrb	r1, [r7, #7]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	9303      	str	r3, [sp, #12]
 8008c30:	2308      	movs	r3, #8
 8008c32:	9302      	str	r3, [sp, #8]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	2200      	movs	r2, #0
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 fb46 	bl	80092d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b088      	sub	sp, #32
 8008c54:	af04      	add	r7, sp, #16
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	460b      	mov	r3, r1
 8008c60:	80fb      	strh	r3, [r7, #6]
 8008c62:	4613      	mov	r3, r2
 8008c64:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c74:	7979      	ldrb	r1, [r7, #5]
 8008c76:	7e3b      	ldrb	r3, [r7, #24]
 8008c78:	9303      	str	r3, [sp, #12]
 8008c7a:	88fb      	ldrh	r3, [r7, #6]
 8008c7c:	9302      	str	r3, [sp, #8]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	2301      	movs	r3, #1
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	2300      	movs	r3, #0
 8008c88:	2200      	movs	r2, #0
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 fb21 	bl	80092d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b088      	sub	sp, #32
 8008c9e:	af04      	add	r7, sp, #16
 8008ca0:	60f8      	str	r0, [r7, #12]
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	460b      	mov	r3, r1
 8008caa:	80fb      	strh	r3, [r7, #6]
 8008cac:	4613      	mov	r3, r2
 8008cae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cb0:	7979      	ldrb	r1, [r7, #5]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	9303      	str	r3, [sp, #12]
 8008cb6:	88fb      	ldrh	r3, [r7, #6]
 8008cb8:	9302      	str	r3, [sp, #8]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 fb03 	bl	80092d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ccc:	2300      	movs	r3, #0

}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b088      	sub	sp, #32
 8008cda:	af04      	add	r7, sp, #16
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	80fb      	strh	r3, [r7, #6]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cfa:	7979      	ldrb	r1, [r7, #5]
 8008cfc:	7e3b      	ldrb	r3, [r7, #24]
 8008cfe:	9303      	str	r3, [sp, #12]
 8008d00:	88fb      	ldrh	r3, [r7, #6]
 8008d02:	9302      	str	r3, [sp, #8]
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	9301      	str	r3, [sp, #4]
 8008d08:	2301      	movs	r3, #1
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	2200      	movs	r2, #0
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fade 	bl	80092d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af04      	add	r7, sp, #16
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	460b      	mov	r3, r1
 8008d30:	80fb      	strh	r3, [r7, #6]
 8008d32:	4613      	mov	r3, r2
 8008d34:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d36:	7979      	ldrb	r1, [r7, #5]
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9303      	str	r3, [sp, #12]
 8008d3c:	88fb      	ldrh	r3, [r7, #6]
 8008d3e:	9302      	str	r3, [sp, #8]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	2301      	movs	r3, #1
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	2302      	movs	r3, #2
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 fac0 	bl	80092d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af04      	add	r7, sp, #16
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	4608      	mov	r0, r1
 8008d66:	4611      	mov	r1, r2
 8008d68:	461a      	mov	r2, r3
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	70fb      	strb	r3, [r7, #3]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	70bb      	strb	r3, [r7, #2]
 8008d72:	4613      	mov	r3, r2
 8008d74:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d76:	7878      	ldrb	r0, [r7, #1]
 8008d78:	78ba      	ldrb	r2, [r7, #2]
 8008d7a:	78f9      	ldrb	r1, [r7, #3]
 8008d7c:	8b3b      	ldrh	r3, [r7, #24]
 8008d7e:	9302      	str	r3, [sp, #8]
 8008d80:	7d3b      	ldrb	r3, [r7, #20]
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	7c3b      	ldrb	r3, [r7, #16]
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	4603      	mov	r3, r0
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa53 	bl	8009236 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b082      	sub	sp, #8
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	460b      	mov	r3, r1
 8008da4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fa72 	bl	8009294 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f836 	bl	8008e38 <USBH_GetFreePipe>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008dd0:	89fb      	ldrh	r3, [r7, #14]
 8008dd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d00a      	beq.n	8008df0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008dda:	78fa      	ldrb	r2, [r7, #3]
 8008ddc:	89fb      	ldrh	r3, [r7, #14]
 8008dde:	f003 030f 	and.w	r3, r3, #15
 8008de2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	33e0      	adds	r3, #224	@ 0xe0
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008df0:	89fb      	ldrh	r3, [r7, #14]
 8008df2:	b2db      	uxtb	r3, r3
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008e08:	78fb      	ldrb	r3, [r7, #3]
 8008e0a:	2b0f      	cmp	r3, #15
 8008e0c:	d80d      	bhi.n	8008e2a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	33e0      	adds	r3, #224	@ 0xe0
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	78fb      	ldrb	r3, [r7, #3]
 8008e1c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	33e0      	adds	r3, #224	@ 0xe0
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	440b      	add	r3, r1
 8008e28:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]
 8008e48:	e00f      	b.n	8008e6a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	33e0      	adds	r3, #224	@ 0xe0
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d102      	bne.n	8008e64 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	e007      	b.n	8008e74 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	3301      	adds	r3, #1
 8008e68:	73fb      	strb	r3, [r7, #15]
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	2b0f      	cmp	r3, #15
 8008e6e:	d9ec      	bls.n	8008e4a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e84:	2201      	movs	r2, #1
 8008e86:	490e      	ldr	r1, [pc, #56]	@ (8008ec0 <MX_USB_HOST_Init+0x40>)
 8008e88:	480e      	ldr	r0, [pc, #56]	@ (8008ec4 <MX_USB_HOST_Init+0x44>)
 8008e8a:	f7fe fb15 	bl	80074b8 <USBH_Init>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e94:	f7f7 fdb4 	bl	8000a00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008e98:	490b      	ldr	r1, [pc, #44]	@ (8008ec8 <MX_USB_HOST_Init+0x48>)
 8008e9a:	480a      	ldr	r0, [pc, #40]	@ (8008ec4 <MX_USB_HOST_Init+0x44>)
 8008e9c:	f7fe fbb9 	bl	8007612 <USBH_RegisterClass>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008ea6:	f7f7 fdab 	bl	8000a00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008eaa:	4806      	ldr	r0, [pc, #24]	@ (8008ec4 <MX_USB_HOST_Init+0x44>)
 8008eac:	f7fe fc3d 	bl	800772a <USBH_Start>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008eb6:	f7f7 fda3 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008eba:	bf00      	nop
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	08008ee1 	.word	0x08008ee1
 8008ec4:	200005a0 	.word	0x200005a0
 8008ec8:	2000000c 	.word	0x2000000c

08008ecc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008ed0:	4802      	ldr	r0, [pc, #8]	@ (8008edc <MX_USB_HOST_Process+0x10>)
 8008ed2:	f7fe fc3b 	bl	800774c <USBH_Process>
}
 8008ed6:	bf00      	nop
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	200005a0 	.word	0x200005a0

08008ee0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d819      	bhi.n	8008f28 <USBH_UserProcess+0x48>
 8008ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8008efc <USBH_UserProcess+0x1c>)
 8008ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efa:	bf00      	nop
 8008efc:	08008f29 	.word	0x08008f29
 8008f00:	08008f19 	.word	0x08008f19
 8008f04:	08008f29 	.word	0x08008f29
 8008f08:	08008f21 	.word	0x08008f21
 8008f0c:	08008f11 	.word	0x08008f11
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008f10:	4b09      	ldr	r3, [pc, #36]	@ (8008f38 <USBH_UserProcess+0x58>)
 8008f12:	2203      	movs	r2, #3
 8008f14:	701a      	strb	r2, [r3, #0]
  break;
 8008f16:	e008      	b.n	8008f2a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008f18:	4b07      	ldr	r3, [pc, #28]	@ (8008f38 <USBH_UserProcess+0x58>)
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	701a      	strb	r2, [r3, #0]
  break;
 8008f1e:	e004      	b.n	8008f2a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008f20:	4b05      	ldr	r3, [pc, #20]	@ (8008f38 <USBH_UserProcess+0x58>)
 8008f22:	2201      	movs	r2, #1
 8008f24:	701a      	strb	r2, [r3, #0]
  break;
 8008f26:	e000      	b.n	8008f2a <USBH_UserProcess+0x4a>

  default:
  break;
 8008f28:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008f2a:	bf00      	nop
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	20000978 	.word	0x20000978

08008f3c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b08a      	sub	sp, #40	@ 0x28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f44:	f107 0314 	add.w	r3, r7, #20
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]
 8008f4c:	605a      	str	r2, [r3, #4]
 8008f4e:	609a      	str	r2, [r3, #8]
 8008f50:	60da      	str	r2, [r3, #12]
 8008f52:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f5c:	d147      	bne.n	8008fee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f5e:	2300      	movs	r3, #0
 8008f60:	613b      	str	r3, [r7, #16]
 8008f62:	4b25      	ldr	r3, [pc, #148]	@ (8008ff8 <HAL_HCD_MspInit+0xbc>)
 8008f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f66:	4a24      	ldr	r2, [pc, #144]	@ (8008ff8 <HAL_HCD_MspInit+0xbc>)
 8008f68:	f043 0301 	orr.w	r3, r3, #1
 8008f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f6e:	4b22      	ldr	r3, [pc, #136]	@ (8008ff8 <HAL_HCD_MspInit+0xbc>)
 8008f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	613b      	str	r3, [r7, #16]
 8008f78:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f80:	2300      	movs	r3, #0
 8008f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f88:	f107 0314 	add.w	r3, r7, #20
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	481b      	ldr	r0, [pc, #108]	@ (8008ffc <HAL_HCD_MspInit+0xc0>)
 8008f90:	f7f8 fb02 	bl	8001598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f94:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008fa6:	230a      	movs	r3, #10
 8008fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008faa:	f107 0314 	add.w	r3, r7, #20
 8008fae:	4619      	mov	r1, r3
 8008fb0:	4812      	ldr	r0, [pc, #72]	@ (8008ffc <HAL_HCD_MspInit+0xc0>)
 8008fb2:	f7f8 faf1 	bl	8001598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008fb6:	4b10      	ldr	r3, [pc, #64]	@ (8008ff8 <HAL_HCD_MspInit+0xbc>)
 8008fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fba:	4a0f      	ldr	r2, [pc, #60]	@ (8008ff8 <HAL_HCD_MspInit+0xbc>)
 8008fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fc0:	6353      	str	r3, [r2, #52]	@ 0x34
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60fb      	str	r3, [r7, #12]
 8008fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff8 <HAL_HCD_MspInit+0xbc>)
 8008fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fca:	4a0b      	ldr	r2, [pc, #44]	@ (8008ff8 <HAL_HCD_MspInit+0xbc>)
 8008fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8008fd2:	4b09      	ldr	r3, [pc, #36]	@ (8008ff8 <HAL_HCD_MspInit+0xbc>)
 8008fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	2043      	movs	r0, #67	@ 0x43
 8008fe4:	f7f8 faa1 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008fe8:	2043      	movs	r0, #67	@ 0x43
 8008fea:	f7f8 faba 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008fee:	bf00      	nop
 8008ff0:	3728      	adds	r7, #40	@ 0x28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	40023800 	.word	0x40023800
 8008ffc:	40020000 	.word	0x40020000

08009000 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe ff73 	bl	8007efa <USBH_LL_IncTimer>
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe ffab 	bl	8007f86 <USBH_LL_Connect>
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe ffb4 	bl	8007fb4 <USBH_LL_Disconnect>
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
 8009060:	4613      	mov	r3, r2
 8009062:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe ff65 	bl	8007f4e <USBH_LL_PortEnabled>
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe ff65 	bl	8007f6a <USBH_LL_PortDisabled>
}
 80090a0:	bf00      	nop
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d12a      	bne.n	8009110 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80090ba:	4a18      	ldr	r2, [pc, #96]	@ (800911c <USBH_LL_Init+0x74>)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a15      	ldr	r2, [pc, #84]	@ (800911c <USBH_LL_Init+0x74>)
 80090c6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80090ca:	4b14      	ldr	r3, [pc, #80]	@ (800911c <USBH_LL_Init+0x74>)
 80090cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80090d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80090d2:	4b12      	ldr	r3, [pc, #72]	@ (800911c <USBH_LL_Init+0x74>)
 80090d4:	2208      	movs	r2, #8
 80090d6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80090d8:	4b10      	ldr	r3, [pc, #64]	@ (800911c <USBH_LL_Init+0x74>)
 80090da:	2201      	movs	r2, #1
 80090dc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80090de:	4b0f      	ldr	r3, [pc, #60]	@ (800911c <USBH_LL_Init+0x74>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80090e4:	4b0d      	ldr	r3, [pc, #52]	@ (800911c <USBH_LL_Init+0x74>)
 80090e6:	2202      	movs	r2, #2
 80090e8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090ea:	4b0c      	ldr	r3, [pc, #48]	@ (800911c <USBH_LL_Init+0x74>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80090f0:	480a      	ldr	r0, [pc, #40]	@ (800911c <USBH_LL_Init+0x74>)
 80090f2:	f7f8 fc06 	bl	8001902 <HAL_HCD_Init>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80090fc:	f7f7 fc80 	bl	8000a00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009100:	4806      	ldr	r0, [pc, #24]	@ (800911c <USBH_LL_Init+0x74>)
 8009102:	f7f9 f867 	bl	80021d4 <HAL_HCD_GetCurrentFrame>
 8009106:	4603      	mov	r3, r0
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fe fee6 	bl	8007edc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	2000097c 	.word	0x2000097c

08009120 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009136:	4618      	mov	r0, r3
 8009138:	f7f8 ffd4 	bl	80020e4 <HAL_HCD_Start>
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	4618      	mov	r0, r3
 8009144:	f000 f95e 	bl	8009404 <USBH_Get_USB_Status>
 8009148:	4603      	mov	r3, r0
 800914a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800914c:	7bbb      	ldrb	r3, [r7, #14]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b084      	sub	sp, #16
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800916c:	4618      	mov	r0, r3
 800916e:	f7f8 ffdc 	bl	800212a <HAL_HCD_Stop>
 8009172:	4603      	mov	r3, r0
 8009174:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	4618      	mov	r0, r3
 800917a:	f000 f943 	bl	8009404 <USBH_Get_USB_Status>
 800917e:	4603      	mov	r3, r0
 8009180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009182:	7bbb      	ldrb	r3, [r7, #14]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009194:	2301      	movs	r3, #1
 8009196:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800919e:	4618      	mov	r0, r3
 80091a0:	f7f9 f826 	bl	80021f0 <HAL_HCD_GetCurrentSpeed>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d00c      	beq.n	80091c4 <USBH_LL_GetSpeed+0x38>
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d80d      	bhi.n	80091ca <USBH_LL_GetSpeed+0x3e>
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <USBH_LL_GetSpeed+0x2c>
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d003      	beq.n	80091be <USBH_LL_GetSpeed+0x32>
 80091b6:	e008      	b.n	80091ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
    break;
 80091bc:	e008      	b.n	80091d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80091be:	2301      	movs	r3, #1
 80091c0:	73fb      	strb	r3, [r7, #15]
    break;
 80091c2:	e005      	b.n	80091d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80091c4:	2302      	movs	r3, #2
 80091c6:	73fb      	strb	r3, [r7, #15]
    break;
 80091c8:	e002      	b.n	80091d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80091ca:	2301      	movs	r3, #1
 80091cc:	73fb      	strb	r3, [r7, #15]
    break;
 80091ce:	bf00      	nop
  }
  return  speed;
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7f8 ffb7 	bl	8002164 <HAL_HCD_ResetPort>
 80091f6:	4603      	mov	r3, r0
 80091f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 f901 	bl	8009404 <USBH_Get_USB_Status>
 8009202:	4603      	mov	r3, r0
 8009204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009206:	7bbb      	ldrb	r3, [r7, #14]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009222:	78fa      	ldrb	r2, [r7, #3]
 8009224:	4611      	mov	r1, r2
 8009226:	4618      	mov	r0, r3
 8009228:	f7f8 ffbf 	bl	80021aa <HAL_HCD_HC_GetXferCount>
 800922c:	4603      	mov	r3, r0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009236:	b590      	push	{r4, r7, lr}
 8009238:	b089      	sub	sp, #36	@ 0x24
 800923a:	af04      	add	r7, sp, #16
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	4608      	mov	r0, r1
 8009240:	4611      	mov	r1, r2
 8009242:	461a      	mov	r2, r3
 8009244:	4603      	mov	r3, r0
 8009246:	70fb      	strb	r3, [r7, #3]
 8009248:	460b      	mov	r3, r1
 800924a:	70bb      	strb	r3, [r7, #2]
 800924c:	4613      	mov	r3, r2
 800924e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800925e:	787c      	ldrb	r4, [r7, #1]
 8009260:	78ba      	ldrb	r2, [r7, #2]
 8009262:	78f9      	ldrb	r1, [r7, #3]
 8009264:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009266:	9302      	str	r3, [sp, #8]
 8009268:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	4623      	mov	r3, r4
 8009276:	f7f8 fbab 	bl	80019d0 <HAL_HCD_HC_Init>
 800927a:	4603      	mov	r3, r0
 800927c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800927e:	7bfb      	ldrb	r3, [r7, #15]
 8009280:	4618      	mov	r0, r3
 8009282:	f000 f8bf 	bl	8009404 <USBH_Get_USB_Status>
 8009286:	4603      	mov	r3, r0
 8009288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800928a:	7bbb      	ldrb	r3, [r7, #14]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	bd90      	pop	{r4, r7, pc}

08009294 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80092ae:	78fa      	ldrb	r2, [r7, #3]
 80092b0:	4611      	mov	r1, r2
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7f8 fc44 	bl	8001b40 <HAL_HCD_HC_Halt>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f8a0 	bl	8009404 <USBH_Get_USB_Status>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80092d2:	b590      	push	{r4, r7, lr}
 80092d4:	b089      	sub	sp, #36	@ 0x24
 80092d6:	af04      	add	r7, sp, #16
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	4608      	mov	r0, r1
 80092dc:	4611      	mov	r1, r2
 80092de:	461a      	mov	r2, r3
 80092e0:	4603      	mov	r3, r0
 80092e2:	70fb      	strb	r3, [r7, #3]
 80092e4:	460b      	mov	r3, r1
 80092e6:	70bb      	strb	r3, [r7, #2]
 80092e8:	4613      	mov	r3, r2
 80092ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80092fa:	787c      	ldrb	r4, [r7, #1]
 80092fc:	78ba      	ldrb	r2, [r7, #2]
 80092fe:	78f9      	ldrb	r1, [r7, #3]
 8009300:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009304:	9303      	str	r3, [sp, #12]
 8009306:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009308:	9302      	str	r3, [sp, #8]
 800930a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	4623      	mov	r3, r4
 8009316:	f7f8 fc37 	bl	8001b88 <HAL_HCD_HC_SubmitRequest>
 800931a:	4603      	mov	r3, r0
 800931c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800931e:	7bfb      	ldrb	r3, [r7, #15]
 8009320:	4618      	mov	r0, r3
 8009322:	f000 f86f 	bl	8009404 <USBH_Get_USB_Status>
 8009326:	4603      	mov	r3, r0
 8009328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800932a:	7bbb      	ldrb	r3, [r7, #14]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	bd90      	pop	{r4, r7, pc}

08009334 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009346:	78fa      	ldrb	r2, [r7, #3]
 8009348:	4611      	mov	r1, r2
 800934a:	4618      	mov	r0, r3
 800934c:	f7f8 ff18 	bl	8002180 <HAL_HCD_HC_GetURBState>
 8009350:	4603      	mov	r3, r0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b082      	sub	sp, #8
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800936c:	2b01      	cmp	r3, #1
 800936e:	d103      	bne.n	8009378 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	4618      	mov	r0, r3
 8009374:	f000 f872 	bl	800945c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009378:	20c8      	movs	r0, #200	@ 0xc8
 800937a:	f7f7 ffd7 	bl	800132c <HAL_Delay>
  return USBH_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
 8009394:	4613      	mov	r3, r2
 8009396:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800939e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80093a0:	78fa      	ldrb	r2, [r7, #3]
 80093a2:	68f9      	ldr	r1, [r7, #12]
 80093a4:	4613      	mov	r3, r2
 80093a6:	011b      	lsls	r3, r3, #4
 80093a8:	1a9b      	subs	r3, r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	440b      	add	r3, r1
 80093ae:	3317      	adds	r3, #23
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80093b6:	78fa      	ldrb	r2, [r7, #3]
 80093b8:	68f9      	ldr	r1, [r7, #12]
 80093ba:	4613      	mov	r3, r2
 80093bc:	011b      	lsls	r3, r3, #4
 80093be:	1a9b      	subs	r3, r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	440b      	add	r3, r1
 80093c4:	333c      	adds	r3, #60	@ 0x3c
 80093c6:	78ba      	ldrb	r2, [r7, #2]
 80093c8:	701a      	strb	r2, [r3, #0]
 80093ca:	e009      	b.n	80093e0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80093cc:	78fa      	ldrb	r2, [r7, #3]
 80093ce:	68f9      	ldr	r1, [r7, #12]
 80093d0:	4613      	mov	r3, r2
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	1a9b      	subs	r3, r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	440b      	add	r3, r1
 80093da:	333d      	adds	r3, #61	@ 0x3d
 80093dc:	78ba      	ldrb	r2, [r7, #2]
 80093de:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7f7 ff98 	bl	800132c <HAL_Delay>
}
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009412:	79fb      	ldrb	r3, [r7, #7]
 8009414:	2b03      	cmp	r3, #3
 8009416:	d817      	bhi.n	8009448 <USBH_Get_USB_Status+0x44>
 8009418:	a201      	add	r2, pc, #4	@ (adr r2, 8009420 <USBH_Get_USB_Status+0x1c>)
 800941a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941e:	bf00      	nop
 8009420:	08009431 	.word	0x08009431
 8009424:	08009437 	.word	0x08009437
 8009428:	0800943d 	.word	0x0800943d
 800942c:	08009443 	.word	0x08009443
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]
    break;
 8009434:	e00b      	b.n	800944e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009436:	2302      	movs	r3, #2
 8009438:	73fb      	strb	r3, [r7, #15]
    break;
 800943a:	e008      	b.n	800944e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800943c:	2301      	movs	r3, #1
 800943e:	73fb      	strb	r3, [r7, #15]
    break;
 8009440:	e005      	b.n	800944e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009442:	2302      	movs	r3, #2
 8009444:	73fb      	strb	r3, [r7, #15]
    break;
 8009446:	e002      	b.n	800944e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009448:	2302      	movs	r3, #2
 800944a:	73fb      	strb	r3, [r7, #15]
    break;
 800944c:	bf00      	nop
  }
  return usb_status;
 800944e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009466:	79fb      	ldrb	r3, [r7, #7]
 8009468:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d102      	bne.n	8009476 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009470:	2300      	movs	r3, #0
 8009472:	73fb      	strb	r3, [r7, #15]
 8009474:	e001      	b.n	800947a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009476:	2301      	movs	r3, #1
 8009478:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	461a      	mov	r2, r3
 800947e:	2101      	movs	r1, #1
 8009480:	4803      	ldr	r0, [pc, #12]	@ (8009490 <MX_DriverVbusFS+0x34>)
 8009482:	f7f8 fa25 	bl	80018d0 <HAL_GPIO_WritePin>
}
 8009486:	bf00      	nop
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	40020800 	.word	0x40020800

08009494 <malloc>:
 8009494:	4b02      	ldr	r3, [pc, #8]	@ (80094a0 <malloc+0xc>)
 8009496:	4601      	mov	r1, r0
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	f000 b82d 	b.w	80094f8 <_malloc_r>
 800949e:	bf00      	nop
 80094a0:	2000002c 	.word	0x2000002c

080094a4 <free>:
 80094a4:	4b02      	ldr	r3, [pc, #8]	@ (80094b0 <free+0xc>)
 80094a6:	4601      	mov	r1, r0
 80094a8:	6818      	ldr	r0, [r3, #0]
 80094aa:	f000 b93f 	b.w	800972c <_free_r>
 80094ae:	bf00      	nop
 80094b0:	2000002c 	.word	0x2000002c

080094b4 <sbrk_aligned>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	4e0f      	ldr	r6, [pc, #60]	@ (80094f4 <sbrk_aligned+0x40>)
 80094b8:	460c      	mov	r4, r1
 80094ba:	6831      	ldr	r1, [r6, #0]
 80094bc:	4605      	mov	r5, r0
 80094be:	b911      	cbnz	r1, 80094c6 <sbrk_aligned+0x12>
 80094c0:	f000 f8ea 	bl	8009698 <_sbrk_r>
 80094c4:	6030      	str	r0, [r6, #0]
 80094c6:	4621      	mov	r1, r4
 80094c8:	4628      	mov	r0, r5
 80094ca:	f000 f8e5 	bl	8009698 <_sbrk_r>
 80094ce:	1c43      	adds	r3, r0, #1
 80094d0:	d103      	bne.n	80094da <sbrk_aligned+0x26>
 80094d2:	f04f 34ff 	mov.w	r4, #4294967295
 80094d6:	4620      	mov	r0, r4
 80094d8:	bd70      	pop	{r4, r5, r6, pc}
 80094da:	1cc4      	adds	r4, r0, #3
 80094dc:	f024 0403 	bic.w	r4, r4, #3
 80094e0:	42a0      	cmp	r0, r4
 80094e2:	d0f8      	beq.n	80094d6 <sbrk_aligned+0x22>
 80094e4:	1a21      	subs	r1, r4, r0
 80094e6:	4628      	mov	r0, r5
 80094e8:	f000 f8d6 	bl	8009698 <_sbrk_r>
 80094ec:	3001      	adds	r0, #1
 80094ee:	d1f2      	bne.n	80094d6 <sbrk_aligned+0x22>
 80094f0:	e7ef      	b.n	80094d2 <sbrk_aligned+0x1e>
 80094f2:	bf00      	nop
 80094f4:	20000d5c 	.word	0x20000d5c

080094f8 <_malloc_r>:
 80094f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094fc:	1ccd      	adds	r5, r1, #3
 80094fe:	f025 0503 	bic.w	r5, r5, #3
 8009502:	3508      	adds	r5, #8
 8009504:	2d0c      	cmp	r5, #12
 8009506:	bf38      	it	cc
 8009508:	250c      	movcc	r5, #12
 800950a:	2d00      	cmp	r5, #0
 800950c:	4606      	mov	r6, r0
 800950e:	db01      	blt.n	8009514 <_malloc_r+0x1c>
 8009510:	42a9      	cmp	r1, r5
 8009512:	d904      	bls.n	800951e <_malloc_r+0x26>
 8009514:	230c      	movs	r3, #12
 8009516:	6033      	str	r3, [r6, #0]
 8009518:	2000      	movs	r0, #0
 800951a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800951e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095f4 <_malloc_r+0xfc>
 8009522:	f000 f869 	bl	80095f8 <__malloc_lock>
 8009526:	f8d8 3000 	ldr.w	r3, [r8]
 800952a:	461c      	mov	r4, r3
 800952c:	bb44      	cbnz	r4, 8009580 <_malloc_r+0x88>
 800952e:	4629      	mov	r1, r5
 8009530:	4630      	mov	r0, r6
 8009532:	f7ff ffbf 	bl	80094b4 <sbrk_aligned>
 8009536:	1c43      	adds	r3, r0, #1
 8009538:	4604      	mov	r4, r0
 800953a:	d158      	bne.n	80095ee <_malloc_r+0xf6>
 800953c:	f8d8 4000 	ldr.w	r4, [r8]
 8009540:	4627      	mov	r7, r4
 8009542:	2f00      	cmp	r7, #0
 8009544:	d143      	bne.n	80095ce <_malloc_r+0xd6>
 8009546:	2c00      	cmp	r4, #0
 8009548:	d04b      	beq.n	80095e2 <_malloc_r+0xea>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	4639      	mov	r1, r7
 800954e:	4630      	mov	r0, r6
 8009550:	eb04 0903 	add.w	r9, r4, r3
 8009554:	f000 f8a0 	bl	8009698 <_sbrk_r>
 8009558:	4581      	cmp	r9, r0
 800955a:	d142      	bne.n	80095e2 <_malloc_r+0xea>
 800955c:	6821      	ldr	r1, [r4, #0]
 800955e:	1a6d      	subs	r5, r5, r1
 8009560:	4629      	mov	r1, r5
 8009562:	4630      	mov	r0, r6
 8009564:	f7ff ffa6 	bl	80094b4 <sbrk_aligned>
 8009568:	3001      	adds	r0, #1
 800956a:	d03a      	beq.n	80095e2 <_malloc_r+0xea>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	442b      	add	r3, r5
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	f8d8 3000 	ldr.w	r3, [r8]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	bb62      	cbnz	r2, 80095d4 <_malloc_r+0xdc>
 800957a:	f8c8 7000 	str.w	r7, [r8]
 800957e:	e00f      	b.n	80095a0 <_malloc_r+0xa8>
 8009580:	6822      	ldr	r2, [r4, #0]
 8009582:	1b52      	subs	r2, r2, r5
 8009584:	d420      	bmi.n	80095c8 <_malloc_r+0xd0>
 8009586:	2a0b      	cmp	r2, #11
 8009588:	d917      	bls.n	80095ba <_malloc_r+0xc2>
 800958a:	1961      	adds	r1, r4, r5
 800958c:	42a3      	cmp	r3, r4
 800958e:	6025      	str	r5, [r4, #0]
 8009590:	bf18      	it	ne
 8009592:	6059      	strne	r1, [r3, #4]
 8009594:	6863      	ldr	r3, [r4, #4]
 8009596:	bf08      	it	eq
 8009598:	f8c8 1000 	streq.w	r1, [r8]
 800959c:	5162      	str	r2, [r4, r5]
 800959e:	604b      	str	r3, [r1, #4]
 80095a0:	4630      	mov	r0, r6
 80095a2:	f000 f82f 	bl	8009604 <__malloc_unlock>
 80095a6:	f104 000b 	add.w	r0, r4, #11
 80095aa:	1d23      	adds	r3, r4, #4
 80095ac:	f020 0007 	bic.w	r0, r0, #7
 80095b0:	1ac2      	subs	r2, r0, r3
 80095b2:	bf1c      	itt	ne
 80095b4:	1a1b      	subne	r3, r3, r0
 80095b6:	50a3      	strne	r3, [r4, r2]
 80095b8:	e7af      	b.n	800951a <_malloc_r+0x22>
 80095ba:	6862      	ldr	r2, [r4, #4]
 80095bc:	42a3      	cmp	r3, r4
 80095be:	bf0c      	ite	eq
 80095c0:	f8c8 2000 	streq.w	r2, [r8]
 80095c4:	605a      	strne	r2, [r3, #4]
 80095c6:	e7eb      	b.n	80095a0 <_malloc_r+0xa8>
 80095c8:	4623      	mov	r3, r4
 80095ca:	6864      	ldr	r4, [r4, #4]
 80095cc:	e7ae      	b.n	800952c <_malloc_r+0x34>
 80095ce:	463c      	mov	r4, r7
 80095d0:	687f      	ldr	r7, [r7, #4]
 80095d2:	e7b6      	b.n	8009542 <_malloc_r+0x4a>
 80095d4:	461a      	mov	r2, r3
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	42a3      	cmp	r3, r4
 80095da:	d1fb      	bne.n	80095d4 <_malloc_r+0xdc>
 80095dc:	2300      	movs	r3, #0
 80095de:	6053      	str	r3, [r2, #4]
 80095e0:	e7de      	b.n	80095a0 <_malloc_r+0xa8>
 80095e2:	230c      	movs	r3, #12
 80095e4:	6033      	str	r3, [r6, #0]
 80095e6:	4630      	mov	r0, r6
 80095e8:	f000 f80c 	bl	8009604 <__malloc_unlock>
 80095ec:	e794      	b.n	8009518 <_malloc_r+0x20>
 80095ee:	6005      	str	r5, [r0, #0]
 80095f0:	e7d6      	b.n	80095a0 <_malloc_r+0xa8>
 80095f2:	bf00      	nop
 80095f4:	20000d60 	.word	0x20000d60

080095f8 <__malloc_lock>:
 80095f8:	4801      	ldr	r0, [pc, #4]	@ (8009600 <__malloc_lock+0x8>)
 80095fa:	f000 b887 	b.w	800970c <__retarget_lock_acquire_recursive>
 80095fe:	bf00      	nop
 8009600:	20000ea0 	.word	0x20000ea0

08009604 <__malloc_unlock>:
 8009604:	4801      	ldr	r0, [pc, #4]	@ (800960c <__malloc_unlock+0x8>)
 8009606:	f000 b882 	b.w	800970e <__retarget_lock_release_recursive>
 800960a:	bf00      	nop
 800960c:	20000ea0 	.word	0x20000ea0

08009610 <siprintf>:
 8009610:	b40e      	push	{r1, r2, r3}
 8009612:	b510      	push	{r4, lr}
 8009614:	b09d      	sub	sp, #116	@ 0x74
 8009616:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009618:	9002      	str	r0, [sp, #8]
 800961a:	9006      	str	r0, [sp, #24]
 800961c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009620:	480a      	ldr	r0, [pc, #40]	@ (800964c <siprintf+0x3c>)
 8009622:	9107      	str	r1, [sp, #28]
 8009624:	9104      	str	r1, [sp, #16]
 8009626:	490a      	ldr	r1, [pc, #40]	@ (8009650 <siprintf+0x40>)
 8009628:	f853 2b04 	ldr.w	r2, [r3], #4
 800962c:	9105      	str	r1, [sp, #20]
 800962e:	2400      	movs	r4, #0
 8009630:	a902      	add	r1, sp, #8
 8009632:	6800      	ldr	r0, [r0, #0]
 8009634:	9301      	str	r3, [sp, #4]
 8009636:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009638:	f000 f91e 	bl	8009878 <_svfiprintf_r>
 800963c:	9b02      	ldr	r3, [sp, #8]
 800963e:	701c      	strb	r4, [r3, #0]
 8009640:	b01d      	add	sp, #116	@ 0x74
 8009642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009646:	b003      	add	sp, #12
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	2000002c 	.word	0x2000002c
 8009650:	ffff0208 	.word	0xffff0208

08009654 <memmove>:
 8009654:	4288      	cmp	r0, r1
 8009656:	b510      	push	{r4, lr}
 8009658:	eb01 0402 	add.w	r4, r1, r2
 800965c:	d902      	bls.n	8009664 <memmove+0x10>
 800965e:	4284      	cmp	r4, r0
 8009660:	4623      	mov	r3, r4
 8009662:	d807      	bhi.n	8009674 <memmove+0x20>
 8009664:	1e43      	subs	r3, r0, #1
 8009666:	42a1      	cmp	r1, r4
 8009668:	d008      	beq.n	800967c <memmove+0x28>
 800966a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800966e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009672:	e7f8      	b.n	8009666 <memmove+0x12>
 8009674:	4402      	add	r2, r0
 8009676:	4601      	mov	r1, r0
 8009678:	428a      	cmp	r2, r1
 800967a:	d100      	bne.n	800967e <memmove+0x2a>
 800967c:	bd10      	pop	{r4, pc}
 800967e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009686:	e7f7      	b.n	8009678 <memmove+0x24>

08009688 <memset>:
 8009688:	4402      	add	r2, r0
 800968a:	4603      	mov	r3, r0
 800968c:	4293      	cmp	r3, r2
 800968e:	d100      	bne.n	8009692 <memset+0xa>
 8009690:	4770      	bx	lr
 8009692:	f803 1b01 	strb.w	r1, [r3], #1
 8009696:	e7f9      	b.n	800968c <memset+0x4>

08009698 <_sbrk_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d06      	ldr	r5, [pc, #24]	@ (80096b4 <_sbrk_r+0x1c>)
 800969c:	2300      	movs	r3, #0
 800969e:	4604      	mov	r4, r0
 80096a0:	4608      	mov	r0, r1
 80096a2:	602b      	str	r3, [r5, #0]
 80096a4:	f7f7 fd5e 	bl	8001164 <_sbrk>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_sbrk_r+0x1a>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_sbrk_r+0x1a>
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	20000e9c 	.word	0x20000e9c

080096b8 <__errno>:
 80096b8:	4b01      	ldr	r3, [pc, #4]	@ (80096c0 <__errno+0x8>)
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	2000002c 	.word	0x2000002c

080096c4 <__libc_init_array>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	4d0d      	ldr	r5, [pc, #52]	@ (80096fc <__libc_init_array+0x38>)
 80096c8:	4c0d      	ldr	r4, [pc, #52]	@ (8009700 <__libc_init_array+0x3c>)
 80096ca:	1b64      	subs	r4, r4, r5
 80096cc:	10a4      	asrs	r4, r4, #2
 80096ce:	2600      	movs	r6, #0
 80096d0:	42a6      	cmp	r6, r4
 80096d2:	d109      	bne.n	80096e8 <__libc_init_array+0x24>
 80096d4:	4d0b      	ldr	r5, [pc, #44]	@ (8009704 <__libc_init_array+0x40>)
 80096d6:	4c0c      	ldr	r4, [pc, #48]	@ (8009708 <__libc_init_array+0x44>)
 80096d8:	f000 fb8c 	bl	8009df4 <_init>
 80096dc:	1b64      	subs	r4, r4, r5
 80096de:	10a4      	asrs	r4, r4, #2
 80096e0:	2600      	movs	r6, #0
 80096e2:	42a6      	cmp	r6, r4
 80096e4:	d105      	bne.n	80096f2 <__libc_init_array+0x2e>
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ec:	4798      	blx	r3
 80096ee:	3601      	adds	r6, #1
 80096f0:	e7ee      	b.n	80096d0 <__libc_init_array+0xc>
 80096f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f6:	4798      	blx	r3
 80096f8:	3601      	adds	r6, #1
 80096fa:	e7f2      	b.n	80096e2 <__libc_init_array+0x1e>
 80096fc:	0800abd8 	.word	0x0800abd8
 8009700:	0800abd8 	.word	0x0800abd8
 8009704:	0800abd8 	.word	0x0800abd8
 8009708:	0800abdc 	.word	0x0800abdc

0800970c <__retarget_lock_acquire_recursive>:
 800970c:	4770      	bx	lr

0800970e <__retarget_lock_release_recursive>:
 800970e:	4770      	bx	lr

08009710 <memcpy>:
 8009710:	440a      	add	r2, r1
 8009712:	4291      	cmp	r1, r2
 8009714:	f100 33ff 	add.w	r3, r0, #4294967295
 8009718:	d100      	bne.n	800971c <memcpy+0xc>
 800971a:	4770      	bx	lr
 800971c:	b510      	push	{r4, lr}
 800971e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009726:	4291      	cmp	r1, r2
 8009728:	d1f9      	bne.n	800971e <memcpy+0xe>
 800972a:	bd10      	pop	{r4, pc}

0800972c <_free_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4605      	mov	r5, r0
 8009730:	2900      	cmp	r1, #0
 8009732:	d041      	beq.n	80097b8 <_free_r+0x8c>
 8009734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009738:	1f0c      	subs	r4, r1, #4
 800973a:	2b00      	cmp	r3, #0
 800973c:	bfb8      	it	lt
 800973e:	18e4      	addlt	r4, r4, r3
 8009740:	f7ff ff5a 	bl	80095f8 <__malloc_lock>
 8009744:	4a1d      	ldr	r2, [pc, #116]	@ (80097bc <_free_r+0x90>)
 8009746:	6813      	ldr	r3, [r2, #0]
 8009748:	b933      	cbnz	r3, 8009758 <_free_r+0x2c>
 800974a:	6063      	str	r3, [r4, #4]
 800974c:	6014      	str	r4, [r2, #0]
 800974e:	4628      	mov	r0, r5
 8009750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009754:	f7ff bf56 	b.w	8009604 <__malloc_unlock>
 8009758:	42a3      	cmp	r3, r4
 800975a:	d908      	bls.n	800976e <_free_r+0x42>
 800975c:	6820      	ldr	r0, [r4, #0]
 800975e:	1821      	adds	r1, r4, r0
 8009760:	428b      	cmp	r3, r1
 8009762:	bf01      	itttt	eq
 8009764:	6819      	ldreq	r1, [r3, #0]
 8009766:	685b      	ldreq	r3, [r3, #4]
 8009768:	1809      	addeq	r1, r1, r0
 800976a:	6021      	streq	r1, [r4, #0]
 800976c:	e7ed      	b.n	800974a <_free_r+0x1e>
 800976e:	461a      	mov	r2, r3
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	b10b      	cbz	r3, 8009778 <_free_r+0x4c>
 8009774:	42a3      	cmp	r3, r4
 8009776:	d9fa      	bls.n	800976e <_free_r+0x42>
 8009778:	6811      	ldr	r1, [r2, #0]
 800977a:	1850      	adds	r0, r2, r1
 800977c:	42a0      	cmp	r0, r4
 800977e:	d10b      	bne.n	8009798 <_free_r+0x6c>
 8009780:	6820      	ldr	r0, [r4, #0]
 8009782:	4401      	add	r1, r0
 8009784:	1850      	adds	r0, r2, r1
 8009786:	4283      	cmp	r3, r0
 8009788:	6011      	str	r1, [r2, #0]
 800978a:	d1e0      	bne.n	800974e <_free_r+0x22>
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	6053      	str	r3, [r2, #4]
 8009792:	4408      	add	r0, r1
 8009794:	6010      	str	r0, [r2, #0]
 8009796:	e7da      	b.n	800974e <_free_r+0x22>
 8009798:	d902      	bls.n	80097a0 <_free_r+0x74>
 800979a:	230c      	movs	r3, #12
 800979c:	602b      	str	r3, [r5, #0]
 800979e:	e7d6      	b.n	800974e <_free_r+0x22>
 80097a0:	6820      	ldr	r0, [r4, #0]
 80097a2:	1821      	adds	r1, r4, r0
 80097a4:	428b      	cmp	r3, r1
 80097a6:	bf04      	itt	eq
 80097a8:	6819      	ldreq	r1, [r3, #0]
 80097aa:	685b      	ldreq	r3, [r3, #4]
 80097ac:	6063      	str	r3, [r4, #4]
 80097ae:	bf04      	itt	eq
 80097b0:	1809      	addeq	r1, r1, r0
 80097b2:	6021      	streq	r1, [r4, #0]
 80097b4:	6054      	str	r4, [r2, #4]
 80097b6:	e7ca      	b.n	800974e <_free_r+0x22>
 80097b8:	bd38      	pop	{r3, r4, r5, pc}
 80097ba:	bf00      	nop
 80097bc:	20000d60 	.word	0x20000d60

080097c0 <__ssputs_r>:
 80097c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c4:	688e      	ldr	r6, [r1, #8]
 80097c6:	461f      	mov	r7, r3
 80097c8:	42be      	cmp	r6, r7
 80097ca:	680b      	ldr	r3, [r1, #0]
 80097cc:	4682      	mov	sl, r0
 80097ce:	460c      	mov	r4, r1
 80097d0:	4690      	mov	r8, r2
 80097d2:	d82d      	bhi.n	8009830 <__ssputs_r+0x70>
 80097d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097dc:	d026      	beq.n	800982c <__ssputs_r+0x6c>
 80097de:	6965      	ldr	r5, [r4, #20]
 80097e0:	6909      	ldr	r1, [r1, #16]
 80097e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097e6:	eba3 0901 	sub.w	r9, r3, r1
 80097ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097ee:	1c7b      	adds	r3, r7, #1
 80097f0:	444b      	add	r3, r9
 80097f2:	106d      	asrs	r5, r5, #1
 80097f4:	429d      	cmp	r5, r3
 80097f6:	bf38      	it	cc
 80097f8:	461d      	movcc	r5, r3
 80097fa:	0553      	lsls	r3, r2, #21
 80097fc:	d527      	bpl.n	800984e <__ssputs_r+0x8e>
 80097fe:	4629      	mov	r1, r5
 8009800:	f7ff fe7a 	bl	80094f8 <_malloc_r>
 8009804:	4606      	mov	r6, r0
 8009806:	b360      	cbz	r0, 8009862 <__ssputs_r+0xa2>
 8009808:	6921      	ldr	r1, [r4, #16]
 800980a:	464a      	mov	r2, r9
 800980c:	f7ff ff80 	bl	8009710 <memcpy>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800981a:	81a3      	strh	r3, [r4, #12]
 800981c:	6126      	str	r6, [r4, #16]
 800981e:	6165      	str	r5, [r4, #20]
 8009820:	444e      	add	r6, r9
 8009822:	eba5 0509 	sub.w	r5, r5, r9
 8009826:	6026      	str	r6, [r4, #0]
 8009828:	60a5      	str	r5, [r4, #8]
 800982a:	463e      	mov	r6, r7
 800982c:	42be      	cmp	r6, r7
 800982e:	d900      	bls.n	8009832 <__ssputs_r+0x72>
 8009830:	463e      	mov	r6, r7
 8009832:	6820      	ldr	r0, [r4, #0]
 8009834:	4632      	mov	r2, r6
 8009836:	4641      	mov	r1, r8
 8009838:	f7ff ff0c 	bl	8009654 <memmove>
 800983c:	68a3      	ldr	r3, [r4, #8]
 800983e:	1b9b      	subs	r3, r3, r6
 8009840:	60a3      	str	r3, [r4, #8]
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	4433      	add	r3, r6
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	2000      	movs	r0, #0
 800984a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800984e:	462a      	mov	r2, r5
 8009850:	f000 fa9a 	bl	8009d88 <_realloc_r>
 8009854:	4606      	mov	r6, r0
 8009856:	2800      	cmp	r0, #0
 8009858:	d1e0      	bne.n	800981c <__ssputs_r+0x5c>
 800985a:	6921      	ldr	r1, [r4, #16]
 800985c:	4650      	mov	r0, sl
 800985e:	f7ff ff65 	bl	800972c <_free_r>
 8009862:	230c      	movs	r3, #12
 8009864:	f8ca 3000 	str.w	r3, [sl]
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800986e:	81a3      	strh	r3, [r4, #12]
 8009870:	f04f 30ff 	mov.w	r0, #4294967295
 8009874:	e7e9      	b.n	800984a <__ssputs_r+0x8a>
	...

08009878 <_svfiprintf_r>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	4698      	mov	r8, r3
 800987e:	898b      	ldrh	r3, [r1, #12]
 8009880:	061b      	lsls	r3, r3, #24
 8009882:	b09d      	sub	sp, #116	@ 0x74
 8009884:	4607      	mov	r7, r0
 8009886:	460d      	mov	r5, r1
 8009888:	4614      	mov	r4, r2
 800988a:	d510      	bpl.n	80098ae <_svfiprintf_r+0x36>
 800988c:	690b      	ldr	r3, [r1, #16]
 800988e:	b973      	cbnz	r3, 80098ae <_svfiprintf_r+0x36>
 8009890:	2140      	movs	r1, #64	@ 0x40
 8009892:	f7ff fe31 	bl	80094f8 <_malloc_r>
 8009896:	6028      	str	r0, [r5, #0]
 8009898:	6128      	str	r0, [r5, #16]
 800989a:	b930      	cbnz	r0, 80098aa <_svfiprintf_r+0x32>
 800989c:	230c      	movs	r3, #12
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	f04f 30ff 	mov.w	r0, #4294967295
 80098a4:	b01d      	add	sp, #116	@ 0x74
 80098a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098aa:	2340      	movs	r3, #64	@ 0x40
 80098ac:	616b      	str	r3, [r5, #20]
 80098ae:	2300      	movs	r3, #0
 80098b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80098b2:	2320      	movs	r3, #32
 80098b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80098bc:	2330      	movs	r3, #48	@ 0x30
 80098be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a5c <_svfiprintf_r+0x1e4>
 80098c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098c6:	f04f 0901 	mov.w	r9, #1
 80098ca:	4623      	mov	r3, r4
 80098cc:	469a      	mov	sl, r3
 80098ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098d2:	b10a      	cbz	r2, 80098d8 <_svfiprintf_r+0x60>
 80098d4:	2a25      	cmp	r2, #37	@ 0x25
 80098d6:	d1f9      	bne.n	80098cc <_svfiprintf_r+0x54>
 80098d8:	ebba 0b04 	subs.w	fp, sl, r4
 80098dc:	d00b      	beq.n	80098f6 <_svfiprintf_r+0x7e>
 80098de:	465b      	mov	r3, fp
 80098e0:	4622      	mov	r2, r4
 80098e2:	4629      	mov	r1, r5
 80098e4:	4638      	mov	r0, r7
 80098e6:	f7ff ff6b 	bl	80097c0 <__ssputs_r>
 80098ea:	3001      	adds	r0, #1
 80098ec:	f000 80a7 	beq.w	8009a3e <_svfiprintf_r+0x1c6>
 80098f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098f2:	445a      	add	r2, fp
 80098f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80098f6:	f89a 3000 	ldrb.w	r3, [sl]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 809f 	beq.w	8009a3e <_svfiprintf_r+0x1c6>
 8009900:	2300      	movs	r3, #0
 8009902:	f04f 32ff 	mov.w	r2, #4294967295
 8009906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800990a:	f10a 0a01 	add.w	sl, sl, #1
 800990e:	9304      	str	r3, [sp, #16]
 8009910:	9307      	str	r3, [sp, #28]
 8009912:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009916:	931a      	str	r3, [sp, #104]	@ 0x68
 8009918:	4654      	mov	r4, sl
 800991a:	2205      	movs	r2, #5
 800991c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009920:	484e      	ldr	r0, [pc, #312]	@ (8009a5c <_svfiprintf_r+0x1e4>)
 8009922:	f7f6 fc55 	bl	80001d0 <memchr>
 8009926:	9a04      	ldr	r2, [sp, #16]
 8009928:	b9d8      	cbnz	r0, 8009962 <_svfiprintf_r+0xea>
 800992a:	06d0      	lsls	r0, r2, #27
 800992c:	bf44      	itt	mi
 800992e:	2320      	movmi	r3, #32
 8009930:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009934:	0711      	lsls	r1, r2, #28
 8009936:	bf44      	itt	mi
 8009938:	232b      	movmi	r3, #43	@ 0x2b
 800993a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800993e:	f89a 3000 	ldrb.w	r3, [sl]
 8009942:	2b2a      	cmp	r3, #42	@ 0x2a
 8009944:	d015      	beq.n	8009972 <_svfiprintf_r+0xfa>
 8009946:	9a07      	ldr	r2, [sp, #28]
 8009948:	4654      	mov	r4, sl
 800994a:	2000      	movs	r0, #0
 800994c:	f04f 0c0a 	mov.w	ip, #10
 8009950:	4621      	mov	r1, r4
 8009952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009956:	3b30      	subs	r3, #48	@ 0x30
 8009958:	2b09      	cmp	r3, #9
 800995a:	d94b      	bls.n	80099f4 <_svfiprintf_r+0x17c>
 800995c:	b1b0      	cbz	r0, 800998c <_svfiprintf_r+0x114>
 800995e:	9207      	str	r2, [sp, #28]
 8009960:	e014      	b.n	800998c <_svfiprintf_r+0x114>
 8009962:	eba0 0308 	sub.w	r3, r0, r8
 8009966:	fa09 f303 	lsl.w	r3, r9, r3
 800996a:	4313      	orrs	r3, r2
 800996c:	9304      	str	r3, [sp, #16]
 800996e:	46a2      	mov	sl, r4
 8009970:	e7d2      	b.n	8009918 <_svfiprintf_r+0xa0>
 8009972:	9b03      	ldr	r3, [sp, #12]
 8009974:	1d19      	adds	r1, r3, #4
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	9103      	str	r1, [sp, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	bfbb      	ittet	lt
 800997e:	425b      	neglt	r3, r3
 8009980:	f042 0202 	orrlt.w	r2, r2, #2
 8009984:	9307      	strge	r3, [sp, #28]
 8009986:	9307      	strlt	r3, [sp, #28]
 8009988:	bfb8      	it	lt
 800998a:	9204      	strlt	r2, [sp, #16]
 800998c:	7823      	ldrb	r3, [r4, #0]
 800998e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009990:	d10a      	bne.n	80099a8 <_svfiprintf_r+0x130>
 8009992:	7863      	ldrb	r3, [r4, #1]
 8009994:	2b2a      	cmp	r3, #42	@ 0x2a
 8009996:	d132      	bne.n	80099fe <_svfiprintf_r+0x186>
 8009998:	9b03      	ldr	r3, [sp, #12]
 800999a:	1d1a      	adds	r2, r3, #4
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	9203      	str	r2, [sp, #12]
 80099a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099a4:	3402      	adds	r4, #2
 80099a6:	9305      	str	r3, [sp, #20]
 80099a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a6c <_svfiprintf_r+0x1f4>
 80099ac:	7821      	ldrb	r1, [r4, #0]
 80099ae:	2203      	movs	r2, #3
 80099b0:	4650      	mov	r0, sl
 80099b2:	f7f6 fc0d 	bl	80001d0 <memchr>
 80099b6:	b138      	cbz	r0, 80099c8 <_svfiprintf_r+0x150>
 80099b8:	9b04      	ldr	r3, [sp, #16]
 80099ba:	eba0 000a 	sub.w	r0, r0, sl
 80099be:	2240      	movs	r2, #64	@ 0x40
 80099c0:	4082      	lsls	r2, r0
 80099c2:	4313      	orrs	r3, r2
 80099c4:	3401      	adds	r4, #1
 80099c6:	9304      	str	r3, [sp, #16]
 80099c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099cc:	4824      	ldr	r0, [pc, #144]	@ (8009a60 <_svfiprintf_r+0x1e8>)
 80099ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099d2:	2206      	movs	r2, #6
 80099d4:	f7f6 fbfc 	bl	80001d0 <memchr>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d036      	beq.n	8009a4a <_svfiprintf_r+0x1d2>
 80099dc:	4b21      	ldr	r3, [pc, #132]	@ (8009a64 <_svfiprintf_r+0x1ec>)
 80099de:	bb1b      	cbnz	r3, 8009a28 <_svfiprintf_r+0x1b0>
 80099e0:	9b03      	ldr	r3, [sp, #12]
 80099e2:	3307      	adds	r3, #7
 80099e4:	f023 0307 	bic.w	r3, r3, #7
 80099e8:	3308      	adds	r3, #8
 80099ea:	9303      	str	r3, [sp, #12]
 80099ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ee:	4433      	add	r3, r6
 80099f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80099f2:	e76a      	b.n	80098ca <_svfiprintf_r+0x52>
 80099f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80099f8:	460c      	mov	r4, r1
 80099fa:	2001      	movs	r0, #1
 80099fc:	e7a8      	b.n	8009950 <_svfiprintf_r+0xd8>
 80099fe:	2300      	movs	r3, #0
 8009a00:	3401      	adds	r4, #1
 8009a02:	9305      	str	r3, [sp, #20]
 8009a04:	4619      	mov	r1, r3
 8009a06:	f04f 0c0a 	mov.w	ip, #10
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a10:	3a30      	subs	r2, #48	@ 0x30
 8009a12:	2a09      	cmp	r2, #9
 8009a14:	d903      	bls.n	8009a1e <_svfiprintf_r+0x1a6>
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d0c6      	beq.n	80099a8 <_svfiprintf_r+0x130>
 8009a1a:	9105      	str	r1, [sp, #20]
 8009a1c:	e7c4      	b.n	80099a8 <_svfiprintf_r+0x130>
 8009a1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a22:	4604      	mov	r4, r0
 8009a24:	2301      	movs	r3, #1
 8009a26:	e7f0      	b.n	8009a0a <_svfiprintf_r+0x192>
 8009a28:	ab03      	add	r3, sp, #12
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	462a      	mov	r2, r5
 8009a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a68 <_svfiprintf_r+0x1f0>)
 8009a30:	a904      	add	r1, sp, #16
 8009a32:	4638      	mov	r0, r7
 8009a34:	f3af 8000 	nop.w
 8009a38:	1c42      	adds	r2, r0, #1
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	d1d6      	bne.n	80099ec <_svfiprintf_r+0x174>
 8009a3e:	89ab      	ldrh	r3, [r5, #12]
 8009a40:	065b      	lsls	r3, r3, #25
 8009a42:	f53f af2d 	bmi.w	80098a0 <_svfiprintf_r+0x28>
 8009a46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a48:	e72c      	b.n	80098a4 <_svfiprintf_r+0x2c>
 8009a4a:	ab03      	add	r3, sp, #12
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	462a      	mov	r2, r5
 8009a50:	4b05      	ldr	r3, [pc, #20]	@ (8009a68 <_svfiprintf_r+0x1f0>)
 8009a52:	a904      	add	r1, sp, #16
 8009a54:	4638      	mov	r0, r7
 8009a56:	f000 f879 	bl	8009b4c <_printf_i>
 8009a5a:	e7ed      	b.n	8009a38 <_svfiprintf_r+0x1c0>
 8009a5c:	0800ab9c 	.word	0x0800ab9c
 8009a60:	0800aba6 	.word	0x0800aba6
 8009a64:	00000000 	.word	0x00000000
 8009a68:	080097c1 	.word	0x080097c1
 8009a6c:	0800aba2 	.word	0x0800aba2

08009a70 <_printf_common>:
 8009a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a74:	4616      	mov	r6, r2
 8009a76:	4698      	mov	r8, r3
 8009a78:	688a      	ldr	r2, [r1, #8]
 8009a7a:	690b      	ldr	r3, [r1, #16]
 8009a7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a80:	4293      	cmp	r3, r2
 8009a82:	bfb8      	it	lt
 8009a84:	4613      	movlt	r3, r2
 8009a86:	6033      	str	r3, [r6, #0]
 8009a88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	460c      	mov	r4, r1
 8009a90:	b10a      	cbz	r2, 8009a96 <_printf_common+0x26>
 8009a92:	3301      	adds	r3, #1
 8009a94:	6033      	str	r3, [r6, #0]
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	0699      	lsls	r1, r3, #26
 8009a9a:	bf42      	ittt	mi
 8009a9c:	6833      	ldrmi	r3, [r6, #0]
 8009a9e:	3302      	addmi	r3, #2
 8009aa0:	6033      	strmi	r3, [r6, #0]
 8009aa2:	6825      	ldr	r5, [r4, #0]
 8009aa4:	f015 0506 	ands.w	r5, r5, #6
 8009aa8:	d106      	bne.n	8009ab8 <_printf_common+0x48>
 8009aaa:	f104 0a19 	add.w	sl, r4, #25
 8009aae:	68e3      	ldr	r3, [r4, #12]
 8009ab0:	6832      	ldr	r2, [r6, #0]
 8009ab2:	1a9b      	subs	r3, r3, r2
 8009ab4:	42ab      	cmp	r3, r5
 8009ab6:	dc26      	bgt.n	8009b06 <_printf_common+0x96>
 8009ab8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009abc:	6822      	ldr	r2, [r4, #0]
 8009abe:	3b00      	subs	r3, #0
 8009ac0:	bf18      	it	ne
 8009ac2:	2301      	movne	r3, #1
 8009ac4:	0692      	lsls	r2, r2, #26
 8009ac6:	d42b      	bmi.n	8009b20 <_printf_common+0xb0>
 8009ac8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009acc:	4641      	mov	r1, r8
 8009ace:	4638      	mov	r0, r7
 8009ad0:	47c8      	blx	r9
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d01e      	beq.n	8009b14 <_printf_common+0xa4>
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	6922      	ldr	r2, [r4, #16]
 8009ada:	f003 0306 	and.w	r3, r3, #6
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	bf02      	ittt	eq
 8009ae2:	68e5      	ldreq	r5, [r4, #12]
 8009ae4:	6833      	ldreq	r3, [r6, #0]
 8009ae6:	1aed      	subeq	r5, r5, r3
 8009ae8:	68a3      	ldr	r3, [r4, #8]
 8009aea:	bf0c      	ite	eq
 8009aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009af0:	2500      	movne	r5, #0
 8009af2:	4293      	cmp	r3, r2
 8009af4:	bfc4      	itt	gt
 8009af6:	1a9b      	subgt	r3, r3, r2
 8009af8:	18ed      	addgt	r5, r5, r3
 8009afa:	2600      	movs	r6, #0
 8009afc:	341a      	adds	r4, #26
 8009afe:	42b5      	cmp	r5, r6
 8009b00:	d11a      	bne.n	8009b38 <_printf_common+0xc8>
 8009b02:	2000      	movs	r0, #0
 8009b04:	e008      	b.n	8009b18 <_printf_common+0xa8>
 8009b06:	2301      	movs	r3, #1
 8009b08:	4652      	mov	r2, sl
 8009b0a:	4641      	mov	r1, r8
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	47c8      	blx	r9
 8009b10:	3001      	adds	r0, #1
 8009b12:	d103      	bne.n	8009b1c <_printf_common+0xac>
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295
 8009b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b1c:	3501      	adds	r5, #1
 8009b1e:	e7c6      	b.n	8009aae <_printf_common+0x3e>
 8009b20:	18e1      	adds	r1, r4, r3
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	2030      	movs	r0, #48	@ 0x30
 8009b26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b2a:	4422      	add	r2, r4
 8009b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b34:	3302      	adds	r3, #2
 8009b36:	e7c7      	b.n	8009ac8 <_printf_common+0x58>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	4641      	mov	r1, r8
 8009b3e:	4638      	mov	r0, r7
 8009b40:	47c8      	blx	r9
 8009b42:	3001      	adds	r0, #1
 8009b44:	d0e6      	beq.n	8009b14 <_printf_common+0xa4>
 8009b46:	3601      	adds	r6, #1
 8009b48:	e7d9      	b.n	8009afe <_printf_common+0x8e>
	...

08009b4c <_printf_i>:
 8009b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b50:	7e0f      	ldrb	r7, [r1, #24]
 8009b52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b54:	2f78      	cmp	r7, #120	@ 0x78
 8009b56:	4691      	mov	r9, r2
 8009b58:	4680      	mov	r8, r0
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	469a      	mov	sl, r3
 8009b5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b62:	d807      	bhi.n	8009b74 <_printf_i+0x28>
 8009b64:	2f62      	cmp	r7, #98	@ 0x62
 8009b66:	d80a      	bhi.n	8009b7e <_printf_i+0x32>
 8009b68:	2f00      	cmp	r7, #0
 8009b6a:	f000 80d1 	beq.w	8009d10 <_printf_i+0x1c4>
 8009b6e:	2f58      	cmp	r7, #88	@ 0x58
 8009b70:	f000 80b8 	beq.w	8009ce4 <_printf_i+0x198>
 8009b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b7c:	e03a      	b.n	8009bf4 <_printf_i+0xa8>
 8009b7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b82:	2b15      	cmp	r3, #21
 8009b84:	d8f6      	bhi.n	8009b74 <_printf_i+0x28>
 8009b86:	a101      	add	r1, pc, #4	@ (adr r1, 8009b8c <_printf_i+0x40>)
 8009b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b8c:	08009be5 	.word	0x08009be5
 8009b90:	08009bf9 	.word	0x08009bf9
 8009b94:	08009b75 	.word	0x08009b75
 8009b98:	08009b75 	.word	0x08009b75
 8009b9c:	08009b75 	.word	0x08009b75
 8009ba0:	08009b75 	.word	0x08009b75
 8009ba4:	08009bf9 	.word	0x08009bf9
 8009ba8:	08009b75 	.word	0x08009b75
 8009bac:	08009b75 	.word	0x08009b75
 8009bb0:	08009b75 	.word	0x08009b75
 8009bb4:	08009b75 	.word	0x08009b75
 8009bb8:	08009cf7 	.word	0x08009cf7
 8009bbc:	08009c23 	.word	0x08009c23
 8009bc0:	08009cb1 	.word	0x08009cb1
 8009bc4:	08009b75 	.word	0x08009b75
 8009bc8:	08009b75 	.word	0x08009b75
 8009bcc:	08009d19 	.word	0x08009d19
 8009bd0:	08009b75 	.word	0x08009b75
 8009bd4:	08009c23 	.word	0x08009c23
 8009bd8:	08009b75 	.word	0x08009b75
 8009bdc:	08009b75 	.word	0x08009b75
 8009be0:	08009cb9 	.word	0x08009cb9
 8009be4:	6833      	ldr	r3, [r6, #0]
 8009be6:	1d1a      	adds	r2, r3, #4
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	6032      	str	r2, [r6, #0]
 8009bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e09c      	b.n	8009d32 <_printf_i+0x1e6>
 8009bf8:	6833      	ldr	r3, [r6, #0]
 8009bfa:	6820      	ldr	r0, [r4, #0]
 8009bfc:	1d19      	adds	r1, r3, #4
 8009bfe:	6031      	str	r1, [r6, #0]
 8009c00:	0606      	lsls	r6, r0, #24
 8009c02:	d501      	bpl.n	8009c08 <_printf_i+0xbc>
 8009c04:	681d      	ldr	r5, [r3, #0]
 8009c06:	e003      	b.n	8009c10 <_printf_i+0xc4>
 8009c08:	0645      	lsls	r5, r0, #25
 8009c0a:	d5fb      	bpl.n	8009c04 <_printf_i+0xb8>
 8009c0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c10:	2d00      	cmp	r5, #0
 8009c12:	da03      	bge.n	8009c1c <_printf_i+0xd0>
 8009c14:	232d      	movs	r3, #45	@ 0x2d
 8009c16:	426d      	negs	r5, r5
 8009c18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c1c:	4858      	ldr	r0, [pc, #352]	@ (8009d80 <_printf_i+0x234>)
 8009c1e:	230a      	movs	r3, #10
 8009c20:	e011      	b.n	8009c46 <_printf_i+0xfa>
 8009c22:	6821      	ldr	r1, [r4, #0]
 8009c24:	6833      	ldr	r3, [r6, #0]
 8009c26:	0608      	lsls	r0, r1, #24
 8009c28:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c2c:	d402      	bmi.n	8009c34 <_printf_i+0xe8>
 8009c2e:	0649      	lsls	r1, r1, #25
 8009c30:	bf48      	it	mi
 8009c32:	b2ad      	uxthmi	r5, r5
 8009c34:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c36:	4852      	ldr	r0, [pc, #328]	@ (8009d80 <_printf_i+0x234>)
 8009c38:	6033      	str	r3, [r6, #0]
 8009c3a:	bf14      	ite	ne
 8009c3c:	230a      	movne	r3, #10
 8009c3e:	2308      	moveq	r3, #8
 8009c40:	2100      	movs	r1, #0
 8009c42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c46:	6866      	ldr	r6, [r4, #4]
 8009c48:	60a6      	str	r6, [r4, #8]
 8009c4a:	2e00      	cmp	r6, #0
 8009c4c:	db05      	blt.n	8009c5a <_printf_i+0x10e>
 8009c4e:	6821      	ldr	r1, [r4, #0]
 8009c50:	432e      	orrs	r6, r5
 8009c52:	f021 0104 	bic.w	r1, r1, #4
 8009c56:	6021      	str	r1, [r4, #0]
 8009c58:	d04b      	beq.n	8009cf2 <_printf_i+0x1a6>
 8009c5a:	4616      	mov	r6, r2
 8009c5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c60:	fb03 5711 	mls	r7, r3, r1, r5
 8009c64:	5dc7      	ldrb	r7, [r0, r7]
 8009c66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c6a:	462f      	mov	r7, r5
 8009c6c:	42bb      	cmp	r3, r7
 8009c6e:	460d      	mov	r5, r1
 8009c70:	d9f4      	bls.n	8009c5c <_printf_i+0x110>
 8009c72:	2b08      	cmp	r3, #8
 8009c74:	d10b      	bne.n	8009c8e <_printf_i+0x142>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	07df      	lsls	r7, r3, #31
 8009c7a:	d508      	bpl.n	8009c8e <_printf_i+0x142>
 8009c7c:	6923      	ldr	r3, [r4, #16]
 8009c7e:	6861      	ldr	r1, [r4, #4]
 8009c80:	4299      	cmp	r1, r3
 8009c82:	bfde      	ittt	le
 8009c84:	2330      	movle	r3, #48	@ 0x30
 8009c86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c8e:	1b92      	subs	r2, r2, r6
 8009c90:	6122      	str	r2, [r4, #16]
 8009c92:	f8cd a000 	str.w	sl, [sp]
 8009c96:	464b      	mov	r3, r9
 8009c98:	aa03      	add	r2, sp, #12
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4640      	mov	r0, r8
 8009c9e:	f7ff fee7 	bl	8009a70 <_printf_common>
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d14a      	bne.n	8009d3c <_printf_i+0x1f0>
 8009ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8009caa:	b004      	add	sp, #16
 8009cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	f043 0320 	orr.w	r3, r3, #32
 8009cb6:	6023      	str	r3, [r4, #0]
 8009cb8:	4832      	ldr	r0, [pc, #200]	@ (8009d84 <_printf_i+0x238>)
 8009cba:	2778      	movs	r7, #120	@ 0x78
 8009cbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	6831      	ldr	r1, [r6, #0]
 8009cc4:	061f      	lsls	r7, r3, #24
 8009cc6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009cca:	d402      	bmi.n	8009cd2 <_printf_i+0x186>
 8009ccc:	065f      	lsls	r7, r3, #25
 8009cce:	bf48      	it	mi
 8009cd0:	b2ad      	uxthmi	r5, r5
 8009cd2:	6031      	str	r1, [r6, #0]
 8009cd4:	07d9      	lsls	r1, r3, #31
 8009cd6:	bf44      	itt	mi
 8009cd8:	f043 0320 	orrmi.w	r3, r3, #32
 8009cdc:	6023      	strmi	r3, [r4, #0]
 8009cde:	b11d      	cbz	r5, 8009ce8 <_printf_i+0x19c>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	e7ad      	b.n	8009c40 <_printf_i+0xf4>
 8009ce4:	4826      	ldr	r0, [pc, #152]	@ (8009d80 <_printf_i+0x234>)
 8009ce6:	e7e9      	b.n	8009cbc <_printf_i+0x170>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	f023 0320 	bic.w	r3, r3, #32
 8009cee:	6023      	str	r3, [r4, #0]
 8009cf0:	e7f6      	b.n	8009ce0 <_printf_i+0x194>
 8009cf2:	4616      	mov	r6, r2
 8009cf4:	e7bd      	b.n	8009c72 <_printf_i+0x126>
 8009cf6:	6833      	ldr	r3, [r6, #0]
 8009cf8:	6825      	ldr	r5, [r4, #0]
 8009cfa:	6961      	ldr	r1, [r4, #20]
 8009cfc:	1d18      	adds	r0, r3, #4
 8009cfe:	6030      	str	r0, [r6, #0]
 8009d00:	062e      	lsls	r6, r5, #24
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	d501      	bpl.n	8009d0a <_printf_i+0x1be>
 8009d06:	6019      	str	r1, [r3, #0]
 8009d08:	e002      	b.n	8009d10 <_printf_i+0x1c4>
 8009d0a:	0668      	lsls	r0, r5, #25
 8009d0c:	d5fb      	bpl.n	8009d06 <_printf_i+0x1ba>
 8009d0e:	8019      	strh	r1, [r3, #0]
 8009d10:	2300      	movs	r3, #0
 8009d12:	6123      	str	r3, [r4, #16]
 8009d14:	4616      	mov	r6, r2
 8009d16:	e7bc      	b.n	8009c92 <_printf_i+0x146>
 8009d18:	6833      	ldr	r3, [r6, #0]
 8009d1a:	1d1a      	adds	r2, r3, #4
 8009d1c:	6032      	str	r2, [r6, #0]
 8009d1e:	681e      	ldr	r6, [r3, #0]
 8009d20:	6862      	ldr	r2, [r4, #4]
 8009d22:	2100      	movs	r1, #0
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7f6 fa53 	bl	80001d0 <memchr>
 8009d2a:	b108      	cbz	r0, 8009d30 <_printf_i+0x1e4>
 8009d2c:	1b80      	subs	r0, r0, r6
 8009d2e:	6060      	str	r0, [r4, #4]
 8009d30:	6863      	ldr	r3, [r4, #4]
 8009d32:	6123      	str	r3, [r4, #16]
 8009d34:	2300      	movs	r3, #0
 8009d36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d3a:	e7aa      	b.n	8009c92 <_printf_i+0x146>
 8009d3c:	6923      	ldr	r3, [r4, #16]
 8009d3e:	4632      	mov	r2, r6
 8009d40:	4649      	mov	r1, r9
 8009d42:	4640      	mov	r0, r8
 8009d44:	47d0      	blx	sl
 8009d46:	3001      	adds	r0, #1
 8009d48:	d0ad      	beq.n	8009ca6 <_printf_i+0x15a>
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	079b      	lsls	r3, r3, #30
 8009d4e:	d413      	bmi.n	8009d78 <_printf_i+0x22c>
 8009d50:	68e0      	ldr	r0, [r4, #12]
 8009d52:	9b03      	ldr	r3, [sp, #12]
 8009d54:	4298      	cmp	r0, r3
 8009d56:	bfb8      	it	lt
 8009d58:	4618      	movlt	r0, r3
 8009d5a:	e7a6      	b.n	8009caa <_printf_i+0x15e>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	4632      	mov	r2, r6
 8009d60:	4649      	mov	r1, r9
 8009d62:	4640      	mov	r0, r8
 8009d64:	47d0      	blx	sl
 8009d66:	3001      	adds	r0, #1
 8009d68:	d09d      	beq.n	8009ca6 <_printf_i+0x15a>
 8009d6a:	3501      	adds	r5, #1
 8009d6c:	68e3      	ldr	r3, [r4, #12]
 8009d6e:	9903      	ldr	r1, [sp, #12]
 8009d70:	1a5b      	subs	r3, r3, r1
 8009d72:	42ab      	cmp	r3, r5
 8009d74:	dcf2      	bgt.n	8009d5c <_printf_i+0x210>
 8009d76:	e7eb      	b.n	8009d50 <_printf_i+0x204>
 8009d78:	2500      	movs	r5, #0
 8009d7a:	f104 0619 	add.w	r6, r4, #25
 8009d7e:	e7f5      	b.n	8009d6c <_printf_i+0x220>
 8009d80:	0800abad 	.word	0x0800abad
 8009d84:	0800abbe 	.word	0x0800abbe

08009d88 <_realloc_r>:
 8009d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8c:	4607      	mov	r7, r0
 8009d8e:	4614      	mov	r4, r2
 8009d90:	460d      	mov	r5, r1
 8009d92:	b921      	cbnz	r1, 8009d9e <_realloc_r+0x16>
 8009d94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d98:	4611      	mov	r1, r2
 8009d9a:	f7ff bbad 	b.w	80094f8 <_malloc_r>
 8009d9e:	b92a      	cbnz	r2, 8009dac <_realloc_r+0x24>
 8009da0:	f7ff fcc4 	bl	800972c <_free_r>
 8009da4:	4625      	mov	r5, r4
 8009da6:	4628      	mov	r0, r5
 8009da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dac:	f000 f81a 	bl	8009de4 <_malloc_usable_size_r>
 8009db0:	4284      	cmp	r4, r0
 8009db2:	4606      	mov	r6, r0
 8009db4:	d802      	bhi.n	8009dbc <_realloc_r+0x34>
 8009db6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dba:	d8f4      	bhi.n	8009da6 <_realloc_r+0x1e>
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4638      	mov	r0, r7
 8009dc0:	f7ff fb9a 	bl	80094f8 <_malloc_r>
 8009dc4:	4680      	mov	r8, r0
 8009dc6:	b908      	cbnz	r0, 8009dcc <_realloc_r+0x44>
 8009dc8:	4645      	mov	r5, r8
 8009dca:	e7ec      	b.n	8009da6 <_realloc_r+0x1e>
 8009dcc:	42b4      	cmp	r4, r6
 8009dce:	4622      	mov	r2, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	bf28      	it	cs
 8009dd4:	4632      	movcs	r2, r6
 8009dd6:	f7ff fc9b 	bl	8009710 <memcpy>
 8009dda:	4629      	mov	r1, r5
 8009ddc:	4638      	mov	r0, r7
 8009dde:	f7ff fca5 	bl	800972c <_free_r>
 8009de2:	e7f1      	b.n	8009dc8 <_realloc_r+0x40>

08009de4 <_malloc_usable_size_r>:
 8009de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009de8:	1f18      	subs	r0, r3, #4
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	bfbc      	itt	lt
 8009dee:	580b      	ldrlt	r3, [r1, r0]
 8009df0:	18c0      	addlt	r0, r0, r3
 8009df2:	4770      	bx	lr

08009df4 <_init>:
 8009df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df6:	bf00      	nop
 8009df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dfa:	bc08      	pop	{r3}
 8009dfc:	469e      	mov	lr, r3
 8009dfe:	4770      	bx	lr

08009e00 <_fini>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	bf00      	nop
 8009e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e06:	bc08      	pop	{r3}
 8009e08:	469e      	mov	lr, r3
 8009e0a:	4770      	bx	lr
