
Elproj1_STM32U575.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009948  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08009b80  08009b80  0000ab80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ca0  08009ca0  0000aca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ca8  08009ca8  0000aca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009cac  08009cac  0000acac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000000  08009cb0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000088a  20000068  08009d18  0000b068  2**2
                  ALLOC
  8 ._user_heap_stack 00000606  200008f2  08009d18  0000b8f2  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023015  00000000  00000000  0000b09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036c2  00000000  00000000  0002e0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001cf0  00000000  00000000  00031778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016aa  00000000  00000000  00033468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000504c  00000000  00000000  00034b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002485c  00000000  00000000  00039b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169d05  00000000  00000000  0005e3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c80bf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000085bc  00000000  00000000  001c8104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009c  00000000  00000000  001d06c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	08009b68 	.word	0x08009b68

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	08009b68 	.word	0x08009b68

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000600:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	2b00      	cmp	r3, #0
 800060a:	d009      	beq.n	8000620 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800060c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000610:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000614:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <ITM_SendChar+0x2c>
 800061c:	2301      	movs	r3, #1
 800061e:	e000      	b.n	8000622 <ITM_SendChar+0x2e>
 8000620:	2300      	movs	r3, #0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d010      	beq.n	8000648 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000626:	e000      	b.n	800062a <ITM_SendChar+0x36>
    {
      __NOP();
 8000628:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800062a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf0c      	ite	eq
 8000634:	2301      	moveq	r3, #1
 8000636:	2300      	movne	r3, #0
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f4      	bne.n	8000628 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800063e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000648:	687b      	ldr	r3, [r7, #4]
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 f9ee 	bl	8001a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f82a 	bl	80006b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fc56 	bl	8000f14 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000668:	f000 f888 	bl	800077c <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 800066c:	f000 f8d0 	bl	8000810 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8000670:	f000 f966 	bl	8000940 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 8000674:	f000 facc 	bl	8000c10 <_ZL12MX_TIM2_Initv>
  MX_UART4_Init();
 8000678:	f000 fbc2 	bl	8000e00 <_ZL13MX_UART4_Initv>
  MX_USB_OTG_FS_HCD_Init();
 800067c:	f000 fc20 	bl	8000ec0 <_ZL22MX_USB_OTG_FS_HCD_Initv>
  MX_I2C2_Init();
 8000680:	f000 f912 	bl	80008a8 <_ZL12MX_I2C2_Initv>
  MX_TIM1_Init();
 8000684:	f000 f9d4 	bl	8000a30 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8000688:	f000 fb52 	bl	8000d30 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //setLED(100, 100, 100);
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800068c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000690:	4807      	ldr	r0, [pc, #28]	@ (80006b0 <main+0x58>)
 8000692:	f002 f9f1 	bl	8002a78 <HAL_GPIO_TogglePin>
	  printf("SKIBIDI SKIBIDI HAWK TUAH HAWK\n");
 8000696:	4807      	ldr	r0, [pc, #28]	@ (80006b4 <main+0x5c>)
 8000698:	f008 ff80 	bl	800959c <puts>
	  ITM_SendChar('a');
 800069c:	2061      	movs	r0, #97	@ 0x61
 800069e:	f7ff ffa9 	bl	80005f4 <ITM_SendChar>
	  HAL_Delay(1000);
 80006a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a6:	f001 fa8f 	bl	8001bc8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80006aa:	bf00      	nop
 80006ac:	e7ee      	b.n	800068c <main+0x34>
 80006ae:	bf00      	nop
 80006b0:	42020000 	.word	0x42020000
 80006b4:	08009b80 	.word	0x08009b80

080006b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09e      	sub	sp, #120	@ 0x78
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0318 	add.w	r3, r7, #24
 80006c2:	2260      	movs	r2, #96	@ 0x60
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f009 f848 	bl	800975c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	463b      	mov	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
 80006da:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 80006dc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80006e0:	f002 fbbc 	bl	8002e5c <HAL_PWREx_ControlVoltageScaling>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	bf14      	ite	ne
 80006ea:	2301      	movne	r3, #1
 80006ec:	2300      	moveq	r3, #0
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <_Z18SystemClock_Configv+0x40>
  {
    Error_Handler();
 80006f4:	f000 fc90 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006f8:	2332      	movs	r3, #50	@ 0x32
 80006fa:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000706:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000714:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000718:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071a:	2300      	movs	r3, #0
 800071c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0318 	add.w	r3, r7, #24
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fc46 	bl	8002fb4 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	bf14      	ite	ne
 800072e:	2301      	movne	r3, #1
 8000730:	2300      	moveq	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 8000738:	f000 fc6e 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	231f      	movs	r3, #31
 800073e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f003 fb07 	bl	8003d6c <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf14      	ite	ne
 8000764:	2301      	movne	r3, #1
 8000766:	2300      	moveq	r3, #0
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800076e:	f000 fc53 	bl	8001018 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3778      	adds	r7, #120	@ 0x78
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000780:	4b21      	ldr	r3, [pc, #132]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 8000782:	4a22      	ldr	r2, [pc, #136]	@ (800080c <_ZL12MX_ADC1_Initv+0x90>)
 8000784:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800078c:	4b1e      	ldr	r3, [pc, #120]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 80007a0:	2204      	movs	r2, #4
 80007a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007aa:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b8:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e8:	4807      	ldr	r0, [pc, #28]	@ (8000808 <_ZL12MX_ADC1_Initv+0x8c>)
 80007ea:	f001 fb0f 	bl	8001e0c <HAL_ADC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <_ZL12MX_ADC1_Initv+0x86>
  {
    Error_Handler();
 80007fe:	f000 fc0b 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000084 	.word	0x20000084
 800080c:	42028000 	.word	0x42028000

08000810 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <_ZL12MX_I2C1_Initv+0x90>)
 8000816:	4a23      	ldr	r2, [pc, #140]	@ (80008a4 <_ZL12MX_I2C1_Initv+0x94>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 800081a:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <_ZL12MX_I2C1_Initv+0x90>)
 800081c:	2204      	movs	r2, #4
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000820:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <_ZL12MX_I2C1_Initv+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <_ZL12MX_I2C1_Initv+0x90>)
 8000828:	2201      	movs	r2, #1
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <_ZL12MX_I2C1_Initv+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <_ZL12MX_I2C1_Initv+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <_ZL12MX_I2C1_Initv+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <_ZL12MX_I2C1_Initv+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000844:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <_ZL12MX_I2C1_Initv+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084a:	4815      	ldr	r0, [pc, #84]	@ (80008a0 <_ZL12MX_I2C1_Initv+0x90>)
 800084c:	f002 f9d4 	bl	8002bf8 <HAL_I2C_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	bf14      	ite	ne
 8000856:	2301      	movne	r3, #1
 8000858:	2300      	moveq	r3, #0
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000860:	f000 fbda 	bl	8001018 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000864:	2100      	movs	r1, #0
 8000866:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <_ZL12MX_I2C1_Initv+0x90>)
 8000868:	f002 fa61 	bl	8002d2e <HAL_I2CEx_ConfigAnalogFilter>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	bf14      	ite	ne
 8000872:	2301      	movne	r3, #1
 8000874:	2300      	moveq	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800087c:	f000 fbcc 	bl	8001018 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000880:	2100      	movs	r1, #0
 8000882:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <_ZL12MX_I2C1_Initv+0x90>)
 8000884:	f002 fa9e 	bl	8002dc4 <HAL_I2CEx_ConfigDigitalFilter>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000898:	f000 fbbe 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000110 	.word	0x20000110
 80008a4:	40005400 	.word	0x40005400

080008a8 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ac:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <_ZL12MX_I2C2_Initv+0x90>)
 80008ae:	4a23      	ldr	r2, [pc, #140]	@ (800093c <_ZL12MX_I2C2_Initv+0x94>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000004;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <_ZL12MX_I2C2_Initv+0x90>)
 80008b4:	2204      	movs	r2, #4
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <_ZL12MX_I2C2_Initv+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008be:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <_ZL12MX_I2C2_Initv+0x90>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <_ZL12MX_I2C2_Initv+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <_ZL12MX_I2C2_Initv+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d0:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <_ZL12MX_I2C2_Initv+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <_ZL12MX_I2C2_Initv+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <_ZL12MX_I2C2_Initv+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008e2:	4815      	ldr	r0, [pc, #84]	@ (8000938 <_ZL12MX_I2C2_Initv+0x90>)
 80008e4:	f002 f988 	bl	8002bf8 <HAL_I2C_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	bf14      	ite	ne
 80008ee:	2301      	movne	r3, #1
 80008f0:	2300      	moveq	r3, #0
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 80008f8:	f000 fb8e 	bl	8001018 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	480e      	ldr	r0, [pc, #56]	@ (8000938 <_ZL12MX_I2C2_Initv+0x90>)
 8000900:	f002 fa15 	bl	8002d2e <HAL_I2CEx_ConfigAnalogFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	bf14      	ite	ne
 800090a:	2301      	movne	r3, #1
 800090c:	2300      	moveq	r3, #0
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8000914:	f000 fb80 	bl	8001018 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	4807      	ldr	r0, [pc, #28]	@ (8000938 <_ZL12MX_I2C2_Initv+0x90>)
 800091c:	f002 fa52 	bl	8002dc4 <HAL_I2CEx_ConfigDigitalFilter>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf14      	ite	ne
 8000926:	2301      	movne	r3, #1
 8000928:	2300      	moveq	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8000930:	f000 fb72 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000164 	.word	0x20000164
 800093c:	40005800 	.word	0x40005800

08000940 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000950:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 8000952:	4a36      	ldr	r2, [pc, #216]	@ (8000a2c <_ZL12MX_SPI1_Initv+0xec>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b34      	ldr	r3, [pc, #208]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 8000958:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800095c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b32      	ldr	r3, [pc, #200]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000964:	4b30      	ldr	r3, [pc, #192]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 8000966:	2203      	movs	r2, #3
 8000968:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000970:	4b2d      	ldr	r3, [pc, #180]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000976:	4b2c      	ldr	r3, [pc, #176]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 8000978:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800097c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800097e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000984:	4b28      	ldr	r3, [pc, #160]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098a:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000990:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000996:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 8000998:	2207      	movs	r2, #7
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800099c:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 800099e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009a4:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009da:	4813      	ldr	r0, [pc, #76]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 80009dc:	f006 fa2e 	bl	8006e3c <HAL_SPI_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bf14      	ite	ne
 80009e6:	2301      	movne	r3, #1
 80009e8:	2300      	moveq	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <_ZL12MX_SPI1_Initv+0xb4>
  {
    Error_Handler();
 80009f0:	f000 fb12 	bl	8001018 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80009f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <_ZL12MX_SPI1_Initv+0xe8>)
 8000a08:	f006 fb49 	bl	800709e <HAL_SPIEx_SetConfigAutonomousMode>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf14      	ite	ne
 8000a12:	2301      	movne	r3, #1
 8000a14:	2300      	moveq	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <_ZL12MX_SPI1_Initv+0xe0>
  {
    Error_Handler();
 8000a1c:	f000 fafc 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200001b8 	.word	0x200001b8
 8000a2c:	40013000 	.word	0x40013000

08000a30 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b09c      	sub	sp, #112	@ 0x70
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]
 8000a62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2234      	movs	r2, #52	@ 0x34
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f008 fe76 	bl	800975c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a70:	4b65      	ldr	r3, [pc, #404]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000a72:	4a66      	ldr	r2, [pc, #408]	@ (8000c0c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000a74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8000a76:	4b64      	ldr	r3, [pc, #400]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b62      	ldr	r3, [pc, #392]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000a82:	4b61      	ldr	r3, [pc, #388]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000a84:	2263      	movs	r2, #99	@ 0x63
 8000a86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b5f      	ldr	r3, [pc, #380]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a8e:	4b5e      	ldr	r3, [pc, #376]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b5c      	ldr	r3, [pc, #368]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a9a:	485b      	ldr	r0, [pc, #364]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000a9c:	f006 fb40 	bl	8007120 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	bf14      	ite	ne
 8000aa6:	2301      	movne	r3, #1
 8000aa8:	2300      	moveq	r3, #0
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8000ab0:	f000 fab2 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4851      	ldr	r0, [pc, #324]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000ac2:	f006 fcef 	bl	80074a4 <HAL_TIM_ConfigClockSource>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf14      	ite	ne
 8000acc:	2301      	movne	r3, #1
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8000ad6:	f000 fa9f 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ada:	484b      	ldr	r0, [pc, #300]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000adc:	f006 fb77 	bl	80071ce <HAL_TIM_PWM_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	bf14      	ite	ne
 8000ae6:	2301      	movne	r3, #1
 8000ae8:	2300      	moveq	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8000af0:	f000 fa92 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b04:	4619      	mov	r1, r3
 8000b06:	4840      	ldr	r0, [pc, #256]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000b08:	f007 fb40 	bl	800818c <HAL_TIMEx_MasterConfigSynchronization>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf14      	ite	ne
 8000b12:	2301      	movne	r3, #1
 8000b14:	2300      	moveq	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <_ZL12MX_TIM1_Initv+0xf0>
  {
    Error_Handler();
 8000b1c:	f000 fa7c 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b20:	2360      	movs	r3, #96	@ 0x60
 8000b22:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b40:	2200      	movs	r2, #0
 8000b42:	4619      	mov	r1, r3
 8000b44:	4830      	ldr	r0, [pc, #192]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000b46:	f006 fb99 	bl	800727c <HAL_TIM_PWM_ConfigChannel>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	bf14      	ite	ne
 8000b50:	2301      	movne	r3, #1
 8000b52:	2300      	moveq	r3, #0
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 8000b5a:	f000 fa5d 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b62:	2204      	movs	r2, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4828      	ldr	r0, [pc, #160]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000b68:	f006 fb88 	bl	800727c <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bf14      	ite	ne
 8000b72:	2301      	movne	r3, #1
 8000b74:	2300      	moveq	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <_ZL12MX_TIM1_Initv+0x150>
  {
    Error_Handler();
 8000b7c:	f000 fa4c 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b84:	2208      	movs	r2, #8
 8000b86:	4619      	mov	r1, r3
 8000b88:	481f      	ldr	r0, [pc, #124]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000b8a:	f006 fb77 	bl	800727c <HAL_TIM_PWM_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	bf14      	ite	ne
 8000b94:	2301      	movne	r3, #1
 8000b96:	2300      	moveq	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <_ZL12MX_TIM1_Initv+0x172>
  {
    Error_Handler();
 8000b9e:	f000 fa3b 	bl	8001018 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480a      	ldr	r0, [pc, #40]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000be0:	f007 fb96 	bl	8008310 <HAL_TIMEx_ConfigBreakDeadTime>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bf14      	ite	ne
 8000bea:	2301      	movne	r3, #1
 8000bec:	2300      	moveq	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <_ZL12MX_TIM1_Initv+0x1c8>
  {
    Error_Handler();
 8000bf4:	f000 fa10 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bf8:	4803      	ldr	r0, [pc, #12]	@ (8000c08 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000bfa:	f000 fc55 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 8000bfe:	bf00      	nop
 8000c00:	3770      	adds	r7, #112	@ 0x70
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000248 	.word	0x20000248
 8000c0c:	40012c00 	.word	0x40012c00

08000c10 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08e      	sub	sp, #56	@ 0x38
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c42:	4b3a      	ldr	r3, [pc, #232]	@ (8000d2c <_ZL12MX_TIM2_Initv+0x11c>)
 8000c44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000c4a:	4b38      	ldr	r3, [pc, #224]	@ (8000d2c <_ZL12MX_TIM2_Initv+0x11c>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b36      	ldr	r3, [pc, #216]	@ (8000d2c <_ZL12MX_TIM2_Initv+0x11c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000c56:	4b35      	ldr	r3, [pc, #212]	@ (8000d2c <_ZL12MX_TIM2_Initv+0x11c>)
 8000c58:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000c5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b33      	ldr	r3, [pc, #204]	@ (8000d2c <_ZL12MX_TIM2_Initv+0x11c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b31      	ldr	r3, [pc, #196]	@ (8000d2c <_ZL12MX_TIM2_Initv+0x11c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c6a:	4830      	ldr	r0, [pc, #192]	@ (8000d2c <_ZL12MX_TIM2_Initv+0x11c>)
 8000c6c:	f006 fa58 	bl	8007120 <HAL_TIM_Base_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	bf14      	ite	ne
 8000c76:	2301      	movne	r3, #1
 8000c78:	2300      	moveq	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8000c80:	f000 f9ca 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4826      	ldr	r0, [pc, #152]	@ (8000d2c <_ZL12MX_TIM2_Initv+0x11c>)
 8000c92:	f006 fc07 	bl	80074a4 <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	bf14      	ite	ne
 8000c9c:	2301      	movne	r3, #1
 8000c9e:	2300      	moveq	r3, #0
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8000ca6:	f000 f9b7 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000caa:	4820      	ldr	r0, [pc, #128]	@ (8000d2c <_ZL12MX_TIM2_Initv+0x11c>)
 8000cac:	f006 fa8f 	bl	80071ce <HAL_TIM_PWM_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bf14      	ite	ne
 8000cb6:	2301      	movne	r3, #1
 8000cb8:	2300      	moveq	r3, #0
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8000cc0:	f000 f9aa 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4816      	ldr	r0, [pc, #88]	@ (8000d2c <_ZL12MX_TIM2_Initv+0x11c>)
 8000cd4:	f007 fa5a 	bl	800818c <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf14      	ite	ne
 8000cde:	2301      	movne	r3, #1
 8000ce0:	2300      	moveq	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8000ce8:	f000 f996 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cec:	2360      	movs	r3, #96	@ 0x60
 8000cee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	4619      	mov	r1, r3
 8000d02:	480a      	ldr	r0, [pc, #40]	@ (8000d2c <_ZL12MX_TIM2_Initv+0x11c>)
 8000d04:	f006 faba 	bl	800727c <HAL_TIM_PWM_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bf14      	ite	ne
 8000d0e:	2301      	movne	r3, #1
 8000d10:	2300      	moveq	r3, #0
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8000d18:	f000 f97e 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <_ZL12MX_TIM2_Initv+0x11c>)
 8000d1e:	f000 fbc3 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 8000d22:	bf00      	nop
 8000d24:	3738      	adds	r7, #56	@ 0x38
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000294 	.word	0x20000294

08000d30 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d42:	463b      	mov	r3, r7
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
 8000d50:	615a      	str	r2, [r3, #20]
 8000d52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d54:	4b28      	ldr	r3, [pc, #160]	@ (8000df8 <_ZL12MX_TIM3_Initv+0xc8>)
 8000d56:	4a29      	ldr	r2, [pc, #164]	@ (8000dfc <_ZL12MX_TIM3_Initv+0xcc>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8000d5a:	4b27      	ldr	r3, [pc, #156]	@ (8000df8 <_ZL12MX_TIM3_Initv+0xc8>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <_ZL12MX_TIM3_Initv+0xc8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 8000d66:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <_ZL12MX_TIM3_Initv+0xc8>)
 8000d68:	2232      	movs	r2, #50	@ 0x32
 8000d6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <_ZL12MX_TIM3_Initv+0xc8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <_ZL12MX_TIM3_Initv+0xc8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d78:	481f      	ldr	r0, [pc, #124]	@ (8000df8 <_ZL12MX_TIM3_Initv+0xc8>)
 8000d7a:	f006 fa28 	bl	80071ce <HAL_TIM_PWM_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bf14      	ite	ne
 8000d84:	2301      	movne	r3, #1
 8000d86:	2300      	moveq	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8000d8e:	f000 f943 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4815      	ldr	r0, [pc, #84]	@ (8000df8 <_ZL12MX_TIM3_Initv+0xc8>)
 8000da2:	f007 f9f3 	bl	800818c <HAL_TIMEx_MasterConfigSynchronization>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf14      	ite	ne
 8000dac:	2301      	movne	r3, #1
 8000dae:	2300      	moveq	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8000db6:	f000 f92f 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dba:	2360      	movs	r3, #96	@ 0x60
 8000dbc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4809      	ldr	r0, [pc, #36]	@ (8000df8 <_ZL12MX_TIM3_Initv+0xc8>)
 8000dd2:	f006 fa53 	bl	800727c <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	bf14      	ite	ne
 8000ddc:	2301      	movne	r3, #1
 8000dde:	2300      	moveq	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8000de6:	f000 f917 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dea:	4803      	ldr	r0, [pc, #12]	@ (8000df8 <_ZL12MX_TIM3_Initv+0xc8>)
 8000dec:	f000 fb5c 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	@ 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200002e0 	.word	0x200002e0
 8000dfc:	40000400 	.word	0x40000400

08000e00 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e06:	4a2d      	ldr	r2, [pc, #180]	@ (8000ebc <_ZL13MX_UART4_Initv+0xbc>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b29      	ldr	r3, [pc, #164]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e36:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e48:	481b      	ldr	r0, [pc, #108]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e4a:	f007 fafb 	bl	8008444 <HAL_UART_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf14      	ite	ne
 8000e54:	2301      	movne	r3, #1
 8000e56:	2300      	moveq	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 8000e5e:	f000 f8db 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4814      	ldr	r0, [pc, #80]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e66:	f007 ff37 	bl	8008cd8 <HAL_UARTEx_SetTxFifoThreshold>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	bf14      	ite	ne
 8000e70:	2301      	movne	r3, #1
 8000e72:	2300      	moveq	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8000e7a:	f000 f8cd 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e7e:	2100      	movs	r1, #0
 8000e80:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e82:	f007 ff67 	bl	8008d54 <HAL_UARTEx_SetRxFifoThreshold>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bf14      	ite	ne
 8000e8c:	2301      	movne	r3, #1
 8000e8e:	2300      	moveq	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 8000e96:	f000 f8bf 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e9a:	4807      	ldr	r0, [pc, #28]	@ (8000eb8 <_ZL13MX_UART4_Initv+0xb8>)
 8000e9c:	f007 fee3 	bl	8008c66 <HAL_UARTEx_DisableFifoMode>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	bf14      	ite	ne
 8000ea6:	2301      	movne	r3, #1
 8000ea8:	2300      	moveq	r3, #0
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 8000eb0:	f000 f8b2 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000032c 	.word	0x2000032c
 8000ebc:	40004c00 	.word	0x40004c00

08000ec0 <_ZL22MX_USB_OTG_FS_HCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <_ZL22MX_USB_OTG_FS_HCD_Initv+0x4c>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	@ (8000f10 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x50>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8000eca:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <_ZL22MX_USB_OTG_FS_HCD_Initv+0x4c>)
 8000ecc:	220c      	movs	r2, #12
 8000ece:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <_ZL22MX_USB_OTG_FS_HCD_Initv+0x4c>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <_ZL22MX_USB_OTG_FS_HCD_Initv+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <_ZL22MX_USB_OTG_FS_HCD_Initv+0x4c>)
 8000ede:	2202      	movs	r2, #2
 8000ee0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <_ZL22MX_USB_OTG_FS_HCD_Initv+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <_ZL22MX_USB_OTG_FS_HCD_Initv+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	739a      	strb	r2, [r3, #14]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000eee:	4807      	ldr	r0, [pc, #28]	@ (8000f0c <_ZL22MX_USB_OTG_FS_HCD_Initv+0x4c>)
 8000ef0:	f001 fe18 	bl	8002b24 <HAL_HCD_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	bf14      	ite	ne
 8000efa:	2301      	movne	r3, #1
 8000efc:	2300      	moveq	r3, #0
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>
  {
    Error_Handler();
 8000f04:	f000 f888 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200003c0 	.word	0x200003c0
 8000f10:	42040000 	.word	0x42040000

08000f14 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	4b37      	ldr	r3, [pc, #220]	@ (8001008 <_ZL12MX_GPIO_Initv+0xf4>)
 8000f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f30:	4a35      	ldr	r2, [pc, #212]	@ (8001008 <_ZL12MX_GPIO_Initv+0xf4>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f3a:	4b33      	ldr	r3, [pc, #204]	@ (8001008 <_ZL12MX_GPIO_Initv+0xf4>)
 8000f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f48:	4b2f      	ldr	r3, [pc, #188]	@ (8001008 <_ZL12MX_GPIO_Initv+0xf4>)
 8000f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f4e:	4a2e      	ldr	r2, [pc, #184]	@ (8001008 <_ZL12MX_GPIO_Initv+0xf4>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f58:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <_ZL12MX_GPIO_Initv+0xf4>)
 8000f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b28      	ldr	r3, [pc, #160]	@ (8001008 <_ZL12MX_GPIO_Initv+0xf4>)
 8000f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f6c:	4a26      	ldr	r2, [pc, #152]	@ (8001008 <_ZL12MX_GPIO_Initv+0xf4>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f76:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <_ZL12MX_GPIO_Initv+0xf4>)
 8000f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <_ZL12MX_GPIO_Initv+0xf4>)
 8000f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001008 <_ZL12MX_GPIO_Initv+0xf4>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f94:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <_ZL12MX_GPIO_Initv+0xf4>)
 8000f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin ENCODER_SWITCH_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin|ENCODER_SWITCH_Pin;
 8000fa2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	@ (800100c <_ZL12MX_GPIO_Initv+0xf8>)
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4816      	ldr	r0, [pc, #88]	@ (8001010 <_ZL12MX_GPIO_Initv+0xfc>)
 8000fb8:	f001 fb86 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_ALERT_Pin PB9 */
  //GPIO_InitStruct.Pin = PD_ALERT_Pin|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4812      	ldr	r0, [pc, #72]	@ (8001014 <_ZL12MX_GPIO_Initv+0x100>)
 8000fcc:	f001 fb7c 	bl	80026c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2018      	movs	r0, #24
 8000fd6:	f001 fa9b 	bl	8002510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000fda:	2018      	movs	r0, #24
 8000fdc:	f001 fab2 	bl	8002544 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2019      	movs	r0, #25
 8000fe6:	f001 fa93 	bl	8002510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8000fea:	2019      	movs	r0, #25
 8000fec:	f001 faaa 	bl	8002544 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_IRQn, 0, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	201a      	movs	r0, #26
 8000ff6:	f001 fa8b 	bl	8002510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_IRQn);
 8000ffa:	201a      	movs	r0, #26
 8000ffc:	f001 faa2 	bl	8002544 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	@ 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	46020c00 	.word	0x46020c00
 800100c:	10110000 	.word	0x10110000
 8001010:	42020800 	.word	0x42020800
 8001014:	42020400 	.word	0x42020400

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <Error_Handler+0x8>

08001024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <HAL_MspInit+0x34>)
 800102c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001030:	4a09      	ldr	r2, [pc, #36]	@ (8001058 <HAL_MspInit+0x34>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <HAL_MspInit+0x34>)
 800103c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001048:	f001 ff94 	bl	8002f74 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddA();
 800104c:	f001 ffa2 	bl	8002f94 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	46020c00 	.word	0x46020c00

0800105c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0bc      	sub	sp, #240	@ 0xf0
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001074:	f107 0318 	add.w	r3, r7, #24
 8001078:	22c0      	movs	r2, #192	@ 0xc0
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f008 fb6d 	bl	800975c <memset>
  if(hadc->Instance==ADC1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a33      	ldr	r2, [pc, #204]	@ (8001154 <HAL_ADC_MspInit+0xf8>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d15e      	bne.n	800114a <HAL_ADC_MspInit+0xee>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800108c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001098:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800109c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a0:	f107 0318 	add.w	r3, r7, #24
 80010a4:	4618      	mov	r0, r3
 80010a6:	f003 fa31 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80010b0:	f7ff ffb2 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010b4:	4b28      	ldr	r3, [pc, #160]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ba:	4a27      	ldr	r2, [pc, #156]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010c4:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010f6:	4a18      	ldr	r2, [pc, #96]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 8001102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800110e:	230c      	movs	r3, #12
 8001110:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001114:	2303      	movs	r3, #3
 8001116:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001124:	4619      	mov	r1, r3
 8001126:	480d      	ldr	r0, [pc, #52]	@ (800115c <HAL_ADC_MspInit+0x100>)
 8001128:	f001 face 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800112c:	2303      	movs	r3, #3
 800112e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001132:	2303      	movs	r3, #3
 8001134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001142:	4619      	mov	r1, r3
 8001144:	4806      	ldr	r0, [pc, #24]	@ (8001160 <HAL_ADC_MspInit+0x104>)
 8001146:	f001 fabf 	bl	80026c8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800114a:	bf00      	nop
 800114c:	37f0      	adds	r7, #240	@ 0xf0
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	42028000 	.word	0x42028000
 8001158:	46020c00 	.word	0x46020c00
 800115c:	42020000 	.word	0x42020000
 8001160:	42020400 	.word	0x42020400

08001164 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0bc      	sub	sp, #240	@ 0xf0
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	22c0      	movs	r2, #192	@ 0xc0
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f008 fae9 	bl	800975c <memset>
  if(hi2c->Instance==I2C1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a4d      	ldr	r2, [pc, #308]	@ (80012c4 <HAL_I2C_MspInit+0x160>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d146      	bne.n	8001222 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001194:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 f9ae 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011b6:	f7ff ff2f 	bl	8001018 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	4b43      	ldr	r3, [pc, #268]	@ (80012c8 <HAL_I2C_MspInit+0x164>)
 80011bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c0:	4a41      	ldr	r2, [pc, #260]	@ (80012c8 <HAL_I2C_MspInit+0x164>)
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ca:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <HAL_I2C_MspInit+0x164>)
 80011cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80011d8:	23c0      	movs	r3, #192	@ 0xc0
 80011da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011de:	2312      	movs	r3, #18
 80011e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f0:	2304      	movs	r3, #4
 80011f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011fa:	4619      	mov	r1, r3
 80011fc:	4833      	ldr	r0, [pc, #204]	@ (80012cc <HAL_I2C_MspInit+0x168>)
 80011fe:	f001 fa63 	bl	80026c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001202:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <HAL_I2C_MspInit+0x164>)
 8001204:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001208:	4a2f      	ldr	r2, [pc, #188]	@ (80012c8 <HAL_I2C_MspInit+0x164>)
 800120a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800120e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001212:	4b2d      	ldr	r3, [pc, #180]	@ (80012c8 <HAL_I2C_MspInit+0x164>)
 8001214:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001220:	e04b      	b.n	80012ba <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a2a      	ldr	r2, [pc, #168]	@ (80012d0 <HAL_I2C_MspInit+0x16c>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d146      	bne.n	80012ba <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800122c:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f962 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800124e:	f7ff fee3 	bl	8001018 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <HAL_I2C_MspInit+0x164>)
 8001254:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001258:	4a1b      	ldr	r2, [pc, #108]	@ (80012c8 <HAL_I2C_MspInit+0x164>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001262:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <HAL_I2C_MspInit+0x164>)
 8001264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PD_SCL_Pin|PD_SDA_Pin;
 8001270:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001274:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001278:	2312      	movs	r3, #18
 800127a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800128a:	2304      	movs	r3, #4
 800128c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	@ (80012cc <HAL_I2C_MspInit+0x168>)
 8001298:	f001 fa16 	bl	80026c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_I2C_MspInit+0x164>)
 800129e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012a2:	4a09      	ldr	r2, [pc, #36]	@ (80012c8 <HAL_I2C_MspInit+0x164>)
 80012a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012a8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_I2C_MspInit+0x164>)
 80012ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
}
 80012ba:	bf00      	nop
 80012bc:	37f0      	adds	r7, #240	@ 0xf0
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40005400 	.word	0x40005400
 80012c8:	46020c00 	.word	0x46020c00
 80012cc:	42020400 	.word	0x42020400
 80012d0:	40005800 	.word	0x40005800

080012d4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0bc      	sub	sp, #240	@ 0xf0
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ec:	f107 0318 	add.w	r3, r7, #24
 80012f0:	22c0      	movs	r2, #192	@ 0xc0
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f008 fa31 	bl	800975c <memset>
  if(hspi->Instance==SPI1)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a39      	ldr	r2, [pc, #228]	@ (80013e4 <HAL_SPI_MspInit+0x110>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d16a      	bne.n	80013da <HAL_SPI_MspInit+0x106>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001304:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001310:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001314:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001318:	f107 0318 	add.w	r3, r7, #24
 800131c:	4618      	mov	r0, r3
 800131e:	f003 f8f5 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001328:	f7ff fe76 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800132c:	4b2e      	ldr	r3, [pc, #184]	@ (80013e8 <HAL_SPI_MspInit+0x114>)
 800132e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001332:	4a2d      	ldr	r2, [pc, #180]	@ (80013e8 <HAL_SPI_MspInit+0x114>)
 8001334:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001338:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800133c:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <HAL_SPI_MspInit+0x114>)
 800133e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <HAL_SPI_MspInit+0x114>)
 800134c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001350:	4a25      	ldr	r2, [pc, #148]	@ (80013e8 <HAL_SPI_MspInit+0x114>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800135a:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <HAL_SPI_MspInit+0x114>)
 800135c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001368:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <HAL_SPI_MspInit+0x114>)
 800136a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800136e:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <HAL_SPI_MspInit+0x114>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <HAL_SPI_MspInit+0x114>)
 800137a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001386:	2370      	movs	r3, #112	@ 0x70
 8001388:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800139e:	2305      	movs	r3, #5
 80013a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013a8:	4619      	mov	r1, r3
 80013aa:	4810      	ldr	r0, [pc, #64]	@ (80013ec <HAL_SPI_MspInit+0x118>)
 80013ac:	f001 f98c 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013b0:	2320      	movs	r3, #32
 80013b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c8:	2305      	movs	r3, #5
 80013ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013d2:	4619      	mov	r1, r3
 80013d4:	4806      	ldr	r0, [pc, #24]	@ (80013f0 <HAL_SPI_MspInit+0x11c>)
 80013d6:	f001 f977 	bl	80026c8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013da:	bf00      	nop
 80013dc:	37f0      	adds	r7, #240	@ 0xf0
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40013000 	.word	0x40013000
 80013e8:	46020c00 	.word	0x46020c00
 80013ec:	42020000 	.word	0x42020000
 80013f0:	42020400 	.word	0x42020400

080013f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a16      	ldr	r2, [pc, #88]	@ (800145c <HAL_TIM_Base_MspInit+0x68>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d10f      	bne.n	8001426 <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001406:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <HAL_TIM_Base_MspInit+0x6c>)
 8001408:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800140c:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <HAL_TIM_Base_MspInit+0x6c>)
 800140e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001412:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001416:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_TIM_Base_MspInit+0x6c>)
 8001418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800141c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001424:	e013      	b.n	800144e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800142e:	d10e      	bne.n	800144e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001430:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <HAL_TIM_Base_MspInit+0x6c>)
 8001432:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001436:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <HAL_TIM_Base_MspInit+0x6c>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001440:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <HAL_TIM_Base_MspInit+0x6c>)
 8001442:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40012c00 	.word	0x40012c00
 8001460:	46020c00 	.word	0x46020c00

08001464 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0b      	ldr	r2, [pc, #44]	@ (80014a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10e      	bne.n	8001494 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001476:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <HAL_TIM_PWM_MspInit+0x40>)
 8001478:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800147c:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <HAL_TIM_PWM_MspInit+0x40>)
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001486:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <HAL_TIM_PWM_MspInit+0x40>)
 8001488:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40000400 	.word	0x40000400
 80014a4:	46020c00 	.word	0x46020c00

080014a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	@ 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a38      	ldr	r2, [pc, #224]	@ (80015a8 <HAL_TIM_MspPostInit+0x100>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d120      	bne.n	800150c <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b38      	ldr	r3, [pc, #224]	@ (80015ac <HAL_TIM_MspPostInit+0x104>)
 80014cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d0:	4a36      	ldr	r2, [pc, #216]	@ (80015ac <HAL_TIM_MspPostInit+0x104>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014da:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <HAL_TIM_MspPostInit+0x104>)
 80014dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = BLUE_Pin|RED_Pin;
 80014e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014fa:	2301      	movs	r3, #1
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	482a      	ldr	r0, [pc, #168]	@ (80015b0 <HAL_TIM_MspPostInit+0x108>)
 8001506:	f001 f8df 	bl	80026c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800150a:	e049      	b.n	80015a0 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001514:	d120      	bne.n	8001558 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b25      	ldr	r3, [pc, #148]	@ (80015ac <HAL_TIM_MspPostInit+0x104>)
 8001518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800151c:	4a23      	ldr	r2, [pc, #140]	@ (80015ac <HAL_TIM_MspPostInit+0x104>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001526:	4b21      	ldr	r3, [pc, #132]	@ (80015ac <HAL_TIM_MspPostInit+0x104>)
 8001528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_Pin;
 8001534:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001546:	2301      	movs	r3, #1
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4817      	ldr	r0, [pc, #92]	@ (80015b0 <HAL_TIM_MspPostInit+0x108>)
 8001552:	f001 f8b9 	bl	80026c8 <HAL_GPIO_Init>
}
 8001556:	e023      	b.n	80015a0 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM3)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <HAL_TIM_MspPostInit+0x10c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d11e      	bne.n	80015a0 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_TIM_MspPostInit+0x104>)
 8001564:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001568:	4a10      	ldr	r2, [pc, #64]	@ (80015ac <HAL_TIM_MspPostInit+0x104>)
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_TIM_MspPostInit+0x104>)
 8001574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001580:	2310      	movs	r3, #16
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001590:	2302      	movs	r3, #2
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	4807      	ldr	r0, [pc, #28]	@ (80015b8 <HAL_TIM_MspPostInit+0x110>)
 800159c:	f001 f894 	bl	80026c8 <HAL_GPIO_Init>
}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	@ 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40012c00 	.word	0x40012c00
 80015ac:	46020c00 	.word	0x46020c00
 80015b0:	42020000 	.word	0x42020000
 80015b4:	40000400 	.word	0x40000400
 80015b8:	42020400 	.word	0x42020400

080015bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0ba      	sub	sp, #232	@ 0xe8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	22c0      	movs	r2, #192	@ 0xc0
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f008 f8bd 	bl	800975c <memset>
  if(huart->Instance==UART4)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a26      	ldr	r2, [pc, #152]	@ (8001680 <HAL_UART_MspInit+0xc4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d144      	bne.n	8001676 <HAL_UART_MspInit+0xba>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015ec:	f04f 0208 	mov.w	r2, #8
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4618      	mov	r0, r3
 8001602:	f002 ff83 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800160c:	f7ff fd04 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001610:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 8001612:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001616:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 8001618:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800161c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001620:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 8001622:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001626:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 8001630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001634:	4a13      	ldr	r2, [pc, #76]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 8001640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800164c:	2303      	movs	r3, #3
 800164e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001664:	2308      	movs	r3, #8
 8001666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <HAL_UART_MspInit+0xcc>)
 8001672:	f001 f829 	bl	80026c8 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8001676:	bf00      	nop
 8001678:	37e8      	adds	r7, #232	@ 0xe8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40004c00 	.word	0x40004c00
 8001684:	46020c00 	.word	0x46020c00
 8001688:	42020000 	.word	0x42020000

0800168c <HAL_HCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhcd: HCD handle pointer
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b0bc      	sub	sp, #240	@ 0xf0
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a4:	f107 0318 	add.w	r3, r7, #24
 80016a8:	22c0      	movs	r2, #192	@ 0xc0
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f008 f855 	bl	800975c <memset>
  if(hhcd->Instance==USB_OTG_FS)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a38      	ldr	r2, [pc, #224]	@ (8001798 <HAL_HCD_MspInit+0x10c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d169      	bne.n	8001790 <HAL_HCD_MspInit+0x104>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80016bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 ff1a 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_HCD_MspInit+0x56>
    {
      Error_Handler();
 80016de:	f7ff fc9b 	bl	8001018 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b2e      	ldr	r3, [pc, #184]	@ (800179c <HAL_HCD_MspInit+0x110>)
 80016e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016e8:	4a2c      	ldr	r2, [pc, #176]	@ (800179c <HAL_HCD_MspInit+0x110>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016f2:	4b2a      	ldr	r3, [pc, #168]	@ (800179c <HAL_HCD_MspInit+0x110>)
 80016f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001700:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001704:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800171a:	230a      	movs	r3, #10
 800171c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001724:	4619      	mov	r1, r3
 8001726:	481e      	ldr	r0, [pc, #120]	@ (80017a0 <HAL_HCD_MspInit+0x114>)
 8001728:	f000 ffce 	bl	80026c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <HAL_HCD_MspInit+0x110>)
 800172e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001732:	4a1a      	ldr	r2, [pc, #104]	@ (800179c <HAL_HCD_MspInit+0x110>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001738:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <HAL_HCD_MspInit+0x110>)
 800173e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800174a:	4b14      	ldr	r3, [pc, #80]	@ (800179c <HAL_HCD_MspInit+0x110>)
 800174c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d119      	bne.n	800178c <HAL_HCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001758:	4b10      	ldr	r3, [pc, #64]	@ (800179c <HAL_HCD_MspInit+0x110>)
 800175a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800175e:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <HAL_HCD_MspInit+0x110>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <HAL_HCD_MspInit+0x110>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001776:	f001 fbfd 	bl	8002f74 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_HCD_MspInit+0x110>)
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001780:	4a06      	ldr	r2, [pc, #24]	@ (800179c <HAL_HCD_MspInit+0x110>)
 8001782:	f023 0304 	bic.w	r3, r3, #4
 8001786:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800178a:	e001      	b.n	8001790 <HAL_HCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 800178c:	f001 fbf2 	bl	8002f74 <HAL_PWREx_EnableVddUSB>
}
 8001790:	bf00      	nop
 8001792:	37f0      	adds	r7, #240	@ 0xf0
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	42040000 	.word	0x42040000
 800179c:	46020c00 	.word	0x46020c00
 80017a0:	42020000 	.word	0x42020000

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <NMI_Handler+0x4>

080017ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <MemManage_Handler+0x4>

080017bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <UsageFault_Handler+0x4>

080017cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fa:	f000 f9c5 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}

08001802 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 8001806:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800180a:	f001 f94f 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}

08001812 <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 8001816:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800181a:	f001 f947 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}

08001822 <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_IRQn 0 */
	//setLED(50, LED_R_CHANNEL);

  /* USER CODE END EXTI15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_SWITCH_Pin);
 8001826:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800182a:	f001 f93f 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_IRQn 1 */

  /* USER CODE END EXTI15_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}

08001832 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e00a      	b.n	800185a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001844:	f3af 8000 	nop.w
 8001848:	4601      	mov	r1, r0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	60ba      	str	r2, [r7, #8]
 8001850:	b2ca      	uxtb	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	dbf0      	blt.n	8001844 <_read+0x12>
  }

  return len;
 8001862:	687b      	ldr	r3, [r7, #4]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e009      	b.n	8001892 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	60ba      	str	r2, [r7, #8]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3301      	adds	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	dbf1      	blt.n	800187e <_write+0x12>
  }
  return len;
 800189a:	687b      	ldr	r3, [r7, #4]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_close>:

int _close(int file)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018cc:	605a      	str	r2, [r3, #4]
  return 0;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_isatty>:

int _isatty(int file)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018e4:	2301      	movs	r3, #1
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001914:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <_sbrk+0x5c>)
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <_sbrk+0x60>)
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <_sbrk+0x64>)
 800192a:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <_sbrk+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <_sbrk+0x64>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	429a      	cmp	r2, r3
 800193a:	d207      	bcs.n	800194c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800193c:	f007 ff6c 	bl	8009818 <__errno>
 8001940:	4603      	mov	r3, r0
 8001942:	220c      	movs	r2, #12
 8001944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	e009      	b.n	8001960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001952:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	4a05      	ldr	r2, [pc, #20]	@ (8001970 <_sbrk+0x64>)
 800195c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200c0000 	.word	0x200c0000
 800196c:	00000400 	.word	0x00000400
 8001970:	200007a0 	.word	0x200007a0
 8001974:	200008f8 	.word	0x200008f8

08001978 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800197c:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <SystemInit+0x68>)
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001982:	4a17      	ldr	r2, [pc, #92]	@ (80019e0 <SystemInit+0x68>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800198c:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <SystemInit+0x6c>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001992:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <SystemInit+0x6c>)
 8001994:	2200      	movs	r2, #0
 8001996:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001998:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <SystemInit+0x6c>)
 800199a:	2200      	movs	r2, #0
 800199c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800199e:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <SystemInit+0x6c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80019a4:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <SystemInit+0x6c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0e      	ldr	r2, [pc, #56]	@ (80019e4 <SystemInit+0x6c>)
 80019aa:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80019ae:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80019b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80019b4:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <SystemInit+0x6c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <SystemInit+0x6c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a09      	ldr	r2, [pc, #36]	@ (80019e4 <SystemInit+0x6c>)
 80019c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80019c6:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <SystemInit+0x6c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <SystemInit+0x68>)
 80019ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019d2:	609a      	str	r2, [r3, #8]
  #endif
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00
 80019e4:	46020c00 	.word	0x46020c00

080019e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80019e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a20 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019ec:	f7ff ffc4 	bl	8001978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019f2:	e003      	b.n	80019fc <LoopCopyDataInit>

080019f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019fa:	3104      	adds	r1, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019fc:	480a      	ldr	r0, [pc, #40]	@ (8001a28 <LoopForever+0xa>)
	ldr	r3, =_edata
 80019fe:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a04:	d3f6      	bcc.n	80019f4 <CopyDataInit>
	ldr	r2, =_sbss
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a08:	e002      	b.n	8001a10 <LoopFillZerobss>

08001a0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a0c:	f842 3b04 	str.w	r3, [r2], #4

08001a10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <LoopForever+0x16>)
	cmp	r2, r3
 8001a12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a14:	d3f9      	bcc.n	8001a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a16:	f007 ff05 	bl	8009824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a1a:	f7fe fe1d 	bl	8000658 <main>

08001a1e <LoopForever>:

LoopForever:
    b LoopForever
 8001a1e:	e7fe      	b.n	8001a1e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001a20:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001a24:	08009cb0 	.word	0x08009cb0
	ldr	r0, =_sdata
 8001a28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a2c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001a30:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001a34:	200008f2 	.word	0x200008f2

08001a38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <ADC1_IRQHandler>
	...

08001a3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_Init+0x50>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a11      	ldr	r2, [pc, #68]	@ (8001a8c <HAL_Init+0x50>)
 8001a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 fd54 	bl	80024fa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001a52:	f002 fb7d 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <HAL_Init+0x54>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	490c      	ldr	r1, [pc, #48]	@ (8001a94 <HAL_Init+0x58>)
 8001a62:	5ccb      	ldrb	r3, [r1, r3]
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
 8001a68:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <HAL_Init+0x5c>)
 8001a6a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a6c:	2004      	movs	r0, #4
 8001a6e:	f000 fd99 	bl	80025a4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a72:	200f      	movs	r0, #15
 8001a74:	f000 f812 	bl	8001a9c <HAL_InitTick>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e002      	b.n	8001a88 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a82:	f7ff facf 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	46020c00 	.word	0x46020c00
 8001a94:	08009ba0 	.word	0x08009ba0
 8001a98:	20000000 	.word	0x20000000

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001aa8:	4b33      	ldr	r3, [pc, #204]	@ (8001b78 <HAL_InitTick+0xdc>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e05c      	b.n	8001b6e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001ab4:	4b31      	ldr	r3, [pc, #196]	@ (8001b7c <HAL_InitTick+0xe0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d10c      	bne.n	8001ada <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b80 <HAL_InitTick+0xe4>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b78 <HAL_InitTick+0xdc>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	e037      	b.n	8001b4a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001ada:	f000 fdbb 	bl	8002654 <HAL_SYSTICK_GetCLKSourceConfig>
 8001ade:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d023      	beq.n	8001b2e <HAL_InitTick+0x92>
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d82d      	bhi.n	8001b48 <HAL_InitTick+0xac>
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_InitTick+0x5e>
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d00d      	beq.n	8001b14 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001af8:	e026      	b.n	8001b48 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001afa:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <HAL_InitTick+0xe4>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b78 <HAL_InitTick+0xdc>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001b08:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	60fb      	str	r3, [r7, #12]
        break;
 8001b12:	e01a      	b.n	8001b4a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001b14:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <HAL_InitTick+0xdc>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b22:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	60fb      	str	r3, [r7, #12]
        break;
 8001b2c:	e00d      	b.n	8001b4a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001b2e:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_InitTick+0xdc>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b3c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	60fb      	str	r3, [r7, #12]
        break;
 8001b46:	e000      	b.n	8001b4a <HAL_InitTick+0xae>
        break;
 8001b48:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fd08 	bl	8002560 <HAL_SYSTICK_Config>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e009      	b.n	8001b6e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b62:	f000 fcd5 	bl	8002510 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001b66:	4a07      	ldr	r2, [pc, #28]	@ (8001b84 <HAL_InitTick+0xe8>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	e000e010 	.word	0xe000e010
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	200007a4 	.word	0x200007a4

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200007a4 	.word	0x200007a4

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000008 	.word	0x20000008

08001c10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	601a      	str	r2, [r3, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <LL_ADC_SetResolution+0x3c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d104      	bne.n	8001c58 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f023 020c 	bic.w	r2, r3, #12
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	60da      	str	r2, [r3, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	46021000 	.word	0x46021000

08001c78 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c86:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c8a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	2a00      	cmp	r2, #0
 8001ca2:	d002      	beq.n	8001caa <LL_ADC_SetGainCompensation+0x32>
 8001ca4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001ca8:	e000      	b.n	8001cac <LL_ADC_SetGainCompensation+0x34>
 8001caa:	2200      	movs	r2, #0
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2107      	movs	r1, #7
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	401a      	ands	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	431a      	orrs	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6093      	str	r3, [r2, #8]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d84:	d101      	bne.n	8001d8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <LL_ADC_IsEnabled+0x18>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <LL_ADC_IsEnabled+0x1a>
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d101      	bne.n	8001dd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d101      	bne.n	8001dfc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	@ 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e2b3      	b.n	8002394 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a8b      	ldr	r2, [pc, #556]	@ (8002068 <HAL_ADC_Init+0x25c>)
 8001e3a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff f909 	bl	800105c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5f 	bl	8001d20 <LL_ADC_IsDeepPowerDownEnabled>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d004      	beq.n	8001e72 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff45 	bl	8001cfc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff7a 	bl	8001d70 <LL_ADC_IsInternalRegulatorEnabled>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d115      	bne.n	8001eae <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff5e 	bl	8001d48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e8c:	4b77      	ldr	r3, [pc, #476]	@ (800206c <HAL_ADC_Init+0x260>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	099b      	lsrs	r3, r3, #6
 8001e92:	4a77      	ldr	r2, [pc, #476]	@ (8002070 <HAL_ADC_Init+0x264>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ea0:	e002      	b.n	8001ea8 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f9      	bne.n	8001ea2 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff5c 	bl	8001d70 <LL_ADC_IsInternalRegulatorEnabled>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10e      	bne.n	8001edc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001ec2:	f043 0210 	orr.w	r2, r3, #16
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ece:	f043 0201 	orr.w	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff6c 	bl	8001dbe <LL_ADC_REG_IsConversionOngoing>
 8001ee6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 8244 	bne.w	800237e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f040 8240 	bne.w	800237e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f02:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f06:	f043 0202 	orr.w	r2, r3, #2
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff40 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d140      	bne.n	8001fa0 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a51      	ldr	r2, [pc, #324]	@ (8002068 <HAL_ADC_Init+0x25c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d028      	beq.n	8001f7a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a51      	ldr	r2, [pc, #324]	@ (8002074 <HAL_ADC_Init+0x268>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d109      	bne.n	8001f46 <HAL_ADC_Init+0x13a>
 8001f32:	4850      	ldr	r0, [pc, #320]	@ (8002074 <HAL_ADC_Init+0x268>)
 8001f34:	f7ff ff30 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	e008      	b.n	8001f58 <HAL_ADC_Init+0x14c>
 8001f46:	4848      	ldr	r0, [pc, #288]	@ (8002068 <HAL_ADC_Init+0x25c>)
 8001f48:	f7ff ff26 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	bf0c      	ite	eq
 8001f52:	2301      	moveq	r3, #1
 8001f54:	2300      	movne	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d021      	beq.n	8001fa0 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a44      	ldr	r2, [pc, #272]	@ (8002074 <HAL_ADC_Init+0x268>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_Init+0x15e>
 8001f66:	4a44      	ldr	r2, [pc, #272]	@ (8002078 <HAL_ADC_Init+0x26c>)
 8001f68:	e000      	b.n	8001f6c <HAL_ADC_Init+0x160>
 8001f6a:	4a44      	ldr	r2, [pc, #272]	@ (800207c <HAL_ADC_Init+0x270>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f7ff fe4c 	bl	8001c10 <LL_ADC_SetCommonClock>
 8001f78:	e012      	b.n	8001fa0 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f7ff fe57 	bl	8001c38 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800207c <HAL_ADC_Init+0x270>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001f9a:	4938      	ldr	r1, [pc, #224]	@ (800207c <HAL_ADC_Init+0x270>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a30      	ldr	r2, [pc, #192]	@ (8002068 <HAL_ADC_Init+0x25c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d010      	beq.n	8001fcc <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fb0:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001fb6:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001fbc:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001fc4:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	623b      	str	r3, [r7, #32]
 8001fca:	e030      	b.n	800202e <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7f1b      	ldrb	r3, [r3, #28]
 8001fd0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fd8:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fda:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fe0:	2a00      	cmp	r2, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_ADC_Init+0x1de>
 8001fe4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fe8:	e000      	b.n	8001fec <HAL_ADC_Init+0x1e0>
 8001fea:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fec:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ff2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da04      	bge.n	8002006 <HAL_ADC_Init+0x1fa>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002004:	e001      	b.n	800200a <HAL_ADC_Init+0x1fe>
 8002006:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800200a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4918      	ldr	r1, [pc, #96]	@ (8002074 <HAL_ADC_Init+0x268>)
 8002012:	428b      	cmp	r3, r1
 8002014:	d103      	bne.n	800201e <HAL_ADC_Init+0x212>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800201c:	e003      	b.n	8002026 <HAL_ADC_Init+0x21a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002024:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002026:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002028:	6a3a      	ldr	r2, [r7, #32]
 800202a:	4313      	orrs	r3, r2
 800202c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002034:	2b01      	cmp	r3, #1
 8002036:	d12f      	bne.n	8002098 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <HAL_ADC_Init+0x25c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	3b01      	subs	r3, #1
 8002048:	045b      	lsls	r3, r3, #17
 800204a:	6a3a      	ldr	r2, [r7, #32]
 800204c:	4313      	orrs	r3, r2
 800204e:	623b      	str	r3, [r7, #32]
 8002050:	e022      	b.n	8002098 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002058:	2b00      	cmp	r3, #0
 800205a:	d111      	bne.n	8002080 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002062:	623b      	str	r3, [r7, #32]
 8002064:	e018      	b.n	8002098 <HAL_ADC_Init+0x28c>
 8002066:	bf00      	nop
 8002068:	46021000 	.word	0x46021000
 800206c:	20000000 	.word	0x20000000
 8002070:	053e2d63 	.word	0x053e2d63
 8002074:	42028000 	.word	0x42028000
 8002078:	42028308 	.word	0x42028308
 800207c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002084:	f043 0220 	orr.w	r2, r3, #32
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a92      	ldr	r2, [pc, #584]	@ (80022e8 <HAL_ADC_Init+0x4dc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d018      	beq.n	80020d4 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ae:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b6:	4313      	orrs	r3, r2
 80020b8:	6a3a      	ldr	r2, [r7, #32]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	4b89      	ldr	r3, [pc, #548]	@ (80022ec <HAL_ADC_Init+0x4e0>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	6a39      	ldr	r1, [r7, #32]
 80020ce:	430b      	orrs	r3, r1
 80020d0:	60d3      	str	r3, [r2, #12]
 80020d2:	e031      	b.n	8002138 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d009      	beq.n	80020f0 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e8:	4313      	orrs	r3, r2
 80020ea:	6a3a      	ldr	r2, [r7, #32]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	4b7e      	ldr	r3, [pc, #504]	@ (80022f0 <HAL_ADC_Init+0x4e4>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	6a39      	ldr	r1, [r7, #32]
 8002100:	430b      	orrs	r3, r1
 8002102:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1a      	ldr	r2, [r3, #32]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6a      	ldr	r2, [pc, #424]	@ (80022e8 <HAL_ADC_Init+0x4dc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	f000 8093 	beq.w	800226a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fe38 	bl	8001dbe <LL_ADC_REG_IsConversionOngoing>
 800214e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fe45 	bl	8001de4 <LL_ADC_INJ_IsConversionOngoing>
 800215a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d161      	bne.n	8002226 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d15e      	bne.n	8002226 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7f1b      	ldrb	r3, [r3, #28]
 800216c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4960      	ldr	r1, [pc, #384]	@ (80022f4 <HAL_ADC_Init+0x4e8>)
 8002174:	428b      	cmp	r3, r1
 8002176:	d102      	bne.n	800217e <HAL_ADC_Init+0x372>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217c:	e002      	b.n	8002184 <HAL_ADC_Init+0x378>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002182:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002184:	4313      	orrs	r3, r2
 8002186:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	6a39      	ldr	r1, [r7, #32]
 800219c:	430b      	orrs	r3, r1
 800219e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f7ff fd60 	bl	8001c78 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d11e      	bne.n	8002200 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c6:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	4b4a      	ldr	r3, [pc, #296]	@ (80022f8 <HAL_ADC_Init+0x4ec>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80021d6:	0411      	lsls	r1, r2, #16
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021dc:	4311      	orrs	r1, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80021e2:	4311      	orrs	r1, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80021e8:	4311      	orrs	r1, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021ee:	0892      	lsrs	r2, r2, #2
 80021f0:	430a      	orrs	r2, r1
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	611a      	str	r2, [r3, #16]
 80021fe:	e007      	b.n	8002210 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d10c      	bne.n	8002248 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	f023 010f 	bic.w	r1, r3, #15
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	631a      	str	r2, [r3, #48]	@ 0x30
 8002246:	e007      	b.n	8002258 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 020f 	bic.w	r2, r2, #15
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800225c:	f023 0303 	bic.w	r3, r3, #3
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002268:	e092      	b.n	8002390 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002270:	2b01      	cmp	r3, #1
 8002272:	d111      	bne.n	8002298 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800227c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002282:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002288:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	4313      	orrs	r3, r2
 800228e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	4b17      	ldr	r3, [pc, #92]	@ (80022fc <HAL_ADC_Init+0x4f0>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	69f9      	ldr	r1, [r7, #28]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b4:	461a      	mov	r2, r3
 80022b6:	2100      	movs	r1, #0
 80022b8:	f7ff fd01 	bl	8001cbe <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c4:	461a      	mov	r2, r3
 80022c6:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80022ca:	f7ff fcf8 	bl	8001cbe <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d114      	bne.n	8002300 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f062 020f 	orn	r2, r2, #15
 80022e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80022e6:	e024      	b.n	8002332 <HAL_ADC_Init+0x526>
 80022e8:	46021000 	.word	0x46021000
 80022ec:	fff0c013 	.word	0xfff0c013
 80022f0:	ffde800d 	.word	0xffde800d
 80022f4:	42028000 	.word	0x42028000
 80022f8:	fc00f81e 	.word	0xfc00f81e
 80022fc:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002308:	d113      	bne.n	8002332 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	f003 031c 	and.w	r3, r3, #28
 800231c:	f06f 020f 	mvn.w	r2, #15
 8002320:	fa02 f103 	lsl.w	r1, r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	4b18      	ldr	r3, [pc, #96]	@ (800239c <HAL_ADC_Init+0x590>)
 800233a:	4013      	ands	r3, r2
 800233c:	6a3a      	ldr	r2, [r7, #32]
 800233e:	429a      	cmp	r2, r3
 8002340:	d10b      	bne.n	800235a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800234c:	f023 0303 	bic.w	r3, r3, #3
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002358:	e01a      	b.n	8002390 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800235e:	f023 0312 	bic.w	r3, r3, #18
 8002362:	f043 0210 	orr.w	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800237c:	e008      	b.n	8002390 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002382:	f043 0210 	orr.w	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002394:	4618      	mov	r0, r3
 8002396:	3728      	adds	r7, #40	@ 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	833ffff3 	.word	0x833ffff3

080023a0 <__NVIC_SetPriorityGrouping>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_EnableIRQ>:
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0b      	blt.n	800242e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4907      	ldr	r1, [pc, #28]	@ (800243c <__NVIC_EnableIRQ+0x38>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	@ (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	@ (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	@ 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	@ 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff4c 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800251e:	f7ff ff63 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 8002522:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	6978      	ldr	r0, [r7, #20]
 800252a:	f7ff ffb3 	bl	8002494 <NVIC_EncodePriority>
 800252e:	4602      	mov	r2, r0
 8002530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ff82 	bl	8002440 <__NVIC_SetPriority>
}
 800253c:	bf00      	nop
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff56 	bl	8002404 <__NVIC_EnableIRQ>
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002570:	d301      	bcc.n	8002576 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002572:	2301      	movs	r3, #1
 8002574:	e00d      	b.n	8002592 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002576:	4a0a      	ldr	r2, [pc, #40]	@ (80025a0 <HAL_SYSTICK_Config+0x40>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800257e:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <HAL_SYSTICK_Config+0x40>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_SYSTICK_Config+0x40>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a05      	ldr	r2, [pc, #20]	@ (80025a0 <HAL_SYSTICK_Config+0x40>)
 800258a:	f043 0303 	orr.w	r3, r3, #3
 800258e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e010 	.word	0xe000e010

080025a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d844      	bhi.n	800263c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80025b2:	a201      	add	r2, pc, #4	@ (adr r2, 80025b8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	080025db 	.word	0x080025db
 80025bc:	080025f9 	.word	0x080025f9
 80025c0:	0800261b 	.word	0x0800261b
 80025c4:	0800263d 	.word	0x0800263d
 80025c8:	080025cd 	.word	0x080025cd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80025cc:	4b1f      	ldr	r3, [pc, #124]	@ (800264c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1e      	ldr	r2, [pc, #120]	@ (800264c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80025d2:	f043 0304 	orr.w	r3, r3, #4
 80025d6:	6013      	str	r3, [r2, #0]
      break;
 80025d8:	e031      	b.n	800263e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80025da:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1b      	ldr	r2, [pc, #108]	@ (800264c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80025e0:	f023 0304 	bic.w	r3, r3, #4
 80025e4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80025e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80025e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ec:	4a18      	ldr	r2, [pc, #96]	@ (8002650 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80025ee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80025f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80025f6:	e022      	b.n	800263e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80025f8:	4b14      	ldr	r3, [pc, #80]	@ (800264c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a13      	ldr	r2, [pc, #76]	@ (800264c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002604:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800260a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800260e:	4a10      	ldr	r2, [pc, #64]	@ (8002650 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002610:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002614:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002618:	e011      	b.n	800263e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a0b      	ldr	r2, [pc, #44]	@ (800264c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002626:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800262c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002630:	4a07      	ldr	r2, [pc, #28]	@ (8002650 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002632:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002636:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800263a:	e000      	b.n	800263e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800263c:	bf00      	nop
  }
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000e010 	.word	0xe000e010
 8002650:	46020c00 	.word	0x46020c00

08002654 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800265a:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002666:	2304      	movs	r3, #4
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	e021      	b.n	80026b0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800266c:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800266e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002672:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002676:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800267e:	d011      	beq.n	80026a4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002686:	d810      	bhi.n	80026aa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d004      	beq.n	8002698 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002694:	d003      	beq.n	800269e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002696:	e008      	b.n	80026aa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002698:	2300      	movs	r3, #0
 800269a:	607b      	str	r3, [r7, #4]
        break;
 800269c:	e008      	b.n	80026b0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800269e:	2301      	movs	r3, #1
 80026a0:	607b      	str	r3, [r7, #4]
        break;
 80026a2:	e005      	b.n	80026b0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80026a4:	2302      	movs	r3, #2
 80026a6:	607b      	str	r3, [r7, #4]
        break;
 80026a8:	e002      	b.n	80026b0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
        break;
 80026ae:	bf00      	nop
    }
  }
  return systick_source;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010
 80026c4:	46020c00 	.word	0x46020c00

080026c8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	@ 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80026da:	e1ba      	b.n	8002a52 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2101      	movs	r1, #1
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	4013      	ands	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 81aa 	beq.w	8002a4c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a55      	ldr	r2, [pc, #340]	@ (8002850 <HAL_GPIO_Init+0x188>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d15d      	bne.n	80027bc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002706:	2201      	movs	r2, #1
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	4013      	ands	r3, r2
 8002714:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0201 	and.w	r2, r3, #1
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	4313      	orrs	r3, r2
 8002728:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002730:	4a48      	ldr	r2, [pc, #288]	@ (8002854 <HAL_GPIO_Init+0x18c>)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002738:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800273a:	4a46      	ldr	r2, [pc, #280]	@ (8002854 <HAL_GPIO_Init+0x18c>)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	08da      	lsrs	r2, r3, #3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	3208      	adds	r2, #8
 800274e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002752:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	4013      	ands	r3, r2
 8002768:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220b      	movs	r2, #11
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	4313      	orrs	r3, r2
 800277c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	08da      	lsrs	r2, r3, #3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	3208      	adds	r2, #8
 8002786:	69f9      	ldr	r1, [r7, #28]
 8002788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2202      	movs	r2, #2
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e067      	b.n	800288c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x104>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b12      	cmp	r3, #18
 80027ca:	d145      	bne.n	8002858 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	08da      	lsrs	r2, r3, #3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3208      	adds	r2, #8
 80027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	220f      	movs	r2, #15
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f003 020f 	and.w	r2, r3, #15
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	4313      	orrs	r3, r2
 8002808:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	08da      	lsrs	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	69f9      	ldr	r1, [r7, #28]
 8002814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	4013      	ands	r3, r2
 800282e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0203 	and.w	r2, r3, #3
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	4313      	orrs	r3, r2
 8002844:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e01e      	b.n	800288c <HAL_GPIO_Init+0x1c4>
 800284e:	bf00      	nop
 8002850:	46020000 	.word	0x46020000
 8002854:	08009bf8 	.word	0x08009bf8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	4013      	ands	r3, r2
 800286e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0203 	and.w	r2, r3, #3
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	4313      	orrs	r3, r2
 8002884:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d00b      	beq.n	80028ac <HAL_GPIO_Init+0x1e4>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d007      	beq.n	80028ac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028a0:	2b11      	cmp	r3, #17
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b12      	cmp	r3, #18
 80028aa:	d130      	bne.n	800290e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	69fa      	ldr	r2, [r7, #28]
 80028da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80028e2:	2201      	movs	r2, #1
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	f003 0201 	and.w	r2, r3, #1
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	4313      	orrs	r3, r2
 8002906:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d017      	beq.n	8002946 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	4013      	ands	r3, r2
 800292c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	4313      	orrs	r3, r2
 800293e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d07c      	beq.n	8002a4c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002952:	4a47      	ldr	r2, [pc, #284]	@ (8002a70 <HAL_GPIO_Init+0x3a8>)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3318      	adds	r3, #24
 800295a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	4013      	ands	r3, r2
 8002974:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	0a9a      	lsrs	r2, r3, #10
 800297a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a74 <HAL_GPIO_Init+0x3ac>)
 800297c:	4013      	ands	r3, r2
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	f002 0203 	and.w	r2, r2, #3
 8002984:	00d2      	lsls	r2, r2, #3
 8002986:	4093      	lsls	r3, r2
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	4313      	orrs	r3, r2
 800298c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800298e:	4938      	ldr	r1, [pc, #224]	@ (8002a70 <HAL_GPIO_Init+0x3a8>)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3318      	adds	r3, #24
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800299c:	4b34      	ldr	r3, [pc, #208]	@ (8002a70 <HAL_GPIO_Init+0x3a8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80029c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002a70 <HAL_GPIO_Init+0x3a8>)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80029c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a70 <HAL_GPIO_Init+0x3a8>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80029ea:	4a21      	ldr	r2, [pc, #132]	@ (8002a70 <HAL_GPIO_Init+0x3a8>)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80029f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a70 <HAL_GPIO_Init+0x3a8>)
 80029f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69fa      	ldr	r2, [r7, #28]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002a16:	4a16      	ldr	r2, [pc, #88]	@ (8002a70 <HAL_GPIO_Init+0x3a8>)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002a1e:	4b14      	ldr	r3, [pc, #80]	@ (8002a70 <HAL_GPIO_Init+0x3a8>)
 8002a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a24:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002a44:	4a0a      	ldr	r2, [pc, #40]	@ (8002a70 <HAL_GPIO_Init+0x3a8>)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f47f ae3d 	bne.w	80026dc <HAL_GPIO_Init+0x14>
  }
}
 8002a62:	bf00      	nop
 8002a64:	bf00      	nop
 8002a66:	3724      	adds	r7, #36	@ 0x24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	46022000 	.word	0x46022000
 8002a74:	002f7f7f 	.word	0x002f7f7f

08002a78 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	041a      	lsls	r2, r3, #16
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43d9      	mvns	r1, r3
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	400b      	ands	r3, r1
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f814 	bl	8002af8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002ad0:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d006      	beq.n	8002aea <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002adc:	4a05      	ldr	r2, [pc, #20]	@ (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 f812 	bl	8002b0e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	46022000 	.word	0x46022000

08002af8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e059      	b.n	8002bea <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d106      	bne.n	8002b56 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7fe fd9b 	bl	800168c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4a24      	ldr	r2, [pc, #144]	@ (8002bf4 <HAL_HCD_Init+0xd0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d102      	bne.n	8002b6c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f006 f9a8 	bl	8008ec6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7c1a      	ldrb	r2, [r3, #16]
 8002b7e:	f88d 2000 	strb.w	r2, [sp]
 8002b82:	3304      	adds	r3, #4
 8002b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b86:	f006 f971 	bl	8008e6c <USB_CoreInit>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e026      	b.n	8002bea <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f006 f9a0 	bl	8008ee8 <USB_SetCurrentMode>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e017      	b.n	8002bea <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7c1a      	ldrb	r2, [r3, #16]
 8002bc2:	f88d 2000 	strb.w	r2, [sp]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bca:	f006 fa79 	bl	80090c0 <USB_HostInit>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e004      	b.n	8002bea <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	42040000 	.word	0x42040000

08002bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e08d      	b.n	8002d26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe faa0 	bl	8001164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	@ 0x24
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	e006      	b.n	8002c80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d108      	bne.n	8002c9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	e007      	b.n	8002caa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ccc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69d9      	ldr	r1, [r3, #28]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d138      	bne.n	8002db6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e032      	b.n	8002db8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2224      	movs	r2, #36	@ 0x24
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d80:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6819      	ldr	r1, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
  }
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d139      	bne.n	8002e4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e033      	b.n	8002e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2224      	movs	r2, #36	@ 0x24
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002e64:	4b39      	ldr	r3, [pc, #228]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e6c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d10b      	bne.n	8002e8e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e7c:	d905      	bls.n	8002e8a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002e7e:	4b33      	ldr	r3, [pc, #204]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	4a32      	ldr	r2, [pc, #200]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e88:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e057      	b.n	8002f3e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e94:	d90a      	bls.n	8002eac <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002e96:	4b2d      	ldr	r3, [pc, #180]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea8:	60d3      	str	r3, [r2, #12]
 8002eaa:	e007      	b.n	8002ebc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002eac:	4b27      	ldr	r3, [pc, #156]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002eb4:	4925      	ldr	r1, [pc, #148]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002ebc:	4b24      	ldr	r3, [pc, #144]	@ (8002f50 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a24      	ldr	r2, [pc, #144]	@ (8002f54 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	099b      	lsrs	r3, r3, #6
 8002ec8:	2232      	movs	r2, #50	@ 0x32
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	4a21      	ldr	r2, [pc, #132]	@ (8002f54 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002eda:	e002      	b.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f3      	bne.n	8002edc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01b      	beq.n	8002f32 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002efa:	4b15      	ldr	r3, [pc, #84]	@ (8002f50 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a15      	ldr	r2, [pc, #84]	@ (8002f54 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	099b      	lsrs	r3, r3, #6
 8002f06:	2232      	movs	r2, #50	@ 0x32
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	4a11      	ldr	r2, [pc, #68]	@ (8002f54 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	3301      	adds	r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002f18:	e002      	b.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002f20:	4b0a      	ldr	r3, [pc, #40]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f3      	bne.n	8002f1a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e000      	b.n	8002f3e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	46020800 	.word	0x46020800
 8002f50:	20000000 	.word	0x20000000
 8002f54:	10624dd3 	.word	0x10624dd3

08002f58 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002f5c:	4b04      	ldr	r3, [pc, #16]	@ (8002f70 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	46020800 	.word	0x46020800

08002f74 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	4a04      	ldr	r2, [pc, #16]	@ (8002f90 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f82:	6113      	str	r3, [r2, #16]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	46020800 	.word	0x46020800

08002f94 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <HAL_PWREx_EnableVddA+0x1c>)
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <HAL_PWREx_EnableVddA+0x1c>)
 8002f9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fa2:	6113      	str	r3, [r2, #16]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	46020800 	.word	0x46020800

08002fb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08e      	sub	sp, #56	@ 0x38
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f000 bec8 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fce:	4b99      	ldr	r3, [pc, #612]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fd8:	4b96      	ldr	r3, [pc, #600]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8002fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 816c 	beq.w	80032c8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <HAL_RCC_OscConfig+0x52>
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	f040 80de 	bne.w	80031ba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003000:	2b01      	cmp	r3, #1
 8003002:	f040 80da 	bne.w	80031ba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f000 bea5 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003018:	4b86      	ldr	r3, [pc, #536]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_RCC_OscConfig+0x7a>
 8003024:	4b83      	ldr	r3, [pc, #524]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800302c:	e005      	b.n	800303a <HAL_RCC_OscConfig+0x86>
 800302e:	4b81      	ldr	r3, [pc, #516]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003034:	041b      	lsls	r3, r3, #16
 8003036:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800303a:	4293      	cmp	r3, r2
 800303c:	d255      	bcs.n	80030ea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	4618      	mov	r0, r3
 800304a:	f001 f9d9 	bl	8004400 <RCC_SetFlashLatencyFromMSIRange>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	f000 be82 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800305a:	4b76      	ldr	r3, [pc, #472]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4a75      	ldr	r2, [pc, #468]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003060:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003064:	6093      	str	r3, [r2, #8]
 8003066:	4b73      	ldr	r3, [pc, #460]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	4970      	ldr	r1, [pc, #448]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003074:	4313      	orrs	r3, r2
 8003076:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003080:	d309      	bcc.n	8003096 <HAL_RCC_OscConfig+0xe2>
 8003082:	4b6c      	ldr	r3, [pc, #432]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f023 021f 	bic.w	r2, r3, #31
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4969      	ldr	r1, [pc, #420]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003090:	4313      	orrs	r3, r2
 8003092:	60cb      	str	r3, [r1, #12]
 8003094:	e07e      	b.n	8003194 <HAL_RCC_OscConfig+0x1e0>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0a      	bge.n	80030b4 <HAL_RCC_OscConfig+0x100>
 800309e:	4b65      	ldr	r3, [pc, #404]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	015b      	lsls	r3, r3, #5
 80030ac:	4961      	ldr	r1, [pc, #388]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60cb      	str	r3, [r1, #12]
 80030b2:	e06f      	b.n	8003194 <HAL_RCC_OscConfig+0x1e0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030bc:	d30a      	bcc.n	80030d4 <HAL_RCC_OscConfig+0x120>
 80030be:	4b5d      	ldr	r3, [pc, #372]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	029b      	lsls	r3, r3, #10
 80030cc:	4959      	ldr	r1, [pc, #356]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60cb      	str	r3, [r1, #12]
 80030d2:	e05f      	b.n	8003194 <HAL_RCC_OscConfig+0x1e0>
 80030d4:	4b57      	ldr	r3, [pc, #348]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	03db      	lsls	r3, r3, #15
 80030e2:	4954      	ldr	r1, [pc, #336]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60cb      	str	r3, [r1, #12]
 80030e8:	e054      	b.n	8003194 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80030ea:	4b52      	ldr	r3, [pc, #328]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	4a51      	ldr	r2, [pc, #324]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80030f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030f4:	6093      	str	r3, [r2, #8]
 80030f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	494c      	ldr	r1, [pc, #304]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003110:	d309      	bcc.n	8003126 <HAL_RCC_OscConfig+0x172>
 8003112:	4b48      	ldr	r3, [pc, #288]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f023 021f 	bic.w	r2, r3, #31
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4945      	ldr	r1, [pc, #276]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003120:	4313      	orrs	r3, r2
 8003122:	60cb      	str	r3, [r1, #12]
 8003124:	e028      	b.n	8003178 <HAL_RCC_OscConfig+0x1c4>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	da0a      	bge.n	8003144 <HAL_RCC_OscConfig+0x190>
 800312e:	4b41      	ldr	r3, [pc, #260]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	015b      	lsls	r3, r3, #5
 800313c:	493d      	ldr	r1, [pc, #244]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 800313e:	4313      	orrs	r3, r2
 8003140:	60cb      	str	r3, [r1, #12]
 8003142:	e019      	b.n	8003178 <HAL_RCC_OscConfig+0x1c4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314c:	d30a      	bcc.n	8003164 <HAL_RCC_OscConfig+0x1b0>
 800314e:	4b39      	ldr	r3, [pc, #228]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	029b      	lsls	r3, r3, #10
 800315c:	4935      	ldr	r1, [pc, #212]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 800315e:	4313      	orrs	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]
 8003162:	e009      	b.n	8003178 <HAL_RCC_OscConfig+0x1c4>
 8003164:	4b33      	ldr	r3, [pc, #204]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	03db      	lsls	r3, r3, #15
 8003172:	4930      	ldr	r1, [pc, #192]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003174:	4313      	orrs	r3, r2
 8003176:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10a      	bne.n	8003194 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	4618      	mov	r0, r3
 8003184:	f001 f93c 	bl	8004400 <RCC_SetFlashLatencyFromMSIRange>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f000 bde5 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003194:	f001 f8de 	bl	8004354 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003198:	4b27      	ldr	r3, [pc, #156]	@ (8003238 <HAL_RCC_OscConfig+0x284>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fc7d 	bl	8001a9c <HAL_InitTick>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80031a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 808a 	beq.w	80032c6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80031b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031b6:	f000 bdd2 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d066      	beq.n	8003290 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80031c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80031ce:	f7fe fcef 	bl	8001bb0 <HAL_GetTick>
 80031d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80031d4:	e009      	b.n	80031ea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031d6:	f7fe fceb 	bl	8001bb0 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d902      	bls.n	80031ea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	f000 bdba 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80031ea:	4b12      	ldr	r3, [pc, #72]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ef      	beq.n	80031d6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80031f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 80031fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003200:	6093      	str	r3, [r2, #8]
 8003202:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	4909      	ldr	r1, [pc, #36]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800321c:	d30e      	bcc.n	800323c <HAL_RCC_OscConfig+0x288>
 800321e:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f023 021f 	bic.w	r2, r3, #31
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4902      	ldr	r1, [pc, #8]	@ (8003234 <HAL_RCC_OscConfig+0x280>)
 800322c:	4313      	orrs	r3, r2
 800322e:	60cb      	str	r3, [r1, #12]
 8003230:	e04a      	b.n	80032c8 <HAL_RCC_OscConfig+0x314>
 8003232:	bf00      	nop
 8003234:	46020c00 	.word	0x46020c00
 8003238:	20000004 	.word	0x20000004
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	2b00      	cmp	r3, #0
 8003242:	da0a      	bge.n	800325a <HAL_RCC_OscConfig+0x2a6>
 8003244:	4b98      	ldr	r3, [pc, #608]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	015b      	lsls	r3, r3, #5
 8003252:	4995      	ldr	r1, [pc, #596]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003254:	4313      	orrs	r3, r2
 8003256:	60cb      	str	r3, [r1, #12]
 8003258:	e036      	b.n	80032c8 <HAL_RCC_OscConfig+0x314>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003262:	d30a      	bcc.n	800327a <HAL_RCC_OscConfig+0x2c6>
 8003264:	4b90      	ldr	r3, [pc, #576]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	029b      	lsls	r3, r3, #10
 8003272:	498d      	ldr	r1, [pc, #564]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
 8003278:	e026      	b.n	80032c8 <HAL_RCC_OscConfig+0x314>
 800327a:	4b8b      	ldr	r3, [pc, #556]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	03db      	lsls	r3, r3, #15
 8003288:	4987      	ldr	r1, [pc, #540]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	60cb      	str	r3, [r1, #12]
 800328e:	e01b      	b.n	80032c8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003290:	4b85      	ldr	r3, [pc, #532]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a84      	ldr	r2, [pc, #528]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003296:	f023 0301 	bic.w	r3, r3, #1
 800329a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800329c:	f7fe fc88 	bl	8001bb0 <HAL_GetTick>
 80032a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80032a2:	e009      	b.n	80032b8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032a4:	f7fe fc84 	bl	8001bb0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d902      	bls.n	80032b8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	f000 bd53 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80032b8:	4b7b      	ldr	r3, [pc, #492]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1ef      	bne.n	80032a4 <HAL_RCC_OscConfig+0x2f0>
 80032c4:	e000      	b.n	80032c8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80032c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 808b 	beq.w	80033ec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80032d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_OscConfig+0x334>
 80032dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d17d      	bne.n	80033ec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f000 bd34 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x35a>
 8003300:	4b69      	ldr	r3, [pc, #420]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a68      	ldr	r2, [pc, #416]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	e041      	b.n	8003392 <HAL_RCC_OscConfig+0x3de>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003316:	d112      	bne.n	800333e <HAL_RCC_OscConfig+0x38a>
 8003318:	4b63      	ldr	r3, [pc, #396]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a62      	ldr	r2, [pc, #392]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800331e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b60      	ldr	r3, [pc, #384]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a5f      	ldr	r2, [pc, #380]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800332a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b5d      	ldr	r3, [pc, #372]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a5c      	ldr	r2, [pc, #368]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	e029      	b.n	8003392 <HAL_RCC_OscConfig+0x3de>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003346:	d112      	bne.n	800336e <HAL_RCC_OscConfig+0x3ba>
 8003348:	4b57      	ldr	r3, [pc, #348]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a56      	ldr	r2, [pc, #344]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800334e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	4b54      	ldr	r3, [pc, #336]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a53      	ldr	r2, [pc, #332]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800335a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b51      	ldr	r3, [pc, #324]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a50      	ldr	r2, [pc, #320]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e011      	b.n	8003392 <HAL_RCC_OscConfig+0x3de>
 800336e:	4b4e      	ldr	r3, [pc, #312]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a4d      	ldr	r2, [pc, #308]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b4b      	ldr	r3, [pc, #300]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a4a      	ldr	r2, [pc, #296]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003380:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b48      	ldr	r3, [pc, #288]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a47      	ldr	r2, [pc, #284]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800338c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003390:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d014      	beq.n	80033c4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800339a:	f7fe fc09 	bl	8001bb0 <HAL_GetTick>
 800339e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a0:	e009      	b.n	80033b6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a2:	f7fe fc05 	bl	8001bb0 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b64      	cmp	r3, #100	@ 0x64
 80033ae:	d902      	bls.n	80033b6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	f000 bcd4 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b6:	4b3c      	ldr	r3, [pc, #240]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0ef      	beq.n	80033a2 <HAL_RCC_OscConfig+0x3ee>
 80033c2:	e013      	b.n	80033ec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80033c4:	f7fe fbf4 	bl	8001bb0 <HAL_GetTick>
 80033c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ca:	e009      	b.n	80033e0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fe fbf0 	bl	8001bb0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	@ 0x64
 80033d8:	d902      	bls.n	80033e0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	f000 bcbf 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033e0:	4b31      	ldr	r3, [pc, #196]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1ef      	bne.n	80033cc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05f      	beq.n	80034b8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d005      	beq.n	800340a <HAL_RCC_OscConfig+0x456>
 80033fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003400:	2b0c      	cmp	r3, #12
 8003402:	d114      	bne.n	800342e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003406:	2b02      	cmp	r3, #2
 8003408:	d111      	bne.n	800342e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d102      	bne.n	8003418 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f000 bca3 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003418:	4b23      	ldr	r3, [pc, #140]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	4920      	ldr	r1, [pc, #128]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800342c:	e044      	b.n	80034b8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d024      	beq.n	8003480 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003436:	4b1c      	ldr	r3, [pc, #112]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1b      	ldr	r2, [pc, #108]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003440:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003442:	f7fe fbb5 	bl	8001bb0 <HAL_GetTick>
 8003446:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003448:	e009      	b.n	800345e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344a:	f7fe fbb1 	bl	8001bb0 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d902      	bls.n	800345e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	f000 bc80 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800345e:	4b12      	ldr	r3, [pc, #72]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0ef      	beq.n	800344a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800346a:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	041b      	lsls	r3, r3, #16
 8003478:	490b      	ldr	r1, [pc, #44]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	610b      	str	r3, [r1, #16]
 800347e:	e01b      	b.n	80034b8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003480:	4b09      	ldr	r3, [pc, #36]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a08      	ldr	r2, [pc, #32]	@ (80034a8 <HAL_RCC_OscConfig+0x4f4>)
 8003486:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800348a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800348c:	f7fe fb90 	bl	8001bb0 <HAL_GetTick>
 8003490:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003492:	e00b      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003494:	f7fe fb8c 	bl	8001bb0 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d904      	bls.n	80034ac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	f000 bc5b 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
 80034a8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ac:	4baf      	ldr	r3, [pc, #700]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1ed      	bne.n	8003494 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80c8 	beq.w	8003656 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034cc:	4ba7      	ldr	r3, [pc, #668]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80034ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d111      	bne.n	80034fe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034da:	4ba4      	ldr	r3, [pc, #656]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80034dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e0:	4aa2      	ldr	r2, [pc, #648]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80034ea:	4ba0      	ldr	r3, [pc, #640]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80034ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80034fe:	4b9c      	ldr	r3, [pc, #624]	@ (8003770 <HAL_RCC_OscConfig+0x7bc>)
 8003500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d119      	bne.n	800353e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800350a:	4b99      	ldr	r3, [pc, #612]	@ (8003770 <HAL_RCC_OscConfig+0x7bc>)
 800350c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350e:	4a98      	ldr	r2, [pc, #608]	@ (8003770 <HAL_RCC_OscConfig+0x7bc>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003516:	f7fe fb4b 	bl	8001bb0 <HAL_GetTick>
 800351a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800351c:	e009      	b.n	8003532 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351e:	f7fe fb47 	bl	8001bb0 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d902      	bls.n	8003532 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	f000 bc16 	b.w	8003d5e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003532:	4b8f      	ldr	r3, [pc, #572]	@ (8003770 <HAL_RCC_OscConfig+0x7bc>)
 8003534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0ef      	beq.n	800351e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d05f      	beq.n	8003606 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003546:	4b89      	ldr	r3, [pc, #548]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 8003548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800354c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003558:	429a      	cmp	r2, r3
 800355a:	d037      	beq.n	80035cc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e3f4      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01b      	beq.n	80035b6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800357e:	4b7b      	ldr	r3, [pc, #492]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 8003580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003584:	4a79      	ldr	r2, [pc, #484]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 8003586:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800358a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800358e:	f7fe fb0f 	bl	8001bb0 <HAL_GetTick>
 8003592:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003596:	f7fe fb0b 	bl	8001bb0 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b05      	cmp	r3, #5
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e3da      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80035a8:	4b70      	ldr	r3, [pc, #448]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80035aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1ef      	bne.n	8003596 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80035b6:	4b6d      	ldr	r3, [pc, #436]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80035b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	4969      	ldr	r1, [pc, #420]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80035cc:	4b67      	ldr	r3, [pc, #412]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80035ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035d2:	4a66      	ldr	r2, [pc, #408]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80035d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80035dc:	f7fe fae8 	bl	8001bb0 <HAL_GetTick>
 80035e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fe fae4 	bl	8001bb0 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e3b3      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80035f6:	4b5d      	ldr	r3, [pc, #372]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80035f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ef      	beq.n	80035e4 <HAL_RCC_OscConfig+0x630>
 8003604:	e01b      	b.n	800363e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003606:	4b59      	ldr	r3, [pc, #356]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 8003608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800360c:	4a57      	ldr	r2, [pc, #348]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 800360e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003612:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003616:	f7fe facb 	bl	8001bb0 <HAL_GetTick>
 800361a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361e:	f7fe fac7 	bl	8001bb0 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b05      	cmp	r3, #5
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e396      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003630:	4b4e      	ldr	r3, [pc, #312]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 8003632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ef      	bne.n	800361e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800363e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003646:	4b49      	ldr	r3, [pc, #292]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 8003648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800364c:	4a47      	ldr	r2, [pc, #284]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 800364e:	f023 0304 	bic.w	r3, r3, #4
 8003652:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8111 	beq.w	8003886 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003664:	2300      	movs	r3, #0
 8003666:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366a:	4b40      	ldr	r3, [pc, #256]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 800366c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003678:	4b3c      	ldr	r3, [pc, #240]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 800367a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800367e:	4a3b      	ldr	r2, [pc, #236]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 8003680:	f043 0304 	orr.w	r3, r3, #4
 8003684:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003688:	4b38      	ldr	r3, [pc, #224]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 800368a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800369c:	4b34      	ldr	r3, [pc, #208]	@ (8003770 <HAL_RCC_OscConfig+0x7bc>)
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d118      	bne.n	80036da <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80036a8:	4b31      	ldr	r3, [pc, #196]	@ (8003770 <HAL_RCC_OscConfig+0x7bc>)
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	4a30      	ldr	r2, [pc, #192]	@ (8003770 <HAL_RCC_OscConfig+0x7bc>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b4:	f7fe fa7c 	bl	8001bb0 <HAL_GetTick>
 80036b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fe fa78 	bl	8001bb0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e347      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80036ce:	4b28      	ldr	r3, [pc, #160]	@ (8003770 <HAL_RCC_OscConfig+0x7bc>)
 80036d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01f      	beq.n	8003726 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d010      	beq.n	8003714 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036f2:	4b1e      	ldr	r3, [pc, #120]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80036f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036f8:	4a1c      	ldr	r2, [pc, #112]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003702:	4b1a      	ldr	r3, [pc, #104]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 8003704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003708:	4a18      	ldr	r2, [pc, #96]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003712:	e018      	b.n	8003746 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003714:	4b15      	ldr	r3, [pc, #84]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 8003716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800371a:	4a14      	ldr	r2, [pc, #80]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003724:	e00f      	b.n	8003746 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003726:	4b11      	ldr	r3, [pc, #68]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 8003728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800372c:	4a0f      	ldr	r2, [pc, #60]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003736:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 8003738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800373c:	4a0b      	ldr	r2, [pc, #44]	@ (800376c <HAL_RCC_OscConfig+0x7b8>)
 800373e:	f023 0304 	bic.w	r3, r3, #4
 8003742:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d057      	beq.n	80037fe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800374e:	f7fe fa2f 	bl	8001bb0 <HAL_GetTick>
 8003752:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003754:	e00e      	b.n	8003774 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003756:	f7fe fa2b 	bl	8001bb0 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003764:	4293      	cmp	r3, r2
 8003766:	d905      	bls.n	8003774 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e2f8      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
 800376c:	46020c00 	.word	0x46020c00
 8003770:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003774:	4b9c      	ldr	r3, [pc, #624]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 8003776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0e9      	beq.n	8003756 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01b      	beq.n	80037c6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800378e:	4b96      	ldr	r3, [pc, #600]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 8003790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003794:	4a94      	ldr	r2, [pc, #592]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 8003796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800379a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f7fe fa06 	bl	8001bb0 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e2d3      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80037b6:	4b8c      	ldr	r3, [pc, #560]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80037b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ed      	beq.n	80037a0 <HAL_RCC_OscConfig+0x7ec>
 80037c4:	e053      	b.n	800386e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80037c6:	4b88      	ldr	r3, [pc, #544]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80037c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037cc:	4a86      	ldr	r2, [pc, #536]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80037ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d8:	f7fe f9ea 	bl	8001bb0 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e2b7      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037ee:	4b7e      	ldr	r3, [pc, #504]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80037f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1ed      	bne.n	80037d8 <HAL_RCC_OscConfig+0x824>
 80037fc:	e037      	b.n	800386e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80037fe:	f7fe f9d7 	bl	8001bb0 <HAL_GetTick>
 8003802:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fe f9d3 	bl	8001bb0 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e2a0      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800381c:	4b72      	ldr	r3, [pc, #456]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 800381e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1ed      	bne.n	8003806 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800382a:	4b6f      	ldr	r3, [pc, #444]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 800382c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01a      	beq.n	800386e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003838:	4b6b      	ldr	r3, [pc, #428]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 800383a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800383e:	4a6a      	ldr	r2, [pc, #424]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 8003840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003844:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003848:	e00a      	b.n	8003860 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fe f9b1 	bl	8001bb0 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003858:	4293      	cmp	r3, r2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e27e      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003860:	4b61      	ldr	r3, [pc, #388]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 8003862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003866:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1ed      	bne.n	800384a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800386e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003872:	2b01      	cmp	r3, #1
 8003874:	d107      	bne.n	8003886 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003876:	4b5c      	ldr	r3, [pc, #368]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 8003878:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800387c:	4a5a      	ldr	r2, [pc, #360]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 800387e:	f023 0304 	bic.w	r3, r3, #4
 8003882:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d036      	beq.n	8003900 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d019      	beq.n	80038ce <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800389a:	4b53      	ldr	r3, [pc, #332]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a52      	ldr	r2, [pc, #328]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80038a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80038a4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80038a6:	f7fe f983 	bl	8001bb0 <HAL_GetTick>
 80038aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ae:	f7fe f97f 	bl	8001bb0 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e24e      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80038c0:	4b49      	ldr	r3, [pc, #292]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x8fa>
 80038cc:	e018      	b.n	8003900 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80038ce:	4b46      	ldr	r3, [pc, #280]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a45      	ldr	r2, [pc, #276]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80038d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80038da:	f7fe f969 	bl	8001bb0 <HAL_GetTick>
 80038de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038e2:	f7fe f965 	bl	8001bb0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e234      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80038f4:	4b3c      	ldr	r3, [pc, #240]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f0      	bne.n	80038e2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003908:	2b00      	cmp	r3, #0
 800390a:	d036      	beq.n	800397a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003910:	2b00      	cmp	r3, #0
 8003912:	d019      	beq.n	8003948 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003914:	4b34      	ldr	r3, [pc, #208]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a33      	ldr	r2, [pc, #204]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 800391a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800391e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003920:	f7fe f946 	bl	8001bb0 <HAL_GetTick>
 8003924:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003928:	f7fe f942 	bl	8001bb0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e211      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800393a:	4b2b      	ldr	r3, [pc, #172]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x974>
 8003946:	e018      	b.n	800397a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003948:	4b27      	ldr	r3, [pc, #156]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a26      	ldr	r2, [pc, #152]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 800394e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003952:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003954:	f7fe f92c 	bl	8001bb0 <HAL_GetTick>
 8003958:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800395c:	f7fe f928 	bl	8001bb0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1f7      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800396e:	4b1e      	ldr	r3, [pc, #120]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d07f      	beq.n	8003a86 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398a:	2b00      	cmp	r3, #0
 800398c:	d062      	beq.n	8003a54 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800398e:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	4a15      	ldr	r2, [pc, #84]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 8003994:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003998:	6093      	str	r3, [r2, #8]
 800399a:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a6:	4910      	ldr	r1, [pc, #64]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80039b4:	d309      	bcc.n	80039ca <HAL_RCC_OscConfig+0xa16>
 80039b6:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f023 021f 	bic.w	r2, r3, #31
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4909      	ldr	r1, [pc, #36]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60cb      	str	r3, [r1, #12]
 80039c8:	e02a      	b.n	8003a20 <HAL_RCC_OscConfig+0xa6c>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	da0c      	bge.n	80039ec <HAL_RCC_OscConfig+0xa38>
 80039d2:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	015b      	lsls	r3, r3, #5
 80039e0:	4901      	ldr	r1, [pc, #4]	@ (80039e8 <HAL_RCC_OscConfig+0xa34>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60cb      	str	r3, [r1, #12]
 80039e6:	e01b      	b.n	8003a20 <HAL_RCC_OscConfig+0xa6c>
 80039e8:	46020c00 	.word	0x46020c00
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f4:	d30a      	bcc.n	8003a0c <HAL_RCC_OscConfig+0xa58>
 80039f6:	4ba1      	ldr	r3, [pc, #644]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	029b      	lsls	r3, r3, #10
 8003a04:	499d      	ldr	r1, [pc, #628]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60cb      	str	r3, [r1, #12]
 8003a0a:	e009      	b.n	8003a20 <HAL_RCC_OscConfig+0xa6c>
 8003a0c:	4b9b      	ldr	r3, [pc, #620]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	03db      	lsls	r3, r3, #15
 8003a1a:	4998      	ldr	r1, [pc, #608]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003a20:	4b96      	ldr	r3, [pc, #600]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a95      	ldr	r2, [pc, #596]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003a26:	f043 0310 	orr.w	r3, r3, #16
 8003a2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003a2c:	f7fe f8c0 	bl	8001bb0 <HAL_GetTick>
 8003a30:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003a34:	f7fe f8bc 	bl	8001bb0 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e18b      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003a46:	4b8d      	ldr	r3, [pc, #564]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xa80>
 8003a52:	e018      	b.n	8003a86 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003a54:	4b89      	ldr	r3, [pc, #548]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a88      	ldr	r2, [pc, #544]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003a5a:	f023 0310 	bic.w	r3, r3, #16
 8003a5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003a60:	f7fe f8a6 	bl	8001bb0 <HAL_GetTick>
 8003a64:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003a68:	f7fe f8a2 	bl	8001bb0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e171      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003a7a:	4b80      	ldr	r3, [pc, #512]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8166 	beq.w	8003d5c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a96:	4b79      	ldr	r3, [pc, #484]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	f000 80f2 	beq.w	8003c88 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	f040 80c5 	bne.w	8003c38 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003aae:	4b73      	ldr	r3, [pc, #460]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a72      	ldr	r2, [pc, #456]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003ab4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ab8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003aba:	f7fe f879 	bl	8001bb0 <HAL_GetTick>
 8003abe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fe f875 	bl	8001bb0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e144      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ad4:	4b69      	ldr	r3, [pc, #420]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae0:	4b66      	ldr	r3, [pc, #408]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d111      	bne.n	8003b12 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003aee:	4b63      	ldr	r3, [pc, #396]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003af4:	4a61      	ldr	r2, [pc, #388]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003af6:	f043 0304 	orr.w	r3, r3, #4
 8003afa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003afe:	4b5f      	ldr	r3, [pc, #380]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003b12:	4b5b      	ldr	r3, [pc, #364]	@ (8003c80 <HAL_RCC_OscConfig+0xccc>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b1e:	d102      	bne.n	8003b26 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003b26:	4b56      	ldr	r3, [pc, #344]	@ (8003c80 <HAL_RCC_OscConfig+0xccc>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	4a55      	ldr	r2, [pc, #340]	@ (8003c80 <HAL_RCC_OscConfig+0xccc>)
 8003b2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b30:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003b32:	4b52      	ldr	r3, [pc, #328]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b46:	3a01      	subs	r2, #1
 8003b48:	0212      	lsls	r2, r2, #8
 8003b4a:	4311      	orrs	r1, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b50:	430a      	orrs	r2, r1
 8003b52:	494a      	ldr	r1, [pc, #296]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	628b      	str	r3, [r1, #40]	@ 0x28
 8003b58:	4b48      	ldr	r3, [pc, #288]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003b5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b5c:	4b49      	ldr	r3, [pc, #292]	@ (8003c84 <HAL_RCC_OscConfig+0xcd0>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b64:	3a01      	subs	r2, #1
 8003b66:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003b6e:	3a01      	subs	r2, #1
 8003b70:	0252      	lsls	r2, r2, #9
 8003b72:	b292      	uxth	r2, r2
 8003b74:	4311      	orrs	r1, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	0412      	lsls	r2, r2, #16
 8003b7e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003b82:	4311      	orrs	r1, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003b88:	3a01      	subs	r2, #1
 8003b8a:	0612      	lsls	r2, r2, #24
 8003b8c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003b90:	430a      	orrs	r2, r1
 8003b92:	493a      	ldr	r1, [pc, #232]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003b98:	4b38      	ldr	r3, [pc, #224]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9c:	4a37      	ldr	r2, [pc, #220]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003b9e:	f023 0310 	bic.w	r3, r3, #16
 8003ba2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba8:	4a34      	ldr	r2, [pc, #208]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003bae:	4b33      	ldr	r3, [pc, #204]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb2:	4a32      	ldr	r2, [pc, #200]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003bb4:	f043 0310 	orr.w	r3, r3, #16
 8003bb8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003bba:	4b30      	ldr	r3, [pc, #192]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	f023 020c 	bic.w	r2, r3, #12
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc6:	492d      	ldr	r1, [pc, #180]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c80 <HAL_RCC_OscConfig+0xccc>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a29      	ldr	r2, [pc, #164]	@ (8003c80 <HAL_RCC_OscConfig+0xccc>)
 8003bda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bde:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003be0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d107      	bne.n	8003bf8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003be8:	4b24      	ldr	r3, [pc, #144]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bee:	4a23      	ldr	r2, [pc, #140]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003bf8:	4b20      	ldr	r3, [pc, #128]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c02:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c04:	f7fd ffd4 	bl	8001bb0 <HAL_GetTick>
 8003c08:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fd ffd0 	bl	8001bb0 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e09f      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003c1e:	4b17      	ldr	r3, [pc, #92]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c2a:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	4a13      	ldr	r2, [pc, #76]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c34:	6293      	str	r3, [r2, #40]	@ 0x28
 8003c36:	e091      	b.n	8003d5c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003c38:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003c3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c42:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c44:	f7fd ffb4 	bl	8001bb0 <HAL_GetTick>
 8003c48:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fd ffb0 	bl	8001bb0 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e07f      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c5e:	4b07      	ldr	r3, [pc, #28]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003c6a:	4b04      	ldr	r3, [pc, #16]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6e:	4a03      	ldr	r2, [pc, #12]	@ (8003c7c <HAL_RCC_OscConfig+0xcc8>)
 8003c70:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003c74:	f023 0303 	bic.w	r3, r3, #3
 8003c78:	6293      	str	r3, [r2, #40]	@ 0x28
 8003c7a:	e06f      	b.n	8003d5c <HAL_RCC_OscConfig+0xda8>
 8003c7c:	46020c00 	.word	0x46020c00
 8003c80:	46020800 	.word	0x46020800
 8003c84:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003c88:	4b37      	ldr	r3, [pc, #220]	@ (8003d68 <HAL_RCC_OscConfig+0xdb4>)
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c8e:	4b36      	ldr	r3, [pc, #216]	@ (8003d68 <HAL_RCC_OscConfig+0xdb4>)
 8003c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c92:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d039      	beq.n	8003d10 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0203 	and.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d132      	bne.n	8003d10 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d129      	bne.n	8003d10 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d122      	bne.n	8003d10 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d11a      	bne.n	8003d10 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	0a5b      	lsrs	r3, r3, #9
 8003cde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d111      	bne.n	8003d10 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	0c1b      	lsrs	r3, r3, #16
 8003cf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d108      	bne.n	8003d10 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	0e1b      	lsrs	r3, r3, #24
 8003d02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e024      	b.n	8003d5e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003d14:	4b14      	ldr	r3, [pc, #80]	@ (8003d68 <HAL_RCC_OscConfig+0xdb4>)
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	08db      	lsrs	r3, r3, #3
 8003d1a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d01a      	beq.n	8003d5c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003d26:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <HAL_RCC_OscConfig+0xdb4>)
 8003d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8003d68 <HAL_RCC_OscConfig+0xdb4>)
 8003d2c:	f023 0310 	bic.w	r3, r3, #16
 8003d30:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d32:	f7fd ff3d 	bl	8001bb0 <HAL_GetTick>
 8003d36:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003d38:	bf00      	nop
 8003d3a:	f7fd ff39 	bl	8001bb0 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d0f9      	beq.n	8003d3a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4a:	4a07      	ldr	r2, [pc, #28]	@ (8003d68 <HAL_RCC_OscConfig+0xdb4>)
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003d50:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCC_OscConfig+0xdb4>)
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	4a04      	ldr	r2, [pc, #16]	@ (8003d68 <HAL_RCC_OscConfig+0xdb4>)
 8003d56:	f043 0310 	orr.w	r3, r3, #16
 8003d5a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3738      	adds	r7, #56	@ 0x38
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	46020c00 	.word	0x46020c00

08003d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e1d9      	b.n	8004134 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d80:	4b9b      	ldr	r3, [pc, #620]	@ (8003ff0 <HAL_RCC_ClockConfig+0x284>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d910      	bls.n	8003db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b98      	ldr	r3, [pc, #608]	@ (8003ff0 <HAL_RCC_ClockConfig+0x284>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 020f 	bic.w	r2, r3, #15
 8003d96:	4996      	ldr	r1, [pc, #600]	@ (8003ff0 <HAL_RCC_ClockConfig+0x284>)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b94      	ldr	r3, [pc, #592]	@ (8003ff0 <HAL_RCC_ClockConfig+0x284>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e1c1      	b.n	8004134 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d010      	beq.n	8003dde <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d908      	bls.n	8003dde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003dcc:	4b89      	ldr	r3, [pc, #548]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	4986      	ldr	r1, [pc, #536]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d012      	beq.n	8003e10 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	4b81      	ldr	r3, [pc, #516]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d909      	bls.n	8003e10 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003dfc:	4b7d      	ldr	r3, [pc, #500]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	497a      	ldr	r1, [pc, #488]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d010      	beq.n	8003e3e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	4b74      	ldr	r3, [pc, #464]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d908      	bls.n	8003e3e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003e2c:	4b71      	ldr	r3, [pc, #452]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	496e      	ldr	r1, [pc, #440]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d010      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	4b69      	ldr	r3, [pc, #420]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d908      	bls.n	8003e6c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003e5a:	4b66      	ldr	r3, [pc, #408]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f023 020f 	bic.w	r2, r3, #15
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	4963      	ldr	r1, [pc, #396]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80d2 	beq.w	800401e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d143      	bne.n	8003f0e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e86:	4b5b      	ldr	r3, [pc, #364]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d110      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e94:	4b57      	ldr	r3, [pc, #348]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e9a:	4a56      	ldr	r2, [pc, #344]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003e9c:	f043 0304 	orr.w	r3, r3, #4
 8003ea0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003ea4:	4b53      	ldr	r3, [pc, #332]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003eb6:	f7fd fe7b 	bl	8001bb0 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003ebc:	4b4e      	ldr	r3, [pc, #312]	@ (8003ff8 <HAL_RCC_ClockConfig+0x28c>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00f      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003eca:	f7fd fe71 	bl	8001bb0 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e12b      	b.n	8004134 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003edc:	4b46      	ldr	r3, [pc, #280]	@ (8003ff8 <HAL_RCC_ClockConfig+0x28c>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003eee:	4b41      	ldr	r3, [pc, #260]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ef4:	4a3f      	ldr	r2, [pc, #252]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003ef6:	f023 0304 	bic.w	r3, r3, #4
 8003efa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003efe:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d121      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e112      	b.n	8004134 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d107      	bne.n	8003f26 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f16:	4b37      	ldr	r3, [pc, #220]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d115      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e106      	b.n	8004134 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003f2e:	4b31      	ldr	r3, [pc, #196]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e0fa      	b.n	8004134 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0f2      	b.n	8004134 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003f4e:	4b29      	ldr	r3, [pc, #164]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f023 0203 	bic.w	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4926      	ldr	r1, [pc, #152]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003f60:	f7fd fe26 	bl	8001bb0 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d112      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f70:	f7fd fe1e 	bl	8001bb0 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e0d6      	b.n	8004134 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b0c      	cmp	r3, #12
 8003f90:	d1ee      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x204>
 8003f92:	e044      	b.n	800401e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d112      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9e:	f7fd fe07 	bl	8001bb0 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0bf      	b.n	8004134 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d1ee      	bne.n	8003f9e <HAL_RCC_ClockConfig+0x232>
 8003fc0:	e02d      	b.n	800401e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d123      	bne.n	8004012 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7fd fdf0 	bl	8001bb0 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e0a8      	b.n	8004134 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003fe2:	4b04      	ldr	r3, [pc, #16]	@ (8003ff4 <HAL_RCC_ClockConfig+0x288>)
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ee      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x260>
 8003fee:	e016      	b.n	800401e <HAL_RCC_ClockConfig+0x2b2>
 8003ff0:	40022000 	.word	0x40022000
 8003ff4:	46020c00 	.word	0x46020c00
 8003ff8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ffc:	f7fd fdd8 	bl	8001bb0 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e090      	b.n	8004134 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004012:	4b4a      	ldr	r3, [pc, #296]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b04      	cmp	r3, #4
 800401c:	d1ee      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d010      	beq.n	800404c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	4b43      	ldr	r3, [pc, #268]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	429a      	cmp	r2, r3
 8004038:	d208      	bcs.n	800404c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800403a:	4b40      	ldr	r3, [pc, #256]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 020f 	bic.w	r2, r3, #15
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	493d      	ldr	r1, [pc, #244]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 8004048:	4313      	orrs	r3, r2
 800404a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800404c:	4b3c      	ldr	r3, [pc, #240]	@ (8004140 <HAL_RCC_ClockConfig+0x3d4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d210      	bcs.n	800407c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405a:	4b39      	ldr	r3, [pc, #228]	@ (8004140 <HAL_RCC_ClockConfig+0x3d4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 020f 	bic.w	r2, r3, #15
 8004062:	4937      	ldr	r1, [pc, #220]	@ (8004140 <HAL_RCC_ClockConfig+0x3d4>)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b35      	ldr	r3, [pc, #212]	@ (8004140 <HAL_RCC_ClockConfig+0x3d4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e05b      	b.n	8004134 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d010      	beq.n	80040aa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	4b2b      	ldr	r3, [pc, #172]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004094:	429a      	cmp	r2, r3
 8004096:	d208      	bcs.n	80040aa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004098:	4b28      	ldr	r3, [pc, #160]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4925      	ldr	r1, [pc, #148]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d012      	beq.n	80040dc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	4b20      	ldr	r3, [pc, #128]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d209      	bcs.n	80040dc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80040c8:	4b1c      	ldr	r3, [pc, #112]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	4919      	ldr	r1, [pc, #100]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	4b13      	ldr	r3, [pc, #76]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d208      	bcs.n	800410a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80040f8:	4b10      	ldr	r3, [pc, #64]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	490d      	ldr	r1, [pc, #52]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 8004106:	4313      	orrs	r3, r2
 8004108:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800410a:	f000 f821 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800410e:	4602      	mov	r2, r0
 8004110:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <HAL_RCC_ClockConfig+0x3d0>)
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	490a      	ldr	r1, [pc, #40]	@ (8004144 <HAL_RCC_ClockConfig+0x3d8>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	4a09      	ldr	r2, [pc, #36]	@ (8004148 <HAL_RCC_ClockConfig+0x3dc>)
 8004122:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004124:	4b09      	ldr	r3, [pc, #36]	@ (800414c <HAL_RCC_ClockConfig+0x3e0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7fd fcb7 	bl	8001a9c <HAL_InitTick>
 800412e:	4603      	mov	r3, r0
 8004130:	73fb      	strb	r3, [r7, #15]

  return status;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	46020c00 	.word	0x46020c00
 8004140:	40022000 	.word	0x40022000
 8004144:	08009ba0 	.word	0x08009ba0
 8004148:	20000000 	.word	0x20000000
 800414c:	20000004 	.word	0x20000004

08004150 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	b08b      	sub	sp, #44	@ 0x2c
 8004154:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800415e:	4b78      	ldr	r3, [pc, #480]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004168:	4b75      	ldr	r3, [pc, #468]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x34>
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d121      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d11e      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004184:	4b6e      	ldr	r3, [pc, #440]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004190:	4b6b      	ldr	r3, [pc, #428]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004192:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004196:	0b1b      	lsrs	r3, r3, #12
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	627b      	str	r3, [r7, #36]	@ 0x24
 800419e:	e005      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80041a0:	4b67      	ldr	r3, [pc, #412]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	0f1b      	lsrs	r3, r3, #28
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041ac:	4a65      	ldr	r2, [pc, #404]	@ (8004344 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d110      	bne.n	80041de <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80041c0:	e00d      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d102      	bne.n	80041d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004348 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80041d0:	623b      	str	r3, [r7, #32]
 80041d2:	e004      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d101      	bne.n	80041de <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041da:	4b5b      	ldr	r3, [pc, #364]	@ (8004348 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80041dc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	f040 80a5 	bne.w	8004330 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80041e6:	4b56      	ldr	r3, [pc, #344]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80041f0:	4b53      	ldr	r3, [pc, #332]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80041fe:	4b50      	ldr	r3, [pc, #320]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800420a:	4b4d      	ldr	r3, [pc, #308]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800420c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420e:	08db      	lsrs	r3, r3, #3
 8004210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004222:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d003      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0xe4>
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b03      	cmp	r3, #3
 8004230:	d022      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x128>
 8004232:	e043      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800434c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004246:	4b3e      	ldr	r3, [pc, #248]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004256:	ed97 6a01 	vldr	s12, [r7, #4]
 800425a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004350 <HAL_RCC_GetSysClockFreq+0x200>
 800425e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004262:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800426a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800426e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004276:	e046      	b.n	8004306 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004282:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800434c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800428a:	4b2d      	ldr	r3, [pc, #180]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800428c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800429a:	ed97 6a01 	vldr	s12, [r7, #4]
 800429e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004350 <HAL_RCC_GetSysClockFreq+0x200>
 80042a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80042aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ba:	e024      	b.n	8004306 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	ee07 3a90 	vmov	s15, r3
 80042cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80042e4:	ed97 6a01 	vldr	s12, [r7, #4]
 80042e8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004350 <HAL_RCC_GetSysClockFreq+0x200>
 80042ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80042f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004300:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004304:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004306:	4b0e      	ldr	r3, [pc, #56]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430a:	0e1b      	lsrs	r3, r3, #24
 800430c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004310:	3301      	adds	r3, #1
 8004312:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800431e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800432a:	ee17 3a90 	vmov	r3, s15
 800432e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004330:	6a3b      	ldr	r3, [r7, #32]
}
 8004332:	4618      	mov	r0, r3
 8004334:	372c      	adds	r7, #44	@ 0x2c
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	46020c00 	.word	0x46020c00
 8004344:	08009bb8 	.word	0x08009bb8
 8004348:	00f42400 	.word	0x00f42400
 800434c:	4b742400 	.word	0x4b742400
 8004350:	46000000 	.word	0x46000000

08004354 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004358:	f7ff fefa 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800435c:	4602      	mov	r2, r0
 800435e:	4b07      	ldr	r3, [pc, #28]	@ (800437c <HAL_RCC_GetHCLKFreq+0x28>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	4906      	ldr	r1, [pc, #24]	@ (8004380 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004368:	5ccb      	ldrb	r3, [r1, r3]
 800436a:	fa22 f303 	lsr.w	r3, r2, r3
 800436e:	4a05      	ldr	r2, [pc, #20]	@ (8004384 <HAL_RCC_GetHCLKFreq+0x30>)
 8004370:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004372:	4b04      	ldr	r3, [pc, #16]	@ (8004384 <HAL_RCC_GetHCLKFreq+0x30>)
 8004374:	681b      	ldr	r3, [r3, #0]
}
 8004376:	4618      	mov	r0, r3
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	46020c00 	.word	0x46020c00
 8004380:	08009ba0 	.word	0x08009ba0
 8004384:	20000000 	.word	0x20000000

08004388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800438c:	f7ff ffe2 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 8004390:	4602      	mov	r2, r0
 8004392:	4b05      	ldr	r3, [pc, #20]	@ (80043a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	091b      	lsrs	r3, r3, #4
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	4903      	ldr	r1, [pc, #12]	@ (80043ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800439e:	5ccb      	ldrb	r3, [r1, r3]
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	46020c00 	.word	0x46020c00
 80043ac:	08009bb0 	.word	0x08009bb0

080043b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80043b4:	f7ff ffce 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	4903      	ldr	r1, [pc, #12]	@ (80043d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c6:	5ccb      	ldrb	r3, [r1, r3]
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	46020c00 	.word	0x46020c00
 80043d4:	08009bb0 	.word	0x08009bb0

080043d8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80043dc:	f7ff ffba 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	091b      	lsrs	r3, r3, #4
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4903      	ldr	r1, [pc, #12]	@ (80043fc <HAL_RCC_GetPCLK3Freq+0x24>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	46020c00 	.word	0x46020c00
 80043fc:	08009bb0 	.word	0x08009bb0

08004400 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004408:	4b3e      	ldr	r3, [pc, #248]	@ (8004504 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800440a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004416:	f7fe fd9f 	bl	8002f58 <HAL_PWREx_GetVoltageRange>
 800441a:	6178      	str	r0, [r7, #20]
 800441c:	e019      	b.n	8004452 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	4b39      	ldr	r3, [pc, #228]	@ (8004504 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004424:	4a37      	ldr	r2, [pc, #220]	@ (8004504 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004426:	f043 0304 	orr.w	r3, r3, #4
 800442a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800442e:	4b35      	ldr	r3, [pc, #212]	@ (8004504 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800443c:	f7fe fd8c 	bl	8002f58 <HAL_PWREx_GetVoltageRange>
 8004440:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004442:	4b30      	ldr	r3, [pc, #192]	@ (8004504 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004448:	4a2e      	ldr	r2, [pc, #184]	@ (8004504 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800444a:	f023 0304 	bic.w	r3, r3, #4
 800444e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004458:	d003      	beq.n	8004462 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004460:	d109      	bne.n	8004476 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004468:	d202      	bcs.n	8004470 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800446a:	2301      	movs	r3, #1
 800446c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800446e:	e033      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004474:	e030      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800447c:	d208      	bcs.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004484:	d102      	bne.n	800448c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004486:	2303      	movs	r3, #3
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	e025      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e035      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004496:	d90f      	bls.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044a4:	d902      	bls.n	80044ac <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	e015      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80044ac:	2301      	movs	r3, #1
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	e012      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	e00f      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044be:	d109      	bne.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c6:	d102      	bne.n	80044ce <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80044c8:	2301      	movs	r3, #1
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	e004      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80044ce:	2302      	movs	r3, #2
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e001      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80044d4:	2301      	movs	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004508 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 020f 	bic.w	r2, r3, #15
 80044e0:	4909      	ldr	r1, [pc, #36]	@ (8004508 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80044e8:	4b07      	ldr	r3, [pc, #28]	@ (8004508 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d001      	beq.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	46020c00 	.word	0x46020c00
 8004508:	40022000 	.word	0x40022000

0800450c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800450c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004510:	b0b8      	sub	sp, #224	@ 0xe0
 8004512:	af00      	add	r7, sp, #0
 8004514:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004518:	2300      	movs	r3, #0
 800451a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800451e:	2300      	movs	r3, #0
 8004520:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004524:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f002 0401 	and.w	r4, r2, #1
 8004530:	2500      	movs	r5, #0
 8004532:	ea54 0305 	orrs.w	r3, r4, r5
 8004536:	d00b      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004538:	4bca      	ldr	r3, [pc, #808]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800453a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800453e:	f023 0103 	bic.w	r1, r3, #3
 8004542:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004548:	4ac6      	ldr	r2, [pc, #792]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800454a:	430b      	orrs	r3, r1
 800454c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f002 0802 	and.w	r8, r2, #2
 800455c:	f04f 0900 	mov.w	r9, #0
 8004560:	ea58 0309 	orrs.w	r3, r8, r9
 8004564:	d00b      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004566:	4bbf      	ldr	r3, [pc, #764]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800456c:	f023 010c 	bic.w	r1, r3, #12
 8004570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004576:	4abb      	ldr	r2, [pc, #748]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004578:	430b      	orrs	r3, r1
 800457a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800457e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f002 0a04 	and.w	sl, r2, #4
 800458a:	f04f 0b00 	mov.w	fp, #0
 800458e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004592:	d00b      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004594:	4bb3      	ldr	r3, [pc, #716]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800459a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800459e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a4:	4aaf      	ldr	r2, [pc, #700]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045a6:	430b      	orrs	r3, r1
 80045a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f002 0308 	and.w	r3, r2, #8
 80045b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d00b      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80045cc:	4ba5      	ldr	r3, [pc, #660]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80045d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045dc:	4aa1      	ldr	r2, [pc, #644]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045de:	430b      	orrs	r3, r1
 80045e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f002 0310 	and.w	r3, r2, #16
 80045f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045f4:	2300      	movs	r3, #0
 80045f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80045fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80045fe:	460b      	mov	r3, r1
 8004600:	4313      	orrs	r3, r2
 8004602:	d00b      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004604:	4b97      	ldr	r3, [pc, #604]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800460a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800460e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004614:	4a93      	ldr	r2, [pc, #588]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004616:	430b      	orrs	r3, r1
 8004618:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800461c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	f002 0320 	and.w	r3, r2, #32
 8004628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800462c:	2300      	movs	r3, #0
 800462e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004632:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004636:	460b      	mov	r3, r1
 8004638:	4313      	orrs	r3, r2
 800463a:	d00b      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800463c:	4b89      	ldr	r3, [pc, #548]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800463e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004642:	f023 0107 	bic.w	r1, r3, #7
 8004646:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800464a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800464c:	4a85      	ldr	r2, [pc, #532]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800464e:	430b      	orrs	r3, r1
 8004650:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800466a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d00b      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004674:	4b7b      	ldr	r3, [pc, #492]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800467a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800467e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004682:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004684:	4a77      	ldr	r2, [pc, #476]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004686:	430b      	orrs	r3, r1
 8004688:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800468c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004698:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80046a2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4313      	orrs	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80046ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046bc:	4a69      	ldr	r2, [pc, #420]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046be:	430b      	orrs	r3, r1
 80046c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80046d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80046de:	460b      	mov	r3, r1
 80046e0:	4313      	orrs	r3, r2
 80046e2:	d00b      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80046e4:	4b5f      	ldr	r3, [pc, #380]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f4:	4a5b      	ldr	r2, [pc, #364]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046f6:	430b      	orrs	r3, r1
 80046f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004708:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800470c:	2300      	movs	r3, #0
 800470e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004712:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004716:	460b      	mov	r3, r1
 8004718:	4313      	orrs	r3, r2
 800471a:	d00b      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800471c:	4b51      	ldr	r3, [pc, #324]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800471e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004722:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004726:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800472a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472c:	4a4d      	ldr	r2, [pc, #308]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800472e:	430b      	orrs	r3, r1
 8004730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004734:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004744:	2300      	movs	r3, #0
 8004746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800474a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800474e:	460b      	mov	r3, r1
 8004750:	4313      	orrs	r3, r2
 8004752:	d00b      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004754:	4b43      	ldr	r3, [pc, #268]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800475a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800475e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004762:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004764:	4a3f      	ldr	r2, [pc, #252]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004766:	430b      	orrs	r3, r1
 8004768:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800476c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004782:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d00b      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800478c:	4b35      	ldr	r3, [pc, #212]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800478e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004792:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004796:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800479a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800479c:	4a31      	ldr	r2, [pc, #196]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800479e:	430b      	orrs	r3, r1
 80047a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80047a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80047b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047b2:	2300      	movs	r3, #0
 80047b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047b6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80047ba:	460b      	mov	r3, r1
 80047bc:	4313      	orrs	r3, r2
 80047be:	d00c      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80047c0:	4b28      	ldr	r3, [pc, #160]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047d2:	4a24      	ldr	r2, [pc, #144]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047d4:	430b      	orrs	r3, r1
 80047d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80047e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80047e8:	2300      	movs	r3, #0
 80047ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80047ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047f0:	460b      	mov	r3, r1
 80047f2:	4313      	orrs	r3, r2
 80047f4:	d04f      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80047f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	2b80      	cmp	r3, #128	@ 0x80
 8004800:	d02d      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004802:	2b80      	cmp	r3, #128	@ 0x80
 8004804:	d827      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004806:	2b60      	cmp	r3, #96	@ 0x60
 8004808:	d02e      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800480a:	2b60      	cmp	r3, #96	@ 0x60
 800480c:	d823      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800480e:	2b40      	cmp	r3, #64	@ 0x40
 8004810:	d006      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004812:	2b40      	cmp	r3, #64	@ 0x40
 8004814:	d81f      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800481a:	2b20      	cmp	r3, #32
 800481c:	d011      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800481e:	e01a      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004820:	4b10      	ldr	r3, [pc, #64]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004824:	4a0f      	ldr	r2, [pc, #60]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800482c:	e01d      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800482e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004832:	3308      	adds	r3, #8
 8004834:	4618      	mov	r0, r3
 8004836:	f002 f9d1 	bl	8006bdc <RCCEx_PLL2_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004840:	e013      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004842:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004846:	332c      	adds	r3, #44	@ 0x2c
 8004848:	4618      	mov	r0, r3
 800484a:	f002 fa5f 	bl	8006d0c <RCCEx_PLL3_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004854:	e009      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800485c:	e005      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800485e:	bf00      	nop
 8004860:	e003      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004862:	bf00      	nop
 8004864:	46020c00 	.word	0x46020c00
        break;
 8004868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10d      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004872:	4bb6      	ldr	r3, [pc, #728]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004874:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004878:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800487c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004884:	4ab1      	ldr	r2, [pc, #708]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004886:	430b      	orrs	r3, r1
 8004888:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800488c:	e003      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004892:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004896:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80048a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048a4:	2300      	movs	r3, #0
 80048a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048a8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80048ac:	460b      	mov	r3, r1
 80048ae:	4313      	orrs	r3, r2
 80048b0:	d053      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80048b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048be:	d033      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c4:	d82c      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80048c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048ca:	d02f      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80048cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048d0:	d826      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80048d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048d6:	d008      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80048d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048dc:	d820      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80048e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048e6:	d011      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x400>
 80048e8:	e01a      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80048ea:	4b98      	ldr	r3, [pc, #608]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80048ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ee:	4a97      	ldr	r2, [pc, #604]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80048f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80048f6:	e01a      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048fc:	3308      	adds	r3, #8
 80048fe:	4618      	mov	r0, r3
 8004900:	f002 f96c 	bl	8006bdc <RCCEx_PLL2_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800490a:	e010      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800490c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004910:	332c      	adds	r3, #44	@ 0x2c
 8004912:	4618      	mov	r0, r3
 8004914:	f002 f9fa 	bl	8006d0c <RCCEx_PLL3_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800491e:	e006      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004926:	e002      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004928:	bf00      	nop
 800492a:	e000      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800492c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800492e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10d      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004936:	4b85      	ldr	r3, [pc, #532]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004938:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800493c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004940:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004948:	4a80      	ldr	r2, [pc, #512]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800494a:	430b      	orrs	r3, r1
 800494c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004950:	e003      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004952:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004956:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800495a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004966:	663b      	str	r3, [r7, #96]	@ 0x60
 8004968:	2300      	movs	r3, #0
 800496a:	667b      	str	r3, [r7, #100]	@ 0x64
 800496c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004970:	460b      	mov	r3, r1
 8004972:	4313      	orrs	r3, r2
 8004974:	d046      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004976:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800497a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800497e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004982:	d028      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004984:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004988:	d821      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800498a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800498e:	d022      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004994:	d81b      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004996:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800499a:	d01c      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800499c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049a0:	d815      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049a6:	d008      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80049a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ac:	d80f      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d011      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80049b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b6:	d00e      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80049b8:	e009      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049be:	3308      	adds	r3, #8
 80049c0:	4618      	mov	r0, r3
 80049c2:	f002 f90b 	bl	8006bdc <RCCEx_PLL2_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80049cc:	e004      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80049d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10d      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80049e0:	4b5a      	ldr	r3, [pc, #360]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80049e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049e6:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80049ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049f2:	4a56      	ldr	r2, [pc, #344]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80049f4:	430b      	orrs	r3, r1
 80049f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80049fa:	e003      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004a00:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004a04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a12:	2300      	movs	r3, #0
 8004a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a16:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	d03f      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004a20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d81e      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8004a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a34 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a73 	.word	0x08004a73
 8004a38:	08004a49 	.word	0x08004a49
 8004a3c:	08004a57 	.word	0x08004a57
 8004a40:	08004a73 	.word	0x08004a73
 8004a44:	08004a73 	.word	0x08004a73
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a48:	4b40      	ldr	r3, [pc, #256]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a52:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004a54:	e00e      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a5a:	332c      	adds	r3, #44	@ 0x2c
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f002 f955 	bl	8006d0c <RCCEx_PLL3_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004a68:	e004      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004a70:	e000      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8004a72:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004a74:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10d      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004a7c:	4b33      	ldr	r3, [pc, #204]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004a7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a82:	f023 0107 	bic.w	r1, r3, #7
 8004a86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004a90:	430b      	orrs	r3, r1
 8004a92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a96:	e003      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004a9c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004aac:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aae:	2300      	movs	r3, #0
 8004ab0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ab2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	d04d      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ac4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ac8:	d028      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x610>
 8004aca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ace:	d821      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004ad0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ad4:	d024      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004ad6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ada:	d81b      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004adc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ae0:	d00e      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004ae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ae6:	d815      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01b      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af0:	d110      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004af2:	4b16      	ldr	r3, [pc, #88]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af6:	4a15      	ldr	r2, [pc, #84]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004afc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004afe:	e012      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b04:	332c      	adds	r3, #44	@ 0x2c
 8004b06:	4618      	mov	r0, r3
 8004b08:	f002 f900 	bl	8006d0c <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004b12:	e008      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004b1a:	e004      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004b1c:	bf00      	nop
 8004b1e:	e002      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004b20:	bf00      	nop
 8004b22:	e000      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004b24:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004b26:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d110      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004b2e:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b34:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004b38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b40:	4a02      	ldr	r2, [pc, #8]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004b42:	430b      	orrs	r3, r1
 8004b44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004b48:	e006      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004b4a:	bf00      	nop
 8004b4c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004b54:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b66:	2300      	movs	r3, #0
 8004b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b6a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f000 80b5 	beq.w	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b7c:	4b9d      	ldr	r3, [pc, #628]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d113      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8a:	4b9a      	ldr	r3, [pc, #616]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b90:	4a98      	ldr	r2, [pc, #608]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b92:	f043 0304 	orr.w	r3, r3, #4
 8004b96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b9a:	4b96      	ldr	r3, [pc, #600]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ba8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004bb2:	4b91      	ldr	r3, [pc, #580]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb6:	4a90      	ldr	r2, [pc, #576]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bbe:	f7fc fff7 	bl	8001bb0 <HAL_GetTick>
 8004bc2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004bc6:	e00b      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc8:	f7fc fff2 	bl	8001bb0 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d903      	bls.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004bde:	e005      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004be0:	4b85      	ldr	r3, [pc, #532]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ed      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8004bec:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d165      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bf4:	4b7f      	ldr	r3, [pc, #508]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d023      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8004c0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c0e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01b      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c1a:	4b76      	ldr	r3, [pc, #472]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c28:	4b72      	ldr	r3, [pc, #456]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c2e:	4a71      	ldr	r2, [pc, #452]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c38:	4b6e      	ldr	r3, [pc, #440]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c3e:	4a6d      	ldr	r2, [pc, #436]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c48:	4a6a      	ldr	r2, [pc, #424]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d019      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5e:	f7fc ffa7 	bl	8001bb0 <HAL_GetTick>
 8004c62:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c66:	e00d      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c68:	f7fc ffa2 	bl	8001bb0 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c72:	1ad2      	subs	r2, r2, r3
 8004c74:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d903      	bls.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8004c82:	e006      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c84:	4b5b      	ldr	r3, [pc, #364]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0ea      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8004c92:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10d      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004c9a:	4b56      	ldr	r3, [pc, #344]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ca0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ca8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004cac:	4a51      	ldr	r2, [pc, #324]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cb6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004cba:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8004cbe:	e003      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004cc4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cc8:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd0:	4b48      	ldr	r3, [pc, #288]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd6:	4a47      	ldr	r2, [pc, #284]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004cd8:	f023 0304 	bic.w	r3, r3, #4
 8004cdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cee:	2300      	movs	r3, #0
 8004cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	d042      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004cfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d04:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d08:	d022      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8004d0a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d0e:	d81b      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d14:	d011      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8004d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d1a:	d815      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d019      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004d20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d24:	d110      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 ff55 	bl	8006bdc <RCCEx_PLL2_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004d38:	e00d      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d44:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004d46:	e006      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004d4e:	e002      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004d50:	bf00      	nop
 8004d52:	e000      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004d54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004d56:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10d      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004d5e:	4b25      	ldr	r3, [pc, #148]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d64:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004d68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d70:	4a20      	ldr	r2, [pc, #128]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d72:	430b      	orrs	r3, r1
 8004d74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d78:	e003      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d7e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d90:	2300      	movs	r3, #0
 8004d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d94:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	d032      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004d9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004daa:	d00b      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db0:	d804      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dba:	d007      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004dc2:	e004      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004dc4:	bf00      	nop
 8004dc6:	e002      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004dc8:	bf00      	nop
 8004dca:	e000      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004dcc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004dce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d112      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004dd6:	4b07      	ldr	r3, [pc, #28]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004dd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ddc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004de0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004de8:	4a02      	ldr	r2, [pc, #8]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004dea:	430b      	orrs	r3, r1
 8004dec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004df0:	e008      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8004df2:	bf00      	nop
 8004df4:	46020c00 	.word	0x46020c00
 8004df8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e00:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e12:	2300      	movs	r3, #0
 8004e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	d019      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e2c:	d105      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e2e:	4b88      	ldr	r3, [pc, #544]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e32:	4a87      	ldr	r2, [pc, #540]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e38:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004e3a:	4b85      	ldr	r3, [pc, #532]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004e3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e40:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004e44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e4c:	4a80      	ldr	r2, [pc, #512]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e62:	2300      	movs	r3, #0
 8004e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e66:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	d00c      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004e70:	4b77      	ldr	r3, [pc, #476]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e82:	4973      	ldr	r1, [pc, #460]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004e96:	623b      	str	r3, [r7, #32]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	d00c      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004eb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004eb8:	4965      	ldr	r1, [pc, #404]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	d00c      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004edc:	4b5c      	ldr	r3, [pc, #368]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ee2:	f023 0218 	bic.w	r2, r3, #24
 8004ee6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004eee:	4958      	ldr	r1, [pc, #352]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ef6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	d032      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004f12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f1e:	d105      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f20:	4b4b      	ldr	r3, [pc, #300]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	4a4a      	ldr	r2, [pc, #296]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f2a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f38:	d108      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f3e:	3308      	adds	r3, #8
 8004f40:	4618      	mov	r0, r3
 8004f42:	f001 fe4b 	bl	8006bdc <RCCEx_PLL2_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8004f4c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10d      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004f54:	4b3e      	ldr	r3, [pc, #248]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f66:	493a      	ldr	r1, [pc, #232]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004f6e:	e003      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f70:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f74:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004f78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4313      	orrs	r3, r2
 8004f92:	d03a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004f94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004fa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fa6:	d815      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d017      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8004fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fb0:	d110      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb2:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb6:	4a26      	ldr	r2, [pc, #152]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fbc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004fbe:	e00e      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f001 fe08 	bl	8006bdc <RCCEx_PLL2_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004fd2:	e004      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004fda:	e000      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8004fdc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004fde:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10d      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ff0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ff8:	4915      	ldr	r1, [pc, #84]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005000:	e003      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005002:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005006:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800500a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	2300      	movs	r3, #0
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005020:	460b      	mov	r3, r1
 8005022:	4313      	orrs	r3, r2
 8005024:	d00c      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005026:	4b0a      	ldr	r3, [pc, #40]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800502c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005030:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005034:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005038:	4905      	ldr	r1, [pc, #20]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005040:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8005044:	4618      	mov	r0, r3
 8005046:	37e0      	adds	r7, #224	@ 0xe0
 8005048:	46bd      	mov	sp, r7
 800504a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504e:	bf00      	nop
 8005050:	46020c00 	.word	0x46020c00

08005054 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	@ 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800505c:	4ba6      	ldr	r3, [pc, #664]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800505e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005064:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005066:	4ba4      	ldr	r3, [pc, #656]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005070:	4ba1      	ldr	r3, [pc, #644]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	3301      	adds	r3, #1
 800507c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800507e:	4b9e      	ldr	r3, [pc, #632]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	091b      	lsrs	r3, r3, #4
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800508a:	4b9b      	ldr	r3, [pc, #620]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800508c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508e:	08db      	lsrs	r3, r3, #3
 8005090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d062      	beq.n	8005172 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	f200 8081 	bhi.w	80051b6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d024      	beq.n	8005104 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d17a      	bne.n	80051b6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80052fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80050ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d2:	4b89      	ldr	r3, [pc, #548]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80050d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80050e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050e6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005300 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80050ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80050f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005102:	e08f      	b.n	8005224 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005104:	4b7c      	ldr	r3, [pc, #496]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005110:	4b79      	ldr	r3, [pc, #484]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	0f1b      	lsrs	r3, r3, #28
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	e006      	b.n	800512a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800511c:	4b76      	ldr	r3, [pc, #472]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800511e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005122:	041b      	lsls	r3, r3, #16
 8005124:	0f1b      	lsrs	r3, r3, #28
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	4a76      	ldr	r2, [pc, #472]	@ (8005304 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800512c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005130:	ee07 3a90 	vmov	s15, r3
 8005134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	ee07 3a90 	vmov	s15, r3
 800514c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005150:	ed97 6a02 	vldr	s12, [r7, #8]
 8005154:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005300 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800515c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005160:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005164:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005170:	e058      	b.n	8005224 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	ee07 3a90 	vmov	s15, r3
 8005178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005184:	4b5c      	ldr	r3, [pc, #368]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005194:	ed97 6a02 	vldr	s12, [r7, #8]
 8005198:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005300 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800519c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80051a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051b4:	e036      	b.n	8005224 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80051b6:	4b50      	ldr	r3, [pc, #320]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80051c2:	4b4d      	ldr	r3, [pc, #308]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	0f1b      	lsrs	r3, r3, #28
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	e006      	b.n	80051dc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80051ce:	4b4a      	ldr	r3, [pc, #296]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80051d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	0f1b      	lsrs	r3, r3, #28
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	4a49      	ldr	r2, [pc, #292]	@ (8005304 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80051de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005202:	ed97 6a02 	vldr	s12, [r7, #8]
 8005206:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005300 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800520a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005216:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800521a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005222:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005224:	4b34      	ldr	r3, [pc, #208]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d017      	beq.n	8005260 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005230:	4b31      	ldr	r3, [pc, #196]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005234:	0a5b      	lsrs	r3, r3, #9
 8005236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005242:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005246:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800524a:	edd7 6a07 	vldr	s13, [r7, #28]
 800524e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005256:	ee17 2a90 	vmov	r2, s15
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	e002      	b.n	8005266 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005266:	4b24      	ldr	r3, [pc, #144]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d017      	beq.n	80052a2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005272:	4b21      	ldr	r3, [pc, #132]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800527c:	ee07 3a90 	vmov	s15, r3
 8005280:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005284:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005288:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800528c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005298:	ee17 2a90 	vmov	r2, s15
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	605a      	str	r2, [r3, #4]
 80052a0:	e002      	b.n	80052a8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80052a8:	4b13      	ldr	r3, [pc, #76]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80052aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d017      	beq.n	80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80052b4:	4b10      	ldr	r3, [pc, #64]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80052b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b8:	0e1b      	lsrs	r3, r3, #24
 80052ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80052c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80052ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80052d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052da:	ee17 2a90 	vmov	r2, s15
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80052e2:	e002      	b.n	80052ea <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	609a      	str	r2, [r3, #8]
}
 80052ea:	bf00      	nop
 80052ec:	3724      	adds	r7, #36	@ 0x24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	46020c00 	.word	0x46020c00
 80052fc:	4b742400 	.word	0x4b742400
 8005300:	46000000 	.word	0x46000000
 8005304:	08009bb8 	.word	0x08009bb8

08005308 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	@ 0x24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005310:	4ba6      	ldr	r3, [pc, #664]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005318:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800531a:	4ba4      	ldr	r3, [pc, #656]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005324:	4ba1      	ldr	r3, [pc, #644]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005328:	0a1b      	lsrs	r3, r3, #8
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	3301      	adds	r3, #1
 8005330:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005332:	4b9e      	ldr	r3, [pc, #632]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800533e:	4b9b      	ldr	r3, [pc, #620]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	08db      	lsrs	r3, r3, #3
 8005344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005356:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b03      	cmp	r3, #3
 800535e:	d062      	beq.n	8005426 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b03      	cmp	r3, #3
 8005364:	f200 8081 	bhi.w	800546a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d024      	beq.n	80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d17a      	bne.n	800546a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80055b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005386:	4b89      	ldr	r3, [pc, #548]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005396:	ed97 6a02 	vldr	s12, [r7, #8]
 800539a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80055b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800539e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80053a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80053a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80053ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053b6:	e08f      	b.n	80054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80053b8:	4b7c      	ldr	r3, [pc, #496]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80053c4:	4b79      	ldr	r3, [pc, #484]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	0f1b      	lsrs	r3, r3, #28
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	e006      	b.n	80053de <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80053d0:	4b76      	ldr	r3, [pc, #472]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80053d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	0f1b      	lsrs	r3, r3, #28
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	4a76      	ldr	r2, [pc, #472]	@ (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80053e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	ee07 3a90 	vmov	s15, r3
 8005400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005404:	ed97 6a02 	vldr	s12, [r7, #8]
 8005408:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80055b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800540c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005414:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005418:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800541c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005420:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005424:	e058      	b.n	80054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005430:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80055b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005438:	4b5c      	ldr	r3, [pc, #368]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800543a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005448:	ed97 6a02 	vldr	s12, [r7, #8]
 800544c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80055b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005450:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005454:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005458:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800545c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005464:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005468:	e036      	b.n	80054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800546a:	4b50      	ldr	r3, [pc, #320]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005476:	4b4d      	ldr	r3, [pc, #308]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	0f1b      	lsrs	r3, r3, #28
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	e006      	b.n	8005490 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005482:	4b4a      	ldr	r3, [pc, #296]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005484:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	0f1b      	lsrs	r3, r3, #28
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	4a49      	ldr	r2, [pc, #292]	@ (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	ee07 3a90 	vmov	s15, r3
 80054a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ba:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80055b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80054be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80054ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054d6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80054d8:	4b34      	ldr	r3, [pc, #208]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80054da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d017      	beq.n	8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80054e4:	4b31      	ldr	r3, [pc, #196]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80054e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e8:	0a5b      	lsrs	r3, r3, #9
 80054ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80054f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80054fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800550a:	ee17 2a90 	vmov	r2, s15
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e002      	b.n	800551a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800551a:	4b24      	ldr	r3, [pc, #144]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d017      	beq.n	8005556 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005526:	4b21      	ldr	r3, [pc, #132]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552a:	0c1b      	lsrs	r3, r3, #16
 800552c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005530:	ee07 3a90 	vmov	s15, r3
 8005534:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005538:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800553c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005540:	edd7 6a07 	vldr	s13, [r7, #28]
 8005544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800554c:	ee17 2a90 	vmov	r2, s15
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	e002      	b.n	800555c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800555c:	4b13      	ldr	r3, [pc, #76]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d017      	beq.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005568:	4b10      	ldr	r3, [pc, #64]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800556a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556c:	0e1b      	lsrs	r3, r3, #24
 800556e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800557a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800557e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005582:	edd7 6a07 	vldr	s13, [r7, #28]
 8005586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800558a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800558e:	ee17 2a90 	vmov	r2, s15
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005596:	e002      	b.n	800559e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	609a      	str	r2, [r3, #8]
}
 800559e:	bf00      	nop
 80055a0:	3724      	adds	r7, #36	@ 0x24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	46020c00 	.word	0x46020c00
 80055b0:	4b742400 	.word	0x4b742400
 80055b4:	46000000 	.word	0x46000000
 80055b8:	08009bb8 	.word	0x08009bb8

080055bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	@ 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80055c4:	4ba6      	ldr	r3, [pc, #664]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055cc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80055ce:	4ba4      	ldr	r3, [pc, #656]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80055d8:	4ba1      	ldr	r3, [pc, #644]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	3301      	adds	r3, #1
 80055e4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80055e6:	4b9e      	ldr	r3, [pc, #632]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ea:	091b      	lsrs	r3, r3, #4
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80055f2:	4b9b      	ldr	r3, [pc, #620]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f6:	08db      	lsrs	r3, r3, #3
 80055f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b03      	cmp	r3, #3
 8005612:	d062      	beq.n	80056da <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2b03      	cmp	r3, #3
 8005618:	f200 8081 	bhi.w	800571e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d024      	beq.n	800566c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d17a      	bne.n	800571e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563a:	4b89      	ldr	r3, [pc, #548]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800563c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800564a:	ed97 6a02 	vldr	s12, [r7, #8]
 800564e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005652:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005656:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800565a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800565e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005666:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800566a:	e08f      	b.n	800578c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800566c:	4b7c      	ldr	r3, [pc, #496]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005678:	4b79      	ldr	r3, [pc, #484]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	0f1b      	lsrs	r3, r3, #28
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	e006      	b.n	8005692 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005684:	4b76      	ldr	r3, [pc, #472]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005686:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800568a:	041b      	lsls	r3, r3, #16
 800568c:	0f1b      	lsrs	r3, r3, #28
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	4a76      	ldr	r2, [pc, #472]	@ (800586c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	ee07 3a90 	vmov	s15, r3
 80056b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80056bc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80056c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80056d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056d8:	e058      	b.n	800578c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80056e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ec:	4b5c      	ldr	r3, [pc, #368]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80056ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f4:	ee07 3a90 	vmov	s15, r3
 80056f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80056fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005700:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005704:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005708:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800570c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005710:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005718:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800571c:	e036      	b.n	800578c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800571e:	4b50      	ldr	r3, [pc, #320]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800572a:	4b4d      	ldr	r3, [pc, #308]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	0f1b      	lsrs	r3, r3, #28
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	e006      	b.n	8005744 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005736:	4b4a      	ldr	r3, [pc, #296]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	0f1b      	lsrs	r3, r3, #28
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	4a49      	ldr	r2, [pc, #292]	@ (800586c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800576a:	ed97 6a02 	vldr	s12, [r7, #8]
 800576e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800577a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800577e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005786:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800578a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800578c:	4b34      	ldr	r3, [pc, #208]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800578e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d017      	beq.n	80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005798:	4b31      	ldr	r3, [pc, #196]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800579a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579c:	0a5b      	lsrs	r3, r3, #9
 800579e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80057aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057be:	ee17 2a90 	vmov	r2, s15
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	e002      	b.n	80057ce <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80057ce:	4b24      	ldr	r3, [pc, #144]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d017      	beq.n	800580a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057da:	4b21      	ldr	r3, [pc, #132]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80057dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057de:	0c1b      	lsrs	r3, r3, #16
 80057e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057e4:	ee07 3a90 	vmov	s15, r3
 80057e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80057ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057f0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005800:	ee17 2a90 	vmov	r2, s15
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	e002      	b.n	8005810 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005810:	4b13      	ldr	r3, [pc, #76]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d017      	beq.n	800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800581c:	4b10      	ldr	r3, [pc, #64]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800581e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005820:	0e1b      	lsrs	r3, r3, #24
 8005822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800582e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005832:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005836:	edd7 6a07 	vldr	s13, [r7, #28]
 800583a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800583e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005842:	ee17 2a90 	vmov	r2, s15
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800584a:	e002      	b.n	8005852 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	609a      	str	r2, [r3, #8]
}
 8005852:	bf00      	nop
 8005854:	3724      	adds	r7, #36	@ 0x24
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	46020c00 	.word	0x46020c00
 8005864:	4b742400 	.word	0x4b742400
 8005868:	46000000 	.word	0x46000000
 800586c:	08009bb8 	.word	0x08009bb8

08005870 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08e      	sub	sp, #56	@ 0x38
 8005874:	af00      	add	r7, sp, #0
 8005876:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800587a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800587e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005882:	430b      	orrs	r3, r1
 8005884:	d145      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005886:	4baa      	ldr	r3, [pc, #680]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800588c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005890:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005892:	4ba7      	ldr	r3, [pc, #668]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b02      	cmp	r3, #2
 800589e:	d108      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80058a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058a6:	d104      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80058a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ae:	f001 b987 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80058b2:	4b9f      	ldr	r3, [pc, #636]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80058b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058c0:	d114      	bne.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058c8:	d110      	bne.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058ca:	4b99      	ldr	r3, [pc, #612]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80058cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058d8:	d103      	bne.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80058da:	23fa      	movs	r3, #250	@ 0xfa
 80058dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058de:	f001 b96f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80058e2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80058e6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058e8:	f001 b96a 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80058ec:	4b90      	ldr	r3, [pc, #576]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058f8:	d107      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005900:	d103      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005902:	4b8c      	ldr	r3, [pc, #560]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005904:	637b      	str	r3, [r7, #52]	@ 0x34
 8005906:	f001 b95b 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	637b      	str	r3, [r7, #52]	@ 0x34
 800590e:	f001 b957 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005916:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800591a:	430b      	orrs	r3, r1
 800591c:	d151      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800591e:	4b84      	ldr	r3, [pc, #528]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005920:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005924:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005928:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	2b80      	cmp	r3, #128	@ 0x80
 800592e:	d035      	beq.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	2b80      	cmp	r3, #128	@ 0x80
 8005934:	d841      	bhi.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005938:	2b60      	cmp	r3, #96	@ 0x60
 800593a:	d02a      	beq.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	2b60      	cmp	r3, #96	@ 0x60
 8005940:	d83b      	bhi.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d009      	beq.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	2b40      	cmp	r3, #64	@ 0x40
 800594c:	d835      	bhi.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800594e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	2b20      	cmp	r3, #32
 8005958:	d012      	beq.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800595a:	e02e      	b.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800595c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fb77 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005968:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800596a:	f001 b929 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800596e:	f107 0318 	add.w	r3, r7, #24
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fcc8 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800597c:	f001 b920 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005980:	f107 030c 	add.w	r3, r7, #12
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fe19 	bl	80055bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800598e:	f001 b917 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005992:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005996:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005998:	f001 b912 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800599c:	4b64      	ldr	r3, [pc, #400]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a8:	d103      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80059aa:	4b63      	ldr	r3, [pc, #396]	@ (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80059ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80059ae:	f001 b907 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059b6:	f001 b903 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059be:	f001 b8ff 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80059c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059c6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80059ca:	430b      	orrs	r3, r1
 80059cc:	d158      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80059ce:	4b58      	ldr	r3, [pc, #352]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80059d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059e0:	d03b      	beq.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059e8:	d846      	bhi.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f0:	d02e      	beq.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f8:	d83e      	bhi.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a00:	d00b      	beq.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a08:	d836      	bhi.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00d      	beq.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a16:	d012      	beq.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005a18:	e02e      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff fb18 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a28:	f001 b8ca 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a2c:	f107 0318 	add.w	r3, r7, #24
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff fc69 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a3a:	f001 b8c1 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a3e:	f107 030c 	add.w	r3, r7, #12
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fdba 	bl	80055bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a4c:	f001 b8b8 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005a50:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005a54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a56:	f001 b8b3 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a5a:	4b35      	ldr	r3, [pc, #212]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a66:	d103      	bne.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005a68:	4b33      	ldr	r3, [pc, #204]	@ (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005a6a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a6c:	f001 b8a8 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a74:	f001 b8a4 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a7c:	f001 b8a0 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a84:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	d16e      	bne.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005a8c:	4b28      	ldr	r3, [pc, #160]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a92:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005a96:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005a9e:	d034      	beq.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005aa6:	d85c      	bhi.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aae:	d00b      	beq.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ab6:	d854      	bhi.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d016      	beq.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ac4:	d009      	beq.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005ac6:	e04c      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fac1 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ad6:	f001 b873 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ada:	f107 0318 	add.w	r3, r7, #24
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fc12 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ae8:	f001 b86a 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005aec:	4b10      	ldr	r3, [pc, #64]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af8:	d103      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8005afa:	4b10      	ldr	r3, [pc, #64]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005afc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005afe:	f001 b85f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b06:	f001 b85b 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b0a:	4b09      	ldr	r3, [pc, #36]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d121      	bne.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b16:	4b06      	ldr	r3, [pc, #24]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00e      	beq.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8005b22:	4b03      	ldr	r3, [pc, #12]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0e1b      	lsrs	r3, r3, #24
 8005b28:	f003 030f 	and.w	r3, r3, #15
 8005b2c:	e00f      	b.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005b2e:	bf00      	nop
 8005b30:	46020c00 	.word	0x46020c00
 8005b34:	0007a120 	.word	0x0007a120
 8005b38:	00f42400 	.word	0x00f42400
 8005b3c:	02dc6c00 	.word	0x02dc6c00
 8005b40:	4ba7      	ldr	r3, [pc, #668]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b46:	041b      	lsls	r3, r3, #16
 8005b48:	0e1b      	lsrs	r3, r3, #24
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	4aa5      	ldr	r2, [pc, #660]	@ (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b54:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b56:	f001 b833 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b5e:	f001 b82f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b66:	f001 b82b 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b6e:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8005b72:	430b      	orrs	r3, r1
 8005b74:	d17f      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005b76:	4b9a      	ldr	r3, [pc, #616]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005b78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b80:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d165      	bne.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005b88:	4b95      	ldr	r3, [pc, #596]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b8e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005b92:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b9a:	d034      	beq.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ba2:	d853      	bhi.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005baa:	d00b      	beq.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bb2:	d84b      	bhi.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bc0:	d009      	beq.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005bc2:	e043      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fa43 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005bd2:	f000 bff5 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bd6:	f107 0318 	add.w	r3, r7, #24
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff fb94 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005be4:	f000 bfec 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005be8:	4b7d      	ldr	r3, [pc, #500]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bf4:	d103      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8005bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005bf8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005bfa:	f000 bfe1 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005c02:	f000 bfdd 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c06:	4b76      	ldr	r3, [pc, #472]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d118      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c12:	4b73      	ldr	r3, [pc, #460]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005c1e:	4b70      	ldr	r3, [pc, #448]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	0e1b      	lsrs	r3, r3, #24
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	e006      	b.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8005c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c30:	041b      	lsls	r3, r3, #16
 8005c32:	0e1b      	lsrs	r3, r3, #24
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	4a6a      	ldr	r2, [pc, #424]	@ (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c3e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005c40:	f000 bfbe 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005c48:	f000 bfba 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005c50:	f000 bfb6 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c5a:	d108      	bne.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff f9f7 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c6a:	f000 bfa9 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c72:	f000 bfa5 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c7a:	1e51      	subs	r1, r2, #1
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	d136      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005c80:	4b57      	ldr	r3, [pc, #348]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005c92:	f7fe fb8d 	bl	80043b0 <HAL_RCC_GetPCLK2Freq>
 8005c96:	6378      	str	r0, [r7, #52]	@ 0x34
 8005c98:	f000 bf92 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d104      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005ca2:	f7fe fa55 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8005ca6:	6378      	str	r0, [r7, #52]	@ 0x34
 8005ca8:	f000 bf8a 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005cac:	4b4c      	ldr	r3, [pc, #304]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cb8:	d106      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8005cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d103      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8005cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cc4:	f000 bf7c 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005cc8:	4b45      	ldr	r3, [pc, #276]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d107      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d104      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8005cdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ce2:	f000 bf6d 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cea:	f000 bf69 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cf2:	1e91      	subs	r1, r2, #2
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	d136      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005cf8:	4b39      	ldr	r3, [pc, #228]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005d0a:	f7fe fb3d 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8005d0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d10:	f000 bf56 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d104      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005d1a:	f7fe fa19 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8005d1e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d20:	f000 bf4e 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005d24:	4b2e      	ldr	r3, [pc, #184]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d30:	d106      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d103      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8005d38:	4b2c      	ldr	r3, [pc, #176]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d3c:	f000 bf40 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005d40:	4b27      	ldr	r3, [pc, #156]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	2b0c      	cmp	r3, #12
 8005d52:	d104      	bne.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8005d54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d5a:	f000 bf31 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d62:	f000 bf2d 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005d66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d6a:	1f11      	subs	r1, r2, #4
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	d13f      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005d70:	4b1b      	ldr	r3, [pc, #108]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d76:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d104      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005d82:	f7fe fb01 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8005d86:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d88:	f000 bf1a 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8e:	2b10      	cmp	r3, #16
 8005d90:	d104      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005d92:	f7fe f9dd 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8005d96:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d98:	f000 bf12 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005d9c:	4b10      	ldr	r3, [pc, #64]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005da8:	d106      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d103      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8005db0:	4b0e      	ldr	r3, [pc, #56]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db4:	f000 bf04 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005db8:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d107      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc8:	2b30      	cmp	r3, #48	@ 0x30
 8005dca:	d104      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8005dcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dd2:	f000 bef5 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dda:	f000 bef1 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005dde:	bf00      	nop
 8005de0:	46020c00 	.word	0x46020c00
 8005de4:	08009bb8 	.word	0x08009bb8
 8005de8:	02dc6c00 	.word	0x02dc6c00
 8005dec:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df4:	f1a2 0108 	sub.w	r1, r2, #8
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	d136      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005dfc:	4ba4      	ldr	r3, [pc, #656]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e06:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d104      	bne.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005e0e:	f7fe fabb 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8005e12:	6378      	str	r0, [r7, #52]	@ 0x34
 8005e14:	f000 bed4 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1a:	2b40      	cmp	r3, #64	@ 0x40
 8005e1c:	d104      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005e1e:	f7fe f997 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8005e22:	6378      	str	r0, [r7, #52]	@ 0x34
 8005e24:	f000 becc 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005e28:	4b99      	ldr	r3, [pc, #612]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e34:	d106      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e38:	2b80      	cmp	r3, #128	@ 0x80
 8005e3a:	d103      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8005e3c:	4b95      	ldr	r3, [pc, #596]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e40:	f000 bebe 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005e44:	4b92      	ldr	r3, [pc, #584]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d107      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8005e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e54:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e56:	d104      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8005e58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e5e:	f000 beaf 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e66:	f000 beab 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e6e:	f1a2 0110 	sub.w	r1, r2, #16
 8005e72:	430b      	orrs	r3, r1
 8005e74:	d139      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005e76:	4b86      	ldr	r3, [pc, #536]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e80:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005e88:	f7fe fa7e 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8005e8c:	6378      	str	r0, [r7, #52]	@ 0x34
 8005e8e:	f000 be97 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e98:	d104      	bne.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005e9a:	f7fe f959 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8005e9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005ea0:	f000 be8e 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005ea4:	4b7a      	ldr	r3, [pc, #488]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb0:	d107      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eb8:	d103      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8005eba:	4b76      	ldr	r3, [pc, #472]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ebe:	f000 be7f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005ec2:	4b73      	ldr	r3, [pc, #460]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d108      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed6:	d104      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8005ed8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ede:	f000 be6f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ee6:	f000 be6b 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eee:	f1a2 0120 	sub.w	r1, r2, #32
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	d158      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005ef6:	4b66      	ldr	r3, [pc, #408]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005f08:	f7fe fa66 	bl	80043d8 <HAL_RCC_GetPCLK3Freq>
 8005f0c:	6378      	str	r0, [r7, #52]	@ 0x34
 8005f0e:	f000 be57 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d104      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005f18:	f7fe f91a 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8005f1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8005f1e:	f000 be4f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005f22:	4b5b      	ldr	r3, [pc, #364]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d103      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8005f36:	4b57      	ldr	r3, [pc, #348]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f3a:	f000 be41 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005f3e:	4b54      	ldr	r3, [pc, #336]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d107      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d104      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8005f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f58:	f000 be32 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005f5c:	4b4c      	ldr	r3, [pc, #304]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d11b      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d118      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f6e:	4b48      	ldr	r3, [pc, #288]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8005f7a:	4b45      	ldr	r3, [pc, #276]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	0e1b      	lsrs	r3, r3, #24
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	e006      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005f86:	4b42      	ldr	r3, [pc, #264]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f8c:	041b      	lsls	r3, r3, #16
 8005f8e:	0e1b      	lsrs	r3, r3, #24
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	4a40      	ldr	r2, [pc, #256]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f9c:	f000 be10 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fa4:	f000 be0c 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fac:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	d173      	bne.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005fb4:	4b36      	ldr	r3, [pc, #216]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fba:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005fbe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc6:	d104      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005fc8:	f7fe f8c2 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8005fcc:	6378      	str	r0, [r7, #52]	@ 0x34
 8005fce:	f000 bdf7 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fd8:	d108      	bne.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fda:	f107 0318 	add.w	r3, r7, #24
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff f992 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe8:	f000 bdea 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d104      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005ff2:	f7fe f9af 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 8005ff6:	6378      	str	r0, [r7, #52]	@ 0x34
 8005ff8:	f000 bde2 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006002:	d122      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006004:	4b22      	ldr	r3, [pc, #136]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b20      	cmp	r3, #32
 800600e:	d118      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006010:	4b1f      	ldr	r3, [pc, #124]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800601c:	4b1c      	ldr	r3, [pc, #112]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	0e1b      	lsrs	r3, r3, #24
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	e006      	b.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006028:	4b19      	ldr	r3, [pc, #100]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800602a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	0e1b      	lsrs	r3, r3, #24
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	4a18      	ldr	r2, [pc, #96]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
 800603e:	f000 bdbf 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	637b      	str	r3, [r7, #52]	@ 0x34
 8006046:	f000 bdbb 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800604a:	4b11      	ldr	r3, [pc, #68]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006052:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006056:	d107      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800605e:	d103      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006060:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006062:	637b      	str	r3, [r7, #52]	@ 0x34
 8006064:	f000 bdac 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006068:	4b09      	ldr	r3, [pc, #36]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006074:	d107      	bne.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800607c:	d103      	bne.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800607e:	4b05      	ldr	r3, [pc, #20]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006080:	637b      	str	r3, [r7, #52]	@ 0x34
 8006082:	f000 bd9d 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	637b      	str	r3, [r7, #52]	@ 0x34
 800608a:	f000 bd99 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800608e:	bf00      	nop
 8006090:	46020c00 	.word	0x46020c00
 8006094:	00f42400 	.word	0x00f42400
 8006098:	08009bb8 	.word	0x08009bb8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800609c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80060a4:	430b      	orrs	r3, r1
 80060a6:	d158      	bne.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80060a8:	4bad      	ldr	r3, [pc, #692]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80060aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d84b      	bhi.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80060ba:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060f9 	.word	0x080060f9
 80060c4:	080060d5 	.word	0x080060d5
 80060c8:	080060e7 	.word	0x080060e7
 80060cc:	08006103 	.word	0x08006103
 80060d0:	0800610d 	.word	0x0800610d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fe ffbb 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060e2:	f000 bd6d 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060e6:	f107 030c 	add.w	r3, r7, #12
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff fa66 	bl	80055bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060f4:	f000 bd64 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80060f8:	f7fe f92c 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 80060fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80060fe:	f000 bd5f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006102:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006106:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006108:	f000 bd5a 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800610c:	4b94      	ldr	r3, [pc, #592]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b20      	cmp	r3, #32
 8006116:	d118      	bne.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006118:	4b91      	ldr	r3, [pc, #580]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006124:	4b8e      	ldr	r3, [pc, #568]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	0e1b      	lsrs	r3, r3, #24
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	e006      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006130:	4b8b      	ldr	r3, [pc, #556]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	0e1b      	lsrs	r3, r3, #24
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	4a89      	ldr	r2, [pc, #548]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006144:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006146:	f000 bd3b 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800614e:	f000 bd37 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006156:	f000 bd33 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800615a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800615e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006162:	430b      	orrs	r3, r1
 8006164:	d167      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006166:	4b7e      	ldr	r3, [pc, #504]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800616c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006170:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006178:	d036      	beq.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006180:	d855      	bhi.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006188:	d029      	beq.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006190:	d84d      	bhi.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006198:	d013      	beq.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061a0:	d845      	bhi.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d015      	beq.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ae:	d13e      	bne.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fe ff4d 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061be:	f000 bcff 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061c2:	f107 030c 	add.w	r3, r7, #12
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff f9f8 	bl	80055bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061d0:	f000 bcf6 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80061d4:	f7fe f8be 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 80061d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80061da:	f000 bcf1 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80061de:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80061e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061e4:	f000 bcec 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80061e8:	4b5d      	ldr	r3, [pc, #372]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d118      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80061f4:	4b5a      	ldr	r3, [pc, #360]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006200:	4b57      	ldr	r3, [pc, #348]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	0e1b      	lsrs	r3, r3, #24
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	e006      	b.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800620c:	4b54      	ldr	r3, [pc, #336]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800620e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006212:	041b      	lsls	r3, r3, #16
 8006214:	0e1b      	lsrs	r3, r3, #24
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	4a52      	ldr	r2, [pc, #328]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800621c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006220:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006222:	f000 bccd 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800622a:	f000 bcc9 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006232:	f000 bcc5 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800623a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800623e:	430b      	orrs	r3, r1
 8006240:	d14c      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006242:	4b47      	ldr	r3, [pc, #284]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006248:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800624c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006254:	f7fe f898 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8006258:	6378      	str	r0, [r7, #52]	@ 0x34
 800625a:	f000 bcb1 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006264:	d104      	bne.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006266:	f7fd ff73 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800626a:	6378      	str	r0, [r7, #52]	@ 0x34
 800626c:	f000 bca8 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006270:	4b3b      	ldr	r3, [pc, #236]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800627c:	d107      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006284:	d103      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006286:	4b38      	ldr	r3, [pc, #224]	@ (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006288:	637b      	str	r3, [r7, #52]	@ 0x34
 800628a:	f000 bc99 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800628e:	4b34      	ldr	r3, [pc, #208]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b20      	cmp	r3, #32
 8006298:	d11c      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062a0:	d118      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062a2:	4b2f      	ldr	r3, [pc, #188]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80062ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	0e1b      	lsrs	r3, r3, #24
 80062b4:	f003 030f 	and.w	r3, r3, #15
 80062b8:	e006      	b.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80062ba:	4b29      	ldr	r3, [pc, #164]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80062bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	0e1b      	lsrs	r3, r3, #24
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	4a26      	ldr	r2, [pc, #152]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80062ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d0:	f000 bc76 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d8:	f000 bc72 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80062dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e0:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80062e4:	430b      	orrs	r3, r1
 80062e6:	d152      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80062e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80062ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062ee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80062f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80062f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80062fa:	f7fe f845 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 80062fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8006300:	f000 bc5e 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800630a:	d104      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800630c:	f7fd ff20 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8006310:	6378      	str	r0, [r7, #52]	@ 0x34
 8006312:	f000 bc55 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006316:	4b12      	ldr	r3, [pc, #72]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800631e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006322:	d107      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800632a:	d103      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 800632c:	4b0e      	ldr	r3, [pc, #56]	@ (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800632e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006330:	f000 bc46 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006334:	4b0a      	ldr	r3, [pc, #40]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b20      	cmp	r3, #32
 800633e:	d122      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006342:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006346:	d11e      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006348:	4b05      	ldr	r3, [pc, #20]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006354:	4b02      	ldr	r3, [pc, #8]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	0e1b      	lsrs	r3, r3, #24
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	e00c      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006360:	46020c00 	.word	0x46020c00
 8006364:	08009bb8 	.word	0x08009bb8
 8006368:	00f42400 	.word	0x00f42400
 800636c:	4ba1      	ldr	r3, [pc, #644]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800636e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006372:	041b      	lsls	r3, r3, #16
 8006374:	0e1b      	lsrs	r3, r3, #24
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	4a9f      	ldr	r2, [pc, #636]	@ (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800637c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006380:	637b      	str	r3, [r7, #52]	@ 0x34
 8006382:	f000 bc1d 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34
 800638a:	f000 bc19 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800638e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006392:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006396:	430b      	orrs	r3, r1
 8006398:	d151      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800639a:	4b96      	ldr	r3, [pc, #600]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800639c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063a0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80063aa:	d024      	beq.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80063ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80063b0:	d842      	bhi.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	2b80      	cmp	r3, #128	@ 0x80
 80063b6:	d00d      	beq.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80063b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ba:	2b80      	cmp	r3, #128	@ 0x80
 80063bc:	d83c      	bhi.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c6:	2b40      	cmp	r3, #64	@ 0x40
 80063c8:	d011      	beq.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80063ca:	e035      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80063cc:	f7fe f804 	bl	80043d8 <HAL_RCC_GetPCLK3Freq>
 80063d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80063d2:	e3f5      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063d4:	4b87      	ldr	r3, [pc, #540]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e0:	d102      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80063e2:	4b86      	ldr	r3, [pc, #536]	@ (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80063e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80063e6:	e3eb      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063ec:	e3e8      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80063ee:	f7fd feaf 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 80063f2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80063f4:	e3e4      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80063f6:	4b7f      	ldr	r3, [pc, #508]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d117      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006402:	4b7c      	ldr	r3, [pc, #496]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d005      	beq.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800640e:	4b79      	ldr	r3, [pc, #484]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	0e1b      	lsrs	r3, r3, #24
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	e006      	b.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800641a:	4b76      	ldr	r3, [pc, #472]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800641c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006420:	041b      	lsls	r3, r3, #16
 8006422:	0e1b      	lsrs	r3, r3, #24
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	4a73      	ldr	r2, [pc, #460]	@ (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800642a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800642e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006430:	e3c6      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006436:	e3c3      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800643c:	e3c0      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800643e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006442:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006446:	430b      	orrs	r3, r1
 8006448:	d147      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800644a:	4b6a      	ldr	r3, [pc, #424]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800644c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006450:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006454:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800645c:	f7fd ff94 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8006460:	6378      	str	r0, [r7, #52]	@ 0x34
 8006462:	e3ad      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800646a:	d103      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800646c:	f7fd fe70 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8006470:	6378      	str	r0, [r7, #52]	@ 0x34
 8006472:	e3a5      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006474:	4b5f      	ldr	r3, [pc, #380]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800647c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006480:	d106      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006488:	d102      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800648a:	4b5c      	ldr	r3, [pc, #368]	@ (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800648c:	637b      	str	r3, [r7, #52]	@ 0x34
 800648e:	e397      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006490:	4b58      	ldr	r3, [pc, #352]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b20      	cmp	r3, #32
 800649a:	d11b      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80064a2:	d117      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064a4:	4b53      	ldr	r3, [pc, #332]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80064b0:	4b50      	ldr	r3, [pc, #320]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	0e1b      	lsrs	r3, r3, #24
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	e006      	b.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80064bc:	4b4d      	ldr	r3, [pc, #308]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80064be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064c2:	041b      	lsls	r3, r3, #16
 80064c4:	0e1b      	lsrs	r3, r3, #24
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	4a4b      	ldr	r2, [pc, #300]	@ (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80064cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d2:	e375      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d8:	e372      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80064da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064de:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80064e2:	430b      	orrs	r3, r1
 80064e4:	d164      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80064e6:	4b43      	ldr	r3, [pc, #268]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80064e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80064f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d120      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80064f8:	4b3e      	ldr	r3, [pc, #248]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b20      	cmp	r3, #32
 8006502:	d117      	bne.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006504:	4b3b      	ldr	r3, [pc, #236]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006510:	4b38      	ldr	r3, [pc, #224]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	0e1b      	lsrs	r3, r3, #24
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	e006      	b.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 800651c:	4b35      	ldr	r3, [pc, #212]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800651e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006522:	041b      	lsls	r3, r3, #16
 8006524:	0e1b      	lsrs	r3, r3, #24
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	4a33      	ldr	r2, [pc, #204]	@ (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800652c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
 8006532:	e345      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	637b      	str	r3, [r7, #52]	@ 0x34
 8006538:	e342      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800653a:	4b2e      	ldr	r3, [pc, #184]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800653c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006548:	d112      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006550:	d10e      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006552:	4b28      	ldr	r3, [pc, #160]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800655c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006560:	d102      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006562:	23fa      	movs	r3, #250	@ 0xfa
 8006564:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006566:	e32b      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006568:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800656c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800656e:	e327      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006570:	4b20      	ldr	r3, [pc, #128]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800657c:	d106      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006584:	d102      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006586:	4b1d      	ldr	r3, [pc, #116]	@ (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
 800658a:	e319      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800658c:	4b19      	ldr	r3, [pc, #100]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800658e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b02      	cmp	r3, #2
 8006598:	d107      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065a0:	d103      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a8:	e30a      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ae:	e307      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80065b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80065b8:	430b      	orrs	r3, r1
 80065ba:	d16b      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80065bc:	4b0d      	ldr	r3, [pc, #52]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065c2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80065c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d127      	bne.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80065ce:	4b09      	ldr	r3, [pc, #36]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b20      	cmp	r3, #32
 80065d8:	d11e      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065da:	4b06      	ldr	r3, [pc, #24]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00c      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80065e6:	4b03      	ldr	r3, [pc, #12]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	0e1b      	lsrs	r3, r3, #24
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	e00d      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80065f2:	bf00      	nop
 80065f4:	46020c00 	.word	0x46020c00
 80065f8:	08009bb8 	.word	0x08009bb8
 80065fc:	00f42400 	.word	0x00f42400
 8006600:	4b94      	ldr	r3, [pc, #592]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006606:	041b      	lsls	r3, r3, #16
 8006608:	0e1b      	lsrs	r3, r3, #24
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	4a92      	ldr	r2, [pc, #584]	@ (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006614:	637b      	str	r3, [r7, #52]	@ 0x34
 8006616:	e2d3      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	637b      	str	r3, [r7, #52]	@ 0x34
 800661c:	e2d0      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800661e:	4b8d      	ldr	r3, [pc, #564]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006628:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800662c:	d112      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800662e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006634:	d10e      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006636:	4b87      	ldr	r3, [pc, #540]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800663c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006644:	d102      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006646:	23fa      	movs	r3, #250	@ 0xfa
 8006648:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800664a:	e2b9      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800664c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006650:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006652:	e2b5      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006654:	4b7f      	ldr	r3, [pc, #508]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800665c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006660:	d106      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006668:	d102      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800666a:	4b7c      	ldr	r3, [pc, #496]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800666c:	637b      	str	r3, [r7, #52]	@ 0x34
 800666e:	e2a7      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006670:	4b78      	ldr	r3, [pc, #480]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b02      	cmp	r3, #2
 800667c:	d107      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800667e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006680:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006684:	d103      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800668a:	637b      	str	r3, [r7, #52]	@ 0x34
 800668c:	e298      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
 8006692:	e295      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006698:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800669c:	430b      	orrs	r3, r1
 800669e:	d147      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80066a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80066a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066a6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80066aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d103      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80066b2:	f7fd fe69 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 80066b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80066b8:	e282      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80066ba:	4b66      	ldr	r3, [pc, #408]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80066bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066c8:	d112      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066d0:	d10e      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066d2:	4b60      	ldr	r3, [pc, #384]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80066d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066e0:	d102      	bne.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 80066e2:	23fa      	movs	r3, #250	@ 0xfa
 80066e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066e6:	e26b      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80066e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80066ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066ee:	e267      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80066f0:	4b58      	ldr	r3, [pc, #352]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fc:	d106      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006704:	d102      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006706:	4b55      	ldr	r3, [pc, #340]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006708:	637b      	str	r3, [r7, #52]	@ 0x34
 800670a:	e259      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800670c:	4b51      	ldr	r3, [pc, #324]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800670e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b02      	cmp	r3, #2
 8006718:	d107      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006720:	d103      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006726:	637b      	str	r3, [r7, #52]	@ 0x34
 8006728:	e24a      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	637b      	str	r3, [r7, #52]	@ 0x34
 800672e:	e247      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006734:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006738:	430b      	orrs	r3, r1
 800673a:	d12d      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800673c:	4b45      	ldr	r3, [pc, #276]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800673e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006742:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006746:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006748:	4b42      	ldr	r3, [pc, #264]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006754:	d105      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 800675c:	4b3f      	ldr	r3, [pc, #252]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800675e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006760:	e22e      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006768:	d107      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800676a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe fc70 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
 8006778:	e222      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006780:	d107      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006782:	f107 0318 	add.w	r3, r7, #24
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fdbe 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006790:	e216      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34
 8006796:	e213      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80067a0:	430b      	orrs	r3, r1
 80067a2:	d15d      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80067a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80067a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067aa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80067ae:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80067b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067b6:	d028      	beq.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 80067b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067be:	d845      	bhi.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067c6:	d013      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 80067c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067ce:	d83d      	bhi.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80067d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067dc:	d004      	beq.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 80067de:	e035      	b.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80067e0:	f7fd fde6 	bl	80043b0 <HAL_RCC_GetPCLK2Freq>
 80067e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80067e6:	e1eb      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80067e8:	f7fd fcb2 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 80067ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80067ee:	e1e7      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067f0:	4b18      	ldr	r3, [pc, #96]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067fc:	d102      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80067fe:	4b17      	ldr	r3, [pc, #92]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006800:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006802:	e1dd      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006808:	e1da      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800680a:	4b12      	ldr	r3, [pc, #72]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b20      	cmp	r3, #32
 8006814:	d117      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006816:	4b0f      	ldr	r3, [pc, #60]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006822:	4b0c      	ldr	r3, [pc, #48]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	0e1b      	lsrs	r3, r3, #24
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	e006      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800682e:	4b09      	ldr	r3, [pc, #36]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006834:	041b      	lsls	r3, r3, #16
 8006836:	0e1b      	lsrs	r3, r3, #24
 8006838:	f003 030f 	and.w	r3, r3, #15
 800683c:	4a06      	ldr	r2, [pc, #24]	@ (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800683e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006842:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006844:	e1bc      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800684a:	e1b9      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006850:	e1b6      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006852:	bf00      	nop
 8006854:	46020c00 	.word	0x46020c00
 8006858:	08009bb8 	.word	0x08009bb8
 800685c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006864:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006868:	430b      	orrs	r3, r1
 800686a:	d156      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800686c:	4ba5      	ldr	r3, [pc, #660]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800686e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006872:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006876:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800687e:	d028      	beq.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006882:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006886:	d845      	bhi.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800688e:	d013      	beq.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006896:	d83d      	bhi.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a4:	d004      	beq.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80068a6:	e035      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80068a8:	f7fd fd6e 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 80068ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80068ae:	e187      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80068b0:	f7fd fc4e 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 80068b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80068b6:	e183      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068b8:	4b92      	ldr	r3, [pc, #584]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c4:	d102      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 80068c6:	4b90      	ldr	r3, [pc, #576]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80068c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068ca:	e179      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068d0:	e176      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068d2:	4b8c      	ldr	r3, [pc, #560]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d117      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068de:	4b89      	ldr	r3, [pc, #548]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80068ea:	4b86      	ldr	r3, [pc, #536]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	0e1b      	lsrs	r3, r3, #24
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	e006      	b.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80068f6:	4b83      	ldr	r3, [pc, #524]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80068f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068fc:	041b      	lsls	r3, r3, #16
 80068fe:	0e1b      	lsrs	r3, r3, #24
 8006900:	f003 030f 	and.w	r3, r3, #15
 8006904:	4a81      	ldr	r2, [pc, #516]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800690a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800690c:	e158      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006912:	e155      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006918:	e152      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800691a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006922:	430b      	orrs	r3, r1
 8006924:	d177      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006926:	4b77      	ldr	r3, [pc, #476]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800692c:	f003 0318 	and.w	r3, r3, #24
 8006930:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	2b18      	cmp	r3, #24
 8006936:	d86b      	bhi.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006938:	a201      	add	r2, pc, #4	@ (adr r2, 8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	080069a5 	.word	0x080069a5
 8006944:	08006a11 	.word	0x08006a11
 8006948:	08006a11 	.word	0x08006a11
 800694c:	08006a11 	.word	0x08006a11
 8006950:	08006a11 	.word	0x08006a11
 8006954:	08006a11 	.word	0x08006a11
 8006958:	08006a11 	.word	0x08006a11
 800695c:	08006a11 	.word	0x08006a11
 8006960:	080069ad 	.word	0x080069ad
 8006964:	08006a11 	.word	0x08006a11
 8006968:	08006a11 	.word	0x08006a11
 800696c:	08006a11 	.word	0x08006a11
 8006970:	08006a11 	.word	0x08006a11
 8006974:	08006a11 	.word	0x08006a11
 8006978:	08006a11 	.word	0x08006a11
 800697c:	08006a11 	.word	0x08006a11
 8006980:	080069b5 	.word	0x080069b5
 8006984:	08006a11 	.word	0x08006a11
 8006988:	08006a11 	.word	0x08006a11
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006a11 	.word	0x08006a11
 8006994:	08006a11 	.word	0x08006a11
 8006998:	08006a11 	.word	0x08006a11
 800699c:	08006a11 	.word	0x08006a11
 80069a0:	080069cf 	.word	0x080069cf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80069a4:	f7fd fd18 	bl	80043d8 <HAL_RCC_GetPCLK3Freq>
 80069a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80069aa:	e109      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80069ac:	f7fd fbd0 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 80069b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80069b2:	e105      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b4:	4b53      	ldr	r3, [pc, #332]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c0:	d102      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 80069c2:	4b51      	ldr	r3, [pc, #324]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80069c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069c6:	e0fb      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069cc:	e0f8      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d117      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069da:	4b4a      	ldr	r3, [pc, #296]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 80069e6:	4b47      	ldr	r3, [pc, #284]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	0e1b      	lsrs	r3, r3, #24
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	e006      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80069f2:	4b44      	ldr	r3, [pc, #272]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069f8:	041b      	lsls	r3, r3, #16
 80069fa:	0e1b      	lsrs	r3, r3, #24
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	4a42      	ldr	r2, [pc, #264]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a08:	e0da      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a0e:	e0d7      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a14:	e0d4      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	d155      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006a22:	4b38      	ldr	r3, [pc, #224]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006a24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a28:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006a2c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a34:	d013      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8006a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a3c:	d844      	bhi.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a44:	d013      	beq.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a4c:	d83c      	bhi.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d014      	beq.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8006a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a5a:	d014      	beq.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8006a5c:	e034      	b.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a5e:	f107 0318 	add.w	r3, r7, #24
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe fc50 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a6c:	e0a8      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe faee 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a7c:	e0a0      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006a7e:	f7fd fb67 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8006a82:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006a84:	e09c      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a86:	4b1f      	ldr	r3, [pc, #124]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d117      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a92:	4b1c      	ldr	r3, [pc, #112]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006a9e:	4b19      	ldr	r3, [pc, #100]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	0e1b      	lsrs	r3, r3, #24
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	e006      	b.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8006aaa:	4b16      	ldr	r3, [pc, #88]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ab0:	041b      	lsls	r3, r3, #16
 8006ab2:	0e1b      	lsrs	r3, r3, #24
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	4a14      	ldr	r2, [pc, #80]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006abe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ac0:	e07e      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ac6:	e07b      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006acc:	e078      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	d138      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006ada:	4b0a      	ldr	r3, [pc, #40]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ae4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006ae6:	4b07      	ldr	r3, [pc, #28]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d10d      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8006afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b00:	e05e      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006b02:	bf00      	nop
 8006b04:	46020c00 	.word	0x46020c00
 8006b08:	00f42400 	.word	0x00f42400
 8006b0c:	08009bb8 	.word	0x08009bb8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006b10:	4b2e      	ldr	r3, [pc, #184]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b1e:	d112      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b26:	d10e      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b28:	4b28      	ldr	r3, [pc, #160]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b36:	d102      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8006b38:	23fa      	movs	r3, #250	@ 0xfa
 8006b3a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b3c:	e040      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b3e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b42:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b44:	e03c      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b4a:	e039      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b50:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006b54:	430b      	orrs	r3, r1
 8006b56:	d131      	bne.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006b58:	4b1c      	ldr	r3, [pc, #112]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006b5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b5e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006b62:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006b64:	4b19      	ldr	r3, [pc, #100]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b70:	d105      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8006b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d102      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8006b78:	4b15      	ldr	r3, [pc, #84]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8006b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b7c:	e020      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006b7e:	4b13      	ldr	r3, [pc, #76]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b8a:	d106      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b92:	d102      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006b94:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8006b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b98:	e012      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba6:	d106      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bae:	d102      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8006bb0:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb4:	e004      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bba:	e001      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3738      	adds	r7, #56	@ 0x38
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	46020c00 	.word	0x46020c00
 8006bd0:	02dc6c00 	.word	0x02dc6c00
 8006bd4:	016e3600 	.word	0x016e3600
 8006bd8:	00f42400 	.word	0x00f42400

08006bdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006be4:	4b47      	ldr	r3, [pc, #284]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a46      	ldr	r2, [pc, #280]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006bea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006bf0:	f7fa ffde 	bl	8001bb0 <HAL_GetTick>
 8006bf4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bf6:	e008      	b.n	8006c0a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006bf8:	f7fa ffda 	bl	8001bb0 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e077      	b.n	8006cfa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1f0      	bne.n	8006bf8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006c16:	4b3b      	ldr	r3, [pc, #236]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6811      	ldr	r1, [r2, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6852      	ldr	r2, [r2, #4]
 8006c2a:	3a01      	subs	r2, #1
 8006c2c:	0212      	lsls	r2, r2, #8
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	4934      	ldr	r1, [pc, #208]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006c36:	4b33      	ldr	r3, [pc, #204]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c3a:	4b33      	ldr	r3, [pc, #204]	@ (8006d08 <RCCEx_PLL2_Config+0x12c>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6892      	ldr	r2, [r2, #8]
 8006c42:	3a01      	subs	r2, #1
 8006c44:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	68d2      	ldr	r2, [r2, #12]
 8006c4c:	3a01      	subs	r2, #1
 8006c4e:	0252      	lsls	r2, r2, #9
 8006c50:	b292      	uxth	r2, r2
 8006c52:	4311      	orrs	r1, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6912      	ldr	r2, [r2, #16]
 8006c58:	3a01      	subs	r2, #1
 8006c5a:	0412      	lsls	r2, r2, #16
 8006c5c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006c60:	4311      	orrs	r1, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6952      	ldr	r2, [r2, #20]
 8006c66:	3a01      	subs	r2, #1
 8006c68:	0612      	lsls	r2, r2, #24
 8006c6a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	4924      	ldr	r1, [pc, #144]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006c76:	4b23      	ldr	r3, [pc, #140]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	f023 020c 	bic.w	r2, r3, #12
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	4920      	ldr	r1, [pc, #128]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006c88:	4b1e      	ldr	r3, [pc, #120]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	491c      	ldr	r1, [pc, #112]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006c96:	4b1b      	ldr	r3, [pc, #108]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c9c:	f023 0310 	bic.w	r3, r3, #16
 8006ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006ca2:	4b18      	ldr	r3, [pc, #96]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006caa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	69d2      	ldr	r2, [r2, #28]
 8006cb2:	00d2      	lsls	r2, r2, #3
 8006cb4:	4913      	ldr	r1, [pc, #76]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006cba:	4b12      	ldr	r3, [pc, #72]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	4a11      	ldr	r2, [pc, #68]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006cc0:	f043 0310 	orr.w	r3, r3, #16
 8006cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a0e      	ldr	r2, [pc, #56]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006ccc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cd0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cd2:	f7fa ff6d 	bl	8001bb0 <HAL_GetTick>
 8006cd6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cd8:	e008      	b.n	8006cec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cda:	f7fa ff69 	bl	8001bb0 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d901      	bls.n	8006cec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e006      	b.n	8006cfa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cec:	4b05      	ldr	r3, [pc, #20]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0

}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	46020c00 	.word	0x46020c00
 8006d08:	80800000 	.word	0x80800000

08006d0c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006d14:	4b47      	ldr	r3, [pc, #284]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a46      	ldr	r2, [pc, #280]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d1e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d20:	f7fa ff46 	bl	8001bb0 <HAL_GetTick>
 8006d24:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d26:	e008      	b.n	8006d3a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d28:	f7fa ff42 	bl	8001bb0 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e077      	b.n	8006e2a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f0      	bne.n	8006d28 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006d46:	4b3b      	ldr	r3, [pc, #236]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d4e:	f023 0303 	bic.w	r3, r3, #3
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	6811      	ldr	r1, [r2, #0]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6852      	ldr	r2, [r2, #4]
 8006d5a:	3a01      	subs	r2, #1
 8006d5c:	0212      	lsls	r2, r2, #8
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	4934      	ldr	r1, [pc, #208]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	630b      	str	r3, [r1, #48]	@ 0x30
 8006d66:	4b33      	ldr	r3, [pc, #204]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d6a:	4b33      	ldr	r3, [pc, #204]	@ (8006e38 <RCCEx_PLL3_Config+0x12c>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6892      	ldr	r2, [r2, #8]
 8006d72:	3a01      	subs	r2, #1
 8006d74:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	68d2      	ldr	r2, [r2, #12]
 8006d7c:	3a01      	subs	r2, #1
 8006d7e:	0252      	lsls	r2, r2, #9
 8006d80:	b292      	uxth	r2, r2
 8006d82:	4311      	orrs	r1, r2
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6912      	ldr	r2, [r2, #16]
 8006d88:	3a01      	subs	r2, #1
 8006d8a:	0412      	lsls	r2, r2, #16
 8006d8c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006d90:	4311      	orrs	r1, r2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6952      	ldr	r2, [r2, #20]
 8006d96:	3a01      	subs	r2, #1
 8006d98:	0612      	lsls	r2, r2, #24
 8006d9a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	4924      	ldr	r1, [pc, #144]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006da6:	4b23      	ldr	r3, [pc, #140]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006daa:	f023 020c 	bic.w	r2, r3, #12
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	4920      	ldr	r1, [pc, #128]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006db8:	4b1e      	ldr	r3, [pc, #120]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	491c      	ldr	r1, [pc, #112]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dca:	4a1a      	ldr	r2, [pc, #104]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dcc:	f023 0310 	bic.w	r3, r3, #16
 8006dd0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006dd2:	4b18      	ldr	r3, [pc, #96]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dda:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	69d2      	ldr	r2, [r2, #28]
 8006de2:	00d2      	lsls	r2, r2, #3
 8006de4:	4913      	ldr	r1, [pc, #76]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006dea:	4b12      	ldr	r3, [pc, #72]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dee:	4a11      	ldr	r2, [pc, #68]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006df0:	f043 0310 	orr.w	r3, r3, #16
 8006df4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006df6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e00:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e02:	f7fa fed5 	bl	8001bb0 <HAL_GetTick>
 8006e06:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e08:	e008      	b.n	8006e1c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e0a:	f7fa fed1 	bl	8001bb0 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d901      	bls.n	8006e1c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e006      	b.n	8006e2a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e1c:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0f0      	beq.n	8006e0a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	46020c00 	.word	0x46020c00
 8006e38:	80800000 	.word	0x80800000

08006e3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e0fb      	b.n	8007046 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a7f      	ldr	r2, [pc, #508]	@ (8007050 <HAL_SPI_Init+0x214>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d004      	beq.n	8006e62 <HAL_SPI_Init+0x26>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a7d      	ldr	r2, [pc, #500]	@ (8007054 <HAL_SPI_Init+0x218>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	e000      	b.n	8006e64 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8006e62:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a78      	ldr	r2, [pc, #480]	@ (8007050 <HAL_SPI_Init+0x214>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d004      	beq.n	8006e7e <HAL_SPI_Init+0x42>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a76      	ldr	r2, [pc, #472]	@ (8007054 <HAL_SPI_Init+0x218>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d105      	bne.n	8006e8a <HAL_SPI_Init+0x4e>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	2b0f      	cmp	r3, #15
 8006e84:	d901      	bls.n	8006e8a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e0dd      	b.n	8007046 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f8ec 	bl	8007068 <SPI_GetPacketSize>
 8006e90:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a6e      	ldr	r2, [pc, #440]	@ (8007050 <HAL_SPI_Init+0x214>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d004      	beq.n	8006ea6 <HAL_SPI_Init+0x6a>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a6c      	ldr	r2, [pc, #432]	@ (8007054 <HAL_SPI_Init+0x218>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d102      	bne.n	8006eac <HAL_SPI_Init+0x70>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d816      	bhi.n	8006eda <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006eb0:	4a69      	ldr	r2, [pc, #420]	@ (8007058 <HAL_SPI_Init+0x21c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00e      	beq.n	8006ed4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a68      	ldr	r2, [pc, #416]	@ (800705c <HAL_SPI_Init+0x220>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d009      	beq.n	8006ed4 <HAL_SPI_Init+0x98>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a66      	ldr	r2, [pc, #408]	@ (8007060 <HAL_SPI_Init+0x224>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d004      	beq.n	8006ed4 <HAL_SPI_Init+0x98>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a65      	ldr	r2, [pc, #404]	@ (8007064 <HAL_SPI_Init+0x228>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d104      	bne.n	8006ede <HAL_SPI_Init+0xa2>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b10      	cmp	r3, #16
 8006ed8:	d901      	bls.n	8006ede <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e0b3      	b.n	8007046 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fa f9ee 	bl	80012d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0201 	bic.w	r2, r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006f1a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f24:	d119      	bne.n	8006f5a <HAL_SPI_Init+0x11e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f2e:	d103      	bne.n	8006f38 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d008      	beq.n	8006f4a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10c      	bne.n	8006f5a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f48:	d107      	bne.n	8006f5a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00f      	beq.n	8006f86 <HAL_SPI_Init+0x14a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	2b06      	cmp	r3, #6
 8006f6c:	d90b      	bls.n	8006f86 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	e007      	b.n	8006f96 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69da      	ldr	r2, [r3, #28]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa8:	ea42 0103 	orr.w	r1, r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007002:	ea42 0103 	orr.w	r1, r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	46002000 	.word	0x46002000
 8007054:	56002000 	.word	0x56002000
 8007058:	40013000 	.word	0x40013000
 800705c:	50013000 	.word	0x50013000
 8007060:	40003800 	.word	0x40003800
 8007064:	50003800 	.word	0x50003800

08007068 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	3301      	adds	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	3301      	adds	r3, #1
 8007080:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	3307      	adds	r3, #7
 8007086:	08db      	lsrs	r3, r3, #3
 8007088:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d12e      	bne.n	8007112 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d101      	bne.n	80070c2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80070be:	2302      	movs	r3, #2
 80070c0:	e028      	b.n	8007114 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2202      	movs	r2, #2
 80070ce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0201 	bic.w	r2, r2, #1
 80070e0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80070ee:	ea42 0103 	orr.w	r1, r2, r3
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	e000      	b.n	8007114 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
  }
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e049      	b.n	80071c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d106      	bne.n	800714c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fa f954 	bl	80013f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3304      	adds	r3, #4
 800715c:	4619      	mov	r1, r3
 800715e:	4610      	mov	r0, r2
 8007160:	f000 faa2 	bl	80076a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e049      	b.n	8007274 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d106      	bne.n	80071fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fa f935 	bl	8001464 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2202      	movs	r2, #2
 80071fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3304      	adds	r3, #4
 800720a:	4619      	mov	r1, r3
 800720c:	4610      	mov	r0, r2
 800720e:	f000 fa4b 	bl	80076a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007296:	2302      	movs	r3, #2
 8007298:	e0ff      	b.n	800749a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b14      	cmp	r3, #20
 80072a6:	f200 80f0 	bhi.w	800748a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80072aa:	a201      	add	r2, pc, #4	@ (adr r2, 80072b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b0:	08007305 	.word	0x08007305
 80072b4:	0800748b 	.word	0x0800748b
 80072b8:	0800748b 	.word	0x0800748b
 80072bc:	0800748b 	.word	0x0800748b
 80072c0:	08007345 	.word	0x08007345
 80072c4:	0800748b 	.word	0x0800748b
 80072c8:	0800748b 	.word	0x0800748b
 80072cc:	0800748b 	.word	0x0800748b
 80072d0:	08007387 	.word	0x08007387
 80072d4:	0800748b 	.word	0x0800748b
 80072d8:	0800748b 	.word	0x0800748b
 80072dc:	0800748b 	.word	0x0800748b
 80072e0:	080073c7 	.word	0x080073c7
 80072e4:	0800748b 	.word	0x0800748b
 80072e8:	0800748b 	.word	0x0800748b
 80072ec:	0800748b 	.word	0x0800748b
 80072f0:	08007409 	.word	0x08007409
 80072f4:	0800748b 	.word	0x0800748b
 80072f8:	0800748b 	.word	0x0800748b
 80072fc:	0800748b 	.word	0x0800748b
 8007300:	08007449 	.word	0x08007449
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68b9      	ldr	r1, [r7, #8]
 800730a:	4618      	mov	r0, r3
 800730c:	f000 facc 	bl	80078a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0208 	orr.w	r2, r2, #8
 800731e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699a      	ldr	r2, [r3, #24]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0204 	bic.w	r2, r2, #4
 800732e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6999      	ldr	r1, [r3, #24]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	619a      	str	r2, [r3, #24]
      break;
 8007342:	e0a5      	b.n	8007490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fb6e 	bl	8007a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800735e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800736e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6999      	ldr	r1, [r3, #24]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	021a      	lsls	r2, r3, #8
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	619a      	str	r2, [r3, #24]
      break;
 8007384:	e084      	b.n	8007490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fbfd 	bl	8007b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0208 	orr.w	r2, r2, #8
 80073a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	69da      	ldr	r2, [r3, #28]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0204 	bic.w	r2, r2, #4
 80073b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69d9      	ldr	r1, [r3, #28]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	61da      	str	r2, [r3, #28]
      break;
 80073c4:	e064      	b.n	8007490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68b9      	ldr	r1, [r7, #8]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fc8b 	bl	8007ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69da      	ldr	r2, [r3, #28]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69d9      	ldr	r1, [r3, #28]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	021a      	lsls	r2, r3, #8
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	61da      	str	r2, [r3, #28]
      break;
 8007406:	e043      	b.n	8007490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fd1a 	bl	8007e48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0208 	orr.w	r2, r2, #8
 8007422:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0204 	bic.w	r2, r2, #4
 8007432:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007446:	e023      	b.n	8007490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fd7c 	bl	8007f4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007462:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007472:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	021a      	lsls	r2, r3, #8
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007488:	e002      	b.n	8007490 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	75fb      	strb	r3, [r7, #23]
      break;
 800748e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop

080074a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_TIM_ConfigClockSource+0x1c>
 80074bc:	2302      	movs	r3, #2
 80074be:	e0e6      	b.n	800768e <HAL_TIM_ConfigClockSource+0x1ea>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80074de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80074e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a67      	ldr	r2, [pc, #412]	@ (8007698 <HAL_TIM_ConfigClockSource+0x1f4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	f000 80b1 	beq.w	8007662 <HAL_TIM_ConfigClockSource+0x1be>
 8007500:	4a65      	ldr	r2, [pc, #404]	@ (8007698 <HAL_TIM_ConfigClockSource+0x1f4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	f200 80b6 	bhi.w	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 8007508:	4a64      	ldr	r2, [pc, #400]	@ (800769c <HAL_TIM_ConfigClockSource+0x1f8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	f000 80a9 	beq.w	8007662 <HAL_TIM_ConfigClockSource+0x1be>
 8007510:	4a62      	ldr	r2, [pc, #392]	@ (800769c <HAL_TIM_ConfigClockSource+0x1f8>)
 8007512:	4293      	cmp	r3, r2
 8007514:	f200 80ae 	bhi.w	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 8007518:	4a61      	ldr	r2, [pc, #388]	@ (80076a0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800751a:	4293      	cmp	r3, r2
 800751c:	f000 80a1 	beq.w	8007662 <HAL_TIM_ConfigClockSource+0x1be>
 8007520:	4a5f      	ldr	r2, [pc, #380]	@ (80076a0 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007522:	4293      	cmp	r3, r2
 8007524:	f200 80a6 	bhi.w	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 8007528:	4a5e      	ldr	r2, [pc, #376]	@ (80076a4 <HAL_TIM_ConfigClockSource+0x200>)
 800752a:	4293      	cmp	r3, r2
 800752c:	f000 8099 	beq.w	8007662 <HAL_TIM_ConfigClockSource+0x1be>
 8007530:	4a5c      	ldr	r2, [pc, #368]	@ (80076a4 <HAL_TIM_ConfigClockSource+0x200>)
 8007532:	4293      	cmp	r3, r2
 8007534:	f200 809e 	bhi.w	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 8007538:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800753c:	f000 8091 	beq.w	8007662 <HAL_TIM_ConfigClockSource+0x1be>
 8007540:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007544:	f200 8096 	bhi.w	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 8007548:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800754c:	f000 8089 	beq.w	8007662 <HAL_TIM_ConfigClockSource+0x1be>
 8007550:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007554:	f200 808e 	bhi.w	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 8007558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800755c:	d03e      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x138>
 800755e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007562:	f200 8087 	bhi.w	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 8007566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800756a:	f000 8086 	beq.w	800767a <HAL_TIM_ConfigClockSource+0x1d6>
 800756e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007572:	d87f      	bhi.n	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 8007574:	2b70      	cmp	r3, #112	@ 0x70
 8007576:	d01a      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x10a>
 8007578:	2b70      	cmp	r3, #112	@ 0x70
 800757a:	d87b      	bhi.n	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 800757c:	2b60      	cmp	r3, #96	@ 0x60
 800757e:	d050      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0x17e>
 8007580:	2b60      	cmp	r3, #96	@ 0x60
 8007582:	d877      	bhi.n	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 8007584:	2b50      	cmp	r3, #80	@ 0x50
 8007586:	d03c      	beq.n	8007602 <HAL_TIM_ConfigClockSource+0x15e>
 8007588:	2b50      	cmp	r3, #80	@ 0x50
 800758a:	d873      	bhi.n	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 800758c:	2b40      	cmp	r3, #64	@ 0x40
 800758e:	d058      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x19e>
 8007590:	2b40      	cmp	r3, #64	@ 0x40
 8007592:	d86f      	bhi.n	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 8007594:	2b30      	cmp	r3, #48	@ 0x30
 8007596:	d064      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x1be>
 8007598:	2b30      	cmp	r3, #48	@ 0x30
 800759a:	d86b      	bhi.n	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 800759c:	2b20      	cmp	r3, #32
 800759e:	d060      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x1be>
 80075a0:	2b20      	cmp	r3, #32
 80075a2:	d867      	bhi.n	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d05c      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x1be>
 80075a8:	2b10      	cmp	r3, #16
 80075aa:	d05a      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x1be>
 80075ac:	e062      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075be:	f000 fdc5 	bl	800814c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80075d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	609a      	str	r2, [r3, #8]
      break;
 80075da:	e04f      	b.n	800767c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075ec:	f000 fdae 	bl	800814c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075fe:	609a      	str	r2, [r3, #8]
      break;
 8007600:	e03c      	b.n	800767c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800760e:	461a      	mov	r2, r3
 8007610:	f000 fd20 	bl	8008054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2150      	movs	r1, #80	@ 0x50
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fd79 	bl	8008112 <TIM_ITRx_SetConfig>
      break;
 8007620:	e02c      	b.n	800767c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800762e:	461a      	mov	r2, r3
 8007630:	f000 fd3f 	bl	80080b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2160      	movs	r1, #96	@ 0x60
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fd69 	bl	8008112 <TIM_ITRx_SetConfig>
      break;
 8007640:	e01c      	b.n	800767c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800764e:	461a      	mov	r2, r3
 8007650:	f000 fd00 	bl	8008054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2140      	movs	r1, #64	@ 0x40
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fd59 	bl	8008112 <TIM_ITRx_SetConfig>
      break;
 8007660:	e00c      	b.n	800767c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4619      	mov	r1, r3
 800766c:	4610      	mov	r0, r2
 800766e:	f000 fd50 	bl	8008112 <TIM_ITRx_SetConfig>
      break;
 8007672:	e003      	b.n	800767c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	73fb      	strb	r3, [r7, #15]
      break;
 8007678:	e000      	b.n	800767c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800767a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	00100070 	.word	0x00100070
 800769c:	00100040 	.word	0x00100040
 80076a0:	00100030 	.word	0x00100030
 80076a4:	00100020 	.word	0x00100020

080076a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a6b      	ldr	r2, [pc, #428]	@ (8007868 <TIM_Base_SetConfig+0x1c0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d02b      	beq.n	8007718 <TIM_Base_SetConfig+0x70>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a6a      	ldr	r2, [pc, #424]	@ (800786c <TIM_Base_SetConfig+0x1c4>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d027      	beq.n	8007718 <TIM_Base_SetConfig+0x70>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ce:	d023      	beq.n	8007718 <TIM_Base_SetConfig+0x70>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076d6:	d01f      	beq.n	8007718 <TIM_Base_SetConfig+0x70>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a65      	ldr	r2, [pc, #404]	@ (8007870 <TIM_Base_SetConfig+0x1c8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d01b      	beq.n	8007718 <TIM_Base_SetConfig+0x70>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a64      	ldr	r2, [pc, #400]	@ (8007874 <TIM_Base_SetConfig+0x1cc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d017      	beq.n	8007718 <TIM_Base_SetConfig+0x70>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a63      	ldr	r2, [pc, #396]	@ (8007878 <TIM_Base_SetConfig+0x1d0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d013      	beq.n	8007718 <TIM_Base_SetConfig+0x70>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a62      	ldr	r2, [pc, #392]	@ (800787c <TIM_Base_SetConfig+0x1d4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00f      	beq.n	8007718 <TIM_Base_SetConfig+0x70>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a61      	ldr	r2, [pc, #388]	@ (8007880 <TIM_Base_SetConfig+0x1d8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d00b      	beq.n	8007718 <TIM_Base_SetConfig+0x70>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a60      	ldr	r2, [pc, #384]	@ (8007884 <TIM_Base_SetConfig+0x1dc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d007      	beq.n	8007718 <TIM_Base_SetConfig+0x70>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a5f      	ldr	r2, [pc, #380]	@ (8007888 <TIM_Base_SetConfig+0x1e0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d003      	beq.n	8007718 <TIM_Base_SetConfig+0x70>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a5e      	ldr	r2, [pc, #376]	@ (800788c <TIM_Base_SetConfig+0x1e4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d108      	bne.n	800772a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800771e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a4e      	ldr	r2, [pc, #312]	@ (8007868 <TIM_Base_SetConfig+0x1c0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d043      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a4d      	ldr	r2, [pc, #308]	@ (800786c <TIM_Base_SetConfig+0x1c4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d03f      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007740:	d03b      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007748:	d037      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a48      	ldr	r2, [pc, #288]	@ (8007870 <TIM_Base_SetConfig+0x1c8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d033      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a47      	ldr	r2, [pc, #284]	@ (8007874 <TIM_Base_SetConfig+0x1cc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d02f      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a46      	ldr	r2, [pc, #280]	@ (8007878 <TIM_Base_SetConfig+0x1d0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d02b      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a45      	ldr	r2, [pc, #276]	@ (800787c <TIM_Base_SetConfig+0x1d4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d027      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a44      	ldr	r2, [pc, #272]	@ (8007880 <TIM_Base_SetConfig+0x1d8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d023      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a43      	ldr	r2, [pc, #268]	@ (8007884 <TIM_Base_SetConfig+0x1dc>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d01f      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a42      	ldr	r2, [pc, #264]	@ (8007888 <TIM_Base_SetConfig+0x1e0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d01b      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a41      	ldr	r2, [pc, #260]	@ (800788c <TIM_Base_SetConfig+0x1e4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d017      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a40      	ldr	r2, [pc, #256]	@ (8007890 <TIM_Base_SetConfig+0x1e8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d013      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a3f      	ldr	r2, [pc, #252]	@ (8007894 <TIM_Base_SetConfig+0x1ec>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00f      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a3e      	ldr	r2, [pc, #248]	@ (8007898 <TIM_Base_SetConfig+0x1f0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d00b      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a3d      	ldr	r2, [pc, #244]	@ (800789c <TIM_Base_SetConfig+0x1f4>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d007      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a3c      	ldr	r2, [pc, #240]	@ (80078a0 <TIM_Base_SetConfig+0x1f8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d003      	beq.n	80077ba <TIM_Base_SetConfig+0x112>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a3b      	ldr	r2, [pc, #236]	@ (80078a4 <TIM_Base_SetConfig+0x1fc>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d108      	bne.n	80077cc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a1e      	ldr	r2, [pc, #120]	@ (8007868 <TIM_Base_SetConfig+0x1c0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d023      	beq.n	800783a <TIM_Base_SetConfig+0x192>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a1d      	ldr	r2, [pc, #116]	@ (800786c <TIM_Base_SetConfig+0x1c4>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d01f      	beq.n	800783a <TIM_Base_SetConfig+0x192>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a22      	ldr	r2, [pc, #136]	@ (8007888 <TIM_Base_SetConfig+0x1e0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d01b      	beq.n	800783a <TIM_Base_SetConfig+0x192>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a21      	ldr	r2, [pc, #132]	@ (800788c <TIM_Base_SetConfig+0x1e4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d017      	beq.n	800783a <TIM_Base_SetConfig+0x192>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a20      	ldr	r2, [pc, #128]	@ (8007890 <TIM_Base_SetConfig+0x1e8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d013      	beq.n	800783a <TIM_Base_SetConfig+0x192>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a1f      	ldr	r2, [pc, #124]	@ (8007894 <TIM_Base_SetConfig+0x1ec>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d00f      	beq.n	800783a <TIM_Base_SetConfig+0x192>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a1e      	ldr	r2, [pc, #120]	@ (8007898 <TIM_Base_SetConfig+0x1f0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d00b      	beq.n	800783a <TIM_Base_SetConfig+0x192>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a1d      	ldr	r2, [pc, #116]	@ (800789c <TIM_Base_SetConfig+0x1f4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d007      	beq.n	800783a <TIM_Base_SetConfig+0x192>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a1c      	ldr	r2, [pc, #112]	@ (80078a0 <TIM_Base_SetConfig+0x1f8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d003      	beq.n	800783a <TIM_Base_SetConfig+0x192>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a1b      	ldr	r2, [pc, #108]	@ (80078a4 <TIM_Base_SetConfig+0x1fc>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d103      	bne.n	8007842 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	691a      	ldr	r2, [r3, #16]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f043 0204 	orr.w	r2, r3, #4
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	601a      	str	r2, [r3, #0]
}
 800785a:	bf00      	nop
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	40012c00 	.word	0x40012c00
 800786c:	50012c00 	.word	0x50012c00
 8007870:	40000400 	.word	0x40000400
 8007874:	50000400 	.word	0x50000400
 8007878:	40000800 	.word	0x40000800
 800787c:	50000800 	.word	0x50000800
 8007880:	40000c00 	.word	0x40000c00
 8007884:	50000c00 	.word	0x50000c00
 8007888:	40013400 	.word	0x40013400
 800788c:	50013400 	.word	0x50013400
 8007890:	40014000 	.word	0x40014000
 8007894:	50014000 	.word	0x50014000
 8007898:	40014400 	.word	0x40014400
 800789c:	50014400 	.word	0x50014400
 80078a0:	40014800 	.word	0x40014800
 80078a4:	50014800 	.word	0x50014800

080078a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	f023 0201 	bic.w	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f023 0303 	bic.w	r3, r3, #3
 80078e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f023 0302 	bic.w	r3, r3, #2
 80078f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a40      	ldr	r2, [pc, #256]	@ (8007a04 <TIM_OC1_SetConfig+0x15c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d023      	beq.n	8007950 <TIM_OC1_SetConfig+0xa8>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a3f      	ldr	r2, [pc, #252]	@ (8007a08 <TIM_OC1_SetConfig+0x160>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d01f      	beq.n	8007950 <TIM_OC1_SetConfig+0xa8>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a3e      	ldr	r2, [pc, #248]	@ (8007a0c <TIM_OC1_SetConfig+0x164>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d01b      	beq.n	8007950 <TIM_OC1_SetConfig+0xa8>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a3d      	ldr	r2, [pc, #244]	@ (8007a10 <TIM_OC1_SetConfig+0x168>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d017      	beq.n	8007950 <TIM_OC1_SetConfig+0xa8>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a3c      	ldr	r2, [pc, #240]	@ (8007a14 <TIM_OC1_SetConfig+0x16c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d013      	beq.n	8007950 <TIM_OC1_SetConfig+0xa8>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a3b      	ldr	r2, [pc, #236]	@ (8007a18 <TIM_OC1_SetConfig+0x170>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00f      	beq.n	8007950 <TIM_OC1_SetConfig+0xa8>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a3a      	ldr	r2, [pc, #232]	@ (8007a1c <TIM_OC1_SetConfig+0x174>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00b      	beq.n	8007950 <TIM_OC1_SetConfig+0xa8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a39      	ldr	r2, [pc, #228]	@ (8007a20 <TIM_OC1_SetConfig+0x178>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d007      	beq.n	8007950 <TIM_OC1_SetConfig+0xa8>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a38      	ldr	r2, [pc, #224]	@ (8007a24 <TIM_OC1_SetConfig+0x17c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d003      	beq.n	8007950 <TIM_OC1_SetConfig+0xa8>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a37      	ldr	r2, [pc, #220]	@ (8007a28 <TIM_OC1_SetConfig+0x180>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10c      	bne.n	800796a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f023 0308 	bic.w	r3, r3, #8
 8007956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f023 0304 	bic.w	r3, r3, #4
 8007968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a25      	ldr	r2, [pc, #148]	@ (8007a04 <TIM_OC1_SetConfig+0x15c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d023      	beq.n	80079ba <TIM_OC1_SetConfig+0x112>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a24      	ldr	r2, [pc, #144]	@ (8007a08 <TIM_OC1_SetConfig+0x160>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d01f      	beq.n	80079ba <TIM_OC1_SetConfig+0x112>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a23      	ldr	r2, [pc, #140]	@ (8007a0c <TIM_OC1_SetConfig+0x164>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d01b      	beq.n	80079ba <TIM_OC1_SetConfig+0x112>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a22      	ldr	r2, [pc, #136]	@ (8007a10 <TIM_OC1_SetConfig+0x168>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d017      	beq.n	80079ba <TIM_OC1_SetConfig+0x112>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a21      	ldr	r2, [pc, #132]	@ (8007a14 <TIM_OC1_SetConfig+0x16c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d013      	beq.n	80079ba <TIM_OC1_SetConfig+0x112>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a20      	ldr	r2, [pc, #128]	@ (8007a18 <TIM_OC1_SetConfig+0x170>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00f      	beq.n	80079ba <TIM_OC1_SetConfig+0x112>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1f      	ldr	r2, [pc, #124]	@ (8007a1c <TIM_OC1_SetConfig+0x174>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00b      	beq.n	80079ba <TIM_OC1_SetConfig+0x112>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a1e      	ldr	r2, [pc, #120]	@ (8007a20 <TIM_OC1_SetConfig+0x178>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d007      	beq.n	80079ba <TIM_OC1_SetConfig+0x112>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007a24 <TIM_OC1_SetConfig+0x17c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d003      	beq.n	80079ba <TIM_OC1_SetConfig+0x112>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a28 <TIM_OC1_SetConfig+0x180>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d111      	bne.n	80079de <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	621a      	str	r2, [r3, #32]
}
 80079f8:	bf00      	nop
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	40012c00 	.word	0x40012c00
 8007a08:	50012c00 	.word	0x50012c00
 8007a0c:	40013400 	.word	0x40013400
 8007a10:	50013400 	.word	0x50013400
 8007a14:	40014000 	.word	0x40014000
 8007a18:	50014000 	.word	0x50014000
 8007a1c:	40014400 	.word	0x40014400
 8007a20:	50014400 	.word	0x50014400
 8007a24:	40014800 	.word	0x40014800
 8007a28:	50014800 	.word	0x50014800

08007a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	f023 0210 	bic.w	r2, r3, #16
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	021b      	lsls	r3, r3, #8
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f023 0320 	bic.w	r3, r3, #32
 8007a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a36      	ldr	r2, [pc, #216]	@ (8007b64 <TIM_OC2_SetConfig+0x138>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00b      	beq.n	8007aa8 <TIM_OC2_SetConfig+0x7c>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a35      	ldr	r2, [pc, #212]	@ (8007b68 <TIM_OC2_SetConfig+0x13c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d007      	beq.n	8007aa8 <TIM_OC2_SetConfig+0x7c>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a34      	ldr	r2, [pc, #208]	@ (8007b6c <TIM_OC2_SetConfig+0x140>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d003      	beq.n	8007aa8 <TIM_OC2_SetConfig+0x7c>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a33      	ldr	r2, [pc, #204]	@ (8007b70 <TIM_OC2_SetConfig+0x144>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d10d      	bne.n	8007ac4 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ac2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a27      	ldr	r2, [pc, #156]	@ (8007b64 <TIM_OC2_SetConfig+0x138>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d023      	beq.n	8007b14 <TIM_OC2_SetConfig+0xe8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a26      	ldr	r2, [pc, #152]	@ (8007b68 <TIM_OC2_SetConfig+0x13c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d01f      	beq.n	8007b14 <TIM_OC2_SetConfig+0xe8>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a25      	ldr	r2, [pc, #148]	@ (8007b6c <TIM_OC2_SetConfig+0x140>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d01b      	beq.n	8007b14 <TIM_OC2_SetConfig+0xe8>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a24      	ldr	r2, [pc, #144]	@ (8007b70 <TIM_OC2_SetConfig+0x144>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d017      	beq.n	8007b14 <TIM_OC2_SetConfig+0xe8>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a23      	ldr	r2, [pc, #140]	@ (8007b74 <TIM_OC2_SetConfig+0x148>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d013      	beq.n	8007b14 <TIM_OC2_SetConfig+0xe8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a22      	ldr	r2, [pc, #136]	@ (8007b78 <TIM_OC2_SetConfig+0x14c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00f      	beq.n	8007b14 <TIM_OC2_SetConfig+0xe8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a21      	ldr	r2, [pc, #132]	@ (8007b7c <TIM_OC2_SetConfig+0x150>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00b      	beq.n	8007b14 <TIM_OC2_SetConfig+0xe8>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a20      	ldr	r2, [pc, #128]	@ (8007b80 <TIM_OC2_SetConfig+0x154>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d007      	beq.n	8007b14 <TIM_OC2_SetConfig+0xe8>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a1f      	ldr	r2, [pc, #124]	@ (8007b84 <TIM_OC2_SetConfig+0x158>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d003      	beq.n	8007b14 <TIM_OC2_SetConfig+0xe8>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007b88 <TIM_OC2_SetConfig+0x15c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d113      	bne.n	8007b3c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	621a      	str	r2, [r3, #32]
}
 8007b56:	bf00      	nop
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	40012c00 	.word	0x40012c00
 8007b68:	50012c00 	.word	0x50012c00
 8007b6c:	40013400 	.word	0x40013400
 8007b70:	50013400 	.word	0x50013400
 8007b74:	40014000 	.word	0x40014000
 8007b78:	50014000 	.word	0x50014000
 8007b7c:	40014400 	.word	0x40014400
 8007b80:	50014400 	.word	0x50014400
 8007b84:	40014800 	.word	0x40014800
 8007b88:	50014800 	.word	0x50014800

08007b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0303 	bic.w	r3, r3, #3
 8007bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a35      	ldr	r2, [pc, #212]	@ (8007cc0 <TIM_OC3_SetConfig+0x134>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00b      	beq.n	8007c06 <TIM_OC3_SetConfig+0x7a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a34      	ldr	r2, [pc, #208]	@ (8007cc4 <TIM_OC3_SetConfig+0x138>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d007      	beq.n	8007c06 <TIM_OC3_SetConfig+0x7a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a33      	ldr	r2, [pc, #204]	@ (8007cc8 <TIM_OC3_SetConfig+0x13c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d003      	beq.n	8007c06 <TIM_OC3_SetConfig+0x7a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a32      	ldr	r2, [pc, #200]	@ (8007ccc <TIM_OC3_SetConfig+0x140>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d10d      	bne.n	8007c22 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a26      	ldr	r2, [pc, #152]	@ (8007cc0 <TIM_OC3_SetConfig+0x134>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d023      	beq.n	8007c72 <TIM_OC3_SetConfig+0xe6>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a25      	ldr	r2, [pc, #148]	@ (8007cc4 <TIM_OC3_SetConfig+0x138>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d01f      	beq.n	8007c72 <TIM_OC3_SetConfig+0xe6>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a24      	ldr	r2, [pc, #144]	@ (8007cc8 <TIM_OC3_SetConfig+0x13c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d01b      	beq.n	8007c72 <TIM_OC3_SetConfig+0xe6>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a23      	ldr	r2, [pc, #140]	@ (8007ccc <TIM_OC3_SetConfig+0x140>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d017      	beq.n	8007c72 <TIM_OC3_SetConfig+0xe6>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a22      	ldr	r2, [pc, #136]	@ (8007cd0 <TIM_OC3_SetConfig+0x144>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d013      	beq.n	8007c72 <TIM_OC3_SetConfig+0xe6>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a21      	ldr	r2, [pc, #132]	@ (8007cd4 <TIM_OC3_SetConfig+0x148>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00f      	beq.n	8007c72 <TIM_OC3_SetConfig+0xe6>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a20      	ldr	r2, [pc, #128]	@ (8007cd8 <TIM_OC3_SetConfig+0x14c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00b      	beq.n	8007c72 <TIM_OC3_SetConfig+0xe6>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8007cdc <TIM_OC3_SetConfig+0x150>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d007      	beq.n	8007c72 <TIM_OC3_SetConfig+0xe6>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a1e      	ldr	r2, [pc, #120]	@ (8007ce0 <TIM_OC3_SetConfig+0x154>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d003      	beq.n	8007c72 <TIM_OC3_SetConfig+0xe6>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ce4 <TIM_OC3_SetConfig+0x158>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d113      	bne.n	8007c9a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	621a      	str	r2, [r3, #32]
}
 8007cb4:	bf00      	nop
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	40012c00 	.word	0x40012c00
 8007cc4:	50012c00 	.word	0x50012c00
 8007cc8:	40013400 	.word	0x40013400
 8007ccc:	50013400 	.word	0x50013400
 8007cd0:	40014000 	.word	0x40014000
 8007cd4:	50014000 	.word	0x50014000
 8007cd8:	40014400 	.word	0x40014400
 8007cdc:	50014400 	.word	0x50014400
 8007ce0:	40014800 	.word	0x40014800
 8007ce4:	50014800 	.word	0x50014800

08007ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	021b      	lsls	r3, r3, #8
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	031b      	lsls	r3, r3, #12
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a36      	ldr	r2, [pc, #216]	@ (8007e20 <TIM_OC4_SetConfig+0x138>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00b      	beq.n	8007d64 <TIM_OC4_SetConfig+0x7c>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a35      	ldr	r2, [pc, #212]	@ (8007e24 <TIM_OC4_SetConfig+0x13c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d007      	beq.n	8007d64 <TIM_OC4_SetConfig+0x7c>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a34      	ldr	r2, [pc, #208]	@ (8007e28 <TIM_OC4_SetConfig+0x140>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d003      	beq.n	8007d64 <TIM_OC4_SetConfig+0x7c>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a33      	ldr	r2, [pc, #204]	@ (8007e2c <TIM_OC4_SetConfig+0x144>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d10d      	bne.n	8007d80 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	031b      	lsls	r3, r3, #12
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a27      	ldr	r2, [pc, #156]	@ (8007e20 <TIM_OC4_SetConfig+0x138>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d023      	beq.n	8007dd0 <TIM_OC4_SetConfig+0xe8>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a26      	ldr	r2, [pc, #152]	@ (8007e24 <TIM_OC4_SetConfig+0x13c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d01f      	beq.n	8007dd0 <TIM_OC4_SetConfig+0xe8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a25      	ldr	r2, [pc, #148]	@ (8007e28 <TIM_OC4_SetConfig+0x140>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d01b      	beq.n	8007dd0 <TIM_OC4_SetConfig+0xe8>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a24      	ldr	r2, [pc, #144]	@ (8007e2c <TIM_OC4_SetConfig+0x144>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d017      	beq.n	8007dd0 <TIM_OC4_SetConfig+0xe8>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a23      	ldr	r2, [pc, #140]	@ (8007e30 <TIM_OC4_SetConfig+0x148>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d013      	beq.n	8007dd0 <TIM_OC4_SetConfig+0xe8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a22      	ldr	r2, [pc, #136]	@ (8007e34 <TIM_OC4_SetConfig+0x14c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00f      	beq.n	8007dd0 <TIM_OC4_SetConfig+0xe8>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a21      	ldr	r2, [pc, #132]	@ (8007e38 <TIM_OC4_SetConfig+0x150>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00b      	beq.n	8007dd0 <TIM_OC4_SetConfig+0xe8>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a20      	ldr	r2, [pc, #128]	@ (8007e3c <TIM_OC4_SetConfig+0x154>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d007      	beq.n	8007dd0 <TIM_OC4_SetConfig+0xe8>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e40 <TIM_OC4_SetConfig+0x158>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d003      	beq.n	8007dd0 <TIM_OC4_SetConfig+0xe8>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a1e      	ldr	r2, [pc, #120]	@ (8007e44 <TIM_OC4_SetConfig+0x15c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d113      	bne.n	8007df8 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dd6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007dde:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	019b      	lsls	r3, r3, #6
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	019b      	lsls	r3, r3, #6
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	621a      	str	r2, [r3, #32]
}
 8007e12:	bf00      	nop
 8007e14:	371c      	adds	r7, #28
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40012c00 	.word	0x40012c00
 8007e24:	50012c00 	.word	0x50012c00
 8007e28:	40013400 	.word	0x40013400
 8007e2c:	50013400 	.word	0x50013400
 8007e30:	40014000 	.word	0x40014000
 8007e34:	50014000 	.word	0x50014000
 8007e38:	40014400 	.word	0x40014400
 8007e3c:	50014400 	.word	0x50014400
 8007e40:	40014800 	.word	0x40014800
 8007e44:	50014800 	.word	0x50014800

08007e48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	041b      	lsls	r3, r3, #16
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a21      	ldr	r2, [pc, #132]	@ (8007f24 <TIM_OC5_SetConfig+0xdc>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d023      	beq.n	8007eea <TIM_OC5_SetConfig+0xa2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a20      	ldr	r2, [pc, #128]	@ (8007f28 <TIM_OC5_SetConfig+0xe0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d01f      	beq.n	8007eea <TIM_OC5_SetConfig+0xa2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a1f      	ldr	r2, [pc, #124]	@ (8007f2c <TIM_OC5_SetConfig+0xe4>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d01b      	beq.n	8007eea <TIM_OC5_SetConfig+0xa2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8007f30 <TIM_OC5_SetConfig+0xe8>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d017      	beq.n	8007eea <TIM_OC5_SetConfig+0xa2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8007f34 <TIM_OC5_SetConfig+0xec>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d013      	beq.n	8007eea <TIM_OC5_SetConfig+0xa2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f38 <TIM_OC5_SetConfig+0xf0>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d00f      	beq.n	8007eea <TIM_OC5_SetConfig+0xa2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8007f3c <TIM_OC5_SetConfig+0xf4>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d00b      	beq.n	8007eea <TIM_OC5_SetConfig+0xa2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8007f40 <TIM_OC5_SetConfig+0xf8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d007      	beq.n	8007eea <TIM_OC5_SetConfig+0xa2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a19      	ldr	r2, [pc, #100]	@ (8007f44 <TIM_OC5_SetConfig+0xfc>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d003      	beq.n	8007eea <TIM_OC5_SetConfig+0xa2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a18      	ldr	r2, [pc, #96]	@ (8007f48 <TIM_OC5_SetConfig+0x100>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d109      	bne.n	8007efe <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	50012c00 	.word	0x50012c00
 8007f2c:	40013400 	.word	0x40013400
 8007f30:	50013400 	.word	0x50013400
 8007f34:	40014000 	.word	0x40014000
 8007f38:	50014000 	.word	0x50014000
 8007f3c:	40014400 	.word	0x40014400
 8007f40:	50014400 	.word	0x50014400
 8007f44:	40014800 	.word	0x40014800
 8007f48:	50014800 	.word	0x50014800

08007f4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	021b      	lsls	r3, r3, #8
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	051b      	lsls	r3, r3, #20
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a22      	ldr	r2, [pc, #136]	@ (800802c <TIM_OC6_SetConfig+0xe0>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d023      	beq.n	8007ff0 <TIM_OC6_SetConfig+0xa4>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a21      	ldr	r2, [pc, #132]	@ (8008030 <TIM_OC6_SetConfig+0xe4>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d01f      	beq.n	8007ff0 <TIM_OC6_SetConfig+0xa4>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a20      	ldr	r2, [pc, #128]	@ (8008034 <TIM_OC6_SetConfig+0xe8>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d01b      	beq.n	8007ff0 <TIM_OC6_SetConfig+0xa4>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a1f      	ldr	r2, [pc, #124]	@ (8008038 <TIM_OC6_SetConfig+0xec>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d017      	beq.n	8007ff0 <TIM_OC6_SetConfig+0xa4>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800803c <TIM_OC6_SetConfig+0xf0>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d013      	beq.n	8007ff0 <TIM_OC6_SetConfig+0xa4>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a1d      	ldr	r2, [pc, #116]	@ (8008040 <TIM_OC6_SetConfig+0xf4>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00f      	beq.n	8007ff0 <TIM_OC6_SetConfig+0xa4>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8008044 <TIM_OC6_SetConfig+0xf8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00b      	beq.n	8007ff0 <TIM_OC6_SetConfig+0xa4>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a1b      	ldr	r2, [pc, #108]	@ (8008048 <TIM_OC6_SetConfig+0xfc>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d007      	beq.n	8007ff0 <TIM_OC6_SetConfig+0xa4>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800804c <TIM_OC6_SetConfig+0x100>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d003      	beq.n	8007ff0 <TIM_OC6_SetConfig+0xa4>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a19      	ldr	r2, [pc, #100]	@ (8008050 <TIM_OC6_SetConfig+0x104>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d109      	bne.n	8008004 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	029b      	lsls	r3, r3, #10
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	621a      	str	r2, [r3, #32]
}
 800801e:	bf00      	nop
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40012c00 	.word	0x40012c00
 8008030:	50012c00 	.word	0x50012c00
 8008034:	40013400 	.word	0x40013400
 8008038:	50013400 	.word	0x50013400
 800803c:	40014000 	.word	0x40014000
 8008040:	50014000 	.word	0x50014000
 8008044:	40014400 	.word	0x40014400
 8008048:	50014400 	.word	0x50014400
 800804c:	40014800 	.word	0x40014800
 8008050:	50014800 	.word	0x50014800

08008054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	f023 0201 	bic.w	r2, r3, #1
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800807e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f023 030a 	bic.w	r3, r3, #10
 8008090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	621a      	str	r2, [r3, #32]
}
 80080a6:	bf00      	nop
 80080a8:	371c      	adds	r7, #28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b087      	sub	sp, #28
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	f023 0210 	bic.w	r2, r3, #16
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	031b      	lsls	r3, r3, #12
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80080ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	621a      	str	r2, [r3, #32]
}
 8008106:	bf00      	nop
 8008108:	371c      	adds	r7, #28
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800812c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4313      	orrs	r3, r2
 8008134:	f043 0307 	orr.w	r3, r3, #7
 8008138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	609a      	str	r2, [r3, #8]
}
 8008140:	bf00      	nop
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	021a      	lsls	r2, r3, #8
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	431a      	orrs	r2, r3
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	4313      	orrs	r3, r2
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	4313      	orrs	r3, r2
 8008178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	609a      	str	r2, [r3, #8]
}
 8008180:	bf00      	nop
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800819c:	2b01      	cmp	r3, #1
 800819e:	d101      	bne.n	80081a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081a0:	2302      	movs	r3, #2
 80081a2:	e097      	b.n	80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a45      	ldr	r2, [pc, #276]	@ (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d00e      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a44      	ldr	r2, [pc, #272]	@ (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d009      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a42      	ldr	r2, [pc, #264]	@ (80082e8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d004      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a41      	ldr	r2, [pc, #260]	@ (80082ec <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d108      	bne.n	80081fe <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008208:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4313      	orrs	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a2f      	ldr	r2, [pc, #188]	@ (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d040      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a2e      	ldr	r2, [pc, #184]	@ (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d03b      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008238:	d036      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008242:	d031      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a29      	ldr	r2, [pc, #164]	@ (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d02c      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a28      	ldr	r2, [pc, #160]	@ (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d027      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a26      	ldr	r2, [pc, #152]	@ (80082f8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d022      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a25      	ldr	r2, [pc, #148]	@ (80082fc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d01d      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a23      	ldr	r2, [pc, #140]	@ (8008300 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d018      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a22      	ldr	r2, [pc, #136]	@ (8008304 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d013      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a18      	ldr	r2, [pc, #96]	@ (80082e8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00e      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a17      	ldr	r2, [pc, #92]	@ (80082ec <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d009      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a1b      	ldr	r2, [pc, #108]	@ (8008308 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d004      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a1a      	ldr	r2, [pc, #104]	@ (800830c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d10c      	bne.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	40012c00 	.word	0x40012c00
 80082e4:	50012c00 	.word	0x50012c00
 80082e8:	40013400 	.word	0x40013400
 80082ec:	50013400 	.word	0x50013400
 80082f0:	40000400 	.word	0x40000400
 80082f4:	50000400 	.word	0x50000400
 80082f8:	40000800 	.word	0x40000800
 80082fc:	50000800 	.word	0x50000800
 8008300:	40000c00 	.word	0x40000c00
 8008304:	50000c00 	.word	0x50000c00
 8008308:	40014000 	.word	0x40014000
 800830c:	50014000 	.word	0x50014000

08008310 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008324:	2b01      	cmp	r3, #1
 8008326:	d101      	bne.n	800832c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008328:	2302      	movs	r3, #2
 800832a:	e07d      	b.n	8008428 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4313      	orrs	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	4313      	orrs	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	041b      	lsls	r3, r3, #16
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1e      	ldr	r2, [pc, #120]	@ (8008434 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00e      	beq.n	80083dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008438 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d009      	beq.n	80083dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a1b      	ldr	r2, [pc, #108]	@ (800843c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d004      	beq.n	80083dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008440 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d11c      	bne.n	8008416 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e6:	051b      	lsls	r3, r3, #20
 80083e8:	4313      	orrs	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008404:	4313      	orrs	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008412:	4313      	orrs	r3, r2
 8008414:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	40012c00 	.word	0x40012c00
 8008438:	50012c00 	.word	0x50012c00
 800843c:	40013400 	.word	0x40013400
 8008440:	50013400 	.word	0x50013400

08008444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e042      	b.n	80084dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800845c:	2b00      	cmp	r3, #0
 800845e:	d106      	bne.n	800846e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7f9 f8a7 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2224      	movs	r2, #36	@ 0x24
 8008472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0201 	bic.w	r2, r2, #1
 8008484:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f9ca 	bl	8008828 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f825 	bl	80084e4 <UART_SetConfig>
 800849a:	4603      	mov	r3, r0
 800849c:	2b01      	cmp	r3, #1
 800849e:	d101      	bne.n	80084a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e01b      	b.n	80084dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f042 0201 	orr.w	r2, r2, #1
 80084d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fa49 	bl	800896c <UART_CheckIdleState>
 80084da:	4603      	mov	r3, r0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084e8:	b094      	sub	sp, #80	@ 0x50
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80084f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	4b7e      	ldr	r3, [pc, #504]	@ (80086f4 <UART_SetConfig+0x210>)
 80084fa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	431a      	orrs	r2, r3
 8008506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	431a      	orrs	r2, r3
 800850c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850e:	69db      	ldr	r3, [r3, #28]
 8008510:	4313      	orrs	r3, r2
 8008512:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4977      	ldr	r1, [pc, #476]	@ (80086f8 <UART_SetConfig+0x214>)
 800851c:	4019      	ands	r1, r3
 800851e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008524:	430b      	orrs	r3, r1
 8008526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008534:	68d9      	ldr	r1, [r3, #12]
 8008536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	ea40 0301 	orr.w	r3, r0, r1
 800853e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	4b6a      	ldr	r3, [pc, #424]	@ (80086f4 <UART_SetConfig+0x210>)
 800854c:	429a      	cmp	r2, r3
 800854e:	d009      	beq.n	8008564 <UART_SetConfig+0x80>
 8008550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	4b69      	ldr	r3, [pc, #420]	@ (80086fc <UART_SetConfig+0x218>)
 8008556:	429a      	cmp	r2, r3
 8008558:	d004      	beq.n	8008564 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800855a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855c:	6a1a      	ldr	r2, [r3, #32]
 800855e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008560:	4313      	orrs	r3, r2
 8008562:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800856e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008578:	430b      	orrs	r3, r1
 800857a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800857c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008582:	f023 000f 	bic.w	r0, r3, #15
 8008586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008588:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800858a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	ea40 0301 	orr.w	r3, r0, r1
 8008592:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	4b59      	ldr	r3, [pc, #356]	@ (8008700 <UART_SetConfig+0x21c>)
 800859a:	429a      	cmp	r2, r3
 800859c:	d102      	bne.n	80085a4 <UART_SetConfig+0xc0>
 800859e:	2301      	movs	r3, #1
 80085a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085a2:	e029      	b.n	80085f8 <UART_SetConfig+0x114>
 80085a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	4b56      	ldr	r3, [pc, #344]	@ (8008704 <UART_SetConfig+0x220>)
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d102      	bne.n	80085b4 <UART_SetConfig+0xd0>
 80085ae:	2302      	movs	r3, #2
 80085b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085b2:	e021      	b.n	80085f8 <UART_SetConfig+0x114>
 80085b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	4b53      	ldr	r3, [pc, #332]	@ (8008708 <UART_SetConfig+0x224>)
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d102      	bne.n	80085c4 <UART_SetConfig+0xe0>
 80085be:	2304      	movs	r3, #4
 80085c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085c2:	e019      	b.n	80085f8 <UART_SetConfig+0x114>
 80085c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	4b50      	ldr	r3, [pc, #320]	@ (800870c <UART_SetConfig+0x228>)
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d102      	bne.n	80085d4 <UART_SetConfig+0xf0>
 80085ce:	2308      	movs	r3, #8
 80085d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085d2:	e011      	b.n	80085f8 <UART_SetConfig+0x114>
 80085d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008710 <UART_SetConfig+0x22c>)
 80085da:	429a      	cmp	r2, r3
 80085dc:	d102      	bne.n	80085e4 <UART_SetConfig+0x100>
 80085de:	2310      	movs	r3, #16
 80085e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085e2:	e009      	b.n	80085f8 <UART_SetConfig+0x114>
 80085e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	4b42      	ldr	r3, [pc, #264]	@ (80086f4 <UART_SetConfig+0x210>)
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d102      	bne.n	80085f4 <UART_SetConfig+0x110>
 80085ee:	2320      	movs	r3, #32
 80085f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085f2:	e001      	b.n	80085f8 <UART_SetConfig+0x114>
 80085f4:	2300      	movs	r3, #0
 80085f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	4b3d      	ldr	r3, [pc, #244]	@ (80086f4 <UART_SetConfig+0x210>)
 80085fe:	429a      	cmp	r2, r3
 8008600:	d005      	beq.n	800860e <UART_SetConfig+0x12a>
 8008602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	4b3d      	ldr	r3, [pc, #244]	@ (80086fc <UART_SetConfig+0x218>)
 8008608:	429a      	cmp	r2, r3
 800860a:	f040 8085 	bne.w	8008718 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800860e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008610:	2200      	movs	r2, #0
 8008612:	623b      	str	r3, [r7, #32]
 8008614:	627a      	str	r2, [r7, #36]	@ 0x24
 8008616:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800861a:	f7fd f929 	bl	8005870 <HAL_RCCEx_GetPeriphCLKFreq>
 800861e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80e8 	beq.w	80087f8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862c:	4a39      	ldr	r2, [pc, #228]	@ (8008714 <UART_SetConfig+0x230>)
 800862e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008632:	461a      	mov	r2, r3
 8008634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008636:	fbb3 f3f2 	udiv	r3, r3, r2
 800863a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800863c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	4613      	mov	r3, r2
 8008642:	005b      	lsls	r3, r3, #1
 8008644:	4413      	add	r3, r2
 8008646:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008648:	429a      	cmp	r2, r3
 800864a:	d305      	bcc.n	8008658 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800864c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008652:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008654:	429a      	cmp	r2, r3
 8008656:	d903      	bls.n	8008660 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800865e:	e048      	b.n	80086f2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008662:	2200      	movs	r2, #0
 8008664:	61bb      	str	r3, [r7, #24]
 8008666:	61fa      	str	r2, [r7, #28]
 8008668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866c:	4a29      	ldr	r2, [pc, #164]	@ (8008714 <UART_SetConfig+0x230>)
 800866e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008672:	b29b      	uxth	r3, r3
 8008674:	2200      	movs	r2, #0
 8008676:	613b      	str	r3, [r7, #16]
 8008678:	617a      	str	r2, [r7, #20]
 800867a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800867e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008682:	f7f7 fdf9 	bl	8000278 <__aeabi_uldivmod>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4610      	mov	r0, r2
 800868c:	4619      	mov	r1, r3
 800868e:	f04f 0200 	mov.w	r2, #0
 8008692:	f04f 0300 	mov.w	r3, #0
 8008696:	020b      	lsls	r3, r1, #8
 8008698:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800869c:	0202      	lsls	r2, r0, #8
 800869e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086a0:	6849      	ldr	r1, [r1, #4]
 80086a2:	0849      	lsrs	r1, r1, #1
 80086a4:	2000      	movs	r0, #0
 80086a6:	460c      	mov	r4, r1
 80086a8:	4605      	mov	r5, r0
 80086aa:	eb12 0804 	adds.w	r8, r2, r4
 80086ae:	eb43 0905 	adc.w	r9, r3, r5
 80086b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	60bb      	str	r3, [r7, #8]
 80086ba:	60fa      	str	r2, [r7, #12]
 80086bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086c0:	4640      	mov	r0, r8
 80086c2:	4649      	mov	r1, r9
 80086c4:	f7f7 fdd8 	bl	8000278 <__aeabi_uldivmod>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	4613      	mov	r3, r2
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086d6:	d308      	bcc.n	80086ea <UART_SetConfig+0x206>
 80086d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086de:	d204      	bcs.n	80086ea <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80086e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80086e6:	60da      	str	r2, [r3, #12]
 80086e8:	e003      	b.n	80086f2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80086f0:	e082      	b.n	80087f8 <UART_SetConfig+0x314>
 80086f2:	e081      	b.n	80087f8 <UART_SetConfig+0x314>
 80086f4:	46002400 	.word	0x46002400
 80086f8:	cfff69f3 	.word	0xcfff69f3
 80086fc:	56002400 	.word	0x56002400
 8008700:	40013800 	.word	0x40013800
 8008704:	40004400 	.word	0x40004400
 8008708:	40004800 	.word	0x40004800
 800870c:	40004c00 	.word	0x40004c00
 8008710:	40005000 	.word	0x40005000
 8008714:	08009c78 	.word	0x08009c78
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008720:	d13c      	bne.n	800879c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008724:	2200      	movs	r2, #0
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	607a      	str	r2, [r7, #4]
 800872a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800872e:	f7fd f89f 	bl	8005870 <HAL_RCCEx_GetPeriphCLKFreq>
 8008732:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008736:	2b00      	cmp	r3, #0
 8008738:	d05e      	beq.n	80087f8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800873a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	4a39      	ldr	r2, [pc, #228]	@ (8008824 <UART_SetConfig+0x340>)
 8008740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008744:	461a      	mov	r2, r3
 8008746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008748:	fbb3 f3f2 	udiv	r3, r3, r2
 800874c:	005a      	lsls	r2, r3, #1
 800874e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	085b      	lsrs	r3, r3, #1
 8008754:	441a      	add	r2, r3
 8008756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	fbb2 f3f3 	udiv	r3, r2, r3
 800875e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008762:	2b0f      	cmp	r3, #15
 8008764:	d916      	bls.n	8008794 <UART_SetConfig+0x2b0>
 8008766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800876c:	d212      	bcs.n	8008794 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800876e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008770:	b29b      	uxth	r3, r3
 8008772:	f023 030f 	bic.w	r3, r3, #15
 8008776:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800877a:	085b      	lsrs	r3, r3, #1
 800877c:	b29b      	uxth	r3, r3
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	b29a      	uxth	r2, r3
 8008784:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008786:	4313      	orrs	r3, r2
 8008788:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800878a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008790:	60da      	str	r2, [r3, #12]
 8008792:	e031      	b.n	80087f8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800879a:	e02d      	b.n	80087f8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800879c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800879e:	2200      	movs	r2, #0
 80087a0:	469a      	mov	sl, r3
 80087a2:	4693      	mov	fp, r2
 80087a4:	4650      	mov	r0, sl
 80087a6:	4659      	mov	r1, fp
 80087a8:	f7fd f862 	bl	8005870 <HAL_RCCEx_GetPeriphCLKFreq>
 80087ac:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80087ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d021      	beq.n	80087f8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008824 <UART_SetConfig+0x340>)
 80087ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087be:	461a      	mov	r2, r3
 80087c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80087c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	085b      	lsrs	r3, r3, #1
 80087cc:	441a      	add	r2, r3
 80087ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087da:	2b0f      	cmp	r3, #15
 80087dc:	d909      	bls.n	80087f2 <UART_SetConfig+0x30e>
 80087de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087e4:	d205      	bcs.n	80087f2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60da      	str	r2, [r3, #12]
 80087f0:	e002      	b.n	80087f8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fa:	2201      	movs	r2, #1
 80087fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008802:	2201      	movs	r2, #1
 8008804:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880a:	2200      	movs	r2, #0
 800880c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800880e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008810:	2200      	movs	r2, #0
 8008812:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008814:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008818:	4618      	mov	r0, r3
 800881a:	3750      	adds	r7, #80	@ 0x50
 800881c:	46bd      	mov	sp, r7
 800881e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008822:	bf00      	nop
 8008824:	08009c78 	.word	0x08009c78

08008828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008834:	f003 0308 	and.w	r3, r3, #8
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00a      	beq.n	8008852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008878:	f003 0302 	and.w	r3, r3, #2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00a      	beq.n	8008896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889a:	f003 0304 	and.w	r3, r3, #4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088bc:	f003 0310 	and.w	r3, r3, #16
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00a      	beq.n	80088da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00a      	beq.n	80088fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01a      	beq.n	800893e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008926:	d10a      	bne.n	800893e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	605a      	str	r2, [r3, #4]
  }
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b098      	sub	sp, #96	@ 0x60
 8008970:	af02      	add	r7, sp, #8
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800897c:	f7f9 f918 	bl	8001bb0 <HAL_GetTick>
 8008980:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0308 	and.w	r3, r3, #8
 800898c:	2b08      	cmp	r3, #8
 800898e:	d12f      	bne.n	80089f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008990:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008998:	2200      	movs	r2, #0
 800899a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f88e 	bl	8008ac0 <UART_WaitOnFlagUntilTimeout>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d022      	beq.n	80089f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b2:	e853 3f00 	ldrex	r3, [r3]
 80089b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089be:	653b      	str	r3, [r7, #80]	@ 0x50
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	461a      	mov	r2, r3
 80089c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80089ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089d0:	e841 2300 	strex	r3, r2, [r1]
 80089d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1e6      	bne.n	80089aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2220      	movs	r2, #32
 80089e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e063      	b.n	8008ab8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d149      	bne.n	8008a92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a06:	2200      	movs	r2, #0
 8008a08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f857 	bl	8008ac0 <UART_WaitOnFlagUntilTimeout>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d03c      	beq.n	8008a92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	623b      	str	r3, [r7, #32]
   return(result);
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	461a      	mov	r2, r3
 8008a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a36:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e6      	bne.n	8008a18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3308      	adds	r3, #8
 8008a50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
 8008a60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3308      	adds	r3, #8
 8008a68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a6a:	61fa      	str	r2, [r7, #28]
 8008a6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6e:	69b9      	ldr	r1, [r7, #24]
 8008a70:	69fa      	ldr	r2, [r7, #28]
 8008a72:	e841 2300 	strex	r3, r2, [r1]
 8008a76:	617b      	str	r3, [r7, #20]
   return(result);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1e5      	bne.n	8008a4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2220      	movs	r2, #32
 8008a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e012      	b.n	8008ab8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3758      	adds	r7, #88	@ 0x58
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	603b      	str	r3, [r7, #0]
 8008acc:	4613      	mov	r3, r2
 8008ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ad0:	e04f      	b.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad8:	d04b      	beq.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ada:	f7f9 f869 	bl	8001bb0 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d302      	bcc.n	8008af0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e04e      	b.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0304 	and.w	r3, r3, #4
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d037      	beq.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2b80      	cmp	r3, #128	@ 0x80
 8008b06:	d034      	beq.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b40      	cmp	r3, #64	@ 0x40
 8008b0c:	d031      	beq.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f003 0308 	and.w	r3, r3, #8
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d110      	bne.n	8008b3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2208      	movs	r2, #8
 8008b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 f838 	bl	8008b9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2208      	movs	r2, #8
 8008b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e029      	b.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b4c:	d111      	bne.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 f81e 	bl	8008b9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e00f      	b.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69da      	ldr	r2, [r3, #28]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	bf0c      	ite	eq
 8008b82:	2301      	moveq	r3, #1
 8008b84:	2300      	movne	r3, #0
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	461a      	mov	r2, r3
 8008b8a:	79fb      	ldrb	r3, [r7, #7]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d0a0      	beq.n	8008ad2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b095      	sub	sp, #84	@ 0x54
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008baa:	e853 3f00 	ldrex	r3, [r3]
 8008bae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bc8:	e841 2300 	strex	r3, r2, [r1]
 8008bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1e6      	bne.n	8008ba2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3308      	adds	r3, #8
 8008bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	e853 3f00 	ldrex	r3, [r3]
 8008be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bea:	f023 0301 	bic.w	r3, r3, #1
 8008bee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e3      	bne.n	8008bd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d118      	bne.n	8008c46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	e853 3f00 	ldrex	r3, [r3]
 8008c20:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f023 0310 	bic.w	r3, r3, #16
 8008c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c32:	61bb      	str	r3, [r7, #24]
 8008c34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	6979      	ldr	r1, [r7, #20]
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	e841 2300 	strex	r3, r2, [r1]
 8008c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1e6      	bne.n	8008c14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008c5a:	bf00      	nop
 8008c5c:	3754      	adds	r7, #84	@ 0x54
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_UARTEx_DisableFifoMode+0x16>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e027      	b.n	8008ccc <HAL_UARTEx_DisableFifoMode+0x66>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2224      	movs	r2, #36	@ 0x24
 8008c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0201 	bic.w	r2, r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008caa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e02d      	b.n	8008d4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2224      	movs	r2, #36	@ 0x24
 8008cfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f022 0201 	bic.w	r2, r2, #1
 8008d16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f84f 	bl	8008dd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d101      	bne.n	8008d6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	e02d      	b.n	8008dc8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2224      	movs	r2, #36	@ 0x24
 8008d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 0201 	bic.w	r2, r2, #1
 8008d92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f811 	bl	8008dd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2220      	movs	r2, #32
 8008dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d108      	bne.n	8008df2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008df0:	e031      	b.n	8008e56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008df2:	2308      	movs	r3, #8
 8008df4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008df6:	2308      	movs	r3, #8
 8008df8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	0e5b      	lsrs	r3, r3, #25
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	f003 0307 	and.w	r3, r3, #7
 8008e08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	0f5b      	lsrs	r3, r3, #29
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	7b3a      	ldrb	r2, [r7, #12]
 8008e1e:	4911      	ldr	r1, [pc, #68]	@ (8008e64 <UARTEx_SetNbDataToProcess+0x94>)
 8008e20:	5c8a      	ldrb	r2, [r1, r2]
 8008e22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e26:	7b3a      	ldrb	r2, [r7, #12]
 8008e28:	490f      	ldr	r1, [pc, #60]	@ (8008e68 <UARTEx_SetNbDataToProcess+0x98>)
 8008e2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	7b7a      	ldrb	r2, [r7, #13]
 8008e3c:	4909      	ldr	r1, [pc, #36]	@ (8008e64 <UARTEx_SetNbDataToProcess+0x94>)
 8008e3e:	5c8a      	ldrb	r2, [r1, r2]
 8008e40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e44:	7b7a      	ldrb	r2, [r7, #13]
 8008e46:	4908      	ldr	r1, [pc, #32]	@ (8008e68 <UARTEx_SetNbDataToProcess+0x98>)
 8008e48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008e56:	bf00      	nop
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	08009c90 	.word	0x08009c90
 8008e68:	08009c98 	.word	0x08009c98

08008e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	f107 001c 	add.w	r0, r7, #28
 8008e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f8e6 	bl	800905c <USB_CoreReset>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008e94:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d106      	bne.n	8008eaa <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008ea8:	e005      	b.n	8008eb6 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ec2:	b004      	add	sp, #16
 8008ec4:	4770      	bx	lr

08008ec6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b083      	sub	sp, #12
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f023 0201 	bic.w	r2, r3, #1
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d115      	bne.n	8008f36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f16:	200a      	movs	r0, #10
 8008f18:	f7f8 fe56 	bl	8001bc8 <HAL_Delay>
      ms += 10U;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	330a      	adds	r3, #10
 8008f20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f88c 	bl	8009040 <USB_GetMode>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d01e      	beq.n	8008f6c <USB_SetCurrentMode+0x84>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f32:	d9f0      	bls.n	8008f16 <USB_SetCurrentMode+0x2e>
 8008f34:	e01a      	b.n	8008f6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d115      	bne.n	8008f68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f48:	200a      	movs	r0, #10
 8008f4a:	f7f8 fe3d 	bl	8001bc8 <HAL_Delay>
      ms += 10U;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	330a      	adds	r3, #10
 8008f52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f873 	bl	8009040 <USB_GetMode>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d005      	beq.n	8008f6c <USB_SetCurrentMode+0x84>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f64:	d9f0      	bls.n	8008f48 <USB_SetCurrentMode+0x60>
 8008f66:	e001      	b.n	8008f6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e005      	b.n	8008f78 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008f70:	d101      	bne.n	8008f76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3301      	adds	r3, #1
 8008f92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f9a:	d901      	bls.n	8008fa0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e01b      	b.n	8008fd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	daf2      	bge.n	8008f8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	019b      	lsls	r3, r3, #6
 8008fb0:	f043 0220 	orr.w	r2, r3, #32
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008fc4:	d901      	bls.n	8008fca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e006      	b.n	8008fd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	f003 0320 	and.w	r3, r3, #32
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	d0f0      	beq.n	8008fb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ffc:	d901      	bls.n	8009002 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e018      	b.n	8009034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	daf2      	bge.n	8008ff0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2210      	movs	r2, #16
 8009012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009020:	d901      	bls.n	8009026 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e006      	b.n	8009034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f003 0310 	and.w	r3, r3, #16
 800902e:	2b10      	cmp	r3, #16
 8009030:	d0f0      	beq.n	8009014 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	f003 0301 	and.w	r3, r3, #1
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009064:	2300      	movs	r3, #0
 8009066:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3301      	adds	r3, #1
 800906c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009074:	d901      	bls.n	800907a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e01b      	b.n	80090b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	daf2      	bge.n	8009068 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	f043 0201 	orr.w	r2, r3, #1
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3301      	adds	r3, #1
 8009096:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800909e:	d901      	bls.n	80090a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e006      	b.n	80090b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d0f0      	beq.n	8009092 <USB_CoreReset+0x36>

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
	...

080090c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090c0:	b084      	sub	sp, #16
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b086      	sub	sp, #24
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80090ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	60fb      	str	r3, [r7, #12]
  USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090e0:	461a      	mov	r2, r3
 80090e2:	2300      	movs	r3, #0
 80090e4:	6013      	str	r3, [r2, #0]
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009106:	2b00      	cmp	r3, #0
 8009108:	d119      	bne.n	800913e <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800910a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800910e:	2b01      	cmp	r3, #1
 8009110:	d10a      	bne.n	8009128 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009120:	f043 0304 	orr.w	r3, r3, #4
 8009124:	6013      	str	r3, [r2, #0]
 8009126:	e014      	b.n	8009152 <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009136:	f023 0304 	bic.w	r3, r3, #4
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	e009      	b.n	8009152 <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800914c:	f023 0304 	bic.w	r3, r3, #4
 8009150:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009152:	2110      	movs	r1, #16
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff ff13 	bl	8008f80 <USB_FlushTxFifo>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff ff3d 	bl	8008fe4 <USB_FlushRxFifo>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009174:	2300      	movs	r3, #0
 8009176:	613b      	str	r3, [r7, #16]
 8009178:	e015      	b.n	80091a6 <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	4413      	add	r3, r2
 8009182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009186:	461a      	mov	r2, r3
 8009188:	f04f 33ff 	mov.w	r3, #4294967295
 800918c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	015a      	lsls	r2, r3, #5
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4413      	add	r3, r2
 8009196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800919a:	461a      	mov	r2, r3
 800919c:	2300      	movs	r3, #0
 800919e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	3301      	adds	r3, #1
 80091a4:	613b      	str	r3, [r7, #16]
 80091a6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80091aa:	461a      	mov	r2, r3
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d3e3      	bcc.n	800917a <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f04f 32ff 	mov.w	r2, #4294967295
 80091be:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2280      	movs	r2, #128	@ 0x80
 80091c4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a0e      	ldr	r2, [pc, #56]	@ (8009204 <USB_HostInit+0x144>)
 80091ca:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a0e      	ldr	r2, [pc, #56]	@ (8009208 <USB_HostInit+0x148>)
 80091d0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80091d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d105      	bne.n	80091e8 <USB_HostInit+0x128>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	f043 0210 	orr.w	r2, r3, #16
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	699a      	ldr	r2, [r3, #24]
 80091ec:	4b07      	ldr	r3, [pc, #28]	@ (800920c <USB_HostInit+0x14c>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80091f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3718      	adds	r7, #24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009200:	b004      	add	sp, #16
 8009202:	4770      	bx	lr
 8009204:	00600080 	.word	0x00600080
 8009208:	004000e0 	.word	0x004000e0
 800920c:	a3200008 	.word	0xa3200008

08009210 <sbrk_aligned>:
 8009210:	b570      	push	{r4, r5, r6, lr}
 8009212:	4e0f      	ldr	r6, [pc, #60]	@ (8009250 <sbrk_aligned+0x40>)
 8009214:	460c      	mov	r4, r1
 8009216:	4605      	mov	r5, r0
 8009218:	6831      	ldr	r1, [r6, #0]
 800921a:	b911      	cbnz	r1, 8009222 <sbrk_aligned+0x12>
 800921c:	f000 fada 	bl	80097d4 <_sbrk_r>
 8009220:	6030      	str	r0, [r6, #0]
 8009222:	4621      	mov	r1, r4
 8009224:	4628      	mov	r0, r5
 8009226:	f000 fad5 	bl	80097d4 <_sbrk_r>
 800922a:	1c43      	adds	r3, r0, #1
 800922c:	d103      	bne.n	8009236 <sbrk_aligned+0x26>
 800922e:	f04f 34ff 	mov.w	r4, #4294967295
 8009232:	4620      	mov	r0, r4
 8009234:	bd70      	pop	{r4, r5, r6, pc}
 8009236:	1cc4      	adds	r4, r0, #3
 8009238:	f024 0403 	bic.w	r4, r4, #3
 800923c:	42a0      	cmp	r0, r4
 800923e:	d0f8      	beq.n	8009232 <sbrk_aligned+0x22>
 8009240:	1a21      	subs	r1, r4, r0
 8009242:	4628      	mov	r0, r5
 8009244:	f000 fac6 	bl	80097d4 <_sbrk_r>
 8009248:	3001      	adds	r0, #1
 800924a:	d1f2      	bne.n	8009232 <sbrk_aligned+0x22>
 800924c:	e7ef      	b.n	800922e <sbrk_aligned+0x1e>
 800924e:	bf00      	nop
 8009250:	200007a8 	.word	0x200007a8

08009254 <_malloc_r>:
 8009254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009258:	1ccd      	adds	r5, r1, #3
 800925a:	4606      	mov	r6, r0
 800925c:	f025 0503 	bic.w	r5, r5, #3
 8009260:	3508      	adds	r5, #8
 8009262:	2d0c      	cmp	r5, #12
 8009264:	bf38      	it	cc
 8009266:	250c      	movcc	r5, #12
 8009268:	2d00      	cmp	r5, #0
 800926a:	db01      	blt.n	8009270 <_malloc_r+0x1c>
 800926c:	42a9      	cmp	r1, r5
 800926e:	d904      	bls.n	800927a <_malloc_r+0x26>
 8009270:	230c      	movs	r3, #12
 8009272:	6033      	str	r3, [r6, #0]
 8009274:	2000      	movs	r0, #0
 8009276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800927a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009350 <_malloc_r+0xfc>
 800927e:	f000 f869 	bl	8009354 <__malloc_lock>
 8009282:	f8d8 3000 	ldr.w	r3, [r8]
 8009286:	461c      	mov	r4, r3
 8009288:	bb44      	cbnz	r4, 80092dc <_malloc_r+0x88>
 800928a:	4629      	mov	r1, r5
 800928c:	4630      	mov	r0, r6
 800928e:	f7ff ffbf 	bl	8009210 <sbrk_aligned>
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	4604      	mov	r4, r0
 8009296:	d158      	bne.n	800934a <_malloc_r+0xf6>
 8009298:	f8d8 4000 	ldr.w	r4, [r8]
 800929c:	4627      	mov	r7, r4
 800929e:	2f00      	cmp	r7, #0
 80092a0:	d143      	bne.n	800932a <_malloc_r+0xd6>
 80092a2:	2c00      	cmp	r4, #0
 80092a4:	d04b      	beq.n	800933e <_malloc_r+0xea>
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	4639      	mov	r1, r7
 80092aa:	4630      	mov	r0, r6
 80092ac:	eb04 0903 	add.w	r9, r4, r3
 80092b0:	f000 fa90 	bl	80097d4 <_sbrk_r>
 80092b4:	4581      	cmp	r9, r0
 80092b6:	d142      	bne.n	800933e <_malloc_r+0xea>
 80092b8:	6821      	ldr	r1, [r4, #0]
 80092ba:	4630      	mov	r0, r6
 80092bc:	1a6d      	subs	r5, r5, r1
 80092be:	4629      	mov	r1, r5
 80092c0:	f7ff ffa6 	bl	8009210 <sbrk_aligned>
 80092c4:	3001      	adds	r0, #1
 80092c6:	d03a      	beq.n	800933e <_malloc_r+0xea>
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	442b      	add	r3, r5
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	f8d8 3000 	ldr.w	r3, [r8]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	bb62      	cbnz	r2, 8009330 <_malloc_r+0xdc>
 80092d6:	f8c8 7000 	str.w	r7, [r8]
 80092da:	e00f      	b.n	80092fc <_malloc_r+0xa8>
 80092dc:	6822      	ldr	r2, [r4, #0]
 80092de:	1b52      	subs	r2, r2, r5
 80092e0:	d420      	bmi.n	8009324 <_malloc_r+0xd0>
 80092e2:	2a0b      	cmp	r2, #11
 80092e4:	d917      	bls.n	8009316 <_malloc_r+0xc2>
 80092e6:	1961      	adds	r1, r4, r5
 80092e8:	42a3      	cmp	r3, r4
 80092ea:	6025      	str	r5, [r4, #0]
 80092ec:	bf18      	it	ne
 80092ee:	6059      	strne	r1, [r3, #4]
 80092f0:	6863      	ldr	r3, [r4, #4]
 80092f2:	bf08      	it	eq
 80092f4:	f8c8 1000 	streq.w	r1, [r8]
 80092f8:	5162      	str	r2, [r4, r5]
 80092fa:	604b      	str	r3, [r1, #4]
 80092fc:	4630      	mov	r0, r6
 80092fe:	f000 f82f 	bl	8009360 <__malloc_unlock>
 8009302:	f104 000b 	add.w	r0, r4, #11
 8009306:	1d23      	adds	r3, r4, #4
 8009308:	f020 0007 	bic.w	r0, r0, #7
 800930c:	1ac2      	subs	r2, r0, r3
 800930e:	bf1c      	itt	ne
 8009310:	1a1b      	subne	r3, r3, r0
 8009312:	50a3      	strne	r3, [r4, r2]
 8009314:	e7af      	b.n	8009276 <_malloc_r+0x22>
 8009316:	6862      	ldr	r2, [r4, #4]
 8009318:	42a3      	cmp	r3, r4
 800931a:	bf0c      	ite	eq
 800931c:	f8c8 2000 	streq.w	r2, [r8]
 8009320:	605a      	strne	r2, [r3, #4]
 8009322:	e7eb      	b.n	80092fc <_malloc_r+0xa8>
 8009324:	4623      	mov	r3, r4
 8009326:	6864      	ldr	r4, [r4, #4]
 8009328:	e7ae      	b.n	8009288 <_malloc_r+0x34>
 800932a:	463c      	mov	r4, r7
 800932c:	687f      	ldr	r7, [r7, #4]
 800932e:	e7b6      	b.n	800929e <_malloc_r+0x4a>
 8009330:	461a      	mov	r2, r3
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	42a3      	cmp	r3, r4
 8009336:	d1fb      	bne.n	8009330 <_malloc_r+0xdc>
 8009338:	2300      	movs	r3, #0
 800933a:	6053      	str	r3, [r2, #4]
 800933c:	e7de      	b.n	80092fc <_malloc_r+0xa8>
 800933e:	230c      	movs	r3, #12
 8009340:	4630      	mov	r0, r6
 8009342:	6033      	str	r3, [r6, #0]
 8009344:	f000 f80c 	bl	8009360 <__malloc_unlock>
 8009348:	e794      	b.n	8009274 <_malloc_r+0x20>
 800934a:	6005      	str	r5, [r0, #0]
 800934c:	e7d6      	b.n	80092fc <_malloc_r+0xa8>
 800934e:	bf00      	nop
 8009350:	200007ac 	.word	0x200007ac

08009354 <__malloc_lock>:
 8009354:	4801      	ldr	r0, [pc, #4]	@ (800935c <__malloc_lock+0x8>)
 8009356:	f000 ba8a 	b.w	800986e <__retarget_lock_acquire_recursive>
 800935a:	bf00      	nop
 800935c:	200008f0 	.word	0x200008f0

08009360 <__malloc_unlock>:
 8009360:	4801      	ldr	r0, [pc, #4]	@ (8009368 <__malloc_unlock+0x8>)
 8009362:	f000 ba85 	b.w	8009870 <__retarget_lock_release_recursive>
 8009366:	bf00      	nop
 8009368:	200008f0 	.word	0x200008f0

0800936c <std>:
 800936c:	2300      	movs	r3, #0
 800936e:	b510      	push	{r4, lr}
 8009370:	4604      	mov	r4, r0
 8009372:	6083      	str	r3, [r0, #8]
 8009374:	8181      	strh	r1, [r0, #12]
 8009376:	4619      	mov	r1, r3
 8009378:	6643      	str	r3, [r0, #100]	@ 0x64
 800937a:	81c2      	strh	r2, [r0, #14]
 800937c:	2208      	movs	r2, #8
 800937e:	6183      	str	r3, [r0, #24]
 8009380:	e9c0 3300 	strd	r3, r3, [r0]
 8009384:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009388:	305c      	adds	r0, #92	@ 0x5c
 800938a:	f000 f9e7 	bl	800975c <memset>
 800938e:	4b0d      	ldr	r3, [pc, #52]	@ (80093c4 <std+0x58>)
 8009390:	6224      	str	r4, [r4, #32]
 8009392:	6263      	str	r3, [r4, #36]	@ 0x24
 8009394:	4b0c      	ldr	r3, [pc, #48]	@ (80093c8 <std+0x5c>)
 8009396:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009398:	4b0c      	ldr	r3, [pc, #48]	@ (80093cc <std+0x60>)
 800939a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800939c:	4b0c      	ldr	r3, [pc, #48]	@ (80093d0 <std+0x64>)
 800939e:	6323      	str	r3, [r4, #48]	@ 0x30
 80093a0:	4b0c      	ldr	r3, [pc, #48]	@ (80093d4 <std+0x68>)
 80093a2:	429c      	cmp	r4, r3
 80093a4:	d006      	beq.n	80093b4 <std+0x48>
 80093a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80093aa:	4294      	cmp	r4, r2
 80093ac:	d002      	beq.n	80093b4 <std+0x48>
 80093ae:	33d0      	adds	r3, #208	@ 0xd0
 80093b0:	429c      	cmp	r4, r3
 80093b2:	d105      	bne.n	80093c0 <std+0x54>
 80093b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093bc:	f000 ba56 	b.w	800986c <__retarget_lock_init_recursive>
 80093c0:	bd10      	pop	{r4, pc}
 80093c2:	bf00      	nop
 80093c4:	080095ad 	.word	0x080095ad
 80093c8:	080095cf 	.word	0x080095cf
 80093cc:	08009607 	.word	0x08009607
 80093d0:	0800962b 	.word	0x0800962b
 80093d4:	200007b0 	.word	0x200007b0

080093d8 <stdio_exit_handler>:
 80093d8:	4a02      	ldr	r2, [pc, #8]	@ (80093e4 <stdio_exit_handler+0xc>)
 80093da:	4903      	ldr	r1, [pc, #12]	@ (80093e8 <stdio_exit_handler+0x10>)
 80093dc:	4803      	ldr	r0, [pc, #12]	@ (80093ec <stdio_exit_handler+0x14>)
 80093de:	f000 b869 	b.w	80094b4 <_fwalk_sglue>
 80093e2:	bf00      	nop
 80093e4:	2000000c 	.word	0x2000000c
 80093e8:	08009a11 	.word	0x08009a11
 80093ec:	2000001c 	.word	0x2000001c

080093f0 <cleanup_stdio>:
 80093f0:	6841      	ldr	r1, [r0, #4]
 80093f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009424 <cleanup_stdio+0x34>)
 80093f4:	4299      	cmp	r1, r3
 80093f6:	b510      	push	{r4, lr}
 80093f8:	4604      	mov	r4, r0
 80093fa:	d001      	beq.n	8009400 <cleanup_stdio+0x10>
 80093fc:	f000 fb08 	bl	8009a10 <_fflush_r>
 8009400:	68a1      	ldr	r1, [r4, #8]
 8009402:	4b09      	ldr	r3, [pc, #36]	@ (8009428 <cleanup_stdio+0x38>)
 8009404:	4299      	cmp	r1, r3
 8009406:	d002      	beq.n	800940e <cleanup_stdio+0x1e>
 8009408:	4620      	mov	r0, r4
 800940a:	f000 fb01 	bl	8009a10 <_fflush_r>
 800940e:	68e1      	ldr	r1, [r4, #12]
 8009410:	4b06      	ldr	r3, [pc, #24]	@ (800942c <cleanup_stdio+0x3c>)
 8009412:	4299      	cmp	r1, r3
 8009414:	d004      	beq.n	8009420 <cleanup_stdio+0x30>
 8009416:	4620      	mov	r0, r4
 8009418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800941c:	f000 baf8 	b.w	8009a10 <_fflush_r>
 8009420:	bd10      	pop	{r4, pc}
 8009422:	bf00      	nop
 8009424:	200007b0 	.word	0x200007b0
 8009428:	20000818 	.word	0x20000818
 800942c:	20000880 	.word	0x20000880

08009430 <global_stdio_init.part.0>:
 8009430:	b510      	push	{r4, lr}
 8009432:	4b0b      	ldr	r3, [pc, #44]	@ (8009460 <global_stdio_init.part.0+0x30>)
 8009434:	2104      	movs	r1, #4
 8009436:	4c0b      	ldr	r4, [pc, #44]	@ (8009464 <global_stdio_init.part.0+0x34>)
 8009438:	4a0b      	ldr	r2, [pc, #44]	@ (8009468 <global_stdio_init.part.0+0x38>)
 800943a:	4620      	mov	r0, r4
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	2200      	movs	r2, #0
 8009440:	f7ff ff94 	bl	800936c <std>
 8009444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009448:	2201      	movs	r2, #1
 800944a:	2109      	movs	r1, #9
 800944c:	f7ff ff8e 	bl	800936c <std>
 8009450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009454:	2202      	movs	r2, #2
 8009456:	2112      	movs	r1, #18
 8009458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800945c:	f7ff bf86 	b.w	800936c <std>
 8009460:	200008e8 	.word	0x200008e8
 8009464:	200007b0 	.word	0x200007b0
 8009468:	080093d9 	.word	0x080093d9

0800946c <__sfp_lock_acquire>:
 800946c:	4801      	ldr	r0, [pc, #4]	@ (8009474 <__sfp_lock_acquire+0x8>)
 800946e:	f000 b9fe 	b.w	800986e <__retarget_lock_acquire_recursive>
 8009472:	bf00      	nop
 8009474:	200008f1 	.word	0x200008f1

08009478 <__sfp_lock_release>:
 8009478:	4801      	ldr	r0, [pc, #4]	@ (8009480 <__sfp_lock_release+0x8>)
 800947a:	f000 b9f9 	b.w	8009870 <__retarget_lock_release_recursive>
 800947e:	bf00      	nop
 8009480:	200008f1 	.word	0x200008f1

08009484 <__sinit>:
 8009484:	b510      	push	{r4, lr}
 8009486:	4604      	mov	r4, r0
 8009488:	f7ff fff0 	bl	800946c <__sfp_lock_acquire>
 800948c:	6a23      	ldr	r3, [r4, #32]
 800948e:	b11b      	cbz	r3, 8009498 <__sinit+0x14>
 8009490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009494:	f7ff bff0 	b.w	8009478 <__sfp_lock_release>
 8009498:	4b04      	ldr	r3, [pc, #16]	@ (80094ac <__sinit+0x28>)
 800949a:	6223      	str	r3, [r4, #32]
 800949c:	4b04      	ldr	r3, [pc, #16]	@ (80094b0 <__sinit+0x2c>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1f5      	bne.n	8009490 <__sinit+0xc>
 80094a4:	f7ff ffc4 	bl	8009430 <global_stdio_init.part.0>
 80094a8:	e7f2      	b.n	8009490 <__sinit+0xc>
 80094aa:	bf00      	nop
 80094ac:	080093f1 	.word	0x080093f1
 80094b0:	200008e8 	.word	0x200008e8

080094b4 <_fwalk_sglue>:
 80094b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b8:	4607      	mov	r7, r0
 80094ba:	4688      	mov	r8, r1
 80094bc:	4614      	mov	r4, r2
 80094be:	2600      	movs	r6, #0
 80094c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094c4:	f1b9 0901 	subs.w	r9, r9, #1
 80094c8:	d505      	bpl.n	80094d6 <_fwalk_sglue+0x22>
 80094ca:	6824      	ldr	r4, [r4, #0]
 80094cc:	2c00      	cmp	r4, #0
 80094ce:	d1f7      	bne.n	80094c0 <_fwalk_sglue+0xc>
 80094d0:	4630      	mov	r0, r6
 80094d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d6:	89ab      	ldrh	r3, [r5, #12]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d907      	bls.n	80094ec <_fwalk_sglue+0x38>
 80094dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094e0:	3301      	adds	r3, #1
 80094e2:	d003      	beq.n	80094ec <_fwalk_sglue+0x38>
 80094e4:	4629      	mov	r1, r5
 80094e6:	4638      	mov	r0, r7
 80094e8:	47c0      	blx	r8
 80094ea:	4306      	orrs	r6, r0
 80094ec:	3568      	adds	r5, #104	@ 0x68
 80094ee:	e7e9      	b.n	80094c4 <_fwalk_sglue+0x10>

080094f0 <_puts_r>:
 80094f0:	6a03      	ldr	r3, [r0, #32]
 80094f2:	b570      	push	{r4, r5, r6, lr}
 80094f4:	4605      	mov	r5, r0
 80094f6:	460e      	mov	r6, r1
 80094f8:	6884      	ldr	r4, [r0, #8]
 80094fa:	b90b      	cbnz	r3, 8009500 <_puts_r+0x10>
 80094fc:	f7ff ffc2 	bl	8009484 <__sinit>
 8009500:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009502:	07db      	lsls	r3, r3, #31
 8009504:	d405      	bmi.n	8009512 <_puts_r+0x22>
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	0598      	lsls	r0, r3, #22
 800950a:	d402      	bmi.n	8009512 <_puts_r+0x22>
 800950c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800950e:	f000 f9ae 	bl	800986e <__retarget_lock_acquire_recursive>
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	0719      	lsls	r1, r3, #28
 8009516:	d502      	bpl.n	800951e <_puts_r+0x2e>
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d135      	bne.n	800958a <_puts_r+0x9a>
 800951e:	4621      	mov	r1, r4
 8009520:	4628      	mov	r0, r5
 8009522:	f000 f8c5 	bl	80096b0 <__swsetup_r>
 8009526:	b380      	cbz	r0, 800958a <_puts_r+0x9a>
 8009528:	f04f 35ff 	mov.w	r5, #4294967295
 800952c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800952e:	07da      	lsls	r2, r3, #31
 8009530:	d405      	bmi.n	800953e <_puts_r+0x4e>
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	059b      	lsls	r3, r3, #22
 8009536:	d402      	bmi.n	800953e <_puts_r+0x4e>
 8009538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800953a:	f000 f999 	bl	8009870 <__retarget_lock_release_recursive>
 800953e:	4628      	mov	r0, r5
 8009540:	bd70      	pop	{r4, r5, r6, pc}
 8009542:	2b00      	cmp	r3, #0
 8009544:	da04      	bge.n	8009550 <_puts_r+0x60>
 8009546:	69a2      	ldr	r2, [r4, #24]
 8009548:	429a      	cmp	r2, r3
 800954a:	dc17      	bgt.n	800957c <_puts_r+0x8c>
 800954c:	290a      	cmp	r1, #10
 800954e:	d015      	beq.n	800957c <_puts_r+0x8c>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	6022      	str	r2, [r4, #0]
 8009556:	7019      	strb	r1, [r3, #0]
 8009558:	68a3      	ldr	r3, [r4, #8]
 800955a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800955e:	3b01      	subs	r3, #1
 8009560:	60a3      	str	r3, [r4, #8]
 8009562:	2900      	cmp	r1, #0
 8009564:	d1ed      	bne.n	8009542 <_puts_r+0x52>
 8009566:	2b00      	cmp	r3, #0
 8009568:	da11      	bge.n	800958e <_puts_r+0x9e>
 800956a:	4622      	mov	r2, r4
 800956c:	210a      	movs	r1, #10
 800956e:	4628      	mov	r0, r5
 8009570:	f000 f85f 	bl	8009632 <__swbuf_r>
 8009574:	3001      	adds	r0, #1
 8009576:	d0d7      	beq.n	8009528 <_puts_r+0x38>
 8009578:	250a      	movs	r5, #10
 800957a:	e7d7      	b.n	800952c <_puts_r+0x3c>
 800957c:	4622      	mov	r2, r4
 800957e:	4628      	mov	r0, r5
 8009580:	f000 f857 	bl	8009632 <__swbuf_r>
 8009584:	3001      	adds	r0, #1
 8009586:	d1e7      	bne.n	8009558 <_puts_r+0x68>
 8009588:	e7ce      	b.n	8009528 <_puts_r+0x38>
 800958a:	3e01      	subs	r6, #1
 800958c:	e7e4      	b.n	8009558 <_puts_r+0x68>
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	6022      	str	r2, [r4, #0]
 8009594:	220a      	movs	r2, #10
 8009596:	701a      	strb	r2, [r3, #0]
 8009598:	e7ee      	b.n	8009578 <_puts_r+0x88>
	...

0800959c <puts>:
 800959c:	4b02      	ldr	r3, [pc, #8]	@ (80095a8 <puts+0xc>)
 800959e:	4601      	mov	r1, r0
 80095a0:	6818      	ldr	r0, [r3, #0]
 80095a2:	f7ff bfa5 	b.w	80094f0 <_puts_r>
 80095a6:	bf00      	nop
 80095a8:	20000018 	.word	0x20000018

080095ac <__sread>:
 80095ac:	b510      	push	{r4, lr}
 80095ae:	460c      	mov	r4, r1
 80095b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b4:	f000 f8fc 	bl	80097b0 <_read_r>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	bfab      	itete	ge
 80095bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80095be:	89a3      	ldrhlt	r3, [r4, #12]
 80095c0:	181b      	addge	r3, r3, r0
 80095c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80095c6:	bfac      	ite	ge
 80095c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80095ca:	81a3      	strhlt	r3, [r4, #12]
 80095cc:	bd10      	pop	{r4, pc}

080095ce <__swrite>:
 80095ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d2:	461f      	mov	r7, r3
 80095d4:	898b      	ldrh	r3, [r1, #12]
 80095d6:	4605      	mov	r5, r0
 80095d8:	460c      	mov	r4, r1
 80095da:	05db      	lsls	r3, r3, #23
 80095dc:	4616      	mov	r6, r2
 80095de:	d505      	bpl.n	80095ec <__swrite+0x1e>
 80095e0:	2302      	movs	r3, #2
 80095e2:	2200      	movs	r2, #0
 80095e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e8:	f000 f8d0 	bl	800978c <_lseek_r>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	4632      	mov	r2, r6
 80095f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095f4:	4628      	mov	r0, r5
 80095f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	463b      	mov	r3, r7
 80095fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009602:	f000 b8f7 	b.w	80097f4 <_write_r>

08009606 <__sseek>:
 8009606:	b510      	push	{r4, lr}
 8009608:	460c      	mov	r4, r1
 800960a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800960e:	f000 f8bd 	bl	800978c <_lseek_r>
 8009612:	1c43      	adds	r3, r0, #1
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	bf15      	itete	ne
 8009618:	6560      	strne	r0, [r4, #84]	@ 0x54
 800961a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800961e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009622:	81a3      	strheq	r3, [r4, #12]
 8009624:	bf18      	it	ne
 8009626:	81a3      	strhne	r3, [r4, #12]
 8009628:	bd10      	pop	{r4, pc}

0800962a <__sclose>:
 800962a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800962e:	f000 b89d 	b.w	800976c <_close_r>

08009632 <__swbuf_r>:
 8009632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009634:	460e      	mov	r6, r1
 8009636:	4614      	mov	r4, r2
 8009638:	4605      	mov	r5, r0
 800963a:	b118      	cbz	r0, 8009644 <__swbuf_r+0x12>
 800963c:	6a03      	ldr	r3, [r0, #32]
 800963e:	b90b      	cbnz	r3, 8009644 <__swbuf_r+0x12>
 8009640:	f7ff ff20 	bl	8009484 <__sinit>
 8009644:	69a3      	ldr	r3, [r4, #24]
 8009646:	60a3      	str	r3, [r4, #8]
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	071a      	lsls	r2, r3, #28
 800964c:	d501      	bpl.n	8009652 <__swbuf_r+0x20>
 800964e:	6923      	ldr	r3, [r4, #16]
 8009650:	b943      	cbnz	r3, 8009664 <__swbuf_r+0x32>
 8009652:	4621      	mov	r1, r4
 8009654:	4628      	mov	r0, r5
 8009656:	f000 f82b 	bl	80096b0 <__swsetup_r>
 800965a:	b118      	cbz	r0, 8009664 <__swbuf_r+0x32>
 800965c:	f04f 37ff 	mov.w	r7, #4294967295
 8009660:	4638      	mov	r0, r7
 8009662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	b2f6      	uxtb	r6, r6
 8009668:	6922      	ldr	r2, [r4, #16]
 800966a:	4637      	mov	r7, r6
 800966c:	1a98      	subs	r0, r3, r2
 800966e:	6963      	ldr	r3, [r4, #20]
 8009670:	4283      	cmp	r3, r0
 8009672:	dc05      	bgt.n	8009680 <__swbuf_r+0x4e>
 8009674:	4621      	mov	r1, r4
 8009676:	4628      	mov	r0, r5
 8009678:	f000 f9ca 	bl	8009a10 <_fflush_r>
 800967c:	2800      	cmp	r0, #0
 800967e:	d1ed      	bne.n	800965c <__swbuf_r+0x2a>
 8009680:	68a3      	ldr	r3, [r4, #8]
 8009682:	3b01      	subs	r3, #1
 8009684:	60a3      	str	r3, [r4, #8]
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	1c5a      	adds	r2, r3, #1
 800968a:	6022      	str	r2, [r4, #0]
 800968c:	701e      	strb	r6, [r3, #0]
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	6962      	ldr	r2, [r4, #20]
 8009692:	429a      	cmp	r2, r3
 8009694:	d004      	beq.n	80096a0 <__swbuf_r+0x6e>
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	07db      	lsls	r3, r3, #31
 800969a:	d5e1      	bpl.n	8009660 <__swbuf_r+0x2e>
 800969c:	2e0a      	cmp	r6, #10
 800969e:	d1df      	bne.n	8009660 <__swbuf_r+0x2e>
 80096a0:	4621      	mov	r1, r4
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 f9b4 	bl	8009a10 <_fflush_r>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d0d9      	beq.n	8009660 <__swbuf_r+0x2e>
 80096ac:	e7d6      	b.n	800965c <__swbuf_r+0x2a>
	...

080096b0 <__swsetup_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4b29      	ldr	r3, [pc, #164]	@ (8009758 <__swsetup_r+0xa8>)
 80096b4:	4605      	mov	r5, r0
 80096b6:	460c      	mov	r4, r1
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	b118      	cbz	r0, 80096c4 <__swsetup_r+0x14>
 80096bc:	6a03      	ldr	r3, [r0, #32]
 80096be:	b90b      	cbnz	r3, 80096c4 <__swsetup_r+0x14>
 80096c0:	f7ff fee0 	bl	8009484 <__sinit>
 80096c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c8:	0719      	lsls	r1, r3, #28
 80096ca:	d422      	bmi.n	8009712 <__swsetup_r+0x62>
 80096cc:	06da      	lsls	r2, r3, #27
 80096ce:	d407      	bmi.n	80096e0 <__swsetup_r+0x30>
 80096d0:	2209      	movs	r2, #9
 80096d2:	602a      	str	r2, [r5, #0]
 80096d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	81a3      	strh	r3, [r4, #12]
 80096de:	e033      	b.n	8009748 <__swsetup_r+0x98>
 80096e0:	0758      	lsls	r0, r3, #29
 80096e2:	d512      	bpl.n	800970a <__swsetup_r+0x5a>
 80096e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096e6:	b141      	cbz	r1, 80096fa <__swsetup_r+0x4a>
 80096e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096ec:	4299      	cmp	r1, r3
 80096ee:	d002      	beq.n	80096f6 <__swsetup_r+0x46>
 80096f0:	4628      	mov	r0, r5
 80096f2:	f000 f8bf 	bl	8009874 <_free_r>
 80096f6:	2300      	movs	r3, #0
 80096f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009700:	81a3      	strh	r3, [r4, #12]
 8009702:	2300      	movs	r3, #0
 8009704:	6063      	str	r3, [r4, #4]
 8009706:	6923      	ldr	r3, [r4, #16]
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	f043 0308 	orr.w	r3, r3, #8
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	b94b      	cbnz	r3, 800972a <__swsetup_r+0x7a>
 8009716:	89a3      	ldrh	r3, [r4, #12]
 8009718:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800971c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009720:	d003      	beq.n	800972a <__swsetup_r+0x7a>
 8009722:	4621      	mov	r1, r4
 8009724:	4628      	mov	r0, r5
 8009726:	f000 f9c0 	bl	8009aaa <__smakebuf_r>
 800972a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800972e:	f013 0201 	ands.w	r2, r3, #1
 8009732:	d00a      	beq.n	800974a <__swsetup_r+0x9a>
 8009734:	2200      	movs	r2, #0
 8009736:	60a2      	str	r2, [r4, #8]
 8009738:	6962      	ldr	r2, [r4, #20]
 800973a:	4252      	negs	r2, r2
 800973c:	61a2      	str	r2, [r4, #24]
 800973e:	6922      	ldr	r2, [r4, #16]
 8009740:	b942      	cbnz	r2, 8009754 <__swsetup_r+0xa4>
 8009742:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009746:	d1c5      	bne.n	80096d4 <__swsetup_r+0x24>
 8009748:	bd38      	pop	{r3, r4, r5, pc}
 800974a:	0799      	lsls	r1, r3, #30
 800974c:	bf58      	it	pl
 800974e:	6962      	ldrpl	r2, [r4, #20]
 8009750:	60a2      	str	r2, [r4, #8]
 8009752:	e7f4      	b.n	800973e <__swsetup_r+0x8e>
 8009754:	2000      	movs	r0, #0
 8009756:	e7f7      	b.n	8009748 <__swsetup_r+0x98>
 8009758:	20000018 	.word	0x20000018

0800975c <memset>:
 800975c:	4402      	add	r2, r0
 800975e:	4603      	mov	r3, r0
 8009760:	4293      	cmp	r3, r2
 8009762:	d100      	bne.n	8009766 <memset+0xa>
 8009764:	4770      	bx	lr
 8009766:	f803 1b01 	strb.w	r1, [r3], #1
 800976a:	e7f9      	b.n	8009760 <memset+0x4>

0800976c <_close_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	2300      	movs	r3, #0
 8009770:	4d05      	ldr	r5, [pc, #20]	@ (8009788 <_close_r+0x1c>)
 8009772:	4604      	mov	r4, r0
 8009774:	4608      	mov	r0, r1
 8009776:	602b      	str	r3, [r5, #0]
 8009778:	f7f8 f894 	bl	80018a4 <_close>
 800977c:	1c43      	adds	r3, r0, #1
 800977e:	d102      	bne.n	8009786 <_close_r+0x1a>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	b103      	cbz	r3, 8009786 <_close_r+0x1a>
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	bd38      	pop	{r3, r4, r5, pc}
 8009788:	200008ec 	.word	0x200008ec

0800978c <_lseek_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	4604      	mov	r4, r0
 8009790:	4d06      	ldr	r5, [pc, #24]	@ (80097ac <_lseek_r+0x20>)
 8009792:	4608      	mov	r0, r1
 8009794:	4611      	mov	r1, r2
 8009796:	2200      	movs	r2, #0
 8009798:	602a      	str	r2, [r5, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	f7f8 f8a9 	bl	80018f2 <_lseek>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d102      	bne.n	80097aa <_lseek_r+0x1e>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	b103      	cbz	r3, 80097aa <_lseek_r+0x1e>
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	200008ec 	.word	0x200008ec

080097b0 <_read_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	4604      	mov	r4, r0
 80097b4:	4d06      	ldr	r5, [pc, #24]	@ (80097d0 <_read_r+0x20>)
 80097b6:	4608      	mov	r0, r1
 80097b8:	4611      	mov	r1, r2
 80097ba:	2200      	movs	r2, #0
 80097bc:	602a      	str	r2, [r5, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	f7f8 f837 	bl	8001832 <_read>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d102      	bne.n	80097ce <_read_r+0x1e>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	b103      	cbz	r3, 80097ce <_read_r+0x1e>
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
 80097d0:	200008ec 	.word	0x200008ec

080097d4 <_sbrk_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	2300      	movs	r3, #0
 80097d8:	4d05      	ldr	r5, [pc, #20]	@ (80097f0 <_sbrk_r+0x1c>)
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	602b      	str	r3, [r5, #0]
 80097e0:	f7f8 f894 	bl	800190c <_sbrk>
 80097e4:	1c43      	adds	r3, r0, #1
 80097e6:	d102      	bne.n	80097ee <_sbrk_r+0x1a>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	b103      	cbz	r3, 80097ee <_sbrk_r+0x1a>
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	bd38      	pop	{r3, r4, r5, pc}
 80097f0:	200008ec 	.word	0x200008ec

080097f4 <_write_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4604      	mov	r4, r0
 80097f8:	4d06      	ldr	r5, [pc, #24]	@ (8009814 <_write_r+0x20>)
 80097fa:	4608      	mov	r0, r1
 80097fc:	4611      	mov	r1, r2
 80097fe:	2200      	movs	r2, #0
 8009800:	602a      	str	r2, [r5, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	f7f8 f832 	bl	800186c <_write>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_write_r+0x1e>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_write_r+0x1e>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	200008ec 	.word	0x200008ec

08009818 <__errno>:
 8009818:	4b01      	ldr	r3, [pc, #4]	@ (8009820 <__errno+0x8>)
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	20000018 	.word	0x20000018

08009824 <__libc_init_array>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	4d0d      	ldr	r5, [pc, #52]	@ (800985c <__libc_init_array+0x38>)
 8009828:	2600      	movs	r6, #0
 800982a:	4c0d      	ldr	r4, [pc, #52]	@ (8009860 <__libc_init_array+0x3c>)
 800982c:	1b64      	subs	r4, r4, r5
 800982e:	10a4      	asrs	r4, r4, #2
 8009830:	42a6      	cmp	r6, r4
 8009832:	d109      	bne.n	8009848 <__libc_init_array+0x24>
 8009834:	4d0b      	ldr	r5, [pc, #44]	@ (8009864 <__libc_init_array+0x40>)
 8009836:	2600      	movs	r6, #0
 8009838:	4c0b      	ldr	r4, [pc, #44]	@ (8009868 <__libc_init_array+0x44>)
 800983a:	f000 f995 	bl	8009b68 <_init>
 800983e:	1b64      	subs	r4, r4, r5
 8009840:	10a4      	asrs	r4, r4, #2
 8009842:	42a6      	cmp	r6, r4
 8009844:	d105      	bne.n	8009852 <__libc_init_array+0x2e>
 8009846:	bd70      	pop	{r4, r5, r6, pc}
 8009848:	f855 3b04 	ldr.w	r3, [r5], #4
 800984c:	3601      	adds	r6, #1
 800984e:	4798      	blx	r3
 8009850:	e7ee      	b.n	8009830 <__libc_init_array+0xc>
 8009852:	f855 3b04 	ldr.w	r3, [r5], #4
 8009856:	3601      	adds	r6, #1
 8009858:	4798      	blx	r3
 800985a:	e7f2      	b.n	8009842 <__libc_init_array+0x1e>
 800985c:	08009ca8 	.word	0x08009ca8
 8009860:	08009ca8 	.word	0x08009ca8
 8009864:	08009ca8 	.word	0x08009ca8
 8009868:	08009cac 	.word	0x08009cac

0800986c <__retarget_lock_init_recursive>:
 800986c:	4770      	bx	lr

0800986e <__retarget_lock_acquire_recursive>:
 800986e:	4770      	bx	lr

08009870 <__retarget_lock_release_recursive>:
 8009870:	4770      	bx	lr
	...

08009874 <_free_r>:
 8009874:	b538      	push	{r3, r4, r5, lr}
 8009876:	4605      	mov	r5, r0
 8009878:	2900      	cmp	r1, #0
 800987a:	d041      	beq.n	8009900 <_free_r+0x8c>
 800987c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009880:	1f0c      	subs	r4, r1, #4
 8009882:	2b00      	cmp	r3, #0
 8009884:	bfb8      	it	lt
 8009886:	18e4      	addlt	r4, r4, r3
 8009888:	f7ff fd64 	bl	8009354 <__malloc_lock>
 800988c:	4a1d      	ldr	r2, [pc, #116]	@ (8009904 <_free_r+0x90>)
 800988e:	6813      	ldr	r3, [r2, #0]
 8009890:	b933      	cbnz	r3, 80098a0 <_free_r+0x2c>
 8009892:	6063      	str	r3, [r4, #4]
 8009894:	6014      	str	r4, [r2, #0]
 8009896:	4628      	mov	r0, r5
 8009898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800989c:	f7ff bd60 	b.w	8009360 <__malloc_unlock>
 80098a0:	42a3      	cmp	r3, r4
 80098a2:	d908      	bls.n	80098b6 <_free_r+0x42>
 80098a4:	6820      	ldr	r0, [r4, #0]
 80098a6:	1821      	adds	r1, r4, r0
 80098a8:	428b      	cmp	r3, r1
 80098aa:	bf01      	itttt	eq
 80098ac:	6819      	ldreq	r1, [r3, #0]
 80098ae:	685b      	ldreq	r3, [r3, #4]
 80098b0:	1809      	addeq	r1, r1, r0
 80098b2:	6021      	streq	r1, [r4, #0]
 80098b4:	e7ed      	b.n	8009892 <_free_r+0x1e>
 80098b6:	461a      	mov	r2, r3
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	b10b      	cbz	r3, 80098c0 <_free_r+0x4c>
 80098bc:	42a3      	cmp	r3, r4
 80098be:	d9fa      	bls.n	80098b6 <_free_r+0x42>
 80098c0:	6811      	ldr	r1, [r2, #0]
 80098c2:	1850      	adds	r0, r2, r1
 80098c4:	42a0      	cmp	r0, r4
 80098c6:	d10b      	bne.n	80098e0 <_free_r+0x6c>
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	4401      	add	r1, r0
 80098cc:	1850      	adds	r0, r2, r1
 80098ce:	6011      	str	r1, [r2, #0]
 80098d0:	4283      	cmp	r3, r0
 80098d2:	d1e0      	bne.n	8009896 <_free_r+0x22>
 80098d4:	6818      	ldr	r0, [r3, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	4408      	add	r0, r1
 80098da:	6053      	str	r3, [r2, #4]
 80098dc:	6010      	str	r0, [r2, #0]
 80098de:	e7da      	b.n	8009896 <_free_r+0x22>
 80098e0:	d902      	bls.n	80098e8 <_free_r+0x74>
 80098e2:	230c      	movs	r3, #12
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	e7d6      	b.n	8009896 <_free_r+0x22>
 80098e8:	6820      	ldr	r0, [r4, #0]
 80098ea:	1821      	adds	r1, r4, r0
 80098ec:	428b      	cmp	r3, r1
 80098ee:	bf02      	ittt	eq
 80098f0:	6819      	ldreq	r1, [r3, #0]
 80098f2:	685b      	ldreq	r3, [r3, #4]
 80098f4:	1809      	addeq	r1, r1, r0
 80098f6:	6063      	str	r3, [r4, #4]
 80098f8:	bf08      	it	eq
 80098fa:	6021      	streq	r1, [r4, #0]
 80098fc:	6054      	str	r4, [r2, #4]
 80098fe:	e7ca      	b.n	8009896 <_free_r+0x22>
 8009900:	bd38      	pop	{r3, r4, r5, pc}
 8009902:	bf00      	nop
 8009904:	200007ac 	.word	0x200007ac

08009908 <__sflush_r>:
 8009908:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800990c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009910:	0716      	lsls	r6, r2, #28
 8009912:	4605      	mov	r5, r0
 8009914:	460c      	mov	r4, r1
 8009916:	d454      	bmi.n	80099c2 <__sflush_r+0xba>
 8009918:	684b      	ldr	r3, [r1, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	dc02      	bgt.n	8009924 <__sflush_r+0x1c>
 800991e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009920:	2b00      	cmp	r3, #0
 8009922:	dd48      	ble.n	80099b6 <__sflush_r+0xae>
 8009924:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009926:	2e00      	cmp	r6, #0
 8009928:	d045      	beq.n	80099b6 <__sflush_r+0xae>
 800992a:	2300      	movs	r3, #0
 800992c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009930:	682f      	ldr	r7, [r5, #0]
 8009932:	6a21      	ldr	r1, [r4, #32]
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	d030      	beq.n	800999a <__sflush_r+0x92>
 8009938:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	0759      	lsls	r1, r3, #29
 800993e:	d505      	bpl.n	800994c <__sflush_r+0x44>
 8009940:	6863      	ldr	r3, [r4, #4]
 8009942:	1ad2      	subs	r2, r2, r3
 8009944:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009946:	b10b      	cbz	r3, 800994c <__sflush_r+0x44>
 8009948:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800994a:	1ad2      	subs	r2, r2, r3
 800994c:	2300      	movs	r3, #0
 800994e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009950:	6a21      	ldr	r1, [r4, #32]
 8009952:	4628      	mov	r0, r5
 8009954:	47b0      	blx	r6
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	d106      	bne.n	800996a <__sflush_r+0x62>
 800995c:	6829      	ldr	r1, [r5, #0]
 800995e:	291d      	cmp	r1, #29
 8009960:	d82b      	bhi.n	80099ba <__sflush_r+0xb2>
 8009962:	4a2a      	ldr	r2, [pc, #168]	@ (8009a0c <__sflush_r+0x104>)
 8009964:	40ca      	lsrs	r2, r1
 8009966:	07d6      	lsls	r6, r2, #31
 8009968:	d527      	bpl.n	80099ba <__sflush_r+0xb2>
 800996a:	2200      	movs	r2, #0
 800996c:	04d9      	lsls	r1, r3, #19
 800996e:	6062      	str	r2, [r4, #4]
 8009970:	6922      	ldr	r2, [r4, #16]
 8009972:	6022      	str	r2, [r4, #0]
 8009974:	d504      	bpl.n	8009980 <__sflush_r+0x78>
 8009976:	1c42      	adds	r2, r0, #1
 8009978:	d101      	bne.n	800997e <__sflush_r+0x76>
 800997a:	682b      	ldr	r3, [r5, #0]
 800997c:	b903      	cbnz	r3, 8009980 <__sflush_r+0x78>
 800997e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009982:	602f      	str	r7, [r5, #0]
 8009984:	b1b9      	cbz	r1, 80099b6 <__sflush_r+0xae>
 8009986:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800998a:	4299      	cmp	r1, r3
 800998c:	d002      	beq.n	8009994 <__sflush_r+0x8c>
 800998e:	4628      	mov	r0, r5
 8009990:	f7ff ff70 	bl	8009874 <_free_r>
 8009994:	2300      	movs	r3, #0
 8009996:	6363      	str	r3, [r4, #52]	@ 0x34
 8009998:	e00d      	b.n	80099b6 <__sflush_r+0xae>
 800999a:	2301      	movs	r3, #1
 800999c:	4628      	mov	r0, r5
 800999e:	47b0      	blx	r6
 80099a0:	4602      	mov	r2, r0
 80099a2:	1c50      	adds	r0, r2, #1
 80099a4:	d1c9      	bne.n	800993a <__sflush_r+0x32>
 80099a6:	682b      	ldr	r3, [r5, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d0c6      	beq.n	800993a <__sflush_r+0x32>
 80099ac:	2b1d      	cmp	r3, #29
 80099ae:	d001      	beq.n	80099b4 <__sflush_r+0xac>
 80099b0:	2b16      	cmp	r3, #22
 80099b2:	d11d      	bne.n	80099f0 <__sflush_r+0xe8>
 80099b4:	602f      	str	r7, [r5, #0]
 80099b6:	2000      	movs	r0, #0
 80099b8:	e021      	b.n	80099fe <__sflush_r+0xf6>
 80099ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099be:	b21b      	sxth	r3, r3
 80099c0:	e01a      	b.n	80099f8 <__sflush_r+0xf0>
 80099c2:	690f      	ldr	r7, [r1, #16]
 80099c4:	2f00      	cmp	r7, #0
 80099c6:	d0f6      	beq.n	80099b6 <__sflush_r+0xae>
 80099c8:	0793      	lsls	r3, r2, #30
 80099ca:	680e      	ldr	r6, [r1, #0]
 80099cc:	600f      	str	r7, [r1, #0]
 80099ce:	bf0c      	ite	eq
 80099d0:	694b      	ldreq	r3, [r1, #20]
 80099d2:	2300      	movne	r3, #0
 80099d4:	eba6 0807 	sub.w	r8, r6, r7
 80099d8:	608b      	str	r3, [r1, #8]
 80099da:	f1b8 0f00 	cmp.w	r8, #0
 80099de:	ddea      	ble.n	80099b6 <__sflush_r+0xae>
 80099e0:	4643      	mov	r3, r8
 80099e2:	463a      	mov	r2, r7
 80099e4:	6a21      	ldr	r1, [r4, #32]
 80099e6:	4628      	mov	r0, r5
 80099e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099ea:	47b0      	blx	r6
 80099ec:	2800      	cmp	r0, #0
 80099ee:	dc08      	bgt.n	8009a02 <__sflush_r+0xfa>
 80099f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099f8:	f04f 30ff 	mov.w	r0, #4294967295
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a02:	4407      	add	r7, r0
 8009a04:	eba8 0800 	sub.w	r8, r8, r0
 8009a08:	e7e7      	b.n	80099da <__sflush_r+0xd2>
 8009a0a:	bf00      	nop
 8009a0c:	20400001 	.word	0x20400001

08009a10 <_fflush_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	690b      	ldr	r3, [r1, #16]
 8009a14:	4605      	mov	r5, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	b913      	cbnz	r3, 8009a20 <_fflush_r+0x10>
 8009a1a:	2500      	movs	r5, #0
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	b118      	cbz	r0, 8009a2a <_fflush_r+0x1a>
 8009a22:	6a03      	ldr	r3, [r0, #32]
 8009a24:	b90b      	cbnz	r3, 8009a2a <_fflush_r+0x1a>
 8009a26:	f7ff fd2d 	bl	8009484 <__sinit>
 8009a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0f3      	beq.n	8009a1a <_fflush_r+0xa>
 8009a32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a34:	07d0      	lsls	r0, r2, #31
 8009a36:	d404      	bmi.n	8009a42 <_fflush_r+0x32>
 8009a38:	0599      	lsls	r1, r3, #22
 8009a3a:	d402      	bmi.n	8009a42 <_fflush_r+0x32>
 8009a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a3e:	f7ff ff16 	bl	800986e <__retarget_lock_acquire_recursive>
 8009a42:	4628      	mov	r0, r5
 8009a44:	4621      	mov	r1, r4
 8009a46:	f7ff ff5f 	bl	8009908 <__sflush_r>
 8009a4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	07da      	lsls	r2, r3, #31
 8009a50:	d4e4      	bmi.n	8009a1c <_fflush_r+0xc>
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	059b      	lsls	r3, r3, #22
 8009a56:	d4e1      	bmi.n	8009a1c <_fflush_r+0xc>
 8009a58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a5a:	f7ff ff09 	bl	8009870 <__retarget_lock_release_recursive>
 8009a5e:	e7dd      	b.n	8009a1c <_fflush_r+0xc>

08009a60 <__swhatbuf_r>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	460c      	mov	r4, r1
 8009a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a68:	b096      	sub	sp, #88	@ 0x58
 8009a6a:	4615      	mov	r5, r2
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	461e      	mov	r6, r3
 8009a70:	da0c      	bge.n	8009a8c <__swhatbuf_r+0x2c>
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	2100      	movs	r1, #0
 8009a76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a7a:	bf14      	ite	ne
 8009a7c:	2340      	movne	r3, #64	@ 0x40
 8009a7e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a82:	2000      	movs	r0, #0
 8009a84:	6031      	str	r1, [r6, #0]
 8009a86:	602b      	str	r3, [r5, #0]
 8009a88:	b016      	add	sp, #88	@ 0x58
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
 8009a8c:	466a      	mov	r2, sp
 8009a8e:	f000 f849 	bl	8009b24 <_fstat_r>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	dbed      	blt.n	8009a72 <__swhatbuf_r+0x12>
 8009a96:	9901      	ldr	r1, [sp, #4]
 8009a98:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a9c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009aa0:	4259      	negs	r1, r3
 8009aa2:	4159      	adcs	r1, r3
 8009aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aa8:	e7eb      	b.n	8009a82 <__swhatbuf_r+0x22>

08009aaa <__smakebuf_r>:
 8009aaa:	898b      	ldrh	r3, [r1, #12]
 8009aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aae:	079d      	lsls	r5, r3, #30
 8009ab0:	4606      	mov	r6, r0
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	d507      	bpl.n	8009ac6 <__smakebuf_r+0x1c>
 8009ab6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009aba:	6023      	str	r3, [r4, #0]
 8009abc:	6123      	str	r3, [r4, #16]
 8009abe:	2301      	movs	r3, #1
 8009ac0:	6163      	str	r3, [r4, #20]
 8009ac2:	b003      	add	sp, #12
 8009ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ac6:	ab01      	add	r3, sp, #4
 8009ac8:	466a      	mov	r2, sp
 8009aca:	f7ff ffc9 	bl	8009a60 <__swhatbuf_r>
 8009ace:	9f00      	ldr	r7, [sp, #0]
 8009ad0:	4605      	mov	r5, r0
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	f7ff fbbd 	bl	8009254 <_malloc_r>
 8009ada:	b948      	cbnz	r0, 8009af0 <__smakebuf_r+0x46>
 8009adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae0:	059a      	lsls	r2, r3, #22
 8009ae2:	d4ee      	bmi.n	8009ac2 <__smakebuf_r+0x18>
 8009ae4:	f023 0303 	bic.w	r3, r3, #3
 8009ae8:	f043 0302 	orr.w	r3, r3, #2
 8009aec:	81a3      	strh	r3, [r4, #12]
 8009aee:	e7e2      	b.n	8009ab6 <__smakebuf_r+0xc>
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	6020      	str	r0, [r4, #0]
 8009af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009af8:	81a3      	strh	r3, [r4, #12]
 8009afa:	9b01      	ldr	r3, [sp, #4]
 8009afc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b00:	b15b      	cbz	r3, 8009b1a <__smakebuf_r+0x70>
 8009b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b06:	4630      	mov	r0, r6
 8009b08:	f000 f81e 	bl	8009b48 <_isatty_r>
 8009b0c:	b128      	cbz	r0, 8009b1a <__smakebuf_r+0x70>
 8009b0e:	89a3      	ldrh	r3, [r4, #12]
 8009b10:	f023 0303 	bic.w	r3, r3, #3
 8009b14:	f043 0301 	orr.w	r3, r3, #1
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	431d      	orrs	r5, r3
 8009b1e:	81a5      	strh	r5, [r4, #12]
 8009b20:	e7cf      	b.n	8009ac2 <__smakebuf_r+0x18>
	...

08009b24 <_fstat_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	2300      	movs	r3, #0
 8009b28:	4d06      	ldr	r5, [pc, #24]	@ (8009b44 <_fstat_r+0x20>)
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	4611      	mov	r1, r2
 8009b30:	602b      	str	r3, [r5, #0]
 8009b32:	f7f7 fec3 	bl	80018bc <_fstat>
 8009b36:	1c43      	adds	r3, r0, #1
 8009b38:	d102      	bne.n	8009b40 <_fstat_r+0x1c>
 8009b3a:	682b      	ldr	r3, [r5, #0]
 8009b3c:	b103      	cbz	r3, 8009b40 <_fstat_r+0x1c>
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	bd38      	pop	{r3, r4, r5, pc}
 8009b42:	bf00      	nop
 8009b44:	200008ec 	.word	0x200008ec

08009b48 <_isatty_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	4d05      	ldr	r5, [pc, #20]	@ (8009b64 <_isatty_r+0x1c>)
 8009b4e:	4604      	mov	r4, r0
 8009b50:	4608      	mov	r0, r1
 8009b52:	602b      	str	r3, [r5, #0]
 8009b54:	f7f7 fec2 	bl	80018dc <_isatty>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d102      	bne.n	8009b62 <_isatty_r+0x1a>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	b103      	cbz	r3, 8009b62 <_isatty_r+0x1a>
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	200008ec 	.word	0x200008ec

08009b68 <_init>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	bf00      	nop
 8009b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6e:	bc08      	pop	{r3}
 8009b70:	469e      	mov	lr, r3
 8009b72:	4770      	bx	lr

08009b74 <_fini>:
 8009b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b76:	bf00      	nop
 8009b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7a:	bc08      	pop	{r3}
 8009b7c:	469e      	mov	lr, r3
 8009b7e:	4770      	bx	lr
