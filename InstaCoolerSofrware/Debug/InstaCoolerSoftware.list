
InstaCoolerSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f54  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800718c  0800718c  0000818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007284  08007284  00008284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08007288  08007288  00008288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000068  20000000  0800728c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000078a  20000068  080072f4  00009068  2**2
                  ALLOC
  7 ._user_heap_stack 00000606  200007f2  080072f4  000097f2  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017529  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d4e  00000000  00000000  000205c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001648  00000000  00000000  00023318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001146  00000000  00000000  00024960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033a1a  00000000  00000000  00025aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001a9eb  00000000  00000000  000594c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00144a9d  00000000  00000000  00073eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b8948  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006660  00000000  00000000  001b898c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  001befec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	08007174 	.word	0x08007174

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	08007174 	.word	0x08007174

08000278 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000280:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000284:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000288:	f003 0301 	and.w	r3, r3, #1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d013      	beq.n	80002b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000290:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000294:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000298:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800029c:	2b00      	cmp	r3, #0
 800029e:	d00b      	beq.n	80002b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002a0:	e000      	b.n	80002a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80002a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f9      	beq.n	80002a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002ae:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	b2d2      	uxtb	r2, r2
 80002b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b8:	687b      	ldr	r3, [r7, #4]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
	...

080002c8 <setPWM>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setPWM(TIM_HandleTypeDef *timer_handle, uint32_t timer_channel, uint8_t duty) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	4613      	mov	r3, r2
 80002d4:	71fb      	strb	r3, [r7, #7]
    uint32_t counter_period = __HAL_TIM_GET_AUTORELOAD(timer_handle); // Get the ARR value (number of ticks per period)
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002dc:	617b      	str	r3, [r7, #20]
    uint32_t new_duty = duty / 255.0f * counter_period; // Calculate new duty value
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	ee07 3a90 	vmov	s15, r3
 80002e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002e8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000370 <setPWM+0xa8>
 80002ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	ee07 3a90 	vmov	s15, r3
 80002f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000302:	ee17 3a90 	vmov	r3, s15
 8000306:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, new_duty); // Set compare value to new duty
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d104      	bne.n	8000318 <setPWM+0x50>
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	693a      	ldr	r2, [r7, #16]
 8000314:	635a      	str	r2, [r3, #52]	@ 0x34
 8000316:	e023      	b.n	8000360 <setPWM+0x98>
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	2b04      	cmp	r3, #4
 800031c:	d104      	bne.n	8000328 <setPWM+0x60>
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	6393      	str	r3, [r2, #56]	@ 0x38
 8000326:	e01b      	b.n	8000360 <setPWM+0x98>
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	2b08      	cmp	r3, #8
 800032c:	d104      	bne.n	8000338 <setPWM+0x70>
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000336:	e013      	b.n	8000360 <setPWM+0x98>
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	2b0c      	cmp	r3, #12
 800033c:	d104      	bne.n	8000348 <setPWM+0x80>
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	6413      	str	r3, [r2, #64]	@ 0x40
 8000346:	e00b      	b.n	8000360 <setPWM+0x98>
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	2b10      	cmp	r3, #16
 800034c:	d104      	bne.n	8000358 <setPWM+0x90>
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	6493      	str	r3, [r2, #72]	@ 0x48
 8000356:	e003      	b.n	8000360 <setPWM+0x98>
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	693b      	ldr	r3, [r7, #16]
 800035e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    HAL_TIM_PWM_Start(timer_handle, timer_channel); // Start PWM
 8000360:	68b9      	ldr	r1, [r7, #8]
 8000362:	68f8      	ldr	r0, [r7, #12]
 8000364:	f004 fd4e 	bl	8004e04 <HAL_TIM_PWM_Start>
}
 8000368:	bf00      	nop
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	437f0000 	.word	0x437f0000

08000374 <setRGB>:
    __HAL_TIM_SET_AUTORELOAD(timer, counter_period);		// Set the ARR value (the counter period)

    setPWM(timer, channel, 128);
}

void setRGB(uint8_t r, uint8_t g, uint8_t b) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
 800037e:	460b      	mov	r3, r1
 8000380:	71bb      	strb	r3, [r7, #6]
 8000382:	4613      	mov	r3, r2
 8000384:	717b      	strb	r3, [r7, #5]
    TIM_HandleTypeDef *htim = &LED_TIMER_HANDLE;
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <setRGB+0x44>)
 8000388:	60fb      	str	r3, [r7, #12]
    setPWM(htim, LED_R_CHANNEL, r);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	461a      	mov	r2, r3
 800038e:	2104      	movs	r1, #4
 8000390:	68f8      	ldr	r0, [r7, #12]
 8000392:	f7ff ff99 	bl	80002c8 <setPWM>
    setPWM(htim, LED_G_CHANNEL, g);
 8000396:	79bb      	ldrb	r3, [r7, #6]
 8000398:	461a      	mov	r2, r3
 800039a:	2108      	movs	r1, #8
 800039c:	68f8      	ldr	r0, [r7, #12]
 800039e:	f7ff ff93 	bl	80002c8 <setPWM>
    setPWM(htim, LED_B_CHANNEL, b);
 80003a2:	797b      	ldrb	r3, [r7, #5]
 80003a4:	461a      	mov	r2, r3
 80003a6:	2100      	movs	r1, #0
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f7ff ff8d 	bl	80002c8 <setPWM>
}
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200000d8 	.word	0x200000d8

080003bc <write_i2c>:
	TIM_HandleTypeDef *htim = &MOTOR_TIMER_HANDLE;
	uint8_t duty = (throttle / 100.0f + 0.01f) * 255;
	setPWM(htim, MOTOR_TIMER_CHANNEL, duty);
}

bool write_i2c(uint16_t addr, uint8_t reg, void const* buf, size_t len, void* context) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08a      	sub	sp, #40	@ 0x28
 80003c0:	af04      	add	r7, sp, #16
 80003c2:	60ba      	str	r2, [r7, #8]
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	4603      	mov	r3, r0
 80003c8:	81fb      	strh	r3, [r7, #14]
 80003ca:	460b      	mov	r3, r1
 80003cc:	737b      	strb	r3, [r7, #13]
	HAL_Delay(100);
 80003ce:	2064      	movs	r0, #100	@ 0x64
 80003d0:	f000 ffbc 	bl	800134c <HAL_Delay>
	printf("Write\n");
 80003d4:	4819      	ldr	r0, [pc, #100]	@ (800043c <write_i2c+0x80>)
 80003d6:	f006 fbe7 	bl	8006ba8 <puts>
	uint8_t status = HAL_I2C_Mem_Write(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, context);
 80003da:	7b7b      	ldrb	r3, [r7, #13]
 80003dc:	b298      	uxth	r0, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	6a3a      	ldr	r2, [r7, #32]
 80003e4:	89f9      	ldrh	r1, [r7, #14]
 80003e6:	9202      	str	r2, [sp, #8]
 80003e8:	9301      	str	r3, [sp, #4]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2301      	movs	r3, #1
 80003f0:	4602      	mov	r2, r0
 80003f2:	4813      	ldr	r0, [pc, #76]	@ (8000440 <write_i2c+0x84>)
 80003f4:	f001 fbaa 	bl	8001b4c <HAL_I2C_Mem_Write>
 80003f8:	4603      	mov	r3, r0
 80003fa:	75fb      	strb	r3, [r7, #23]
	  if (status == HAL_OK) {
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d106      	bne.n	8000410 <write_i2c+0x54>
		  setRGB(0, 255, 255);
 8000402:	22ff      	movs	r2, #255	@ 0xff
 8000404:	21ff      	movs	r1, #255	@ 0xff
 8000406:	2000      	movs	r0, #0
 8000408:	f7ff ffb4 	bl	8000374 <setRGB>
		  return true;
 800040c:	2301      	movs	r3, #1
 800040e:	e011      	b.n	8000434 <write_i2c+0x78>
	  } else if (status == HAL_ERROR) {
 8000410:	7dfb      	ldrb	r3, [r7, #23]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d105      	bne.n	8000422 <write_i2c+0x66>
		  setRGB(255, 255, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	21ff      	movs	r1, #255	@ 0xff
 800041a:	20ff      	movs	r0, #255	@ 0xff
 800041c:	f7ff ffaa 	bl	8000374 <setRGB>
 8000420:	e007      	b.n	8000432 <write_i2c+0x76>
	  } else if (status == HAL_TIMEOUT) {
 8000422:	7dfb      	ldrb	r3, [r7, #23]
 8000424:	2b03      	cmp	r3, #3
 8000426:	d104      	bne.n	8000432 <write_i2c+0x76>
		  setRGB(20, 255, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	21ff      	movs	r1, #255	@ 0xff
 800042c:	2014      	movs	r0, #20
 800042e:	f7ff ffa1 	bl	8000374 <setRGB>
	  }
	  return false;
 8000432:	2300      	movs	r3, #0
}
 8000434:	4618      	mov	r0, r3
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	0800718c 	.word	0x0800718c
 8000440:	20000084 	.word	0x20000084

08000444 <read_i2c>:

bool read_i2c(uint16_t addr, uint8_t reg, void* buf, size_t len, void* context) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	@ 0x28
 8000448:	af04      	add	r7, sp, #16
 800044a:	60ba      	str	r2, [r7, #8]
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	4603      	mov	r3, r0
 8000450:	81fb      	strh	r3, [r7, #14]
 8000452:	460b      	mov	r3, r1
 8000454:	737b      	strb	r3, [r7, #13]
	HAL_Delay(100);
 8000456:	2064      	movs	r0, #100	@ 0x64
 8000458:	f000 ff78 	bl	800134c <HAL_Delay>
	printf("Read\n");
 800045c:	4819      	ldr	r0, [pc, #100]	@ (80004c4 <read_i2c+0x80>)
 800045e:	f006 fba3 	bl	8006ba8 <puts>
	uint8_t status = HAL_I2C_Mem_Read(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, context);
 8000462:	7b7b      	ldrb	r3, [r7, #13]
 8000464:	b298      	uxth	r0, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	b29b      	uxth	r3, r3
 800046a:	6a3a      	ldr	r2, [r7, #32]
 800046c:	89f9      	ldrh	r1, [r7, #14]
 800046e:	9202      	str	r2, [sp, #8]
 8000470:	9301      	str	r3, [sp, #4]
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	2301      	movs	r3, #1
 8000478:	4602      	mov	r2, r0
 800047a:	4813      	ldr	r0, [pc, #76]	@ (80004c8 <read_i2c+0x84>)
 800047c:	f001 fc7a 	bl	8001d74 <HAL_I2C_Mem_Read>
 8000480:	4603      	mov	r3, r0
 8000482:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d106      	bne.n	8000498 <read_i2c+0x54>
		setRGB(0, 255, 255);
 800048a:	22ff      	movs	r2, #255	@ 0xff
 800048c:	21ff      	movs	r1, #255	@ 0xff
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff70 	bl	8000374 <setRGB>
		return true;
 8000494:	2301      	movs	r3, #1
 8000496:	e011      	b.n	80004bc <read_i2c+0x78>
	} else if (status == HAL_ERROR) {
 8000498:	7dfb      	ldrb	r3, [r7, #23]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d105      	bne.n	80004aa <read_i2c+0x66>
		setRGB(255, 255, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	21ff      	movs	r1, #255	@ 0xff
 80004a2:	20ff      	movs	r0, #255	@ 0xff
 80004a4:	f7ff ff66 	bl	8000374 <setRGB>
 80004a8:	e007      	b.n	80004ba <read_i2c+0x76>
	} else if (status == HAL_TIMEOUT) {
 80004aa:	7dfb      	ldrb	r3, [r7, #23]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d104      	bne.n	80004ba <read_i2c+0x76>
		setRGB(20, 255, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	21ff      	movs	r1, #255	@ 0xff
 80004b4:	2014      	movs	r0, #20
 80004b6:	f7ff ff5d 	bl	8000374 <setRGB>
	}
	return false;
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	08007194 	.word	0x08007194
 80004c8:	20000084 	.word	0x20000084

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fe75 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f861 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fad1 	bl	8000a80 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004de:	f000 f8e7 	bl	80006b0 <MX_TIM1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e2:	f000 fa9b 	bl	8000a1c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80004e6:	f000 f9ab 	bl	8000840 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004ea:	f000 fa1f 	bl	800092c <MX_TIM3_Init>
  MX_I2C2_Init();
 80004ee:	f000 f89f 	bl	8000630 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  stusb4500_t device;
  device.addr = 0x28;
 80004f2:	2328      	movs	r3, #40	@ 0x28
 80004f4:	82bb      	strh	r3, [r7, #20]
  device.write = &write_i2c;
 80004f6:	4b24      	ldr	r3, [pc, #144]	@ (8000588 <main+0xbc>)
 80004f8:	61bb      	str	r3, [r7, #24]
  device.read = &read_i2c;
 80004fa:	4b24      	ldr	r3, [pc, #144]	@ (800058c <main+0xc0>)
 80004fc:	61fb      	str	r3, [r7, #28]
  device.context = 1000;
 80004fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000502:	623b      	str	r3, [r7, #32]
  stusb4500_gpio_cfg_t gpio_cfg;
  gpio_cfg = STUSB4500_GPIO_CFG_SINK_POWER;
 8000504:	2303      	movs	r3, #3
 8000506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  stusb4500_nvm_config_t config;
  config.pdo1_current_ma = 500;
 800050a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800050e:	80bb      	strh	r3, [r7, #4]
  config.pdo2_voltage_mv = 1500;
 8000510:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000514:	80fb      	strh	r3, [r7, #6]
  config.pdo2_current_ma = 3000;
 8000516:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800051a:	813b      	strh	r3, [r7, #8]
  config.pdo3_voltage_mv = 12000;
 800051c:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000520:	817b      	strh	r3, [r7, #10]
  config.pdo3_current_ma = 3000;
 8000522:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000526:	81bb      	strh	r3, [r7, #12]
  config.num_valid_pdos = 3;
 8000528:	2303      	movs	r3, #3
 800052a:	743b      	strb	r3, [r7, #16]
  config.pdo_current_fallback = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	81fb      	strh	r3, [r7, #14]
  config.use_src_current = false;
 8000530:	2300      	movs	r3, #0
 8000532:	747b      	strb	r3, [r7, #17]
  config.only_above_5v = false;
 8000534:	2300      	movs	r3, #0
 8000536:	74bb      	strb	r3, [r7, #18]
  config.gpio_cfg = gpio_cfg;
 8000538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800053c:	74fb      	strb	r3, [r7, #19]
  setRGB(0, 0, 255);
 800053e:	22ff      	movs	r2, #255	@ 0xff
 8000540:	2100      	movs	r1, #0
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ff16 	bl	8000374 <setRGB>

  //bool success = stusb4500_nvm_flash(&device, &config);
  printf("Begin\n");
 8000548:	4811      	ldr	r0, [pc, #68]	@ (8000590 <main+0xc4>)
 800054a:	f006 fb2d 	bl	8006ba8 <puts>
  bool success = stusb4500_set_gpio_state(&device, true);
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2101      	movs	r1, #1
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fd28 	bl	8000faa <stusb4500_set_gpio_state>
 800055a:	4603      	mov	r3, r0
 800055c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  //uint8_t nvm_buf = 10;
  //bool success = stusb4500_nvm_read(&device, &nvm_buf);

  if (success){
 8000560:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000564:	2b00      	cmp	r3, #0
 8000566:	d008      	beq.n	800057a <main+0xae>
	  printf("True\n");
 8000568:	480a      	ldr	r0, [pc, #40]	@ (8000594 <main+0xc8>)
 800056a:	f006 fb1d 	bl	8006ba8 <puts>
	  setRGB(0, 255, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	21ff      	movs	r1, #255	@ 0xff
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff fefe 	bl	8000374 <setRGB>
 8000578:	e003      	b.n	8000582 <main+0xb6>
  } else {
	  printf("False\n");
 800057a:	4807      	ldr	r0, [pc, #28]	@ (8000598 <main+0xcc>)
 800057c:	f006 fb14 	bl	8006ba8 <puts>
  }*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	e7fd      	b.n	8000582 <main+0xb6>
 8000586:	bf00      	nop
 8000588:	080003bd 	.word	0x080003bd
 800058c:	08000445 	.word	0x08000445
 8000590:	0800719c 	.word	0x0800719c
 8000594:	080071a4 	.word	0x080071a4
 8000598:	080071ac 	.word	0x080071ac

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b09e      	sub	sp, #120	@ 0x78
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0318 	add.w	r3, r7, #24
 80005a6:	2260      	movs	r2, #96	@ 0x60
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f006 fbdc 	bl	8006d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	463b      	mov	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
 80005be:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 80005c0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80005c4:	f002 f986 	bl	80028d4 <HAL_PWREx_ControlVoltageScaling>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80005ce:	f000 faab 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005d2:	2321      	movs	r3, #33	@ 0x21
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fa0e 	bl	8002a0c <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005f6:	f000 fa97 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	231f      	movs	r3, #31
 80005fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005fe:	2302      	movs	r3, #2
 8000600:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 f8d4 	bl	80037c4 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000622:	f000 fa81 	bl	8000b28 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3778      	adds	r7, #120	@ 0x78
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000634:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000636:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <MX_I2C2_Init+0x78>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800063a:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <MX_I2C2_Init+0x74>)
 800063c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ac <MX_I2C2_Init+0x7c>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 80;
 8000640:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000642:	2250      	movs	r2, #80	@ 0x50
 8000644:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000646:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000648:	2201      	movs	r2, #1
 800064a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800064c:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <MX_I2C2_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000652:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_I2C2_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800066a:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <MX_I2C2_Init+0x74>)
 800066c:	f001 f9d2 	bl	8001a14 <HAL_I2C_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000676:	f000 fa57 	bl	8000b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800067a:	2100      	movs	r1, #0
 800067c:	4809      	ldr	r0, [pc, #36]	@ (80006a4 <MX_I2C2_Init+0x74>)
 800067e:	f001 ff55 	bl	800252c <HAL_I2CEx_ConfigAnalogFilter>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000688:	f000 fa4e 	bl	8000b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800068c:	2100      	movs	r1, #0
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000690:	f001 ff97 	bl	80025c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800069a:	f000 fa45 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000084 	.word	0x20000084
 80006a8:	40005800 	.word	0x40005800
 80006ac:	00303d5b 	.word	0x00303d5b

080006b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09c      	sub	sp, #112	@ 0x70
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]
 80006e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2234      	movs	r2, #52	@ 0x34
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fb3c 	bl	8006d68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006f0:	4b51      	ldr	r3, [pc, #324]	@ (8000838 <MX_TIM1_Init+0x188>)
 80006f2:	4a52      	ldr	r2, [pc, #328]	@ (800083c <MX_TIM1_Init+0x18c>)
 80006f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006f6:	4b50      	ldr	r3, [pc, #320]	@ (8000838 <MX_TIM1_Init+0x188>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fc:	4b4e      	ldr	r3, [pc, #312]	@ (8000838 <MX_TIM1_Init+0x188>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000702:	4b4d      	ldr	r3, [pc, #308]	@ (8000838 <MX_TIM1_Init+0x188>)
 8000704:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000708:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070a:	4b4b      	ldr	r3, [pc, #300]	@ (8000838 <MX_TIM1_Init+0x188>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000710:	4b49      	ldr	r3, [pc, #292]	@ (8000838 <MX_TIM1_Init+0x188>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000716:	4b48      	ldr	r3, [pc, #288]	@ (8000838 <MX_TIM1_Init+0x188>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800071c:	4846      	ldr	r0, [pc, #280]	@ (8000838 <MX_TIM1_Init+0x188>)
 800071e:	f004 fab9 	bl	8004c94 <HAL_TIM_Base_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000728:	f000 f9fe 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000730:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000732:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000736:	4619      	mov	r1, r3
 8000738:	483f      	ldr	r0, [pc, #252]	@ (8000838 <MX_TIM1_Init+0x188>)
 800073a:	f004 fdc9 	bl	80052d0 <HAL_TIM_ConfigClockSource>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000744:	f000 f9f0 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000748:	483b      	ldr	r0, [pc, #236]	@ (8000838 <MX_TIM1_Init+0x188>)
 800074a:	f004 fafa 	bl	8004d42 <HAL_TIM_PWM_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000754:	f000 f9e8 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000764:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000768:	4619      	mov	r1, r3
 800076a:	4833      	ldr	r0, [pc, #204]	@ (8000838 <MX_TIM1_Init+0x188>)
 800076c:	f005 fc4a 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000776:	f000 f9d7 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077a:	2360      	movs	r3, #96	@ 0x60
 800077c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000782:	2300      	movs	r3, #0
 8000784:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000786:	2300      	movs	r3, #0
 8000788:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000796:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	4826      	ldr	r0, [pc, #152]	@ (8000838 <MX_TIM1_Init+0x188>)
 80007a0:	f004 fc82 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007aa:	f000 f9bd 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007b2:	2204      	movs	r2, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4820      	ldr	r0, [pc, #128]	@ (8000838 <MX_TIM1_Init+0x188>)
 80007b8:	f004 fc76 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007c2:	f000 f9b1 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007ca:	2208      	movs	r2, #8
 80007cc:	4619      	mov	r1, r3
 80007ce:	481a      	ldr	r0, [pc, #104]	@ (8000838 <MX_TIM1_Init+0x188>)
 80007d0:	f004 fc6a 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007da:	f000 f9a5 	bl	8000b28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000804:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4807      	ldr	r0, [pc, #28]	@ (8000838 <MX_TIM1_Init+0x188>)
 800081c:	f005 fcb4 	bl	8006188 <HAL_TIMEx_ConfigBreakDeadTime>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000826:	f000 f97f 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800082a:	4803      	ldr	r0, [pc, #12]	@ (8000838 <MX_TIM1_Init+0x188>)
 800082c:	f000 fa52 	bl	8000cd4 <HAL_TIM_MspPostInit>

}
 8000830:	bf00      	nop
 8000832:	3770      	adds	r7, #112	@ 0x70
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000d8 	.word	0x200000d8
 800083c:	40012c00 	.word	0x40012c00

08000840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	@ 0x38
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000860:	463b      	mov	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000872:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000874:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000878:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800087a:	4b2b      	ldr	r3, [pc, #172]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b29      	ldr	r3, [pc, #164]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000886:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088e:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000894:	4b24      	ldr	r3, [pc, #144]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800089a:	4823      	ldr	r0, [pc, #140]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800089c:	f004 f9fa 	bl	8004c94 <HAL_TIM_Base_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008a6:	f000 f93f 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008b4:	4619      	mov	r1, r3
 80008b6:	481c      	ldr	r0, [pc, #112]	@ (8000928 <MX_TIM2_Init+0xe8>)
 80008b8:	f004 fd0a 	bl	80052d0 <HAL_TIM_ConfigClockSource>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008c2:	f000 f931 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_TIM2_Init+0xe8>)
 80008c8:	f004 fa3b 	bl	8004d42 <HAL_TIM_PWM_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008d2:	f000 f929 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4810      	ldr	r0, [pc, #64]	@ (8000928 <MX_TIM2_Init+0xe8>)
 80008e6:	f005 fb8d 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008f0:	f000 f91a 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f4:	2360      	movs	r3, #96	@ 0x60
 80008f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	4619      	mov	r1, r3
 800090a:	4807      	ldr	r0, [pc, #28]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800090c:	f004 fbcc 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000916:	f000 f907 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800091a:	4803      	ldr	r0, [pc, #12]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800091c:	f000 f9da 	bl	8000cd4 <HAL_TIM_MspPostInit>

}
 8000920:	bf00      	nop
 8000922:	3738      	adds	r7, #56	@ 0x38
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000124 	.word	0x20000124

0800092c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800095e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 8000960:	4a2d      	ldr	r2, [pc, #180]	@ (8000a18 <MX_TIM3_Init+0xec>)
 8000962:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000964:	4b2b      	ldr	r3, [pc, #172]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4294967295;
 8000970:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 8000972:	f04f 32ff 	mov.w	r2, #4294967295
 8000976:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000978:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b25      	ldr	r3, [pc, #148]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000984:	4823      	ldr	r0, [pc, #140]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 8000986:	f004 f985 	bl	8004c94 <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000990:	f000 f8ca 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800099a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800099e:	4619      	mov	r1, r3
 80009a0:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 80009a2:	f004 fc95 	bl	80052d0 <HAL_TIM_ConfigClockSource>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80009ac:	f000 f8bc 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009b0:	4818      	ldr	r0, [pc, #96]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 80009b2:	f004 f9c6 	bl	8004d42 <HAL_TIM_PWM_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009bc:	f000 f8b4 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 80009d0:	f005 fb18 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009da:	f000 f8a5 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009de:	2360      	movs	r3, #96	@ 0x60
 80009e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	4619      	mov	r1, r3
 80009f4:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 80009f6:	f004 fb57 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a00:	f000 f892 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a04:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 8000a06:	f000 f965 	bl	8000cd4 <HAL_TIM_MspPostInit>

}
 8000a0a:	bf00      	nop
 8000a0c:	3738      	adds	r7, #56	@ 0x38
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000170 	.word	0x20000170
 8000a18:	40000400 	.word	0x40000400

08000a1c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a22:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a24:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a28:	2206      	movs	r2, #6
 8000a2a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a64:	f001 fdfa 	bl	800265c <HAL_PCD_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a6e:	f000 f85b 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200001bc 	.word	0x200001bc
 8000a7c:	42040000 	.word	0x42040000

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <MX_GPIO_Init+0x6c>)
 8000a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a8c:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <MX_GPIO_Init+0x6c>)
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <MX_GPIO_Init+0x6c>)
 8000a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_GPIO_Init+0x6c>)
 8000aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aaa:	4a10      	ldr	r2, [pc, #64]	@ (8000aec <MX_GPIO_Init+0x6c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <MX_GPIO_Init+0x6c>)
 8000ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <MX_GPIO_Init+0x6c>)
 8000ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac8:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <MX_GPIO_Init+0x6c>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_GPIO_Init+0x6c>)
 8000ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	46020c00 	.word	0x46020c00

08000af0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e009      	b.n	8000b16 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1c5a      	adds	r2, r3, #1
 8000b06:	60ba      	str	r2, [r7, #8]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fbb4 	bl	8000278 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dbf1      	blt.n	8000b02 <_write+0x12>
  }
  return len;
 8000b1e:	687b      	ldr	r3, [r7, #4]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b40:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000b58:	f001 ff48 	bl	80029ec <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	46020c00 	.word	0x46020c00

08000b68 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0ba      	sub	sp, #232	@ 0xe8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	22c0      	movs	r2, #192	@ 0xc0
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f006 f8ed 	bl	8006d68 <memset>
  if(hi2c->Instance==I2C2)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a26      	ldr	r2, [pc, #152]	@ (8000c2c <HAL_I2C_MspInit+0xc4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d145      	bne.n	8000c24 <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b98:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 f99d 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000bb8:	f7ff ffb6 	bl	8000b28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bcc:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000bda:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000bde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be2:	2312      	movs	r3, #18
 8000be4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <HAL_I2C_MspInit+0xcc>)
 8000c02:	f000 fd2f 	bl	8001664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c06:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c0c:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000c0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c12:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000c18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000c24:	bf00      	nop
 8000c26:	37e8      	adds	r7, #232	@ 0xe8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40005800 	.word	0x40005800
 8000c30:	46020c00 	.word	0x46020c00
 8000c34:	42020400 	.word	0x42020400

08000c38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a20      	ldr	r2, [pc, #128]	@ (8000cc8 <HAL_TIM_Base_MspInit+0x90>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d10f      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <HAL_TIM_Base_MspInit+0x94>)
 8000c4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c50:	4a1e      	ldr	r2, [pc, #120]	@ (8000ccc <HAL_TIM_Base_MspInit+0x94>)
 8000c52:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c56:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <HAL_TIM_Base_MspInit+0x94>)
 8000c5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c68:	e028      	b.n	8000cbc <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c72:	d10f      	bne.n	8000c94 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <HAL_TIM_Base_MspInit+0x94>)
 8000c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c7a:	4a14      	ldr	r2, [pc, #80]	@ (8000ccc <HAL_TIM_Base_MspInit+0x94>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <HAL_TIM_Base_MspInit+0x94>)
 8000c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
}
 8000c92:	e013      	b.n	8000cbc <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <HAL_TIM_Base_MspInit+0x98>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10e      	bne.n	8000cbc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <HAL_TIM_Base_MspInit+0x94>)
 8000ca0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ca4:	4a09      	ldr	r2, [pc, #36]	@ (8000ccc <HAL_TIM_Base_MspInit+0x94>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000cae:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <HAL_TIM_Base_MspInit+0x94>)
 8000cb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	371c      	adds	r7, #28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40012c00 	.word	0x40012c00
 8000ccc:	46020c00 	.word	0x46020c00
 8000cd0:	40000400 	.word	0x40000400

08000cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	@ 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a38      	ldr	r2, [pc, #224]	@ (8000dd4 <HAL_TIM_MspPostInit+0x100>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d120      	bne.n	8000d38 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <HAL_TIM_MspPostInit+0x104>)
 8000cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cfc:	4a36      	ldr	r2, [pc, #216]	@ (8000dd8 <HAL_TIM_MspPostInit+0x104>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d06:	4b34      	ldr	r3, [pc, #208]	@ (8000dd8 <HAL_TIM_MspPostInit+0x104>)
 8000d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d14:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d26:	2301      	movs	r3, #1
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	482a      	ldr	r0, [pc, #168]	@ (8000ddc <HAL_TIM_MspPostInit+0x108>)
 8000d32:	f000 fc97 	bl	8001664 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d36:	e048      	b.n	8000dca <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d40:	d11f      	bne.n	8000d82 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b25      	ldr	r3, [pc, #148]	@ (8000dd8 <HAL_TIM_MspPostInit+0x104>)
 8000d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d48:	4a23      	ldr	r2, [pc, #140]	@ (8000dd8 <HAL_TIM_MspPostInit+0x104>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <HAL_TIM_MspPostInit+0x104>)
 8000d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d60:	2301      	movs	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4818      	ldr	r0, [pc, #96]	@ (8000ddc <HAL_TIM_MspPostInit+0x108>)
 8000d7c:	f000 fc72 	bl	8001664 <HAL_GPIO_Init>
}
 8000d80:	e023      	b.n	8000dca <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a16      	ldr	r2, [pc, #88]	@ (8000de0 <HAL_TIM_MspPostInit+0x10c>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d11e      	bne.n	8000dca <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <HAL_TIM_MspPostInit+0x104>)
 8000d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d92:	4a11      	ldr	r2, [pc, #68]	@ (8000dd8 <HAL_TIM_MspPostInit+0x104>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <HAL_TIM_MspPostInit+0x104>)
 8000d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000daa:	2340      	movs	r3, #64	@ 0x40
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <HAL_TIM_MspPostInit+0x108>)
 8000dc6:	f000 fc4d 	bl	8001664 <HAL_GPIO_Init>
}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	@ 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40012c00 	.word	0x40012c00
 8000dd8:	46020c00 	.word	0x46020c00
 8000ddc:	42020000 	.word	0x42020000
 8000de0:	40000400 	.word	0x40000400

08000de4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0bc      	sub	sp, #240	@ 0xf0
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	22c0      	movs	r2, #192	@ 0xc0
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f005 ffaf 	bl	8006d68 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a38      	ldr	r2, [pc, #224]	@ (8000ef0 <HAL_PCD_MspInit+0x10c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d169      	bne.n	8000ee8 <HAL_PCD_MspInit+0x104>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e18:	f04f 0300 	mov.w	r3, #0
 8000e1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e26:	f107 0318 	add.w	r3, r7, #24
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 f85e 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000e36:	f7ff fe77 	bl	8000b28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef4 <HAL_PCD_MspInit+0x110>)
 8000e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e40:	4a2c      	ldr	r2, [pc, #176]	@ (8000ef4 <HAL_PCD_MspInit+0x110>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <HAL_PCD_MspInit+0x110>)
 8000e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e58:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e72:	230a      	movs	r3, #10
 8000e74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	481e      	ldr	r0, [pc, #120]	@ (8000ef8 <HAL_PCD_MspInit+0x114>)
 8000e80:	f000 fbf0 	bl	8001664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <HAL_PCD_MspInit+0x110>)
 8000e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef4 <HAL_PCD_MspInit+0x110>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e94:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <HAL_PCD_MspInit+0x110>)
 8000e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <HAL_PCD_MspInit+0x110>)
 8000ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d119      	bne.n	8000ee4 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <HAL_PCD_MspInit+0x110>)
 8000eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef4 <HAL_PCD_MspInit+0x110>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <HAL_PCD_MspInit+0x110>)
 8000ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000ece:	f001 fd8d 	bl	80029ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed2:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <HAL_PCD_MspInit+0x110>)
 8000ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ed8:	4a06      	ldr	r2, [pc, #24]	@ (8000ef4 <HAL_PCD_MspInit+0x110>)
 8000eda:	f023 0304 	bic.w	r3, r3, #4
 8000ede:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ee2:	e001      	b.n	8000ee8 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8000ee4:	f001 fd82 	bl	80029ec <HAL_PWREx_EnableVddUSB>
}
 8000ee8:	bf00      	nop
 8000eea:	37f0      	adds	r7, #240	@ 0xf0
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	42040000 	.word	0x42040000
 8000ef4:	46020c00 	.word	0x46020c00
 8000ef8:	42020000 	.word	0x42020000

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <NMI_Handler+0x4>

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <MemManage_Handler+0x4>

08000f14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f52:	f000 f9db 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <is_present>:
    uint8_t cmd = PD_CMD;
    return dev->write(dev->addr, STUSB_TX_HEADER, &msg, sizeof(uint16_t), dev->context) &&
           dev->write(dev->addr, STUSB_CMD_CTRL, &cmd, 1, dev->context);
}

static bool is_present(stusb4500_t const* dev) {
 8000f5a:	b590      	push	{r4, r7, lr}
 8000f5c:	b087      	sub	sp, #28
 8000f5e:	af02      	add	r7, sp, #8
 8000f60:	6078      	str	r0, [r7, #4]
    uint8_t res;
    if (!dev->read(dev->addr, STUSB_WHO_AM_I, &res, 1, dev->context)) return false;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689c      	ldr	r4, [r3, #8]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	8818      	ldrh	r0, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	f107 020f 	add.w	r2, r7, #15
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	212f      	movs	r1, #47	@ 0x2f
 8000f78:	47a0      	blx	r4
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f083 0301 	eor.w	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <is_present+0x30>
 8000f86:	2300      	movs	r3, #0
 8000f88:	e00b      	b.n	8000fa2 <is_present+0x48>

    return (res == STUSB4500_ID || res == STUSB4500B_ID);
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b25      	cmp	r3, #37	@ 0x25
 8000f8e:	d002      	beq.n	8000f96 <is_present+0x3c>
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b21      	cmp	r3, #33	@ 0x21
 8000f94:	d101      	bne.n	8000f9a <is_present+0x40>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <is_present+0x42>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}

08000faa <stusb4500_set_gpio_state>:

    // Force a renegotiation
    return send_pd_message(dev, PD_SOFT_RESET);
}

bool stusb4500_set_gpio_state(stusb4500_t const* dev, stusb4500_gpio_state_t state) {
 8000faa:	b590      	push	{r4, r7, lr}
 8000fac:	b085      	sub	sp, #20
 8000fae:	af02      	add	r7, sp, #8
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	70fb      	strb	r3, [r7, #3]
    // Sanity check to see if STUSB4500 is there
    if (!is_present(dev)) return false;
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffcf 	bl	8000f5a <is_present>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f083 0301 	eor.w	r3, r3, #1
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <stusb4500_set_gpio_state+0x22>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	e00b      	b.n	8000fe4 <stusb4500_set_gpio_state+0x3a>

    // Set GPIO state
    return dev->write(dev->addr, STUSB_GPIO3_SW_GPIO, &state, sizeof(state), dev->context);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685c      	ldr	r4, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	8818      	ldrh	r0, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	1cfa      	adds	r2, r7, #3
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	212d      	movs	r1, #45	@ 0x2d
 8000fe0:	47a0      	blx	r4
 8000fe2:	4603      	mov	r3, r0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd90      	pop	{r4, r7, pc}

08000fec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e00a      	b.n	8001014 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffe:	f3af 8000 	nop.w
 8001002:	4601      	mov	r1, r0
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf0      	blt.n	8000ffe <_read+0x12>
  }

  return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800104e:	605a      	str	r2, [r3, #4]
  return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <_isatty>:

int _isatty(int file)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	@ (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f005 feb0 	bl	8006e24 <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200c0000 	.word	0x200c0000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	200006a0 	.word	0x200006a0
 80010f8:	200007f8 	.word	0x200007f8

080010fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <SystemInit+0x68>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001106:	4a17      	ldr	r2, [pc, #92]	@ (8001164 <SystemInit+0x68>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001110:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <SystemInit+0x6c>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <SystemInit+0x6c>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <SystemInit+0x6c>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <SystemInit+0x6c>)
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <SystemInit+0x6c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <SystemInit+0x6c>)
 800112e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001132:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001136:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <SystemInit+0x6c>)
 800113a:	2200      	movs	r2, #0
 800113c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <SystemInit+0x6c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <SystemInit+0x6c>)
 8001144:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001148:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <SystemInit+0x6c>)
 800114c:	2200      	movs	r2, #0
 800114e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <SystemInit+0x68>)
 8001152:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001156:	609a      	str	r2, [r3, #8]
  #endif
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00
 8001168:	46020c00 	.word	0x46020c00

0800116c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001170:	f7ff ffc4 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001174:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001176:	e003      	b.n	8001180 <LoopCopyDataInit>

08001178 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001178:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800117a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800117c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800117e:	3104      	adds	r1, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001180:	480a      	ldr	r0, [pc, #40]	@ (80011ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001184:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001186:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001188:	d3f6      	bcc.n	8001178 <CopyDataInit>
	ldr	r2, =_sbss
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800118c:	e002      	b.n	8001194 <LoopFillZerobss>

0800118e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800118e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001190:	f842 3b04 	str.w	r3, [r2], #4

08001194 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <LoopForever+0x16>)
	cmp	r2, r3
 8001196:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001198:	d3f9      	bcc.n	800118e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119a:	f005 fe49 	bl	8006e30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800119e:	f7ff f995 	bl	80004cc <main>

080011a2 <LoopForever>:

LoopForever:
    b LoopForever
 80011a2:	e7fe      	b.n	80011a2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80011a4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80011a8:	0800728c 	.word	0x0800728c
	ldr	r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011b0:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 80011b4:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 80011b8:	200007f2 	.word	0x200007f2

080011bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <HAL_Init+0x50>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a11      	ldr	r2, [pc, #68]	@ (8001210 <HAL_Init+0x50>)
 80011ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f96e 	bl	80014b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80011d6:	f002 fce7 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 80011da:	4602      	mov	r2, r0
 80011dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <HAL_Init+0x54>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	f003 030f 	and.w	r3, r3, #15
 80011e4:	490c      	ldr	r1, [pc, #48]	@ (8001218 <HAL_Init+0x58>)
 80011e6:	5ccb      	ldrb	r3, [r1, r3]
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ec:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <HAL_Init+0x5c>)
 80011ee:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011f0:	2004      	movs	r0, #4
 80011f2:	f000 f9a5 	bl	8001540 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f6:	200f      	movs	r0, #15
 80011f8:	f000 f812 	bl	8001220 <HAL_InitTick>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e002      	b.n	800120c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001206:	f7ff fc95 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40022000 	.word	0x40022000
 8001214:	46020c00 	.word	0x46020c00
 8001218:	080071b4 	.word	0x080071b4
 800121c:	20000000 	.word	0x20000000

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800122c:	4b33      	ldr	r3, [pc, #204]	@ (80012fc <HAL_InitTick+0xdc>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e05c      	b.n	80012f2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001238:	4b31      	ldr	r3, [pc, #196]	@ (8001300 <HAL_InitTick+0xe0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b04      	cmp	r3, #4
 8001242:	d10c      	bne.n	800125e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001244:	4b2f      	ldr	r3, [pc, #188]	@ (8001304 <HAL_InitTick+0xe4>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <HAL_InitTick+0xdc>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	e037      	b.n	80012ce <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800125e:	f000 f9c7 	bl	80015f0 <HAL_SYSTICK_GetCLKSourceConfig>
 8001262:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d023      	beq.n	80012b2 <HAL_InitTick+0x92>
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d82d      	bhi.n	80012cc <HAL_InitTick+0xac>
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_InitTick+0x5e>
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d00d      	beq.n	8001298 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800127c:	e026      	b.n	80012cc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800127e:	4b21      	ldr	r3, [pc, #132]	@ (8001304 <HAL_InitTick+0xe4>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <HAL_InitTick+0xdc>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800128c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001290:	fbb2 f3f3 	udiv	r3, r2, r3
 8001294:	60fb      	str	r3, [r7, #12]
        break;
 8001296:	e01a      	b.n	80012ce <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001298:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <HAL_InitTick+0xdc>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80012a6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	60fb      	str	r3, [r7, #12]
        break;
 80012b0:	e00d      	b.n	80012ce <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_InitTick+0xdc>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80012c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c8:	60fb      	str	r3, [r7, #12]
        break;
 80012ca:	e000      	b.n	80012ce <HAL_InitTick+0xae>
        break;
 80012cc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f000 f914 	bl	80014fc <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e009      	b.n	80012f2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012de:	2200      	movs	r2, #0
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	f04f 30ff 	mov.w	r0, #4294967295
 80012e6:	f000 f8ef 	bl	80014c8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80012ea:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <HAL_InitTick+0xe8>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008
 8001300:	e000e010 	.word	0xe000e010
 8001304:	20000000 	.word	0x20000000
 8001308:	20000004 	.word	0x20000004

0800130c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008
 8001330:	200006a4 	.word	0x200006a4

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200006a4 	.word	0x200006a4

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff ffee 	bl	8001334 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffde 	bl	8001334 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008

08001394 <__NVIC_SetPriorityGrouping>:
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_SetPriority>:
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	@ (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	@ (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	@ 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff6a 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d6:	f7ff ff81 	bl	80013dc <__NVIC_GetPriorityGrouping>
 80014da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	6978      	ldr	r0, [r7, #20]
 80014e2:	f7ff ffb3 	bl	800144c <NVIC_EncodePriority>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff82 	bl	80013f8 <__NVIC_SetPriority>
}
 80014f4:	bf00      	nop
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800150c:	d301      	bcc.n	8001512 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800150e:	2301      	movs	r3, #1
 8001510:	e00d      	b.n	800152e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <HAL_SYSTICK_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800151a:	4b08      	ldr	r3, [pc, #32]	@ (800153c <HAL_SYSTICK_Config+0x40>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_SYSTICK_Config+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a05      	ldr	r2, [pc, #20]	@ (800153c <HAL_SYSTICK_Config+0x40>)
 8001526:	f043 0303 	orr.w	r3, r3, #3
 800152a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b04      	cmp	r3, #4
 800154c:	d844      	bhi.n	80015d8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800154e:	a201      	add	r2, pc, #4	@ (adr r2, 8001554 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001554:	08001577 	.word	0x08001577
 8001558:	08001595 	.word	0x08001595
 800155c:	080015b7 	.word	0x080015b7
 8001560:	080015d9 	.word	0x080015d9
 8001564:	08001569 	.word	0x08001569
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001568:	4b1f      	ldr	r3, [pc, #124]	@ (80015e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1e      	ldr	r2, [pc, #120]	@ (80015e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6013      	str	r3, [r2, #0]
      break;
 8001574:	e031      	b.n	80015da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001576:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1b      	ldr	r2, [pc, #108]	@ (80015e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001582:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001588:	4a18      	ldr	r2, [pc, #96]	@ (80015ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800158a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800158e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001592:	e022      	b.n	80015da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001594:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a13      	ldr	r2, [pc, #76]	@ (80015e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800159a:	f023 0304 	bic.w	r3, r3, #4
 800159e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80015aa:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80015b4:	e011      	b.n	80015da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a0b      	ldr	r2, [pc, #44]	@ (80015e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015bc:	f023 0304 	bic.w	r3, r3, #4
 80015c0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80015cc:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80015d6:	e000      	b.n	80015da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80015d8:	bf00      	nop
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010
 80015ec:	46020c00 	.word	0x46020c00

080015f0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001602:	2304      	movs	r3, #4
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	e021      	b.n	800164c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001612:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800161a:	d011      	beq.n	8001640 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001622:	d810      	bhi.n	8001646 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001630:	d003      	beq.n	800163a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001632:	e008      	b.n	8001646 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001634:	2300      	movs	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
        break;
 8001638:	e008      	b.n	800164c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800163a:	2301      	movs	r3, #1
 800163c:	607b      	str	r3, [r7, #4]
        break;
 800163e:	e005      	b.n	800164c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001640:	2302      	movs	r3, #2
 8001642:	607b      	str	r3, [r7, #4]
        break;
 8001644:	e002      	b.n	800164c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
        break;
 800164a:	bf00      	nop
    }
  }
  return systick_source;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010
 8001660:	46020c00 	.word	0x46020c00

08001664 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	@ 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001676:	e1ba      	b.n	80019ee <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 81aa 	beq.w	80019e8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a55      	ldr	r2, [pc, #340]	@ (80017ec <HAL_GPIO_Init+0x188>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d15d      	bne.n	8001758 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80016a2:	2201      	movs	r2, #1
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0201 	and.w	r2, r3, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80016cc:	4a48      	ldr	r2, [pc, #288]	@ (80017f0 <HAL_GPIO_Init+0x18c>)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016d4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80016d6:	4a46      	ldr	r2, [pc, #280]	@ (80017f0 <HAL_GPIO_Init+0x18c>)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	08da      	lsrs	r2, r3, #3
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	3208      	adds	r2, #8
 80016ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	220f      	movs	r2, #15
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	4013      	ands	r3, r2
 8001704:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220b      	movs	r2, #11
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	4313      	orrs	r3, r2
 8001718:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	3208      	adds	r2, #8
 8001722:	69f9      	ldr	r1, [r7, #28]
 8001724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	4013      	ands	r3, r2
 800173e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2202      	movs	r2, #2
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	4313      	orrs	r3, r2
 800174e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e067      	b.n	8001828 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x104>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b12      	cmp	r3, #18
 8001766:	d145      	bne.n	80017f4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001774:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	4013      	ands	r3, r2
 800178a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f003 020f 	and.w	r2, r3, #15
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	08da      	lsrs	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3208      	adds	r2, #8
 80017ae:	69f9      	ldr	r1, [r7, #28]
 80017b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0203 	and.w	r2, r3, #3
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e01e      	b.n	8001828 <HAL_GPIO_Init+0x1c4>
 80017ea:	bf00      	nop
 80017ec:	46020000 	.word	0x46020000
 80017f0:	08007204 	.word	0x08007204
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	4013      	ands	r3, r2
 800180a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0203 	and.w	r2, r3, #3
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	4313      	orrs	r3, r2
 8001820:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d00b      	beq.n	8001848 <HAL_GPIO_Init+0x1e4>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d007      	beq.n	8001848 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800183c:	2b11      	cmp	r3, #17
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b12      	cmp	r3, #18
 8001846:	d130      	bne.n	80018aa <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	4013      	ands	r3, r2
 800185e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	4313      	orrs	r3, r2
 8001870:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800187e:	2201      	movs	r2, #1
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	4013      	ands	r3, r2
 800188c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	f003 0201 	and.w	r2, r3, #1
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d017      	beq.n	80018e2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d07c      	beq.n	80019e8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80018ee:	4a47      	ldr	r2, [pc, #284]	@ (8001a0c <HAL_GPIO_Init+0x3a8>)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3318      	adds	r3, #24
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	220f      	movs	r2, #15
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	4013      	ands	r3, r2
 8001910:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0a9a      	lsrs	r2, r3, #10
 8001916:	4b3e      	ldr	r3, [pc, #248]	@ (8001a10 <HAL_GPIO_Init+0x3ac>)
 8001918:	4013      	ands	r3, r2
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	f002 0203 	and.w	r2, r2, #3
 8001920:	00d2      	lsls	r2, r2, #3
 8001922:	4093      	lsls	r3, r2
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	4313      	orrs	r3, r2
 8001928:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800192a:	4938      	ldr	r1, [pc, #224]	@ (8001a0c <HAL_GPIO_Init+0x3a8>)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3318      	adds	r3, #24
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001938:	4b34      	ldr	r3, [pc, #208]	@ (8001a0c <HAL_GPIO_Init+0x3a8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	4013      	ands	r3, r2
 8001946:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800195c:	4a2b      	ldr	r2, [pc, #172]	@ (8001a0c <HAL_GPIO_Init+0x3a8>)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001962:	4b2a      	ldr	r3, [pc, #168]	@ (8001a0c <HAL_GPIO_Init+0x3a8>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43db      	mvns	r3, r3
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	4013      	ands	r3, r2
 8001970:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001986:	4a21      	ldr	r2, [pc, #132]	@ (8001a0c <HAL_GPIO_Init+0x3a8>)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800198c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <HAL_GPIO_Init+0x3a8>)
 800198e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001992:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	4013      	ands	r3, r2
 800199c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80019b2:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <HAL_GPIO_Init+0x3a8>)
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80019ba:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_GPIO_Init+0x3a8>)
 80019bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80019e0:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <HAL_GPIO_Init+0x3a8>)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3301      	adds	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f ae3d 	bne.w	8001678 <HAL_GPIO_Init+0x14>
  }
}
 80019fe:	bf00      	nop
 8001a00:	bf00      	nop
 8001a02:	3724      	adds	r7, #36	@ 0x24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	46022000 	.word	0x46022000
 8001a10:	002f7f7f 	.word	0x002f7f7f

08001a14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e08d      	b.n	8001b42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff f894 	bl	8000b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	@ 0x24
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0201 	bic.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d107      	bne.n	8001a8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	e006      	b.n	8001a9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d108      	bne.n	8001ab6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	e007      	b.n	8001ac6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ac4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ad8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69d9      	ldr	r1, [r3, #28]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1a      	ldr	r2, [r3, #32]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	817b      	strh	r3, [r7, #10]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	813b      	strh	r3, [r7, #8]
 8001b62:	4613      	mov	r3, r2
 8001b64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	f040 80f9 	bne.w	8001d66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_I2C_Mem_Write+0x34>
 8001b7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0ed      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_I2C_Mem_Write+0x4e>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e0e6      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ba2:	f7ff fbc7 	bl	8001334 <HAL_GetTick>
 8001ba6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2319      	movs	r3, #25
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fac3 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0d1      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2221      	movs	r2, #33	@ 0x21
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2240      	movs	r2, #64	@ 0x40
 8001bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a3a      	ldr	r2, [r7, #32]
 8001bde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bec:	88f8      	ldrh	r0, [r7, #6]
 8001bee:	893a      	ldrh	r2, [r7, #8]
 8001bf0:	8979      	ldrh	r1, [r7, #10]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f9d3 	bl	8001fa8 <I2C_RequestMemoryWrite>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0a9      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2bff      	cmp	r3, #255	@ 0xff
 8001c1c:	d90e      	bls.n	8001c3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	22ff      	movs	r2, #255	@ 0xff
 8001c22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	8979      	ldrh	r1, [r7, #10]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fc47 	bl	80024c8 <I2C_TransferConfig>
 8001c3a:	e00f      	b.n	8001c5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	8979      	ldrh	r1, [r7, #10]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 fc36 	bl	80024c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fac6 	bl	80021f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e07b      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	781a      	ldrb	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d034      	beq.n	8001d14 <HAL_I2C_Mem_Write+0x1c8>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d130      	bne.n	8001d14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2180      	movs	r1, #128	@ 0x80
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 fa3f 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e04d      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2bff      	cmp	r3, #255	@ 0xff
 8001cd4:	d90e      	bls.n	8001cf4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	22ff      	movs	r2, #255	@ 0xff
 8001cda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	8979      	ldrh	r1, [r7, #10]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 fbeb 	bl	80024c8 <I2C_TransferConfig>
 8001cf2:	e00f      	b.n	8001d14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	8979      	ldrh	r1, [r7, #10]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fbda 	bl	80024c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d19e      	bne.n	8001c5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 faac 	bl	8002280 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e01a      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2220      	movs	r2, #32
 8001d38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <HAL_I2C_Mem_Write+0x224>)
 8001d46:	400b      	ands	r3, r1
 8001d48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001d66:	2302      	movs	r3, #2
  }
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	fe00e800 	.word	0xfe00e800

08001d74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	4608      	mov	r0, r1
 8001d7e:	4611      	mov	r1, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	817b      	strh	r3, [r7, #10]
 8001d86:	460b      	mov	r3, r1
 8001d88:	813b      	strh	r3, [r7, #8]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	f040 80fd 	bne.w	8001f96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_I2C_Mem_Read+0x34>
 8001da2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0f1      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2C_Mem_Read+0x4e>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e0ea      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dca:	f7ff fab3 	bl	8001334 <HAL_GetTick>
 8001dce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2319      	movs	r3, #25
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f9af 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0d5      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2222      	movs	r2, #34	@ 0x22
 8001df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a3a      	ldr	r2, [r7, #32]
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e14:	88f8      	ldrh	r0, [r7, #6]
 8001e16:	893a      	ldrh	r2, [r7, #8]
 8001e18:	8979      	ldrh	r1, [r7, #10]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	4603      	mov	r3, r0
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 f913 	bl	8002050 <I2C_RequestMemoryRead>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0ad      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2bff      	cmp	r3, #255	@ 0xff
 8001e44:	d90e      	bls.n	8001e64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	22ff      	movs	r2, #255	@ 0xff
 8001e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	8979      	ldrh	r1, [r7, #10]
 8001e54:	4b52      	ldr	r3, [pc, #328]	@ (8001fa0 <HAL_I2C_Mem_Read+0x22c>)
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 fb33 	bl	80024c8 <I2C_TransferConfig>
 8001e62:	e00f      	b.n	8001e84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	8979      	ldrh	r1, [r7, #10]
 8001e76:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa0 <HAL_I2C_Mem_Read+0x22c>)
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 fb22 	bl	80024c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2104      	movs	r1, #4
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f956 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e07c      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d034      	beq.n	8001f44 <HAL_I2C_Mem_Read+0x1d0>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d130      	bne.n	8001f44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f927 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e04d      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2bff      	cmp	r3, #255	@ 0xff
 8001f04:	d90e      	bls.n	8001f24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	22ff      	movs	r2, #255	@ 0xff
 8001f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	8979      	ldrh	r1, [r7, #10]
 8001f14:	2300      	movs	r3, #0
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 fad3 	bl	80024c8 <I2C_TransferConfig>
 8001f22:	e00f      	b.n	8001f44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	8979      	ldrh	r1, [r7, #10]
 8001f36:	2300      	movs	r3, #0
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 fac2 	bl	80024c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d19a      	bne.n	8001e84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f994 	bl	8002280 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e01a      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2220      	movs	r2, #32
 8001f68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_I2C_Mem_Read+0x230>)
 8001f76:	400b      	ands	r3, r1
 8001f78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	80002400 	.word	0x80002400
 8001fa4:	fe00e800 	.word	0xfe00e800

08001fa8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	817b      	strh	r3, [r7, #10]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	813b      	strh	r3, [r7, #8]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	8979      	ldrh	r1, [r7, #10]
 8001fc8:	4b20      	ldr	r3, [pc, #128]	@ (800204c <I2C_RequestMemoryWrite+0xa4>)
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 fa79 	bl	80024c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	69b9      	ldr	r1, [r7, #24]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f909 	bl	80021f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e02c      	b.n	8002044 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ff0:	893b      	ldrh	r3, [r7, #8]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ffa:	e015      	b.n	8002028 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ffc:	893b      	ldrh	r3, [r7, #8]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	b29b      	uxth	r3, r3
 8002002:	b2da      	uxtb	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	69b9      	ldr	r1, [r7, #24]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f8ef 	bl	80021f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e012      	b.n	8002044 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800201e:	893b      	ldrh	r3, [r7, #8]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2200      	movs	r2, #0
 8002030:	2180      	movs	r1, #128	@ 0x80
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f884 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	80002000 	.word	0x80002000

08002050 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	4608      	mov	r0, r1
 800205a:	4611      	mov	r1, r2
 800205c:	461a      	mov	r2, r3
 800205e:	4603      	mov	r3, r0
 8002060:	817b      	strh	r3, [r7, #10]
 8002062:	460b      	mov	r3, r1
 8002064:	813b      	strh	r3, [r7, #8]
 8002066:	4613      	mov	r3, r2
 8002068:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	8979      	ldrh	r1, [r7, #10]
 8002070:	4b20      	ldr	r3, [pc, #128]	@ (80020f4 <I2C_RequestMemoryRead+0xa4>)
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2300      	movs	r3, #0
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fa26 	bl	80024c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	69b9      	ldr	r1, [r7, #24]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f8b6 	bl	80021f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e02c      	b.n	80020ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d105      	bne.n	80020a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002096:	893b      	ldrh	r3, [r7, #8]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
 80020a0:	e015      	b.n	80020ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020a2:	893b      	ldrh	r3, [r7, #8]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	69b9      	ldr	r1, [r7, #24]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f89c 	bl	80021f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e012      	b.n	80020ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020c4:	893b      	ldrh	r3, [r7, #8]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2200      	movs	r2, #0
 80020d6:	2140      	movs	r1, #64	@ 0x40
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f831 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	80002000 	.word	0x80002000

080020f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b02      	cmp	r3, #2
 800210c:	d103      	bne.n	8002116 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d007      	beq.n	8002134 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	619a      	str	r2, [r3, #24]
  }
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002150:	e03b      	b.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	6839      	ldr	r1, [r7, #0]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f8d6 	bl	8002308 <I2C_IsErrorOccurred>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e041      	b.n	80021ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d02d      	beq.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216e:	f7ff f8e1 	bl	8001334 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d302      	bcc.n	8002184 <I2C_WaitOnFlagUntilTimeout+0x44>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d122      	bne.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4013      	ands	r3, r2
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	429a      	cmp	r2, r3
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d113      	bne.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	f043 0220 	orr.w	r2, r3, #32
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00f      	b.n	80021ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699a      	ldr	r2, [r3, #24]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4013      	ands	r3, r2
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	bf0c      	ite	eq
 80021da:	2301      	moveq	r3, #1
 80021dc:	2300      	movne	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d0b4      	beq.n	8002152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021fe:	e033      	b.n	8002268 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f87f 	bl	8002308 <I2C_IsErrorOccurred>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e031      	b.n	8002278 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221a:	d025      	beq.n	8002268 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221c:	f7ff f88a 	bl	8001334 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	429a      	cmp	r2, r3
 800222a:	d302      	bcc.n	8002232 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d11a      	bne.n	8002268 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b02      	cmp	r3, #2
 800223e:	d013      	beq.n	8002268 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002244:	f043 0220 	orr.w	r2, r3, #32
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e007      	b.n	8002278 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b02      	cmp	r3, #2
 8002274:	d1c4      	bne.n	8002200 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800228c:	e02f      	b.n	80022ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f838 	bl	8002308 <I2C_IsErrorOccurred>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e02d      	b.n	80022fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a2:	f7ff f847 	bl	8001334 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d11a      	bne.n	80022ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d013      	beq.n	80022ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e007      	b.n	80022fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d1c8      	bne.n	800228e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	@ 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	d068      	beq.n	8002406 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2210      	movs	r2, #16
 800233a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800233c:	e049      	b.n	80023d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d045      	beq.n	80023d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002346:	f7fe fff5 	bl	8001334 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	429a      	cmp	r2, r3
 8002354:	d302      	bcc.n	800235c <I2C_IsErrorOccurred+0x54>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d13a      	bne.n	80023d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002366:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800236e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800237a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800237e:	d121      	bne.n	80023c4 <I2C_IsErrorOccurred+0xbc>
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002386:	d01d      	beq.n	80023c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	2b20      	cmp	r3, #32
 800238c:	d01a      	beq.n	80023c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800239c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800239e:	f7fe ffc9 	bl	8001334 <HAL_GetTick>
 80023a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a4:	e00e      	b.n	80023c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023a6:	f7fe ffc5 	bl	8001334 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b19      	cmp	r3, #25
 80023b2:	d907      	bls.n	80023c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	f043 0320 	orr.w	r3, r3, #32
 80023ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80023c2:	e006      	b.n	80023d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d1e9      	bne.n	80023a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d003      	beq.n	80023e8 <I2C_IsErrorOccurred+0xe0>
 80023e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0aa      	beq.n	800233e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d103      	bne.n	80023f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2220      	movs	r2, #32
 80023f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002428:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	f043 0308 	orr.w	r3, r3, #8
 8002440:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800244a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800246c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01c      	beq.n	80024b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f7ff fe3b 	bl	80020f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <I2C_IsErrorOccurred+0x1bc>)
 800248e:	400b      	ands	r3, r1
 8002490:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	431a      	orrs	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80024b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3728      	adds	r7, #40	@ 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	fe00e800 	.word	0xfe00e800

080024c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	817b      	strh	r3, [r7, #10]
 80024d6:	4613      	mov	r3, r2
 80024d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024da:	897b      	ldrh	r3, [r7, #10]
 80024dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024e0:	7a7b      	ldrb	r3, [r7, #9]
 80024e2:	041b      	lsls	r3, r3, #16
 80024e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024e8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024f6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	0d5b      	lsrs	r3, r3, #21
 8002502:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002506:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <I2C_TransferConfig+0x60>)
 8002508:	430b      	orrs	r3, r1
 800250a:	43db      	mvns	r3, r3
 800250c:	ea02 0103 	and.w	r1, r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800251a:	bf00      	nop
 800251c:	371c      	adds	r7, #28
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	03ff63ff 	.word	0x03ff63ff

0800252c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b20      	cmp	r3, #32
 8002540:	d138      	bne.n	80025b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800254c:	2302      	movs	r3, #2
 800254e:	e032      	b.n	80025b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2224      	movs	r2, #36	@ 0x24
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0201 	bic.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800257e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e000      	b.n	80025b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025b4:	2302      	movs	r3, #2
  }
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d139      	bne.n	800264c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e033      	b.n	800264e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2224      	movs	r2, #36	@ 0x24
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002614:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800264c:	2302      	movs	r3, #2
  }
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af02      	add	r7, sp, #8
 8002662:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e108      	b.n	8002880 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d106      	bne.n	800268e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7fe fbab 	bl	8000de4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2203      	movs	r2, #3
 8002692:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	4a7b      	ldr	r2, [pc, #492]	@ (8002888 <HAL_PCD_Init+0x22c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d102      	bne.n	80026a4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 fe34 	bl	8006316 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7c1a      	ldrb	r2, [r3, #16]
 80026b6:	f88d 2000 	strb.w	r2, [sp]
 80026ba:	3304      	adds	r3, #4
 80026bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026be:	f003 fdfd 	bl	80062bc <USB_CoreInit>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0d5      	b.n	8002880 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 fe2c 	bl	8006338 <USB_SetCurrentMode>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0c6      	b.n	8002880 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	e04a      	b.n	800278e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3315      	adds	r3, #21
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	3314      	adds	r3, #20
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	b298      	uxth	r0, r3
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	332e      	adds	r3, #46	@ 0x2e
 8002734:	4602      	mov	r2, r0
 8002736:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	3318      	adds	r3, #24
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	331c      	adds	r3, #28
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3320      	adds	r3, #32
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3324      	adds	r3, #36	@ 0x24
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	3301      	adds	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	791b      	ldrb	r3, [r3, #4]
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	429a      	cmp	r2, r3
 8002796:	d3af      	bcc.n	80026f8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e044      	b.n	8002828 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	3301      	adds	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	791b      	ldrb	r3, [r3, #4]
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	429a      	cmp	r2, r3
 8002830:	d3b5      	bcc.n	800279e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7c1a      	ldrb	r2, [r3, #16]
 800283a:	f88d 2000 	strb.w	r2, [sp]
 800283e:	3304      	adds	r3, #4
 8002840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002842:	f003 fdc5 	bl	80063d0 <USB_DevInit>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e013      	b.n	8002880 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	7b1b      	ldrb	r3, [r3, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d102      	bne.n	8002874 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f80c 	bl	800288c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f003 ff6e 	bl	800675a <USB_DevDisconnect>

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	42040000 	.word	0x42040000

0800288c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028be:	f043 0303 	orr.w	r3, r3, #3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80028dc:	4b39      	ldr	r3, [pc, #228]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80028de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028e4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d10b      	bne.n	8002906 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f4:	d905      	bls.n	8002902 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80028f6:	4b33      	ldr	r3, [pc, #204]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80028fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002900:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e057      	b.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800290c:	d90a      	bls.n	8002924 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800290e:	4b2d      	ldr	r3, [pc, #180]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4313      	orrs	r3, r2
 800291a:	4a2a      	ldr	r2, [pc, #168]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002920:	60d3      	str	r3, [r2, #12]
 8002922:	e007      	b.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002924:	4b27      	ldr	r3, [pc, #156]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800292c:	4925      	ldr	r1, [pc, #148]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4313      	orrs	r3, r2
 8002932:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002934:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a24      	ldr	r2, [pc, #144]	@ (80029cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	099b      	lsrs	r3, r3, #6
 8002940:	2232      	movs	r2, #50	@ 0x32
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	4a21      	ldr	r2, [pc, #132]	@ (80029cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	099b      	lsrs	r3, r3, #6
 800294e:	3301      	adds	r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002952:	e002      	b.n	800295a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3b01      	subs	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800295a:	4b1a      	ldr	r3, [pc, #104]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <HAL_PWREx_ControlVoltageScaling+0x98>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f3      	bne.n	8002954 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01b      	beq.n	80029aa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002972:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a15      	ldr	r2, [pc, #84]	@ (80029cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	2232      	movs	r2, #50	@ 0x32
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	4a11      	ldr	r2, [pc, #68]	@ (80029cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	099b      	lsrs	r3, r3, #6
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002990:	e002      	b.n	8002998 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3b01      	subs	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002998:	4b0a      	ldr	r3, [pc, #40]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800299a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <HAL_PWREx_ControlVoltageScaling+0xd6>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f3      	bne.n	8002992 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e000      	b.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	46020800 	.word	0x46020800
 80029c8:	20000000 	.word	0x20000000
 80029cc:	10624dd3 	.word	0x10624dd3

080029d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80029d4:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80029d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	46020800 	.word	0x46020800

080029ec <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80029f0:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	4a04      	ldr	r2, [pc, #16]	@ (8002a08 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	6113      	str	r3, [r2, #16]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	46020800 	.word	0x46020800

08002a0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08e      	sub	sp, #56	@ 0x38
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f000 bec8 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a26:	4b99      	ldr	r3, [pc, #612]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a30:	4b96      	ldr	r3, [pc, #600]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 816c 	beq.w	8002d20 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <HAL_RCC_OscConfig+0x52>
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	f040 80de 	bne.w	8002c12 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	f040 80da 	bne.w	8002c12 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f000 bea5 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a70:	4b86      	ldr	r3, [pc, #536]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <HAL_RCC_OscConfig+0x7a>
 8002a7c:	4b83      	ldr	r3, [pc, #524]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002a84:	e005      	b.n	8002a92 <HAL_RCC_OscConfig+0x86>
 8002a86:	4b81      	ldr	r3, [pc, #516]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d255      	bcs.n	8002b42 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10a      	bne.n	8002ab2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 f99d 	bl	8003de0 <RCC_SetFlashLatencyFromMSIRange>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f000 be82 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002ab2:	4b76      	ldr	r3, [pc, #472]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	4a75      	ldr	r2, [pc, #468]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002ab8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002abc:	6093      	str	r3, [r2, #8]
 8002abe:	4b73      	ldr	r3, [pc, #460]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	4970      	ldr	r1, [pc, #448]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002ad8:	d309      	bcc.n	8002aee <HAL_RCC_OscConfig+0xe2>
 8002ada:	4b6c      	ldr	r3, [pc, #432]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f023 021f 	bic.w	r2, r3, #31
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4969      	ldr	r1, [pc, #420]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60cb      	str	r3, [r1, #12]
 8002aec:	e07e      	b.n	8002bec <HAL_RCC_OscConfig+0x1e0>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	da0a      	bge.n	8002b0c <HAL_RCC_OscConfig+0x100>
 8002af6:	4b65      	ldr	r3, [pc, #404]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	015b      	lsls	r3, r3, #5
 8002b04:	4961      	ldr	r1, [pc, #388]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60cb      	str	r3, [r1, #12]
 8002b0a:	e06f      	b.n	8002bec <HAL_RCC_OscConfig+0x1e0>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b14:	d30a      	bcc.n	8002b2c <HAL_RCC_OscConfig+0x120>
 8002b16:	4b5d      	ldr	r3, [pc, #372]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	029b      	lsls	r3, r3, #10
 8002b24:	4959      	ldr	r1, [pc, #356]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60cb      	str	r3, [r1, #12]
 8002b2a:	e05f      	b.n	8002bec <HAL_RCC_OscConfig+0x1e0>
 8002b2c:	4b57      	ldr	r3, [pc, #348]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	03db      	lsls	r3, r3, #15
 8002b3a:	4954      	ldr	r1, [pc, #336]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60cb      	str	r3, [r1, #12]
 8002b40:	e054      	b.n	8002bec <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002b42:	4b52      	ldr	r3, [pc, #328]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4a51      	ldr	r2, [pc, #324]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b4c:	6093      	str	r3, [r2, #8]
 8002b4e:	4b4f      	ldr	r3, [pc, #316]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	494c      	ldr	r1, [pc, #304]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002b68:	d309      	bcc.n	8002b7e <HAL_RCC_OscConfig+0x172>
 8002b6a:	4b48      	ldr	r3, [pc, #288]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f023 021f 	bic.w	r2, r3, #31
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4945      	ldr	r1, [pc, #276]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60cb      	str	r3, [r1, #12]
 8002b7c:	e028      	b.n	8002bd0 <HAL_RCC_OscConfig+0x1c4>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	da0a      	bge.n	8002b9c <HAL_RCC_OscConfig+0x190>
 8002b86:	4b41      	ldr	r3, [pc, #260]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	015b      	lsls	r3, r3, #5
 8002b94:	493d      	ldr	r1, [pc, #244]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60cb      	str	r3, [r1, #12]
 8002b9a:	e019      	b.n	8002bd0 <HAL_RCC_OscConfig+0x1c4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba4:	d30a      	bcc.n	8002bbc <HAL_RCC_OscConfig+0x1b0>
 8002ba6:	4b39      	ldr	r3, [pc, #228]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	029b      	lsls	r3, r3, #10
 8002bb4:	4935      	ldr	r1, [pc, #212]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60cb      	str	r3, [r1, #12]
 8002bba:	e009      	b.n	8002bd0 <HAL_RCC_OscConfig+0x1c4>
 8002bbc:	4b33      	ldr	r3, [pc, #204]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	03db      	lsls	r3, r3, #15
 8002bca:	4930      	ldr	r1, [pc, #192]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10a      	bne.n	8002bec <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f001 f900 	bl	8003de0 <RCC_SetFlashLatencyFromMSIRange>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	f000 bde5 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002bec:	f001 f8de 	bl	8003dac <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bf0:	4b27      	ldr	r3, [pc, #156]	@ (8002c90 <HAL_RCC_OscConfig+0x284>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fb13 	bl	8001220 <HAL_InitTick>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8002c00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 808a 	beq.w	8002d1e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c0e:	f000 bdd2 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d066      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c26:	f7fe fb85 	bl	8001334 <HAL_GetTick>
 8002c2a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002c2c:	e009      	b.n	8002c42 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fb81 	bl	8001334 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d902      	bls.n	8002c42 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f000 bdba 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002c42:	4b12      	ldr	r3, [pc, #72]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0ef      	beq.n	8002c2e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4a0e      	ldr	r2, [pc, #56]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002c54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c58:	6093      	str	r3, [r2, #8]
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	4909      	ldr	r1, [pc, #36]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002c74:	d30e      	bcc.n	8002c94 <HAL_RCC_OscConfig+0x288>
 8002c76:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f023 021f 	bic.w	r2, r3, #31
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4902      	ldr	r1, [pc, #8]	@ (8002c8c <HAL_RCC_OscConfig+0x280>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
 8002c88:	e04a      	b.n	8002d20 <HAL_RCC_OscConfig+0x314>
 8002c8a:	bf00      	nop
 8002c8c:	46020c00 	.word	0x46020c00
 8002c90:	20000004 	.word	0x20000004
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	da0a      	bge.n	8002cb2 <HAL_RCC_OscConfig+0x2a6>
 8002c9c:	4b98      	ldr	r3, [pc, #608]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	015b      	lsls	r3, r3, #5
 8002caa:	4995      	ldr	r1, [pc, #596]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60cb      	str	r3, [r1, #12]
 8002cb0:	e036      	b.n	8002d20 <HAL_RCC_OscConfig+0x314>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cba:	d30a      	bcc.n	8002cd2 <HAL_RCC_OscConfig+0x2c6>
 8002cbc:	4b90      	ldr	r3, [pc, #576]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	029b      	lsls	r3, r3, #10
 8002cca:	498d      	ldr	r1, [pc, #564]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60cb      	str	r3, [r1, #12]
 8002cd0:	e026      	b.n	8002d20 <HAL_RCC_OscConfig+0x314>
 8002cd2:	4b8b      	ldr	r3, [pc, #556]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	03db      	lsls	r3, r3, #15
 8002ce0:	4987      	ldr	r1, [pc, #540]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60cb      	str	r3, [r1, #12]
 8002ce6:	e01b      	b.n	8002d20 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002ce8:	4b85      	ldr	r3, [pc, #532]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a84      	ldr	r2, [pc, #528]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002cf4:	f7fe fb1e 	bl	8001334 <HAL_GetTick>
 8002cf8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002cfa:	e009      	b.n	8002d10 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cfc:	f7fe fb1a 	bl	8001334 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d902      	bls.n	8002d10 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	f000 bd53 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002d10:	4b7b      	ldr	r3, [pc, #492]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ef      	bne.n	8002cfc <HAL_RCC_OscConfig+0x2f0>
 8002d1c:	e000      	b.n	8002d20 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 808b 	beq.w	8002e44 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_OscConfig+0x334>
 8002d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d36:	2b0c      	cmp	r3, #12
 8002d38:	d109      	bne.n	8002d4e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d17d      	bne.n	8002e44 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f000 bd34 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x35a>
 8002d58:	4b69      	ldr	r3, [pc, #420]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a68      	ldr	r2, [pc, #416]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e041      	b.n	8002dea <HAL_RCC_OscConfig+0x3de>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d6e:	d112      	bne.n	8002d96 <HAL_RCC_OscConfig+0x38a>
 8002d70:	4b63      	ldr	r3, [pc, #396]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a62      	ldr	r2, [pc, #392]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b60      	ldr	r3, [pc, #384]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5f      	ldr	r2, [pc, #380]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d82:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	4b5d      	ldr	r3, [pc, #372]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	e029      	b.n	8002dea <HAL_RCC_OscConfig+0x3de>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002d9e:	d112      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x3ba>
 8002da0:	4b57      	ldr	r3, [pc, #348]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a56      	ldr	r2, [pc, #344]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002da6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b54      	ldr	r3, [pc, #336]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a53      	ldr	r2, [pc, #332]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b51      	ldr	r3, [pc, #324]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a50      	ldr	r2, [pc, #320]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e011      	b.n	8002dea <HAL_RCC_OscConfig+0x3de>
 8002dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a4d      	ldr	r2, [pc, #308]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a4a      	ldr	r2, [pc, #296]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002dd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4b48      	ldr	r3, [pc, #288]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a47      	ldr	r2, [pc, #284]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002de8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d014      	beq.n	8002e1c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002df2:	f7fe fa9f 	bl	8001334 <HAL_GetTick>
 8002df6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df8:	e009      	b.n	8002e0e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfa:	f7fe fa9b 	bl	8001334 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b64      	cmp	r3, #100	@ 0x64
 8002e06:	d902      	bls.n	8002e0e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	f000 bcd4 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0ef      	beq.n	8002dfa <HAL_RCC_OscConfig+0x3ee>
 8002e1a:	e013      	b.n	8002e44 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fa8a 	bl	8001334 <HAL_GetTick>
 8002e20:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e22:	e009      	b.n	8002e38 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fe fa86 	bl	8001334 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	@ 0x64
 8002e30:	d902      	bls.n	8002e38 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	f000 bcbf 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e38:	4b31      	ldr	r3, [pc, #196]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ef      	bne.n	8002e24 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d05f      	beq.n	8002f10 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d005      	beq.n	8002e62 <HAL_RCC_OscConfig+0x456>
 8002e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	d114      	bne.n	8002e86 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d111      	bne.n	8002e86 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f000 bca3 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4b23      	ldr	r3, [pc, #140]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	4920      	ldr	r1, [pc, #128]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e84:	e044      	b.n	8002f10 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d024      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1b      	ldr	r2, [pc, #108]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e98:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e9a:	f7fe fa4b 	bl	8001334 <HAL_GetTick>
 8002e9e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea0:	e009      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea2:	f7fe fa47 	bl	8001334 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d902      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	f000 bc80 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb6:	4b12      	ldr	r3, [pc, #72]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ef      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	041b      	lsls	r3, r3, #16
 8002ed0:	490b      	ldr	r1, [pc, #44]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	610b      	str	r3, [r1, #16]
 8002ed6:	e01b      	b.n	8002f10 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002ed8:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a08      	ldr	r2, [pc, #32]	@ (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002ede:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ee2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ee4:	f7fe fa26 	bl	8001334 <HAL_GetTick>
 8002ee8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eec:	f7fe fa22 	bl	8001334 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d904      	bls.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	f000 bc5b 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
 8002f00:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f04:	4baf      	ldr	r3, [pc, #700]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1ed      	bne.n	8002eec <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80c8 	beq.w	80030ae <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f24:	4ba7      	ldr	r3, [pc, #668]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d111      	bne.n	8002f56 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	4ba4      	ldr	r3, [pc, #656]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8002f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f38:	4aa2      	ldr	r2, [pc, #648]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002f42:	4ba0      	ldr	r3, [pc, #640]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8002f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f56:	4b9c      	ldr	r3, [pc, #624]	@ (80031c8 <HAL_RCC_OscConfig+0x7bc>)
 8002f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d119      	bne.n	8002f96 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002f62:	4b99      	ldr	r3, [pc, #612]	@ (80031c8 <HAL_RCC_OscConfig+0x7bc>)
 8002f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f66:	4a98      	ldr	r2, [pc, #608]	@ (80031c8 <HAL_RCC_OscConfig+0x7bc>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe f9e1 	bl	8001334 <HAL_GetTick>
 8002f72:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f74:	e009      	b.n	8002f8a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f76:	f7fe f9dd 	bl	8001334 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d902      	bls.n	8002f8a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	f000 bc16 	b.w	80037b6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f8a:	4b8f      	ldr	r3, [pc, #572]	@ (80031c8 <HAL_RCC_OscConfig+0x7bc>)
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0ef      	beq.n	8002f76 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d05f      	beq.n	800305e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002f9e:	4b89      	ldr	r3, [pc, #548]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8002fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fa4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d037      	beq.n	8003024 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d006      	beq.n	8002fcc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e3f4      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01b      	beq.n	800300e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8002fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fdc:	4a79      	ldr	r2, [pc, #484]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8002fde:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002fe2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002fe6:	f7fe f9a5 	bl	8001334 <HAL_GetTick>
 8002fea:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fee:	f7fe f9a1 	bl	8001334 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e3da      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003000:	4b70      	ldr	r3, [pc, #448]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ef      	bne.n	8002fee <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800300e:	4b6d      	ldr	r3, [pc, #436]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003014:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4969      	ldr	r1, [pc, #420]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003024:	4b67      	ldr	r3, [pc, #412]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800302a:	4a66      	ldr	r2, [pc, #408]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 800302c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003030:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003034:	f7fe f97e 	bl	8001334 <HAL_GetTick>
 8003038:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303c:	f7fe f97a 	bl	8001334 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b05      	cmp	r3, #5
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e3b3      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800304e:	4b5d      	ldr	r3, [pc, #372]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ef      	beq.n	800303c <HAL_RCC_OscConfig+0x630>
 800305c:	e01b      	b.n	8003096 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800305e:	4b59      	ldr	r3, [pc, #356]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003064:	4a57      	ldr	r2, [pc, #348]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003066:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800306a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800306e:	f7fe f961 	bl	8001334 <HAL_GetTick>
 8003072:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003076:	f7fe f95d 	bl	8001334 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b05      	cmp	r3, #5
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e396      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003088:	4b4e      	ldr	r3, [pc, #312]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 800308a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800308e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ef      	bne.n	8003076 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003096:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309e:	4b49      	ldr	r3, [pc, #292]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 80030a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a4:	4a47      	ldr	r2, [pc, #284]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8111 	beq.w	80032de <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80030bc:	2300      	movs	r3, #0
 80030be:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c2:	4b40      	ldr	r3, [pc, #256]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 80030c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d111      	bne.n	80030f4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d0:	4b3c      	ldr	r3, [pc, #240]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d6:	4a3b      	ldr	r2, [pc, #236]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80030e0:	4b38      	ldr	r3, [pc, #224]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 80030e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80030f4:	4b34      	ldr	r3, [pc, #208]	@ (80031c8 <HAL_RCC_OscConfig+0x7bc>)
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d118      	bne.n	8003132 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003100:	4b31      	ldr	r3, [pc, #196]	@ (80031c8 <HAL_RCC_OscConfig+0x7bc>)
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	4a30      	ldr	r2, [pc, #192]	@ (80031c8 <HAL_RCC_OscConfig+0x7bc>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310c:	f7fe f912 	bl	8001334 <HAL_GetTick>
 8003110:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003114:	f7fe f90e 	bl	8001334 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e347      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003126:	4b28      	ldr	r3, [pc, #160]	@ (80031c8 <HAL_RCC_OscConfig+0x7bc>)
 8003128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01f      	beq.n	800317e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d010      	beq.n	800316c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800314a:	4b1e      	ldr	r3, [pc, #120]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 800314c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003150:	4a1c      	ldr	r2, [pc, #112]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003152:	f043 0304 	orr.w	r3, r3, #4
 8003156:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800315a:	4b1a      	ldr	r3, [pc, #104]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 800315c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003160:	4a18      	ldr	r2, [pc, #96]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800316a:	e018      	b.n	800319e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800316c:	4b15      	ldr	r3, [pc, #84]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 800316e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003172:	4a14      	ldr	r2, [pc, #80]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800317c:	e00f      	b.n	800319e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800317e:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003184:	4a0f      	ldr	r2, [pc, #60]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800318e:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003194:	4a0b      	ldr	r2, [pc, #44]	@ (80031c4 <HAL_RCC_OscConfig+0x7b8>)
 8003196:	f023 0304 	bic.w	r3, r3, #4
 800319a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d057      	beq.n	8003256 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80031a6:	f7fe f8c5 	bl	8001334 <HAL_GetTick>
 80031aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ac:	e00e      	b.n	80031cc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fe f8c1 	bl	8001334 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031bc:	4293      	cmp	r3, r2
 80031be:	d905      	bls.n	80031cc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e2f8      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
 80031c4:	46020c00 	.word	0x46020c00
 80031c8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031cc:	4b9c      	ldr	r3, [pc, #624]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80031ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0e9      	beq.n	80031ae <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01b      	beq.n	800321e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031e6:	4b96      	ldr	r3, [pc, #600]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80031e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031ec:	4a94      	ldr	r2, [pc, #592]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80031ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031f6:	e00a      	b.n	800320e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f8:	f7fe f89c 	bl	8001334 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e2d3      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800320e:	4b8c      	ldr	r3, [pc, #560]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ed      	beq.n	80031f8 <HAL_RCC_OscConfig+0x7ec>
 800321c:	e053      	b.n	80032c6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800321e:	4b88      	ldr	r3, [pc, #544]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003224:	4a86      	ldr	r2, [pc, #536]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800322a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fe f880 	bl	8001334 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e2b7      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003246:	4b7e      	ldr	r3, [pc, #504]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800324c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ed      	bne.n	8003230 <HAL_RCC_OscConfig+0x824>
 8003254:	e037      	b.n	80032c6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003256:	f7fe f86d 	bl	8001334 <HAL_GetTick>
 800325a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe f869 	bl	8001334 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e2a0      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003274:	4b72      	ldr	r3, [pc, #456]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ed      	bne.n	800325e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003282:	4b6f      	ldr	r3, [pc, #444]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01a      	beq.n	80032c6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003290:	4b6b      	ldr	r3, [pc, #428]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003296:	4a6a      	ldr	r2, [pc, #424]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003298:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800329c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032a0:	e00a      	b.n	80032b8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe f847 	bl	8001334 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e27e      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032b8:	4b61      	ldr	r3, [pc, #388]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80032ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1ed      	bne.n	80032a2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d107      	bne.n	80032de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80032d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80032d6:	f023 0304 	bic.w	r3, r3, #4
 80032da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d036      	beq.n	8003358 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d019      	beq.n	8003326 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80032f2:	4b53      	ldr	r3, [pc, #332]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a52      	ldr	r2, [pc, #328]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80032f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032fc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80032fe:	f7fe f819 	bl	8001334 <HAL_GetTick>
 8003302:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003306:	f7fe f815 	bl	8001334 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e24e      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003318:	4b49      	ldr	r3, [pc, #292]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x8fa>
 8003324:	e018      	b.n	8003358 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003326:	4b46      	ldr	r3, [pc, #280]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a45      	ldr	r2, [pc, #276]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 800332c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003330:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003332:	f7fd ffff 	bl	8001334 <HAL_GetTick>
 8003336:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800333a:	f7fd fffb 	bl	8001334 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e234      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800334c:	4b3c      	ldr	r3, [pc, #240]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f0      	bne.n	800333a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003360:	2b00      	cmp	r3, #0
 8003362:	d036      	beq.n	80033d2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	2b00      	cmp	r3, #0
 800336a:	d019      	beq.n	80033a0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800336c:	4b34      	ldr	r3, [pc, #208]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a33      	ldr	r2, [pc, #204]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003372:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003376:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003378:	f7fd ffdc 	bl	8001334 <HAL_GetTick>
 800337c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003380:	f7fd ffd8 	bl	8001334 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e211      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003392:	4b2b      	ldr	r3, [pc, #172]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x974>
 800339e:	e018      	b.n	80033d2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80033a0:	4b27      	ldr	r3, [pc, #156]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a26      	ldr	r2, [pc, #152]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80033a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80033ac:	f7fd ffc2 	bl	8001334 <HAL_GetTick>
 80033b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80033b4:	f7fd ffbe 	bl	8001334 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e1f7      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80033c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d07f      	beq.n	80034de <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d062      	beq.n	80034ac <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80033e6:	4b16      	ldr	r3, [pc, #88]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4a15      	ldr	r2, [pc, #84]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80033ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033f0:	6093      	str	r3, [r2, #8]
 80033f2:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	4910      	ldr	r1, [pc, #64]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800340c:	d309      	bcc.n	8003422 <HAL_RCC_OscConfig+0xa16>
 800340e:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f023 021f 	bic.w	r2, r3, #31
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4909      	ldr	r1, [pc, #36]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 800341c:	4313      	orrs	r3, r2
 800341e:	60cb      	str	r3, [r1, #12]
 8003420:	e02a      	b.n	8003478 <HAL_RCC_OscConfig+0xa6c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	da0c      	bge.n	8003444 <HAL_RCC_OscConfig+0xa38>
 800342a:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	015b      	lsls	r3, r3, #5
 8003438:	4901      	ldr	r1, [pc, #4]	@ (8003440 <HAL_RCC_OscConfig+0xa34>)
 800343a:	4313      	orrs	r3, r2
 800343c:	60cb      	str	r3, [r1, #12]
 800343e:	e01b      	b.n	8003478 <HAL_RCC_OscConfig+0xa6c>
 8003440:	46020c00 	.word	0x46020c00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344c:	d30a      	bcc.n	8003464 <HAL_RCC_OscConfig+0xa58>
 800344e:	4ba1      	ldr	r3, [pc, #644]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	029b      	lsls	r3, r3, #10
 800345c:	499d      	ldr	r1, [pc, #628]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 800345e:	4313      	orrs	r3, r2
 8003460:	60cb      	str	r3, [r1, #12]
 8003462:	e009      	b.n	8003478 <HAL_RCC_OscConfig+0xa6c>
 8003464:	4b9b      	ldr	r3, [pc, #620]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	03db      	lsls	r3, r3, #15
 8003472:	4998      	ldr	r1, [pc, #608]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003474:	4313      	orrs	r3, r2
 8003476:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003478:	4b96      	ldr	r3, [pc, #600]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a95      	ldr	r2, [pc, #596]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 800347e:	f043 0310 	orr.w	r3, r3, #16
 8003482:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003484:	f7fd ff56 	bl	8001334 <HAL_GetTick>
 8003488:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800348c:	f7fd ff52 	bl	8001334 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e18b      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800349e:	4b8d      	ldr	r3, [pc, #564]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0xa80>
 80034aa:	e018      	b.n	80034de <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80034ac:	4b89      	ldr	r3, [pc, #548]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a88      	ldr	r2, [pc, #544]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80034b2:	f023 0310 	bic.w	r3, r3, #16
 80034b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80034b8:	f7fd ff3c 	bl	8001334 <HAL_GetTick>
 80034bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80034c0:	f7fd ff38 	bl	8001334 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e171      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80034d2:	4b80      	ldr	r3, [pc, #512]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8166 	beq.w	80037b4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ee:	4b79      	ldr	r3, [pc, #484]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	f000 80f2 	beq.w	80036e0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003500:	2b02      	cmp	r3, #2
 8003502:	f040 80c5 	bne.w	8003690 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003506:	4b73      	ldr	r3, [pc, #460]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a72      	ldr	r2, [pc, #456]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 800350c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003510:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003512:	f7fd ff0f 	bl	8001334 <HAL_GetTick>
 8003516:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351a:	f7fd ff0b 	bl	8001334 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e144      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800352c:	4b69      	ldr	r3, [pc, #420]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003538:	4b66      	ldr	r3, [pc, #408]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 800353a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d111      	bne.n	800356a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	4b63      	ldr	r3, [pc, #396]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800354c:	4a61      	ldr	r2, [pc, #388]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 800354e:	f043 0304 	orr.w	r3, r3, #4
 8003552:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003556:	4b5f      	ldr	r3, [pc, #380]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800356a:	4b5b      	ldr	r3, [pc, #364]	@ (80036d8 <HAL_RCC_OscConfig+0xccc>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003572:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003576:	d102      	bne.n	800357e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003578:	2301      	movs	r3, #1
 800357a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800357e:	4b56      	ldr	r3, [pc, #344]	@ (80036d8 <HAL_RCC_OscConfig+0xccc>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	4a55      	ldr	r2, [pc, #340]	@ (80036d8 <HAL_RCC_OscConfig+0xccc>)
 8003584:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003588:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800358a:	4b52      	ldr	r3, [pc, #328]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 800358c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003592:	f023 0303 	bic.w	r3, r3, #3
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800359e:	3a01      	subs	r2, #1
 80035a0:	0212      	lsls	r2, r2, #8
 80035a2:	4311      	orrs	r1, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80035a8:	430a      	orrs	r2, r1
 80035aa:	494a      	ldr	r1, [pc, #296]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80035b0:	4b48      	ldr	r3, [pc, #288]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80035b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035b4:	4b49      	ldr	r3, [pc, #292]	@ (80036dc <HAL_RCC_OscConfig+0xcd0>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035bc:	3a01      	subs	r2, #1
 80035be:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80035c6:	3a01      	subs	r2, #1
 80035c8:	0252      	lsls	r2, r2, #9
 80035ca:	b292      	uxth	r2, r2
 80035cc:	4311      	orrs	r1, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035d2:	3a01      	subs	r2, #1
 80035d4:	0412      	lsls	r2, r2, #16
 80035d6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80035da:	4311      	orrs	r1, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80035e0:	3a01      	subs	r2, #1
 80035e2:	0612      	lsls	r2, r2, #24
 80035e4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80035e8:	430a      	orrs	r2, r1
 80035ea:	493a      	ldr	r1, [pc, #232]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80035f0:	4b38      	ldr	r3, [pc, #224]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	4a37      	ldr	r2, [pc, #220]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80035f6:	f023 0310 	bic.w	r3, r3, #16
 80035fa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003600:	4a34      	ldr	r2, [pc, #208]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003606:	4b33      	ldr	r3, [pc, #204]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	4a32      	ldr	r2, [pc, #200]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 800360c:	f043 0310 	orr.w	r3, r3, #16
 8003610:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003612:	4b30      	ldr	r3, [pc, #192]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003616:	f023 020c 	bic.w	r2, r3, #12
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	492d      	ldr	r1, [pc, #180]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003624:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800362c:	4b2a      	ldr	r3, [pc, #168]	@ (80036d8 <HAL_RCC_OscConfig+0xccc>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a29      	ldr	r2, [pc, #164]	@ (80036d8 <HAL_RCC_OscConfig+0xccc>)
 8003632:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003636:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003638:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800363c:	2b01      	cmp	r3, #1
 800363e:	d107      	bne.n	8003650 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003640:	4b24      	ldr	r3, [pc, #144]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003646:	4a23      	ldr	r2, [pc, #140]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003648:	f023 0304 	bic.w	r3, r3, #4
 800364c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003650:	4b20      	ldr	r3, [pc, #128]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1f      	ldr	r2, [pc, #124]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800365a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800365c:	f7fd fe6a 	bl	8001334 <HAL_GetTick>
 8003660:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7fd fe66 	bl	8001334 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e09f      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003676:	4b17      	ldr	r3, [pc, #92]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003682:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003686:	4a13      	ldr	r2, [pc, #76]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800368c:	6293      	str	r3, [r2, #40]	@ 0x28
 800368e:	e091      	b.n	80037b4 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003690:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0f      	ldr	r2, [pc, #60]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 8003696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800369a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800369c:	f7fd fe4a 	bl	8001334 <HAL_GetTick>
 80036a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fd fe46 	bl	8001334 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e07f      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80036b6:	4b07      	ldr	r3, [pc, #28]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80036c2:	4b04      	ldr	r3, [pc, #16]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80036c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c6:	4a03      	ldr	r2, [pc, #12]	@ (80036d4 <HAL_RCC_OscConfig+0xcc8>)
 80036c8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80036cc:	f023 0303 	bic.w	r3, r3, #3
 80036d0:	6293      	str	r3, [r2, #40]	@ 0x28
 80036d2:	e06f      	b.n	80037b4 <HAL_RCC_OscConfig+0xda8>
 80036d4:	46020c00 	.word	0x46020c00
 80036d8:	46020800 	.word	0x46020800
 80036dc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80036e0:	4b37      	ldr	r3, [pc, #220]	@ (80037c0 <HAL_RCC_OscConfig+0xdb4>)
 80036e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036e6:	4b36      	ldr	r3, [pc, #216]	@ (80037c0 <HAL_RCC_OscConfig+0xdb4>)
 80036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ea:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d039      	beq.n	8003768 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0203 	and.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d132      	bne.n	8003768 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003710:	429a      	cmp	r2, r3
 8003712:	d129      	bne.n	8003768 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d122      	bne.n	8003768 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d11a      	bne.n	8003768 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	0a5b      	lsrs	r3, r3, #9
 8003736:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d111      	bne.n	8003768 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	0c1b      	lsrs	r3, r3, #16
 8003748:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003750:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d108      	bne.n	8003768 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	0e1b      	lsrs	r3, r3, #24
 800375a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003762:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e024      	b.n	80037b6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800376c:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <HAL_RCC_OscConfig+0xdb4>)
 800376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003770:	08db      	lsrs	r3, r3, #3
 8003772:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800377a:	429a      	cmp	r2, r3
 800377c:	d01a      	beq.n	80037b4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800377e:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <HAL_RCC_OscConfig+0xdb4>)
 8003780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003782:	4a0f      	ldr	r2, [pc, #60]	@ (80037c0 <HAL_RCC_OscConfig+0xdb4>)
 8003784:	f023 0310 	bic.w	r3, r3, #16
 8003788:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378a:	f7fd fdd3 	bl	8001334 <HAL_GetTick>
 800378e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003790:	bf00      	nop
 8003792:	f7fd fdcf 	bl	8001334 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379a:	4293      	cmp	r3, r2
 800379c:	d0f9      	beq.n	8003792 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a2:	4a07      	ldr	r2, [pc, #28]	@ (80037c0 <HAL_RCC_OscConfig+0xdb4>)
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <HAL_RCC_OscConfig+0xdb4>)
 80037aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ac:	4a04      	ldr	r2, [pc, #16]	@ (80037c0 <HAL_RCC_OscConfig+0xdb4>)
 80037ae:	f043 0310 	orr.w	r3, r3, #16
 80037b2:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3738      	adds	r7, #56	@ 0x38
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	46020c00 	.word	0x46020c00

080037c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e1d9      	b.n	8003b8c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d8:	4b9b      	ldr	r3, [pc, #620]	@ (8003a48 <HAL_RCC_ClockConfig+0x284>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d910      	bls.n	8003808 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b98      	ldr	r3, [pc, #608]	@ (8003a48 <HAL_RCC_ClockConfig+0x284>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 020f 	bic.w	r2, r3, #15
 80037ee:	4996      	ldr	r1, [pc, #600]	@ (8003a48 <HAL_RCC_ClockConfig+0x284>)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b94      	ldr	r3, [pc, #592]	@ (8003a48 <HAL_RCC_ClockConfig+0x284>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e1c1      	b.n	8003b8c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d010      	beq.n	8003836 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	4b8c      	ldr	r3, [pc, #560]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003820:	429a      	cmp	r2, r3
 8003822:	d908      	bls.n	8003836 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003824:	4b89      	ldr	r3, [pc, #548]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	4986      	ldr	r1, [pc, #536]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003832:	4313      	orrs	r3, r2
 8003834:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d012      	beq.n	8003868 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	4b81      	ldr	r3, [pc, #516]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003850:	429a      	cmp	r2, r3
 8003852:	d909      	bls.n	8003868 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003854:	4b7d      	ldr	r3, [pc, #500]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	497a      	ldr	r1, [pc, #488]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003864:	4313      	orrs	r3, r2
 8003866:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d010      	beq.n	8003896 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	4b74      	ldr	r3, [pc, #464]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003880:	429a      	cmp	r2, r3
 8003882:	d908      	bls.n	8003896 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003884:	4b71      	ldr	r3, [pc, #452]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	496e      	ldr	r1, [pc, #440]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003892:	4313      	orrs	r3, r2
 8003894:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d010      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	4b69      	ldr	r3, [pc, #420]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d908      	bls.n	80038c4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80038b2:	4b66      	ldr	r3, [pc, #408]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f023 020f 	bic.w	r2, r3, #15
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	4963      	ldr	r1, [pc, #396]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80d2 	beq.w	8003a76 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80038d2:	2300      	movs	r3, #0
 80038d4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d143      	bne.n	8003966 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038de:	4b5b      	ldr	r3, [pc, #364]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 80038e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d110      	bne.n	800390e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	4b57      	ldr	r3, [pc, #348]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 80038ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f2:	4a56      	ldr	r2, [pc, #344]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 80038f4:	f043 0304 	orr.w	r3, r3, #4
 80038f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80038fc:	4b53      	ldr	r3, [pc, #332]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 80038fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800390a:	2301      	movs	r3, #1
 800390c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800390e:	f7fd fd11 	bl	8001334 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003914:	4b4e      	ldr	r3, [pc, #312]	@ (8003a50 <HAL_RCC_ClockConfig+0x28c>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00f      	beq.n	8003940 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003920:	e008      	b.n	8003934 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003922:	f7fd fd07 	bl	8001334 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e12b      	b.n	8003b8c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003934:	4b46      	ldr	r3, [pc, #280]	@ (8003a50 <HAL_RCC_ClockConfig+0x28c>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003940:	7dfb      	ldrb	r3, [r7, #23]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003946:	4b41      	ldr	r3, [pc, #260]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800394c:	4a3f      	ldr	r2, [pc, #252]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 800394e:	f023 0304 	bic.w	r3, r3, #4
 8003952:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003956:	4b3d      	ldr	r3, [pc, #244]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d121      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e112      	b.n	8003b8c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d107      	bne.n	800397e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800396e:	4b37      	ldr	r3, [pc, #220]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d115      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e106      	b.n	8003b8c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003986:	4b31      	ldr	r3, [pc, #196]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e0fa      	b.n	8003b8c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003996:	4b2d      	ldr	r3, [pc, #180]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0f2      	b.n	8003b8c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80039a6:	4b29      	ldr	r3, [pc, #164]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4926      	ldr	r1, [pc, #152]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80039b8:	f7fd fcbc 	bl	8001334 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d112      	bne.n	80039ec <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039c6:	e00a      	b.n	80039de <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c8:	f7fd fcb4 	bl	8001334 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e0d6      	b.n	8003b8c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039de:	4b1b      	ldr	r3, [pc, #108]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	d1ee      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x204>
 80039ea:	e044      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d112      	bne.n	8003a1a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f6:	f7fd fc9d 	bl	8001334 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e0bf      	b.n	8003b8c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d1ee      	bne.n	80039f6 <HAL_RCC_ClockConfig+0x232>
 8003a18:	e02d      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d123      	bne.n	8003a6a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a24:	f7fd fc86 	bl	8001334 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e0a8      	b.n	8003b8c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a3a:	4b04      	ldr	r3, [pc, #16]	@ (8003a4c <HAL_RCC_ClockConfig+0x288>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1ee      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x260>
 8003a46:	e016      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2b2>
 8003a48:	40022000 	.word	0x40022000
 8003a4c:	46020c00 	.word	0x46020c00
 8003a50:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fd fc6e 	bl	8001334 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e090      	b.n	8003b8c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d1ee      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d010      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	4b43      	ldr	r3, [pc, #268]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d208      	bcs.n	8003aa4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003a92:	4b40      	ldr	r3, [pc, #256]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f023 020f 	bic.w	r2, r3, #15
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	493d      	ldr	r1, [pc, #244]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8003b98 <HAL_RCC_ClockConfig+0x3d4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d210      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b39      	ldr	r3, [pc, #228]	@ (8003b98 <HAL_RCC_ClockConfig+0x3d4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 020f 	bic.w	r2, r3, #15
 8003aba:	4937      	ldr	r1, [pc, #220]	@ (8003b98 <HAL_RCC_ClockConfig+0x3d4>)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b35      	ldr	r3, [pc, #212]	@ (8003b98 <HAL_RCC_ClockConfig+0x3d4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e05b      	b.n	8003b8c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d208      	bcs.n	8003b02 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003af0:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4925      	ldr	r1, [pc, #148]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d012      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	4b20      	ldr	r3, [pc, #128]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d209      	bcs.n	8003b34 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003b20:	4b1c      	ldr	r3, [pc, #112]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	4919      	ldr	r1, [pc, #100]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d010      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	695a      	ldr	r2, [r3, #20]
 8003b44:	4b13      	ldr	r3, [pc, #76]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d208      	bcs.n	8003b62 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003b50:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	490d      	ldr	r1, [pc, #52]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003b62:	f000 f821 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b66:	4602      	mov	r2, r0
 8003b68:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <HAL_RCC_ClockConfig+0x3d0>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	490a      	ldr	r1, [pc, #40]	@ (8003b9c <HAL_RCC_ClockConfig+0x3d8>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
 8003b78:	4a09      	ldr	r2, [pc, #36]	@ (8003ba0 <HAL_RCC_ClockConfig+0x3dc>)
 8003b7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b7c:	4b09      	ldr	r3, [pc, #36]	@ (8003ba4 <HAL_RCC_ClockConfig+0x3e0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fd fb4d 	bl	8001220 <HAL_InitTick>
 8003b86:	4603      	mov	r3, r0
 8003b88:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	46020c00 	.word	0x46020c00
 8003b98:	40022000 	.word	0x40022000
 8003b9c:	080071b4 	.word	0x080071b4
 8003ba0:	20000000 	.word	0x20000000
 8003ba4:	20000004 	.word	0x20000004

08003ba8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b08b      	sub	sp, #44	@ 0x2c
 8003bac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb6:	4b78      	ldr	r3, [pc, #480]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bc0:	4b75      	ldr	r3, [pc, #468]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x34>
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	d121      	bne.n	8003c1a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d11e      	bne.n	8003c1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003bdc:	4b6e      	ldr	r3, [pc, #440]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d107      	bne.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003be8:	4b6b      	ldr	r3, [pc, #428]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003bea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bee:	0b1b      	lsrs	r3, r3, #12
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf6:	e005      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003bf8:	4b67      	ldr	r3, [pc, #412]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	0f1b      	lsrs	r3, r3, #28
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c04:	4a65      	ldr	r2, [pc, #404]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d110      	bne.n	8003c36 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c16:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c18:	e00d      	b.n	8003c36 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d102      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c26:	4b5e      	ldr	r3, [pc, #376]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003c28:	623b      	str	r3, [r7, #32]
 8003c2a:	e004      	b.n	8003c36 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c32:	4b5b      	ldr	r3, [pc, #364]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003c34:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	f040 80a5 	bne.w	8003d88 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003c3e:	4b56      	ldr	r3, [pc, #344]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003c48:	4b53      	ldr	r3, [pc, #332]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	3301      	adds	r3, #1
 8003c54:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003c56:	4b50      	ldr	r3, [pc, #320]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003c62:	4b4d      	ldr	r3, [pc, #308]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	08db      	lsrs	r3, r3, #3
 8003c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d003      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0xe4>
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d022      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x128>
 8003c8a:	e043      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003da4 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003cae:	ed97 6a01 	vldr	s12, [r7, #4]
 8003cb2:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003da8 <HAL_RCC_GetSysClockFreq+0x200>
 8003cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cce:	e046      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003da4 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003cf2:	ed97 6a01 	vldr	s12, [r7, #4]
 8003cf6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003da8 <HAL_RCC_GetSysClockFreq+0x200>
 8003cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d12:	e024      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	ee07 3a90 	vmov	s15, r3
 8003d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d34:	ee07 3a90 	vmov	s15, r3
 8003d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003d3c:	ed97 6a01 	vldr	s12, [r7, #4]
 8003d40:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003da8 <HAL_RCC_GetSysClockFreq+0x200>
 8003d44:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003d4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d5c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d62:	0e1b      	lsrs	r3, r3, #24
 8003d64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d68:	3301      	adds	r3, #1
 8003d6a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d82:	ee17 3a90 	vmov	r3, s15
 8003d86:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003d88:	6a3b      	ldr	r3, [r7, #32]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	372c      	adds	r7, #44	@ 0x2c
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	46020c00 	.word	0x46020c00
 8003d9c:	080071c4 	.word	0x080071c4
 8003da0:	00f42400 	.word	0x00f42400
 8003da4:	4b742400 	.word	0x4b742400
 8003da8:	46000000 	.word	0x46000000

08003dac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003db0:	f7ff fefa 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <HAL_RCC_GetHCLKFreq+0x28>)
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	4906      	ldr	r1, [pc, #24]	@ (8003dd8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003dc0:	5ccb      	ldrb	r3, [r1, r3]
 8003dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc6:	4a05      	ldr	r2, [pc, #20]	@ (8003ddc <HAL_RCC_GetHCLKFreq+0x30>)
 8003dc8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003dca:	4b04      	ldr	r3, [pc, #16]	@ (8003ddc <HAL_RCC_GetHCLKFreq+0x30>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	46020c00 	.word	0x46020c00
 8003dd8:	080071b4 	.word	0x080071b4
 8003ddc:	20000000 	.word	0x20000000

08003de0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003de8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003df6:	f7fe fdeb 	bl	80029d0 <HAL_PWREx_GetVoltageRange>
 8003dfa:	6178      	str	r0, [r7, #20]
 8003dfc:	e019      	b.n	8003e32 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	4b39      	ldr	r3, [pc, #228]	@ (8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e04:	4a37      	ldr	r2, [pc, #220]	@ (8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e06:	f043 0304 	orr.w	r3, r3, #4
 8003e0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e0e:	4b35      	ldr	r3, [pc, #212]	@ (8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e1c:	f7fe fdd8 	bl	80029d0 <HAL_PWREx_GetVoltageRange>
 8003e20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4b30      	ldr	r3, [pc, #192]	@ (8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e28:	4a2e      	ldr	r2, [pc, #184]	@ (8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e2a:	f023 0304 	bic.w	r3, r3, #4
 8003e2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e38:	d003      	beq.n	8003e42 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e40:	d109      	bne.n	8003e56 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e48:	d202      	bcs.n	8003e50 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003e4e:	e033      	b.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003e54:	e030      	b.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e5c:	d208      	bcs.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e64:	d102      	bne.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003e66:	2303      	movs	r3, #3
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	e025      	b.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e035      	b.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e76:	d90f      	bls.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e84:	d902      	bls.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003e86:	2300      	movs	r3, #0
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	e015      	b.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	e012      	b.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	e00f      	b.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e9e:	d109      	bne.n	8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea6:	d102      	bne.n	8003eae <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	e004      	b.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003eae:	2302      	movs	r3, #2
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	e001      	b.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 020f 	bic.w	r2, r3, #15
 8003ec0:	4909      	ldr	r1, [pc, #36]	@ (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003ec8:	4b07      	ldr	r3, [pc, #28]	@ (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d001      	beq.n	8003eda <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	46020c00 	.word	0x46020c00
 8003ee8:	40022000 	.word	0x40022000

08003eec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef0:	b0b8      	sub	sp, #224	@ 0xe0
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003efe:	2300      	movs	r3, #0
 8003f00:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f002 0401 	and.w	r4, r2, #1
 8003f10:	2500      	movs	r5, #0
 8003f12:	ea54 0305 	orrs.w	r3, r4, r5
 8003f16:	d00b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003f18:	4bca      	ldr	r3, [pc, #808]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f1e:	f023 0103 	bic.w	r1, r3, #3
 8003f22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f28:	4ac6      	ldr	r2, [pc, #792]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f002 0802 	and.w	r8, r2, #2
 8003f3c:	f04f 0900 	mov.w	r9, #0
 8003f40:	ea58 0309 	orrs.w	r3, r8, r9
 8003f44:	d00b      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003f46:	4bbf      	ldr	r3, [pc, #764]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f4c:	f023 010c 	bic.w	r1, r3, #12
 8003f50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f56:	4abb      	ldr	r2, [pc, #748]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f002 0a04 	and.w	sl, r2, #4
 8003f6a:	f04f 0b00 	mov.w	fp, #0
 8003f6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f72:	d00b      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003f74:	4bb3      	ldr	r3, [pc, #716]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f7a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003f7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f84:	4aaf      	ldr	r2, [pc, #700]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f86:	430b      	orrs	r3, r1
 8003f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f002 0308 	and.w	r3, r2, #8
 8003f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fa2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003fac:	4ba5      	ldr	r3, [pc, #660]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbc:	4aa1      	ldr	r2, [pc, #644]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f002 0310 	and.w	r3, r2, #16
 8003fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003fda:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	d00b      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003fe4:	4b97      	ldr	r3, [pc, #604]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff4:	4a93      	ldr	r2, [pc, #588]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	f002 0320 	and.w	r3, r2, #32
 8004008:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004012:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004016:	460b      	mov	r3, r1
 8004018:	4313      	orrs	r3, r2
 800401a:	d00b      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800401c:	4b89      	ldr	r3, [pc, #548]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800401e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004022:	f023 0107 	bic.w	r1, r3, #7
 8004026:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800402a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800402c:	4a85      	ldr	r2, [pc, #532]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800402e:	430b      	orrs	r3, r1
 8004030:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004040:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004044:	2300      	movs	r3, #0
 8004046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800404a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800404e:	460b      	mov	r3, r1
 8004050:	4313      	orrs	r3, r2
 8004052:	d00b      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004054:	4b7b      	ldr	r3, [pc, #492]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800405a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800405e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004062:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004064:	4a77      	ldr	r2, [pc, #476]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004066:	430b      	orrs	r3, r1
 8004068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800406c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004078:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004082:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004086:	460b      	mov	r3, r1
 8004088:	4313      	orrs	r3, r2
 800408a:	d00b      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800408c:	4b6d      	ldr	r3, [pc, #436]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800408e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004092:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004096:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800409a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800409c:	4a69      	ldr	r2, [pc, #420]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800409e:	430b      	orrs	r3, r1
 80040a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80040b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040be:	460b      	mov	r3, r1
 80040c0:	4313      	orrs	r3, r2
 80040c2:	d00b      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80040c4:	4b5f      	ldr	r3, [pc, #380]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80040ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80040ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d4:	4a5b      	ldr	r2, [pc, #364]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040d6:	430b      	orrs	r3, r1
 80040d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80040e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80040f6:	460b      	mov	r3, r1
 80040f8:	4313      	orrs	r3, r2
 80040fa:	d00b      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80040fc:	4b51      	ldr	r3, [pc, #324]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004102:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800410a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800410c:	4a4d      	ldr	r2, [pc, #308]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800410e:	430b      	orrs	r3, r1
 8004110:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004120:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800412a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800412e:	460b      	mov	r3, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	d00b      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004134:	4b43      	ldr	r3, [pc, #268]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800413a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800413e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004142:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004144:	4a3f      	ldr	r2, [pc, #252]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004146:	430b      	orrs	r3, r1
 8004148:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800414c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004158:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800415c:	2300      	movs	r3, #0
 800415e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004162:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004166:	460b      	mov	r3, r1
 8004168:	4313      	orrs	r3, r2
 800416a:	d00b      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800416c:	4b35      	ldr	r3, [pc, #212]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800416e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004172:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800417a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800417c:	4a31      	ldr	r2, [pc, #196]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800417e:	430b      	orrs	r3, r1
 8004180:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004190:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004192:	2300      	movs	r3, #0
 8004194:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004196:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800419a:	460b      	mov	r3, r1
 800419c:	4313      	orrs	r3, r2
 800419e:	d00c      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80041a0:	4b28      	ldr	r3, [pc, #160]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041b2:	4a24      	ldr	r2, [pc, #144]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041b4:	430b      	orrs	r3, r1
 80041b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80041c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80041c8:	2300      	movs	r3, #0
 80041ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80041cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80041d0:	460b      	mov	r3, r1
 80041d2:	4313      	orrs	r3, r2
 80041d4:	d04f      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80041d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041de:	2b80      	cmp	r3, #128	@ 0x80
 80041e0:	d02d      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x352>
 80041e2:	2b80      	cmp	r3, #128	@ 0x80
 80041e4:	d827      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80041e6:	2b60      	cmp	r3, #96	@ 0x60
 80041e8:	d02e      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80041ea:	2b60      	cmp	r3, #96	@ 0x60
 80041ec:	d823      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80041ee:	2b40      	cmp	r3, #64	@ 0x40
 80041f0:	d006      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80041f2:	2b40      	cmp	r3, #64	@ 0x40
 80041f4:	d81f      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x322>
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d011      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80041fe:	e01a      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004200:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004204:	4a0f      	ldr	r2, [pc, #60]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800420a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800420c:	e01d      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800420e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004212:	3308      	adds	r3, #8
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fc0d 	bl	8004a34 <RCCEx_PLL2_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004220:	e013      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004226:	332c      	adds	r3, #44	@ 0x2c
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fc9b 	bl	8004b64 <RCCEx_PLL3_Config>
 800422e:	4603      	mov	r3, r0
 8004230:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004234:	e009      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800423c:	e005      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800423e:	bf00      	nop
 8004240:	e003      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004242:	bf00      	nop
 8004244:	46020c00 	.word	0x46020c00
        break;
 8004248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004252:	4bb6      	ldr	r3, [pc, #728]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004254:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004258:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800425c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004264:	4ab1      	ldr	r2, [pc, #708]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004266:	430b      	orrs	r3, r1
 8004268:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800426c:	e003      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004272:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004276:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004282:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004284:	2300      	movs	r3, #0
 8004286:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004288:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800428c:	460b      	mov	r3, r1
 800428e:	4313      	orrs	r3, r2
 8004290:	d053      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004292:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429e:	d033      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a4:	d82c      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80042a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042aa:	d02f      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80042ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042b0:	d826      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80042b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b6:	d008      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042bc:	d820      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c6:	d011      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x400>
 80042c8:	e01a      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042ca:	4b98      	ldr	r3, [pc, #608]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80042cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ce:	4a97      	ldr	r2, [pc, #604]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80042d6:	e01a      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042dc:	3308      	adds	r3, #8
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fba8 	bl	8004a34 <RCCEx_PLL2_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80042ea:	e010      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042f0:	332c      	adds	r3, #44	@ 0x2c
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fc36 	bl	8004b64 <RCCEx_PLL3_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80042fe:	e006      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004306:	e002      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004308:	bf00      	nop
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800430c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10d      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004316:	4b85      	ldr	r3, [pc, #532]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004318:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800431c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004328:	4a80      	ldr	r2, [pc, #512]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800432a:	430b      	orrs	r3, r1
 800432c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004330:	e003      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004336:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800433a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004346:	663b      	str	r3, [r7, #96]	@ 0x60
 8004348:	2300      	movs	r3, #0
 800434a:	667b      	str	r3, [r7, #100]	@ 0x64
 800434c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004350:	460b      	mov	r3, r1
 8004352:	4313      	orrs	r3, r2
 8004354:	d046      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004356:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800435a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800435e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004362:	d028      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004364:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004368:	d821      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800436a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800436e:	d022      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004370:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004374:	d81b      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004376:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800437a:	d01c      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800437c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004380:	d815      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004386:	d008      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438c:	d80f      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d011      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004396:	d00e      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004398:	e009      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800439a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800439e:	3308      	adds	r3, #8
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fb47 	bl	8004a34 <RCCEx_PLL2_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80043ac:	e004      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80043b4:	e000      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80043b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10d      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80043c0:	4b5a      	ldr	r3, [pc, #360]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80043c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043c6:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80043ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043d2:	4a56      	ldr	r2, [pc, #344]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80043d4:	430b      	orrs	r3, r1
 80043d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80043da:	e003      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80043e0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80043e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80043f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043f2:	2300      	movs	r3, #0
 80043f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043fa:	460b      	mov	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	d03f      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004408:	2b04      	cmp	r3, #4
 800440a:	d81e      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800440c:	a201      	add	r2, pc, #4	@ (adr r2, 8004414 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004453 	.word	0x08004453
 8004418:	08004429 	.word	0x08004429
 800441c:	08004437 	.word	0x08004437
 8004420:	08004453 	.word	0x08004453
 8004424:	08004453 	.word	0x08004453
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004428:	4b40      	ldr	r3, [pc, #256]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800442a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442c:	4a3f      	ldr	r2, [pc, #252]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800442e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004432:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004434:	e00e      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004436:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800443a:	332c      	adds	r3, #44	@ 0x2c
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fb91 	bl	8004b64 <RCCEx_PLL3_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004448:	e004      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8004452:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004454:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10d      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800445c:	4b33      	ldr	r3, [pc, #204]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800445e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004462:	f023 0107 	bic.w	r1, r3, #7
 8004466:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	4a2f      	ldr	r2, [pc, #188]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004470:	430b      	orrs	r3, r1
 8004472:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800447c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800448c:	653b      	str	r3, [r7, #80]	@ 0x50
 800448e:	2300      	movs	r3, #0
 8004490:	657b      	str	r3, [r7, #84]	@ 0x54
 8004492:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004496:	460b      	mov	r3, r1
 8004498:	4313      	orrs	r3, r2
 800449a:	d04d      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800449c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044a8:	d028      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x610>
 80044aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044ae:	d821      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80044b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044b4:	d024      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80044b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044ba:	d81b      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80044bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044c0:	d00e      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80044c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044c6:	d815      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01b      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d0:	d110      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044d2:	4b16      	ldr	r3, [pc, #88]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80044d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d6:	4a15      	ldr	r2, [pc, #84]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044dc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80044de:	e012      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044e4:	332c      	adds	r3, #44	@ 0x2c
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fb3c 	bl	8004b64 <RCCEx_PLL3_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80044f2:	e008      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80044fa:	e004      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80044fc:	bf00      	nop
 80044fe:	e002      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004500:	bf00      	nop
 8004502:	e000      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004504:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004506:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800450a:	2b00      	cmp	r3, #0
 800450c:	d110      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800450e:	4b07      	ldr	r3, [pc, #28]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004514:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004518:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800451c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004520:	4a02      	ldr	r2, [pc, #8]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004522:	430b      	orrs	r3, r1
 8004524:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004528:	e006      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800452a:	bf00      	nop
 800452c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004530:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004534:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004546:	2300      	movs	r3, #0
 8004548:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800454a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800454e:	460b      	mov	r3, r1
 8004550:	4313      	orrs	r3, r2
 8004552:	f000 80b5 	beq.w	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004556:	2300      	movs	r3, #0
 8004558:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455c:	4b9d      	ldr	r3, [pc, #628]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	d113      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800456a:	4b9a      	ldr	r3, [pc, #616]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800456c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004570:	4a98      	ldr	r2, [pc, #608]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800457a:	4b96      	ldr	r3, [pc, #600]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800457c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004588:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 800458c:	2301      	movs	r3, #1
 800458e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004592:	4b91      	ldr	r3, [pc, #580]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004596:	4a90      	ldr	r2, [pc, #576]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800459e:	f7fc fec9 	bl	8001334 <HAL_GetTick>
 80045a2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80045a6:	e00b      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a8:	f7fc fec4 	bl	8001334 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d903      	bls.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80045be:	e005      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80045c0:	4b85      	ldr	r3, [pc, #532]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80045c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ed      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 80045cc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d165      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045d4:	4b7f      	ldr	r3, [pc, #508]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80045d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80045e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d023      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x746>
 80045ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045ee:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80045f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01b      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045fa:	4b76      	ldr	r3, [pc, #472]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80045fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004604:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004608:	4b72      	ldr	r3, [pc, #456]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800460a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800460e:	4a71      	ldr	r2, [pc, #452]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004614:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004618:	4b6e      	ldr	r3, [pc, #440]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800461a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800461e:	4a6d      	ldr	r2, [pc, #436]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004624:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004628:	4a6a      	ldr	r2, [pc, #424]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800462a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800462e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d019      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463e:	f7fc fe79 	bl	8001334 <HAL_GetTick>
 8004642:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004646:	e00d      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004648:	f7fc fe74 	bl	8001334 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004652:	1ad2      	subs	r2, r2, r3
 8004654:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004658:	429a      	cmp	r2, r3
 800465a:	d903      	bls.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8004662:	e006      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004664:	4b5b      	ldr	r3, [pc, #364]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004666:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0ea      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8004672:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10d      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800467a:	4b56      	ldr	r3, [pc, #344]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800467c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004680:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004688:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800468c:	4a51      	ldr	r2, [pc, #324]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800468e:	430b      	orrs	r3, r1
 8004690:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004694:	e008      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004696:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800469a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800469e:	e003      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80046a4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046a8:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d107      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b0:	4b48      	ldr	r3, [pc, #288]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80046b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b6:	4a47      	ldr	r2, [pc, #284]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80046b8:	f023 0304 	bic.w	r3, r3, #4
 80046bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80046c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80046cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80046ce:	2300      	movs	r3, #0
 80046d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80046d6:	460b      	mov	r3, r1
 80046d8:	4313      	orrs	r3, r2
 80046da:	d042      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80046dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046e4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80046e8:	d022      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80046ea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80046ee:	d81b      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80046f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046f4:	d011      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80046f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046fa:	d815      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d019      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004700:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004704:	d110      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004706:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800470a:	3308      	adds	r3, #8
 800470c:	4618      	mov	r0, r3
 800470e:	f000 f991 	bl	8004a34 <RCCEx_PLL2_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004718:	e00d      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800471a:	4b2e      	ldr	r3, [pc, #184]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800471c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471e:	4a2d      	ldr	r2, [pc, #180]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004724:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004726:	e006      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800472e:	e002      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004730:	bf00      	nop
 8004732:	e000      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004734:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004736:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10d      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800473e:	4b25      	ldr	r3, [pc, #148]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004744:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800474c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004750:	4a20      	ldr	r2, [pc, #128]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004752:	430b      	orrs	r3, r1
 8004754:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004758:	e003      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800475e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004762:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800476e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004770:	2300      	movs	r3, #0
 8004772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004774:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004778:	460b      	mov	r3, r1
 800477a:	4313      	orrs	r3, r2
 800477c:	d032      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800477e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004782:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478a:	d00b      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800478c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004790:	d804      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479a:	d007      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80047a2:	e004      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80047a4:	bf00      	nop
 80047a6:	e002      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80047a8:	bf00      	nop
 80047aa:	e000      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80047ac:	bf00      	nop
    }
    if (ret == HAL_OK)
 80047ae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d112      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80047b6:	4b07      	ldr	r3, [pc, #28]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80047b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047bc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047c8:	4a02      	ldr	r2, [pc, #8]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80047ca:	430b      	orrs	r3, r1
 80047cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80047d0:	e008      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80047d2:	bf00      	nop
 80047d4:	46020c00 	.word	0x46020c00
 80047d8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047dc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80047e0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80047e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80047f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80047f2:	2300      	movs	r3, #0
 80047f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047fa:	460b      	mov	r3, r1
 80047fc:	4313      	orrs	r3, r2
 80047fe:	d019      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004800:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004804:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004808:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800480c:	d105      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800480e:	4b88      	ldr	r3, [pc, #544]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	4a87      	ldr	r2, [pc, #540]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004818:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800481a:	4b85      	ldr	r3, [pc, #532]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800481c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004820:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004828:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800482c:	4a80      	ldr	r2, [pc, #512]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800482e:	430b      	orrs	r3, r1
 8004830:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004842:	2300      	movs	r3, #0
 8004844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004846:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d00c      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004850:	4b77      	ldr	r3, [pc, #476]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004856:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800485a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800485e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004862:	4973      	ldr	r1, [pc, #460]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800486a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	2300      	movs	r3, #0
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
 800487c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004880:	460b      	mov	r3, r1
 8004882:	4313      	orrs	r3, r2
 8004884:	d00c      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004886:	4b6a      	ldr	r3, [pc, #424]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800488c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004898:	4965      	ldr	r1, [pc, #404]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80048a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048b6:	460b      	mov	r3, r1
 80048b8:	4313      	orrs	r3, r2
 80048ba:	d00c      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80048bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80048be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048c2:	f023 0218 	bic.w	r2, r3, #24
 80048c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80048ce:	4958      	ldr	r1, [pc, #352]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80048d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048ec:	460b      	mov	r3, r1
 80048ee:	4313      	orrs	r3, r2
 80048f0:	d032      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80048f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048fe:	d105      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004900:	4b4b      	ldr	r3, [pc, #300]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	4a4a      	ldr	r2, [pc, #296]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800490a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800490c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004910:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004914:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004918:	d108      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800491a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800491e:	3308      	adds	r3, #8
 8004920:	4618      	mov	r0, r3
 8004922:	f000 f887 	bl	8004a34 <RCCEx_PLL2_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 800492c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10d      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004934:	4b3e      	ldr	r3, [pc, #248]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004936:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800493a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800493e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004942:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004946:	493a      	ldr	r1, [pc, #232]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800494e:	e003      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004950:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004954:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004958:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800496e:	460b      	mov	r3, r1
 8004970:	4313      	orrs	r3, r2
 8004972:	d03a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004974:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800497c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004980:	d00e      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004982:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004986:	d815      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d017      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800498c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004990:	d110      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004992:	4b27      	ldr	r3, [pc, #156]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004996:	4a26      	ldr	r2, [pc, #152]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800499c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800499e:	e00e      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049a4:	3308      	adds	r3, #8
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 f844 	bl	8004a34 <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80049b2:	e004      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80049ba:	e000      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80049bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80049be:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10d      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80049c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80049c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d8:	4915      	ldr	r1, [pc, #84]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80049e0:	e003      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80049e6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80049ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	2300      	movs	r3, #0
 80049fa:	607b      	str	r3, [r7, #4]
 80049fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a00:	460b      	mov	r3, r1
 8004a02:	4313      	orrs	r3, r2
 8004a04:	d00c      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004a06:	4b0a      	ldr	r3, [pc, #40]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a0c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004a10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a18:	4905      	ldr	r1, [pc, #20]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004a20:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	37e0      	adds	r7, #224	@ 0xe0
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2e:	bf00      	nop
 8004a30:	46020c00 	.word	0x46020c00

08004a34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004a3c:	4b47      	ldr	r3, [pc, #284]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a46      	ldr	r2, [pc, #280]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004a42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a48:	f7fc fc74 	bl	8001334 <HAL_GetTick>
 8004a4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a4e:	e008      	b.n	8004a62 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a50:	f7fc fc70 	bl	8001334 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e077      	b.n	8004b52 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a62:	4b3e      	ldr	r3, [pc, #248]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6811      	ldr	r1, [r2, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6852      	ldr	r2, [r2, #4]
 8004a82:	3a01      	subs	r2, #1
 8004a84:	0212      	lsls	r2, r2, #8
 8004a86:	430a      	orrs	r2, r1
 8004a88:	4934      	ldr	r1, [pc, #208]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004a8e:	4b33      	ldr	r3, [pc, #204]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004a90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a92:	4b33      	ldr	r3, [pc, #204]	@ (8004b60 <RCCEx_PLL2_Config+0x12c>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6892      	ldr	r2, [r2, #8]
 8004a9a:	3a01      	subs	r2, #1
 8004a9c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	68d2      	ldr	r2, [r2, #12]
 8004aa4:	3a01      	subs	r2, #1
 8004aa6:	0252      	lsls	r2, r2, #9
 8004aa8:	b292      	uxth	r2, r2
 8004aaa:	4311      	orrs	r1, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6912      	ldr	r2, [r2, #16]
 8004ab0:	3a01      	subs	r2, #1
 8004ab2:	0412      	lsls	r2, r2, #16
 8004ab4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004ab8:	4311      	orrs	r1, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6952      	ldr	r2, [r2, #20]
 8004abe:	3a01      	subs	r2, #1
 8004ac0:	0612      	lsls	r2, r2, #24
 8004ac2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	4924      	ldr	r1, [pc, #144]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004ace:	4b23      	ldr	r3, [pc, #140]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad2:	f023 020c 	bic.w	r2, r3, #12
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	4920      	ldr	r1, [pc, #128]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	491c      	ldr	r1, [pc, #112]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004aee:	4b1b      	ldr	r3, [pc, #108]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	4a1a      	ldr	r2, [pc, #104]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004af4:	f023 0310 	bic.w	r3, r3, #16
 8004af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004afa:	4b18      	ldr	r3, [pc, #96]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b02:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	69d2      	ldr	r2, [r2, #28]
 8004b0a:	00d2      	lsls	r2, r2, #3
 8004b0c:	4913      	ldr	r1, [pc, #76]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004b12:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b16:	4a11      	ldr	r2, [pc, #68]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004b18:	f043 0310 	orr.w	r3, r3, #16
 8004b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a0e      	ldr	r2, [pc, #56]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004b24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b28:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b2a:	f7fc fc03 	bl	8001334 <HAL_GetTick>
 8004b2e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b30:	e008      	b.n	8004b44 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b32:	f7fc fbff 	bl	8001334 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e006      	b.n	8004b52 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b44:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <RCCEx_PLL2_Config+0x128>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0

}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	46020c00 	.word	0x46020c00
 8004b60:	80800000 	.word	0x80800000

08004b64 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004b6c:	4b47      	ldr	r3, [pc, #284]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a46      	ldr	r2, [pc, #280]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b78:	f7fc fbdc 	bl	8001334 <HAL_GetTick>
 8004b7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b7e:	e008      	b.n	8004b92 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b80:	f7fc fbd8 	bl	8001334 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e077      	b.n	8004c82 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b92:	4b3e      	ldr	r3, [pc, #248]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ba6:	f023 0303 	bic.w	r3, r3, #3
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6811      	ldr	r1, [r2, #0]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6852      	ldr	r2, [r2, #4]
 8004bb2:	3a01      	subs	r2, #1
 8004bb4:	0212      	lsls	r2, r2, #8
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	4934      	ldr	r1, [pc, #208]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	630b      	str	r3, [r1, #48]	@ 0x30
 8004bbe:	4b33      	ldr	r3, [pc, #204]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bc2:	4b33      	ldr	r3, [pc, #204]	@ (8004c90 <RCCEx_PLL3_Config+0x12c>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6892      	ldr	r2, [r2, #8]
 8004bca:	3a01      	subs	r2, #1
 8004bcc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68d2      	ldr	r2, [r2, #12]
 8004bd4:	3a01      	subs	r2, #1
 8004bd6:	0252      	lsls	r2, r2, #9
 8004bd8:	b292      	uxth	r2, r2
 8004bda:	4311      	orrs	r1, r2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6912      	ldr	r2, [r2, #16]
 8004be0:	3a01      	subs	r2, #1
 8004be2:	0412      	lsls	r2, r2, #16
 8004be4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004be8:	4311      	orrs	r1, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6952      	ldr	r2, [r2, #20]
 8004bee:	3a01      	subs	r2, #1
 8004bf0:	0612      	lsls	r2, r2, #24
 8004bf2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	4924      	ldr	r1, [pc, #144]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004bfe:	4b23      	ldr	r3, [pc, #140]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	f023 020c 	bic.w	r2, r3, #12
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	4920      	ldr	r1, [pc, #128]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004c10:	4b1e      	ldr	r3, [pc, #120]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	491c      	ldr	r1, [pc, #112]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c22:	4a1a      	ldr	r2, [pc, #104]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c24:	f023 0310 	bic.w	r3, r3, #16
 8004c28:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c2a:	4b18      	ldr	r3, [pc, #96]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c32:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	69d2      	ldr	r2, [r2, #28]
 8004c3a:	00d2      	lsls	r2, r2, #3
 8004c3c:	4913      	ldr	r1, [pc, #76]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004c42:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	4a11      	ldr	r2, [pc, #68]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c48:	f043 0310 	orr.w	r3, r3, #16
 8004c4c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a0e      	ldr	r2, [pc, #56]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c58:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c5a:	f7fc fb6b 	bl	8001334 <HAL_GetTick>
 8004c5e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c60:	e008      	b.n	8004c74 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c62:	f7fc fb67 	bl	8001334 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e006      	b.n	8004c82 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <RCCEx_PLL3_Config+0x128>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	46020c00 	.word	0x46020c00
 8004c90:	80800000 	.word	0x80800000

08004c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e049      	b.n	8004d3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fb ffbc 	bl	8000c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	f000 fbfe 	bl	80054d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e049      	b.n	8004de8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f841 	bl	8004df0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f000 fba7 	bl	80054d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <HAL_TIM_PWM_Start+0x24>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e03c      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x9e>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d109      	bne.n	8004e42 <HAL_TIM_PWM_Start+0x3e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	e02f      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x9e>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d109      	bne.n	8004e5c <HAL_TIM_PWM_Start+0x58>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e022      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x9e>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b0c      	cmp	r3, #12
 8004e60:	d109      	bne.n	8004e76 <HAL_TIM_PWM_Start+0x72>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	bf14      	ite	ne
 8004e6e:	2301      	movne	r3, #1
 8004e70:	2300      	moveq	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	e015      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x9e>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d109      	bne.n	8004e90 <HAL_TIM_PWM_Start+0x8c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e008      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x9e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	bf14      	ite	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e0d8      	b.n	800505c <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d104      	bne.n	8004eba <HAL_TIM_PWM_Start+0xb6>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eb8:	e023      	b.n	8004f02 <HAL_TIM_PWM_Start+0xfe>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d104      	bne.n	8004eca <HAL_TIM_PWM_Start+0xc6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ec8:	e01b      	b.n	8004f02 <HAL_TIM_PWM_Start+0xfe>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_PWM_Start+0xd6>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ed8:	e013      	b.n	8004f02 <HAL_TIM_PWM_Start+0xfe>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	d104      	bne.n	8004eea <HAL_TIM_PWM_Start+0xe6>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ee8:	e00b      	b.n	8004f02 <HAL_TIM_PWM_Start+0xfe>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d104      	bne.n	8004efa <HAL_TIM_PWM_Start+0xf6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ef8:	e003      	b.n	8004f02 <HAL_TIM_PWM_Start+0xfe>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2201      	movs	r2, #1
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 f854 	bl	8005fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a53      	ldr	r2, [pc, #332]	@ (8005064 <HAL_TIM_PWM_Start+0x260>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d02c      	beq.n	8004f74 <HAL_TIM_PWM_Start+0x170>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a52      	ldr	r2, [pc, #328]	@ (8005068 <HAL_TIM_PWM_Start+0x264>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d027      	beq.n	8004f74 <HAL_TIM_PWM_Start+0x170>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a50      	ldr	r2, [pc, #320]	@ (800506c <HAL_TIM_PWM_Start+0x268>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d022      	beq.n	8004f74 <HAL_TIM_PWM_Start+0x170>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a4f      	ldr	r2, [pc, #316]	@ (8005070 <HAL_TIM_PWM_Start+0x26c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d01d      	beq.n	8004f74 <HAL_TIM_PWM_Start+0x170>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a4d      	ldr	r2, [pc, #308]	@ (8005074 <HAL_TIM_PWM_Start+0x270>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d018      	beq.n	8004f74 <HAL_TIM_PWM_Start+0x170>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a4c      	ldr	r2, [pc, #304]	@ (8005078 <HAL_TIM_PWM_Start+0x274>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d013      	beq.n	8004f74 <HAL_TIM_PWM_Start+0x170>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a4a      	ldr	r2, [pc, #296]	@ (800507c <HAL_TIM_PWM_Start+0x278>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00e      	beq.n	8004f74 <HAL_TIM_PWM_Start+0x170>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a49      	ldr	r2, [pc, #292]	@ (8005080 <HAL_TIM_PWM_Start+0x27c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d009      	beq.n	8004f74 <HAL_TIM_PWM_Start+0x170>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a47      	ldr	r2, [pc, #284]	@ (8005084 <HAL_TIM_PWM_Start+0x280>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d004      	beq.n	8004f74 <HAL_TIM_PWM_Start+0x170>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a46      	ldr	r2, [pc, #280]	@ (8005088 <HAL_TIM_PWM_Start+0x284>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d101      	bne.n	8004f78 <HAL_TIM_PWM_Start+0x174>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <HAL_TIM_PWM_Start+0x176>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a34      	ldr	r2, [pc, #208]	@ (8005064 <HAL_TIM_PWM_Start+0x260>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d040      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a32      	ldr	r2, [pc, #200]	@ (8005068 <HAL_TIM_PWM_Start+0x264>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d03b      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004faa:	d036      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fb4:	d031      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a34      	ldr	r2, [pc, #208]	@ (800508c <HAL_TIM_PWM_Start+0x288>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d02c      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a32      	ldr	r2, [pc, #200]	@ (8005090 <HAL_TIM_PWM_Start+0x28c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d027      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a31      	ldr	r2, [pc, #196]	@ (8005094 <HAL_TIM_PWM_Start+0x290>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d022      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a2f      	ldr	r2, [pc, #188]	@ (8005098 <HAL_TIM_PWM_Start+0x294>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d01d      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800509c <HAL_TIM_PWM_Start+0x298>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d018      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a2c      	ldr	r2, [pc, #176]	@ (80050a0 <HAL_TIM_PWM_Start+0x29c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800506c <HAL_TIM_PWM_Start+0x268>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00e      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1b      	ldr	r2, [pc, #108]	@ (8005070 <HAL_TIM_PWM_Start+0x26c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d009      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1a      	ldr	r2, [pc, #104]	@ (8005074 <HAL_TIM_PWM_Start+0x270>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d004      	beq.n	800501a <HAL_TIM_PWM_Start+0x216>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a18      	ldr	r2, [pc, #96]	@ (8005078 <HAL_TIM_PWM_Start+0x274>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d115      	bne.n	8005046 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	4b20      	ldr	r3, [pc, #128]	@ (80050a4 <HAL_TIM_PWM_Start+0x2a0>)
 8005022:	4013      	ands	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b06      	cmp	r3, #6
 800502a:	d015      	beq.n	8005058 <HAL_TIM_PWM_Start+0x254>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005032:	d011      	beq.n	8005058 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005044:	e008      	b.n	8005058 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e000      	b.n	800505a <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005058:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40012c00 	.word	0x40012c00
 8005068:	50012c00 	.word	0x50012c00
 800506c:	40013400 	.word	0x40013400
 8005070:	50013400 	.word	0x50013400
 8005074:	40014000 	.word	0x40014000
 8005078:	50014000 	.word	0x50014000
 800507c:	40014400 	.word	0x40014400
 8005080:	50014400 	.word	0x50014400
 8005084:	40014800 	.word	0x40014800
 8005088:	50014800 	.word	0x50014800
 800508c:	40000400 	.word	0x40000400
 8005090:	50000400 	.word	0x50000400
 8005094:	40000800 	.word	0x40000800
 8005098:	50000800 	.word	0x50000800
 800509c:	40000c00 	.word	0x40000c00
 80050a0:	50000c00 	.word	0x50000c00
 80050a4:	00010007 	.word	0x00010007

080050a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e0ff      	b.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b14      	cmp	r3, #20
 80050d2:	f200 80f0 	bhi.w	80052b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050d6:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	08005131 	.word	0x08005131
 80050e0:	080052b7 	.word	0x080052b7
 80050e4:	080052b7 	.word	0x080052b7
 80050e8:	080052b7 	.word	0x080052b7
 80050ec:	08005171 	.word	0x08005171
 80050f0:	080052b7 	.word	0x080052b7
 80050f4:	080052b7 	.word	0x080052b7
 80050f8:	080052b7 	.word	0x080052b7
 80050fc:	080051b3 	.word	0x080051b3
 8005100:	080052b7 	.word	0x080052b7
 8005104:	080052b7 	.word	0x080052b7
 8005108:	080052b7 	.word	0x080052b7
 800510c:	080051f3 	.word	0x080051f3
 8005110:	080052b7 	.word	0x080052b7
 8005114:	080052b7 	.word	0x080052b7
 8005118:	080052b7 	.word	0x080052b7
 800511c:	08005235 	.word	0x08005235
 8005120:	080052b7 	.word	0x080052b7
 8005124:	080052b7 	.word	0x080052b7
 8005128:	080052b7 	.word	0x080052b7
 800512c:	08005275 	.word	0x08005275
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 facc 	bl	80056d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0208 	orr.w	r2, r2, #8
 800514a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0204 	bic.w	r2, r2, #4
 800515a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6999      	ldr	r1, [r3, #24]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	619a      	str	r2, [r3, #24]
      break;
 800516e:	e0a5      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fb6e 	bl	8005858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800518a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800519a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6999      	ldr	r1, [r3, #24]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	021a      	lsls	r2, r3, #8
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	619a      	str	r2, [r3, #24]
      break;
 80051b0:	e084      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fbfd 	bl	80059b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0208 	orr.w	r2, r2, #8
 80051cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0204 	bic.w	r2, r2, #4
 80051dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69d9      	ldr	r1, [r3, #28]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	61da      	str	r2, [r3, #28]
      break;
 80051f0:	e064      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fc8b 	bl	8005b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800520c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800521c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69d9      	ldr	r1, [r3, #28]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	021a      	lsls	r2, r3, #8
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	61da      	str	r2, [r3, #28]
      break;
 8005232:	e043      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fd1a 	bl	8005c74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0208 	orr.w	r2, r2, #8
 800524e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0204 	bic.w	r2, r2, #4
 800525e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005272:	e023      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fd7c 	bl	8005d78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800528e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800529e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	021a      	lsls	r2, r3, #8
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80052b4:	e002      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	75fb      	strb	r3, [r7, #23]
      break;
 80052ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop

080052d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_TIM_ConfigClockSource+0x1c>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e0e6      	b.n	80054ba <HAL_TIM_ConfigClockSource+0x1ea>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800530a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800530e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a67      	ldr	r2, [pc, #412]	@ (80054c4 <HAL_TIM_ConfigClockSource+0x1f4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	f000 80b1 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1be>
 800532c:	4a65      	ldr	r2, [pc, #404]	@ (80054c4 <HAL_TIM_ConfigClockSource+0x1f4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	f200 80b6 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005334:	4a64      	ldr	r2, [pc, #400]	@ (80054c8 <HAL_TIM_ConfigClockSource+0x1f8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	f000 80a9 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1be>
 800533c:	4a62      	ldr	r2, [pc, #392]	@ (80054c8 <HAL_TIM_ConfigClockSource+0x1f8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	f200 80ae 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005344:	4a61      	ldr	r2, [pc, #388]	@ (80054cc <HAL_TIM_ConfigClockSource+0x1fc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	f000 80a1 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1be>
 800534c:	4a5f      	ldr	r2, [pc, #380]	@ (80054cc <HAL_TIM_ConfigClockSource+0x1fc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	f200 80a6 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005354:	4a5e      	ldr	r2, [pc, #376]	@ (80054d0 <HAL_TIM_ConfigClockSource+0x200>)
 8005356:	4293      	cmp	r3, r2
 8005358:	f000 8099 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1be>
 800535c:	4a5c      	ldr	r2, [pc, #368]	@ (80054d0 <HAL_TIM_ConfigClockSource+0x200>)
 800535e:	4293      	cmp	r3, r2
 8005360:	f200 809e 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005364:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005368:	f000 8091 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1be>
 800536c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005370:	f200 8096 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005374:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005378:	f000 8089 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1be>
 800537c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005380:	f200 808e 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005388:	d03e      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0x138>
 800538a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538e:	f200 8087 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005396:	f000 8086 	beq.w	80054a6 <HAL_TIM_ConfigClockSource+0x1d6>
 800539a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800539e:	d87f      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 80053a0:	2b70      	cmp	r3, #112	@ 0x70
 80053a2:	d01a      	beq.n	80053da <HAL_TIM_ConfigClockSource+0x10a>
 80053a4:	2b70      	cmp	r3, #112	@ 0x70
 80053a6:	d87b      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 80053a8:	2b60      	cmp	r3, #96	@ 0x60
 80053aa:	d050      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x17e>
 80053ac:	2b60      	cmp	r3, #96	@ 0x60
 80053ae:	d877      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 80053b0:	2b50      	cmp	r3, #80	@ 0x50
 80053b2:	d03c      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x15e>
 80053b4:	2b50      	cmp	r3, #80	@ 0x50
 80053b6:	d873      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 80053b8:	2b40      	cmp	r3, #64	@ 0x40
 80053ba:	d058      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x19e>
 80053bc:	2b40      	cmp	r3, #64	@ 0x40
 80053be:	d86f      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 80053c0:	2b30      	cmp	r3, #48	@ 0x30
 80053c2:	d064      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x1be>
 80053c4:	2b30      	cmp	r3, #48	@ 0x30
 80053c6:	d86b      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d060      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x1be>
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d867      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d05c      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x1be>
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d05a      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x1be>
 80053d8:	e062      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ea:	f000 fdc5 	bl	8005f78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	609a      	str	r2, [r3, #8]
      break;
 8005406:	e04f      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005418:	f000 fdae 	bl	8005f78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800542a:	609a      	str	r2, [r3, #8]
      break;
 800542c:	e03c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800543a:	461a      	mov	r2, r3
 800543c:	f000 fd20 	bl	8005e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2150      	movs	r1, #80	@ 0x50
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fd79 	bl	8005f3e <TIM_ITRx_SetConfig>
      break;
 800544c:	e02c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800545a:	461a      	mov	r2, r3
 800545c:	f000 fd3f 	bl	8005ede <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2160      	movs	r1, #96	@ 0x60
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fd69 	bl	8005f3e <TIM_ITRx_SetConfig>
      break;
 800546c:	e01c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800547a:	461a      	mov	r2, r3
 800547c:	f000 fd00 	bl	8005e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2140      	movs	r1, #64	@ 0x40
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fd59 	bl	8005f3e <TIM_ITRx_SetConfig>
      break;
 800548c:	e00c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f000 fd50 	bl	8005f3e <TIM_ITRx_SetConfig>
      break;
 800549e:	e003      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
      break;
 80054a4:	e000      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80054a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	00100070 	.word	0x00100070
 80054c8:	00100040 	.word	0x00100040
 80054cc:	00100030 	.word	0x00100030
 80054d0:	00100020 	.word	0x00100020

080054d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a6b      	ldr	r2, [pc, #428]	@ (8005694 <TIM_Base_SetConfig+0x1c0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d02b      	beq.n	8005544 <TIM_Base_SetConfig+0x70>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a6a      	ldr	r2, [pc, #424]	@ (8005698 <TIM_Base_SetConfig+0x1c4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d027      	beq.n	8005544 <TIM_Base_SetConfig+0x70>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054fa:	d023      	beq.n	8005544 <TIM_Base_SetConfig+0x70>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005502:	d01f      	beq.n	8005544 <TIM_Base_SetConfig+0x70>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a65      	ldr	r2, [pc, #404]	@ (800569c <TIM_Base_SetConfig+0x1c8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d01b      	beq.n	8005544 <TIM_Base_SetConfig+0x70>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a64      	ldr	r2, [pc, #400]	@ (80056a0 <TIM_Base_SetConfig+0x1cc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d017      	beq.n	8005544 <TIM_Base_SetConfig+0x70>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a63      	ldr	r2, [pc, #396]	@ (80056a4 <TIM_Base_SetConfig+0x1d0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d013      	beq.n	8005544 <TIM_Base_SetConfig+0x70>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a62      	ldr	r2, [pc, #392]	@ (80056a8 <TIM_Base_SetConfig+0x1d4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00f      	beq.n	8005544 <TIM_Base_SetConfig+0x70>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a61      	ldr	r2, [pc, #388]	@ (80056ac <TIM_Base_SetConfig+0x1d8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00b      	beq.n	8005544 <TIM_Base_SetConfig+0x70>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a60      	ldr	r2, [pc, #384]	@ (80056b0 <TIM_Base_SetConfig+0x1dc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d007      	beq.n	8005544 <TIM_Base_SetConfig+0x70>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a5f      	ldr	r2, [pc, #380]	@ (80056b4 <TIM_Base_SetConfig+0x1e0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_Base_SetConfig+0x70>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a5e      	ldr	r2, [pc, #376]	@ (80056b8 <TIM_Base_SetConfig+0x1e4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d108      	bne.n	8005556 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800554a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a4e      	ldr	r2, [pc, #312]	@ (8005694 <TIM_Base_SetConfig+0x1c0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d043      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a4d      	ldr	r2, [pc, #308]	@ (8005698 <TIM_Base_SetConfig+0x1c4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d03f      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556c:	d03b      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005574:	d037      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a48      	ldr	r2, [pc, #288]	@ (800569c <TIM_Base_SetConfig+0x1c8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d033      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a47      	ldr	r2, [pc, #284]	@ (80056a0 <TIM_Base_SetConfig+0x1cc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d02f      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a46      	ldr	r2, [pc, #280]	@ (80056a4 <TIM_Base_SetConfig+0x1d0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d02b      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a45      	ldr	r2, [pc, #276]	@ (80056a8 <TIM_Base_SetConfig+0x1d4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d027      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a44      	ldr	r2, [pc, #272]	@ (80056ac <TIM_Base_SetConfig+0x1d8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d023      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a43      	ldr	r2, [pc, #268]	@ (80056b0 <TIM_Base_SetConfig+0x1dc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01f      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a42      	ldr	r2, [pc, #264]	@ (80056b4 <TIM_Base_SetConfig+0x1e0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d01b      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a41      	ldr	r2, [pc, #260]	@ (80056b8 <TIM_Base_SetConfig+0x1e4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d017      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a40      	ldr	r2, [pc, #256]	@ (80056bc <TIM_Base_SetConfig+0x1e8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a3f      	ldr	r2, [pc, #252]	@ (80056c0 <TIM_Base_SetConfig+0x1ec>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00f      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a3e      	ldr	r2, [pc, #248]	@ (80056c4 <TIM_Base_SetConfig+0x1f0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00b      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a3d      	ldr	r2, [pc, #244]	@ (80056c8 <TIM_Base_SetConfig+0x1f4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d007      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a3c      	ldr	r2, [pc, #240]	@ (80056cc <TIM_Base_SetConfig+0x1f8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_Base_SetConfig+0x112>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a3b      	ldr	r2, [pc, #236]	@ (80056d0 <TIM_Base_SetConfig+0x1fc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d108      	bne.n	80055f8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a1e      	ldr	r2, [pc, #120]	@ (8005694 <TIM_Base_SetConfig+0x1c0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d023      	beq.n	8005666 <TIM_Base_SetConfig+0x192>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1d      	ldr	r2, [pc, #116]	@ (8005698 <TIM_Base_SetConfig+0x1c4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01f      	beq.n	8005666 <TIM_Base_SetConfig+0x192>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a22      	ldr	r2, [pc, #136]	@ (80056b4 <TIM_Base_SetConfig+0x1e0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d01b      	beq.n	8005666 <TIM_Base_SetConfig+0x192>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a21      	ldr	r2, [pc, #132]	@ (80056b8 <TIM_Base_SetConfig+0x1e4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d017      	beq.n	8005666 <TIM_Base_SetConfig+0x192>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a20      	ldr	r2, [pc, #128]	@ (80056bc <TIM_Base_SetConfig+0x1e8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <TIM_Base_SetConfig+0x192>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1f      	ldr	r2, [pc, #124]	@ (80056c0 <TIM_Base_SetConfig+0x1ec>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00f      	beq.n	8005666 <TIM_Base_SetConfig+0x192>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a1e      	ldr	r2, [pc, #120]	@ (80056c4 <TIM_Base_SetConfig+0x1f0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00b      	beq.n	8005666 <TIM_Base_SetConfig+0x192>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a1d      	ldr	r2, [pc, #116]	@ (80056c8 <TIM_Base_SetConfig+0x1f4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <TIM_Base_SetConfig+0x192>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1c      	ldr	r2, [pc, #112]	@ (80056cc <TIM_Base_SetConfig+0x1f8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_Base_SetConfig+0x192>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a1b      	ldr	r2, [pc, #108]	@ (80056d0 <TIM_Base_SetConfig+0x1fc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d103      	bne.n	800566e <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f043 0204 	orr.w	r2, r3, #4
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	601a      	str	r2, [r3, #0]
}
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00
 8005698:	50012c00 	.word	0x50012c00
 800569c:	40000400 	.word	0x40000400
 80056a0:	50000400 	.word	0x50000400
 80056a4:	40000800 	.word	0x40000800
 80056a8:	50000800 	.word	0x50000800
 80056ac:	40000c00 	.word	0x40000c00
 80056b0:	50000c00 	.word	0x50000c00
 80056b4:	40013400 	.word	0x40013400
 80056b8:	50013400 	.word	0x50013400
 80056bc:	40014000 	.word	0x40014000
 80056c0:	50014000 	.word	0x50014000
 80056c4:	40014400 	.word	0x40014400
 80056c8:	50014400 	.word	0x50014400
 80056cc:	40014800 	.word	0x40014800
 80056d0:	50014800 	.word	0x50014800

080056d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f023 0201 	bic.w	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0303 	bic.w	r3, r3, #3
 800570e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f023 0302 	bic.w	r3, r3, #2
 8005720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a40      	ldr	r2, [pc, #256]	@ (8005830 <TIM_OC1_SetConfig+0x15c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d023      	beq.n	800577c <TIM_OC1_SetConfig+0xa8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a3f      	ldr	r2, [pc, #252]	@ (8005834 <TIM_OC1_SetConfig+0x160>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d01f      	beq.n	800577c <TIM_OC1_SetConfig+0xa8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a3e      	ldr	r2, [pc, #248]	@ (8005838 <TIM_OC1_SetConfig+0x164>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d01b      	beq.n	800577c <TIM_OC1_SetConfig+0xa8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a3d      	ldr	r2, [pc, #244]	@ (800583c <TIM_OC1_SetConfig+0x168>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d017      	beq.n	800577c <TIM_OC1_SetConfig+0xa8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a3c      	ldr	r2, [pc, #240]	@ (8005840 <TIM_OC1_SetConfig+0x16c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d013      	beq.n	800577c <TIM_OC1_SetConfig+0xa8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3b      	ldr	r2, [pc, #236]	@ (8005844 <TIM_OC1_SetConfig+0x170>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00f      	beq.n	800577c <TIM_OC1_SetConfig+0xa8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a3a      	ldr	r2, [pc, #232]	@ (8005848 <TIM_OC1_SetConfig+0x174>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00b      	beq.n	800577c <TIM_OC1_SetConfig+0xa8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a39      	ldr	r2, [pc, #228]	@ (800584c <TIM_OC1_SetConfig+0x178>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d007      	beq.n	800577c <TIM_OC1_SetConfig+0xa8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a38      	ldr	r2, [pc, #224]	@ (8005850 <TIM_OC1_SetConfig+0x17c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_OC1_SetConfig+0xa8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a37      	ldr	r2, [pc, #220]	@ (8005854 <TIM_OC1_SetConfig+0x180>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d10c      	bne.n	8005796 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0308 	bic.w	r3, r3, #8
 8005782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 0304 	bic.w	r3, r3, #4
 8005794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a25      	ldr	r2, [pc, #148]	@ (8005830 <TIM_OC1_SetConfig+0x15c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d023      	beq.n	80057e6 <TIM_OC1_SetConfig+0x112>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a24      	ldr	r2, [pc, #144]	@ (8005834 <TIM_OC1_SetConfig+0x160>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01f      	beq.n	80057e6 <TIM_OC1_SetConfig+0x112>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a23      	ldr	r2, [pc, #140]	@ (8005838 <TIM_OC1_SetConfig+0x164>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01b      	beq.n	80057e6 <TIM_OC1_SetConfig+0x112>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a22      	ldr	r2, [pc, #136]	@ (800583c <TIM_OC1_SetConfig+0x168>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d017      	beq.n	80057e6 <TIM_OC1_SetConfig+0x112>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a21      	ldr	r2, [pc, #132]	@ (8005840 <TIM_OC1_SetConfig+0x16c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <TIM_OC1_SetConfig+0x112>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a20      	ldr	r2, [pc, #128]	@ (8005844 <TIM_OC1_SetConfig+0x170>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00f      	beq.n	80057e6 <TIM_OC1_SetConfig+0x112>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005848 <TIM_OC1_SetConfig+0x174>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00b      	beq.n	80057e6 <TIM_OC1_SetConfig+0x112>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a1e      	ldr	r2, [pc, #120]	@ (800584c <TIM_OC1_SetConfig+0x178>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d007      	beq.n	80057e6 <TIM_OC1_SetConfig+0x112>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005850 <TIM_OC1_SetConfig+0x17c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_OC1_SetConfig+0x112>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005854 <TIM_OC1_SetConfig+0x180>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d111      	bne.n	800580a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	621a      	str	r2, [r3, #32]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40012c00 	.word	0x40012c00
 8005834:	50012c00 	.word	0x50012c00
 8005838:	40013400 	.word	0x40013400
 800583c:	50013400 	.word	0x50013400
 8005840:	40014000 	.word	0x40014000
 8005844:	50014000 	.word	0x50014000
 8005848:	40014400 	.word	0x40014400
 800584c:	50014400 	.word	0x50014400
 8005850:	40014800 	.word	0x40014800
 8005854:	50014800 	.word	0x50014800

08005858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f023 0210 	bic.w	r2, r3, #16
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0320 	bic.w	r3, r3, #32
 80058a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a36      	ldr	r2, [pc, #216]	@ (8005990 <TIM_OC2_SetConfig+0x138>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00b      	beq.n	80058d4 <TIM_OC2_SetConfig+0x7c>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a35      	ldr	r2, [pc, #212]	@ (8005994 <TIM_OC2_SetConfig+0x13c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d007      	beq.n	80058d4 <TIM_OC2_SetConfig+0x7c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a34      	ldr	r2, [pc, #208]	@ (8005998 <TIM_OC2_SetConfig+0x140>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_OC2_SetConfig+0x7c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a33      	ldr	r2, [pc, #204]	@ (800599c <TIM_OC2_SetConfig+0x144>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d10d      	bne.n	80058f0 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a27      	ldr	r2, [pc, #156]	@ (8005990 <TIM_OC2_SetConfig+0x138>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d023      	beq.n	8005940 <TIM_OC2_SetConfig+0xe8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a26      	ldr	r2, [pc, #152]	@ (8005994 <TIM_OC2_SetConfig+0x13c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d01f      	beq.n	8005940 <TIM_OC2_SetConfig+0xe8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a25      	ldr	r2, [pc, #148]	@ (8005998 <TIM_OC2_SetConfig+0x140>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d01b      	beq.n	8005940 <TIM_OC2_SetConfig+0xe8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a24      	ldr	r2, [pc, #144]	@ (800599c <TIM_OC2_SetConfig+0x144>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d017      	beq.n	8005940 <TIM_OC2_SetConfig+0xe8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a23      	ldr	r2, [pc, #140]	@ (80059a0 <TIM_OC2_SetConfig+0x148>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d013      	beq.n	8005940 <TIM_OC2_SetConfig+0xe8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a22      	ldr	r2, [pc, #136]	@ (80059a4 <TIM_OC2_SetConfig+0x14c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00f      	beq.n	8005940 <TIM_OC2_SetConfig+0xe8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a21      	ldr	r2, [pc, #132]	@ (80059a8 <TIM_OC2_SetConfig+0x150>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00b      	beq.n	8005940 <TIM_OC2_SetConfig+0xe8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a20      	ldr	r2, [pc, #128]	@ (80059ac <TIM_OC2_SetConfig+0x154>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <TIM_OC2_SetConfig+0xe8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a1f      	ldr	r2, [pc, #124]	@ (80059b0 <TIM_OC2_SetConfig+0x158>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_OC2_SetConfig+0xe8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a1e      	ldr	r2, [pc, #120]	@ (80059b4 <TIM_OC2_SetConfig+0x15c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d113      	bne.n	8005968 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800594e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40012c00 	.word	0x40012c00
 8005994:	50012c00 	.word	0x50012c00
 8005998:	40013400 	.word	0x40013400
 800599c:	50013400 	.word	0x50013400
 80059a0:	40014000 	.word	0x40014000
 80059a4:	50014000 	.word	0x50014000
 80059a8:	40014400 	.word	0x40014400
 80059ac:	50014400 	.word	0x50014400
 80059b0:	40014800 	.word	0x40014800
 80059b4:	50014800 	.word	0x50014800

080059b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a35      	ldr	r2, [pc, #212]	@ (8005aec <TIM_OC3_SetConfig+0x134>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00b      	beq.n	8005a32 <TIM_OC3_SetConfig+0x7a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a34      	ldr	r2, [pc, #208]	@ (8005af0 <TIM_OC3_SetConfig+0x138>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d007      	beq.n	8005a32 <TIM_OC3_SetConfig+0x7a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a33      	ldr	r2, [pc, #204]	@ (8005af4 <TIM_OC3_SetConfig+0x13c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d003      	beq.n	8005a32 <TIM_OC3_SetConfig+0x7a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a32      	ldr	r2, [pc, #200]	@ (8005af8 <TIM_OC3_SetConfig+0x140>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d10d      	bne.n	8005a4e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a26      	ldr	r2, [pc, #152]	@ (8005aec <TIM_OC3_SetConfig+0x134>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d023      	beq.n	8005a9e <TIM_OC3_SetConfig+0xe6>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a25      	ldr	r2, [pc, #148]	@ (8005af0 <TIM_OC3_SetConfig+0x138>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01f      	beq.n	8005a9e <TIM_OC3_SetConfig+0xe6>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a24      	ldr	r2, [pc, #144]	@ (8005af4 <TIM_OC3_SetConfig+0x13c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01b      	beq.n	8005a9e <TIM_OC3_SetConfig+0xe6>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a23      	ldr	r2, [pc, #140]	@ (8005af8 <TIM_OC3_SetConfig+0x140>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d017      	beq.n	8005a9e <TIM_OC3_SetConfig+0xe6>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a22      	ldr	r2, [pc, #136]	@ (8005afc <TIM_OC3_SetConfig+0x144>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <TIM_OC3_SetConfig+0xe6>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a21      	ldr	r2, [pc, #132]	@ (8005b00 <TIM_OC3_SetConfig+0x148>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00f      	beq.n	8005a9e <TIM_OC3_SetConfig+0xe6>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a20      	ldr	r2, [pc, #128]	@ (8005b04 <TIM_OC3_SetConfig+0x14c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <TIM_OC3_SetConfig+0xe6>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a1f      	ldr	r2, [pc, #124]	@ (8005b08 <TIM_OC3_SetConfig+0x150>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <TIM_OC3_SetConfig+0xe6>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a1e      	ldr	r2, [pc, #120]	@ (8005b0c <TIM_OC3_SetConfig+0x154>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_OC3_SetConfig+0xe6>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a1d      	ldr	r2, [pc, #116]	@ (8005b10 <TIM_OC3_SetConfig+0x158>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d113      	bne.n	8005ac6 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	621a      	str	r2, [r3, #32]
}
 8005ae0:	bf00      	nop
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	50012c00 	.word	0x50012c00
 8005af4:	40013400 	.word	0x40013400
 8005af8:	50013400 	.word	0x50013400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	50014000 	.word	0x50014000
 8005b04:	40014400 	.word	0x40014400
 8005b08:	50014400 	.word	0x50014400
 8005b0c:	40014800 	.word	0x40014800
 8005b10:	50014800 	.word	0x50014800

08005b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	031b      	lsls	r3, r3, #12
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a36      	ldr	r2, [pc, #216]	@ (8005c4c <TIM_OC4_SetConfig+0x138>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00b      	beq.n	8005b90 <TIM_OC4_SetConfig+0x7c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a35      	ldr	r2, [pc, #212]	@ (8005c50 <TIM_OC4_SetConfig+0x13c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d007      	beq.n	8005b90 <TIM_OC4_SetConfig+0x7c>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a34      	ldr	r2, [pc, #208]	@ (8005c54 <TIM_OC4_SetConfig+0x140>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_OC4_SetConfig+0x7c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a33      	ldr	r2, [pc, #204]	@ (8005c58 <TIM_OC4_SetConfig+0x144>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d10d      	bne.n	8005bac <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	031b      	lsls	r3, r3, #12
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005baa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a27      	ldr	r2, [pc, #156]	@ (8005c4c <TIM_OC4_SetConfig+0x138>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d023      	beq.n	8005bfc <TIM_OC4_SetConfig+0xe8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a26      	ldr	r2, [pc, #152]	@ (8005c50 <TIM_OC4_SetConfig+0x13c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d01f      	beq.n	8005bfc <TIM_OC4_SetConfig+0xe8>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a25      	ldr	r2, [pc, #148]	@ (8005c54 <TIM_OC4_SetConfig+0x140>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d01b      	beq.n	8005bfc <TIM_OC4_SetConfig+0xe8>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a24      	ldr	r2, [pc, #144]	@ (8005c58 <TIM_OC4_SetConfig+0x144>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d017      	beq.n	8005bfc <TIM_OC4_SetConfig+0xe8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a23      	ldr	r2, [pc, #140]	@ (8005c5c <TIM_OC4_SetConfig+0x148>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d013      	beq.n	8005bfc <TIM_OC4_SetConfig+0xe8>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a22      	ldr	r2, [pc, #136]	@ (8005c60 <TIM_OC4_SetConfig+0x14c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00f      	beq.n	8005bfc <TIM_OC4_SetConfig+0xe8>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a21      	ldr	r2, [pc, #132]	@ (8005c64 <TIM_OC4_SetConfig+0x150>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <TIM_OC4_SetConfig+0xe8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a20      	ldr	r2, [pc, #128]	@ (8005c68 <TIM_OC4_SetConfig+0x154>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d007      	beq.n	8005bfc <TIM_OC4_SetConfig+0xe8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a1f      	ldr	r2, [pc, #124]	@ (8005c6c <TIM_OC4_SetConfig+0x158>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_OC4_SetConfig+0xe8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c70 <TIM_OC4_SetConfig+0x15c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d113      	bne.n	8005c24 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	019b      	lsls	r3, r3, #6
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	019b      	lsls	r3, r3, #6
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	50012c00 	.word	0x50012c00
 8005c54:	40013400 	.word	0x40013400
 8005c58:	50013400 	.word	0x50013400
 8005c5c:	40014000 	.word	0x40014000
 8005c60:	50014000 	.word	0x50014000
 8005c64:	40014400 	.word	0x40014400
 8005c68:	50014400 	.word	0x50014400
 8005c6c:	40014800 	.word	0x40014800
 8005c70:	50014800 	.word	0x50014800

08005c74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005cb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	041b      	lsls	r3, r3, #16
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a21      	ldr	r2, [pc, #132]	@ (8005d50 <TIM_OC5_SetConfig+0xdc>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d023      	beq.n	8005d16 <TIM_OC5_SetConfig+0xa2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a20      	ldr	r2, [pc, #128]	@ (8005d54 <TIM_OC5_SetConfig+0xe0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d01f      	beq.n	8005d16 <TIM_OC5_SetConfig+0xa2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8005d58 <TIM_OC5_SetConfig+0xe4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d01b      	beq.n	8005d16 <TIM_OC5_SetConfig+0xa2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d5c <TIM_OC5_SetConfig+0xe8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d017      	beq.n	8005d16 <TIM_OC5_SetConfig+0xa2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d60 <TIM_OC5_SetConfig+0xec>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d013      	beq.n	8005d16 <TIM_OC5_SetConfig+0xa2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d64 <TIM_OC5_SetConfig+0xf0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00f      	beq.n	8005d16 <TIM_OC5_SetConfig+0xa2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d68 <TIM_OC5_SetConfig+0xf4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00b      	beq.n	8005d16 <TIM_OC5_SetConfig+0xa2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a1a      	ldr	r2, [pc, #104]	@ (8005d6c <TIM_OC5_SetConfig+0xf8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d007      	beq.n	8005d16 <TIM_OC5_SetConfig+0xa2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a19      	ldr	r2, [pc, #100]	@ (8005d70 <TIM_OC5_SetConfig+0xfc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_OC5_SetConfig+0xa2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a18      	ldr	r2, [pc, #96]	@ (8005d74 <TIM_OC5_SetConfig+0x100>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d109      	bne.n	8005d2a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	621a      	str	r2, [r3, #32]
}
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	40012c00 	.word	0x40012c00
 8005d54:	50012c00 	.word	0x50012c00
 8005d58:	40013400 	.word	0x40013400
 8005d5c:	50013400 	.word	0x50013400
 8005d60:	40014000 	.word	0x40014000
 8005d64:	50014000 	.word	0x50014000
 8005d68:	40014400 	.word	0x40014400
 8005d6c:	50014400 	.word	0x50014400
 8005d70:	40014800 	.word	0x40014800
 8005d74:	50014800 	.word	0x50014800

08005d78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	051b      	lsls	r3, r3, #20
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a22      	ldr	r2, [pc, #136]	@ (8005e58 <TIM_OC6_SetConfig+0xe0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d023      	beq.n	8005e1c <TIM_OC6_SetConfig+0xa4>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a21      	ldr	r2, [pc, #132]	@ (8005e5c <TIM_OC6_SetConfig+0xe4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d01f      	beq.n	8005e1c <TIM_OC6_SetConfig+0xa4>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a20      	ldr	r2, [pc, #128]	@ (8005e60 <TIM_OC6_SetConfig+0xe8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d01b      	beq.n	8005e1c <TIM_OC6_SetConfig+0xa4>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e64 <TIM_OC6_SetConfig+0xec>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d017      	beq.n	8005e1c <TIM_OC6_SetConfig+0xa4>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a1e      	ldr	r2, [pc, #120]	@ (8005e68 <TIM_OC6_SetConfig+0xf0>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d013      	beq.n	8005e1c <TIM_OC6_SetConfig+0xa4>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a1d      	ldr	r2, [pc, #116]	@ (8005e6c <TIM_OC6_SetConfig+0xf4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00f      	beq.n	8005e1c <TIM_OC6_SetConfig+0xa4>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8005e70 <TIM_OC6_SetConfig+0xf8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00b      	beq.n	8005e1c <TIM_OC6_SetConfig+0xa4>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a1b      	ldr	r2, [pc, #108]	@ (8005e74 <TIM_OC6_SetConfig+0xfc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_OC6_SetConfig+0xa4>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005e78 <TIM_OC6_SetConfig+0x100>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC6_SetConfig+0xa4>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a19      	ldr	r2, [pc, #100]	@ (8005e7c <TIM_OC6_SetConfig+0x104>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d109      	bne.n	8005e30 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	029b      	lsls	r3, r3, #10
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	50012c00 	.word	0x50012c00
 8005e60:	40013400 	.word	0x40013400
 8005e64:	50013400 	.word	0x50013400
 8005e68:	40014000 	.word	0x40014000
 8005e6c:	50014000 	.word	0x50014000
 8005e70:	40014400 	.word	0x40014400
 8005e74:	50014400 	.word	0x50014400
 8005e78:	40014800 	.word	0x40014800
 8005e7c:	50014800 	.word	0x50014800

08005e80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f023 0201 	bic.w	r2, r3, #1
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f023 030a 	bic.w	r3, r3, #10
 8005ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b087      	sub	sp, #28
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	f023 0210 	bic.w	r2, r3, #16
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	031b      	lsls	r3, r3, #12
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f043 0307 	orr.w	r3, r3, #7
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	609a      	str	r2, [r3, #8]
}
 8005f6c:	bf00      	nop
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	021a      	lsls	r2, r3, #8
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	609a      	str	r2, [r3, #8]
}
 8005fac:	bf00      	nop
 8005fae:	371c      	adds	r7, #28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	2201      	movs	r2, #1
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a1a      	ldr	r2, [r3, #32]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	401a      	ands	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a1a      	ldr	r2, [r3, #32]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006018:	2302      	movs	r3, #2
 800601a:	e097      	b.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a45      	ldr	r2, [pc, #276]	@ (8006158 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00e      	beq.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a44      	ldr	r2, [pc, #272]	@ (800615c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a42      	ldr	r2, [pc, #264]	@ (8006160 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a41      	ldr	r2, [pc, #260]	@ (8006164 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d108      	bne.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800606a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800607c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006080:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a2f      	ldr	r2, [pc, #188]	@ (8006158 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d040      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2e      	ldr	r2, [pc, #184]	@ (800615c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d03b      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b0:	d036      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ba:	d031      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a29      	ldr	r2, [pc, #164]	@ (8006168 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d02c      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a28      	ldr	r2, [pc, #160]	@ (800616c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d027      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a26      	ldr	r2, [pc, #152]	@ (8006170 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d022      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a25      	ldr	r2, [pc, #148]	@ (8006174 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d01d      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a23      	ldr	r2, [pc, #140]	@ (8006178 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d018      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a22      	ldr	r2, [pc, #136]	@ (800617c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d013      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a18      	ldr	r2, [pc, #96]	@ (8006160 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00e      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a17      	ldr	r2, [pc, #92]	@ (8006164 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d009      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1b      	ldr	r2, [pc, #108]	@ (8006180 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d004      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1a      	ldr	r2, [pc, #104]	@ (8006184 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d10c      	bne.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006126:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	4313      	orrs	r3, r2
 8006130:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40012c00 	.word	0x40012c00
 800615c:	50012c00 	.word	0x50012c00
 8006160:	40013400 	.word	0x40013400
 8006164:	50013400 	.word	0x50013400
 8006168:	40000400 	.word	0x40000400
 800616c:	50000400 	.word	0x50000400
 8006170:	40000800 	.word	0x40000800
 8006174:	50000800 	.word	0x50000800
 8006178:	40000c00 	.word	0x40000c00
 800617c:	50000c00 	.word	0x50000c00
 8006180:	40014000 	.word	0x40014000
 8006184:	50014000 	.word	0x50014000

08006188 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e07d      	b.n	80062a0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	041b      	lsls	r3, r3, #16
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1e      	ldr	r2, [pc, #120]	@ (80062ac <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00e      	beq.n	8006254 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1d      	ldr	r2, [pc, #116]	@ (80062b0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d009      	beq.n	8006254 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a1b      	ldr	r2, [pc, #108]	@ (80062b4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d004      	beq.n	8006254 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a1a      	ldr	r2, [pc, #104]	@ (80062b8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d11c      	bne.n	800628e <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625e:	051b      	lsls	r3, r3, #20
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	40012c00 	.word	0x40012c00
 80062b0:	50012c00 	.word	0x50012c00
 80062b4:	40013400 	.word	0x40013400
 80062b8:	50013400 	.word	0x50013400

080062bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062bc:	b084      	sub	sp, #16
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	f107 001c 	add.w	r0, r7, #28
 80062ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa6c 	bl	80067b8 <USB_CoreReset>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80062e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80062f8:	e005      	b.n	8006306 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8006306:	7bfb      	ldrb	r3, [r7, #15]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006312:	b004      	add	sp, #16
 8006314:	4770      	bx	lr

08006316 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f023 0201 	bic.w	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006354:	78fb      	ldrb	r3, [r7, #3]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d115      	bne.n	8006386 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006366:	200a      	movs	r0, #10
 8006368:	f7fa fff0 	bl	800134c <HAL_Delay>
      ms += 10U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	330a      	adds	r3, #10
 8006370:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa12 	bl	800679c <USB_GetMode>
 8006378:	4603      	mov	r3, r0
 800637a:	2b01      	cmp	r3, #1
 800637c:	d01e      	beq.n	80063bc <USB_SetCurrentMode+0x84>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2bc7      	cmp	r3, #199	@ 0xc7
 8006382:	d9f0      	bls.n	8006366 <USB_SetCurrentMode+0x2e>
 8006384:	e01a      	b.n	80063bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006386:	78fb      	ldrb	r3, [r7, #3]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d115      	bne.n	80063b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006398:	200a      	movs	r0, #10
 800639a:	f7fa ffd7 	bl	800134c <HAL_Delay>
      ms += 10U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	330a      	adds	r3, #10
 80063a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f9f9 	bl	800679c <USB_GetMode>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <USB_SetCurrentMode+0x84>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80063b4:	d9f0      	bls.n	8006398 <USB_SetCurrentMode+0x60>
 80063b6:	e001      	b.n	80063bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e005      	b.n	80063c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2bc8      	cmp	r3, #200	@ 0xc8
 80063c0:	d101      	bne.n	80063c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e000      	b.n	80063c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063d0:	b084      	sub	sp, #16
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b086      	sub	sp, #24
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80063de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	e009      	b.n	8006404 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	3340      	adds	r3, #64	@ 0x40
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	2200      	movs	r2, #0
 80063fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	3301      	adds	r3, #1
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2b0e      	cmp	r3, #14
 8006408:	d9f2      	bls.n	80063f0 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800640a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800640e:	2b00      	cmp	r3, #0
 8006410:	d11c      	bne.n	800644c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006420:	f043 0302 	orr.w	r3, r3, #2
 8006424:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	e005      	b.n	8006458 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006450:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800645e:	461a      	mov	r2, r3
 8006460:	2300      	movs	r3, #0
 8006462:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006464:	2103      	movs	r1, #3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f95e 	bl	8006728 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800646c:	2110      	movs	r1, #16
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f8fa 	bl	8006668 <USB_FlushTxFifo>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f924 	bl	80066cc <USB_FlushRxFifo>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006494:	461a      	mov	r2, r3
 8006496:	2300      	movs	r3, #0
 8006498:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a0:	461a      	mov	r2, r3
 80064a2:	2300      	movs	r3, #0
 80064a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ac:	461a      	mov	r2, r3
 80064ae:	2300      	movs	r3, #0
 80064b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	e043      	b.n	8006540 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064ce:	d118      	bne.n	8006502 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e2:	461a      	mov	r2, r3
 80064e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	e013      	b.n	8006514 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f8:	461a      	mov	r2, r3
 80064fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	e008      	b.n	8006514 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800650e:	461a      	mov	r2, r3
 8006510:	2300      	movs	r3, #0
 8006512:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006520:	461a      	mov	r2, r3
 8006522:	2300      	movs	r3, #0
 8006524:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006532:	461a      	mov	r2, r3
 8006534:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006538:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3301      	adds	r3, #1
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006544:	461a      	mov	r2, r3
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	4293      	cmp	r3, r2
 800654a:	d3b5      	bcc.n	80064b8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800654c:	2300      	movs	r3, #0
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	e043      	b.n	80065da <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006564:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006568:	d118      	bne.n	800659c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657c:	461a      	mov	r2, r3
 800657e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	e013      	b.n	80065ae <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006592:	461a      	mov	r2, r3
 8006594:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	e008      	b.n	80065ae <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a8:	461a      	mov	r2, r3
 80065aa:	2300      	movs	r3, #0
 80065ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ba:	461a      	mov	r2, r3
 80065bc:	2300      	movs	r3, #0
 80065be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065cc:	461a      	mov	r2, r3
 80065ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	3301      	adds	r3, #1
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065de:	461a      	mov	r2, r3
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d3b5      	bcc.n	8006552 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006606:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006608:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f043 0210 	orr.w	r2, r3, #16
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699a      	ldr	r2, [r3, #24]
 8006620:	4b10      	ldr	r3, [pc, #64]	@ (8006664 <USB_DevInit+0x294>)
 8006622:	4313      	orrs	r3, r2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006628:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f043 0208 	orr.w	r2, r3, #8
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800663c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006640:	2b01      	cmp	r3, #1
 8006642:	d107      	bne.n	8006654 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800664c:	f043 0304 	orr.w	r3, r3, #4
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006654:	7dfb      	ldrb	r3, [r7, #23]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006660:	b004      	add	sp, #16
 8006662:	4770      	bx	lr
 8006664:	803c3800 	.word	0x803c3800

08006668 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006682:	d901      	bls.n	8006688 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e01b      	b.n	80066c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	daf2      	bge.n	8006676 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	019b      	lsls	r3, r3, #6
 8006698:	f043 0220 	orr.w	r2, r3, #32
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3301      	adds	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066ac:	d901      	bls.n	80066b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e006      	b.n	80066c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d0f0      	beq.n	80066a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066e4:	d901      	bls.n	80066ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e018      	b.n	800671c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	daf2      	bge.n	80066d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2210      	movs	r2, #16
 80066fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3301      	adds	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006708:	d901      	bls.n	800670e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e006      	b.n	800671c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b10      	cmp	r3, #16
 8006718:	d0f0      	beq.n	80066fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	68f9      	ldr	r1, [r7, #12]
 8006744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006748:	4313      	orrs	r3, r2
 800674a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006774:	f023 0303 	bic.w	r3, r3, #3
 8006778:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006788:	f043 0302 	orr.w	r3, r3, #2
 800678c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	f003 0301 	and.w	r3, r3, #1
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067d0:	d901      	bls.n	80067d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e01b      	b.n	800680e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	daf2      	bge.n	80067c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f043 0201 	orr.w	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067fa:	d901      	bls.n	8006800 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e006      	b.n	800680e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b01      	cmp	r3, #1
 800680a:	d0f0      	beq.n	80067ee <USB_CoreReset+0x36>

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
	...

0800681c <sbrk_aligned>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	4e0f      	ldr	r6, [pc, #60]	@ (800685c <sbrk_aligned+0x40>)
 8006820:	460c      	mov	r4, r1
 8006822:	4605      	mov	r5, r0
 8006824:	6831      	ldr	r1, [r6, #0]
 8006826:	b911      	cbnz	r1, 800682e <sbrk_aligned+0x12>
 8006828:	f000 fada 	bl	8006de0 <_sbrk_r>
 800682c:	6030      	str	r0, [r6, #0]
 800682e:	4621      	mov	r1, r4
 8006830:	4628      	mov	r0, r5
 8006832:	f000 fad5 	bl	8006de0 <_sbrk_r>
 8006836:	1c43      	adds	r3, r0, #1
 8006838:	d103      	bne.n	8006842 <sbrk_aligned+0x26>
 800683a:	f04f 34ff 	mov.w	r4, #4294967295
 800683e:	4620      	mov	r0, r4
 8006840:	bd70      	pop	{r4, r5, r6, pc}
 8006842:	1cc4      	adds	r4, r0, #3
 8006844:	f024 0403 	bic.w	r4, r4, #3
 8006848:	42a0      	cmp	r0, r4
 800684a:	d0f8      	beq.n	800683e <sbrk_aligned+0x22>
 800684c:	1a21      	subs	r1, r4, r0
 800684e:	4628      	mov	r0, r5
 8006850:	f000 fac6 	bl	8006de0 <_sbrk_r>
 8006854:	3001      	adds	r0, #1
 8006856:	d1f2      	bne.n	800683e <sbrk_aligned+0x22>
 8006858:	e7ef      	b.n	800683a <sbrk_aligned+0x1e>
 800685a:	bf00      	nop
 800685c:	200006a8 	.word	0x200006a8

08006860 <_malloc_r>:
 8006860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006864:	1ccd      	adds	r5, r1, #3
 8006866:	4606      	mov	r6, r0
 8006868:	f025 0503 	bic.w	r5, r5, #3
 800686c:	3508      	adds	r5, #8
 800686e:	2d0c      	cmp	r5, #12
 8006870:	bf38      	it	cc
 8006872:	250c      	movcc	r5, #12
 8006874:	2d00      	cmp	r5, #0
 8006876:	db01      	blt.n	800687c <_malloc_r+0x1c>
 8006878:	42a9      	cmp	r1, r5
 800687a:	d904      	bls.n	8006886 <_malloc_r+0x26>
 800687c:	230c      	movs	r3, #12
 800687e:	6033      	str	r3, [r6, #0]
 8006880:	2000      	movs	r0, #0
 8006882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006886:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800695c <_malloc_r+0xfc>
 800688a:	f000 f869 	bl	8006960 <__malloc_lock>
 800688e:	f8d8 3000 	ldr.w	r3, [r8]
 8006892:	461c      	mov	r4, r3
 8006894:	bb44      	cbnz	r4, 80068e8 <_malloc_r+0x88>
 8006896:	4629      	mov	r1, r5
 8006898:	4630      	mov	r0, r6
 800689a:	f7ff ffbf 	bl	800681c <sbrk_aligned>
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	4604      	mov	r4, r0
 80068a2:	d158      	bne.n	8006956 <_malloc_r+0xf6>
 80068a4:	f8d8 4000 	ldr.w	r4, [r8]
 80068a8:	4627      	mov	r7, r4
 80068aa:	2f00      	cmp	r7, #0
 80068ac:	d143      	bne.n	8006936 <_malloc_r+0xd6>
 80068ae:	2c00      	cmp	r4, #0
 80068b0:	d04b      	beq.n	800694a <_malloc_r+0xea>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	4639      	mov	r1, r7
 80068b6:	4630      	mov	r0, r6
 80068b8:	eb04 0903 	add.w	r9, r4, r3
 80068bc:	f000 fa90 	bl	8006de0 <_sbrk_r>
 80068c0:	4581      	cmp	r9, r0
 80068c2:	d142      	bne.n	800694a <_malloc_r+0xea>
 80068c4:	6821      	ldr	r1, [r4, #0]
 80068c6:	4630      	mov	r0, r6
 80068c8:	1a6d      	subs	r5, r5, r1
 80068ca:	4629      	mov	r1, r5
 80068cc:	f7ff ffa6 	bl	800681c <sbrk_aligned>
 80068d0:	3001      	adds	r0, #1
 80068d2:	d03a      	beq.n	800694a <_malloc_r+0xea>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	442b      	add	r3, r5
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	f8d8 3000 	ldr.w	r3, [r8]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	bb62      	cbnz	r2, 800693c <_malloc_r+0xdc>
 80068e2:	f8c8 7000 	str.w	r7, [r8]
 80068e6:	e00f      	b.n	8006908 <_malloc_r+0xa8>
 80068e8:	6822      	ldr	r2, [r4, #0]
 80068ea:	1b52      	subs	r2, r2, r5
 80068ec:	d420      	bmi.n	8006930 <_malloc_r+0xd0>
 80068ee:	2a0b      	cmp	r2, #11
 80068f0:	d917      	bls.n	8006922 <_malloc_r+0xc2>
 80068f2:	1961      	adds	r1, r4, r5
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	6025      	str	r5, [r4, #0]
 80068f8:	bf18      	it	ne
 80068fa:	6059      	strne	r1, [r3, #4]
 80068fc:	6863      	ldr	r3, [r4, #4]
 80068fe:	bf08      	it	eq
 8006900:	f8c8 1000 	streq.w	r1, [r8]
 8006904:	5162      	str	r2, [r4, r5]
 8006906:	604b      	str	r3, [r1, #4]
 8006908:	4630      	mov	r0, r6
 800690a:	f000 f82f 	bl	800696c <__malloc_unlock>
 800690e:	f104 000b 	add.w	r0, r4, #11
 8006912:	1d23      	adds	r3, r4, #4
 8006914:	f020 0007 	bic.w	r0, r0, #7
 8006918:	1ac2      	subs	r2, r0, r3
 800691a:	bf1c      	itt	ne
 800691c:	1a1b      	subne	r3, r3, r0
 800691e:	50a3      	strne	r3, [r4, r2]
 8006920:	e7af      	b.n	8006882 <_malloc_r+0x22>
 8006922:	6862      	ldr	r2, [r4, #4]
 8006924:	42a3      	cmp	r3, r4
 8006926:	bf0c      	ite	eq
 8006928:	f8c8 2000 	streq.w	r2, [r8]
 800692c:	605a      	strne	r2, [r3, #4]
 800692e:	e7eb      	b.n	8006908 <_malloc_r+0xa8>
 8006930:	4623      	mov	r3, r4
 8006932:	6864      	ldr	r4, [r4, #4]
 8006934:	e7ae      	b.n	8006894 <_malloc_r+0x34>
 8006936:	463c      	mov	r4, r7
 8006938:	687f      	ldr	r7, [r7, #4]
 800693a:	e7b6      	b.n	80068aa <_malloc_r+0x4a>
 800693c:	461a      	mov	r2, r3
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	42a3      	cmp	r3, r4
 8006942:	d1fb      	bne.n	800693c <_malloc_r+0xdc>
 8006944:	2300      	movs	r3, #0
 8006946:	6053      	str	r3, [r2, #4]
 8006948:	e7de      	b.n	8006908 <_malloc_r+0xa8>
 800694a:	230c      	movs	r3, #12
 800694c:	4630      	mov	r0, r6
 800694e:	6033      	str	r3, [r6, #0]
 8006950:	f000 f80c 	bl	800696c <__malloc_unlock>
 8006954:	e794      	b.n	8006880 <_malloc_r+0x20>
 8006956:	6005      	str	r5, [r0, #0]
 8006958:	e7d6      	b.n	8006908 <_malloc_r+0xa8>
 800695a:	bf00      	nop
 800695c:	200006ac 	.word	0x200006ac

08006960 <__malloc_lock>:
 8006960:	4801      	ldr	r0, [pc, #4]	@ (8006968 <__malloc_lock+0x8>)
 8006962:	f000 ba8a 	b.w	8006e7a <__retarget_lock_acquire_recursive>
 8006966:	bf00      	nop
 8006968:	200007f0 	.word	0x200007f0

0800696c <__malloc_unlock>:
 800696c:	4801      	ldr	r0, [pc, #4]	@ (8006974 <__malloc_unlock+0x8>)
 800696e:	f000 ba85 	b.w	8006e7c <__retarget_lock_release_recursive>
 8006972:	bf00      	nop
 8006974:	200007f0 	.word	0x200007f0

08006978 <std>:
 8006978:	2300      	movs	r3, #0
 800697a:	b510      	push	{r4, lr}
 800697c:	4604      	mov	r4, r0
 800697e:	6083      	str	r3, [r0, #8]
 8006980:	8181      	strh	r1, [r0, #12]
 8006982:	4619      	mov	r1, r3
 8006984:	6643      	str	r3, [r0, #100]	@ 0x64
 8006986:	81c2      	strh	r2, [r0, #14]
 8006988:	2208      	movs	r2, #8
 800698a:	6183      	str	r3, [r0, #24]
 800698c:	e9c0 3300 	strd	r3, r3, [r0]
 8006990:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006994:	305c      	adds	r0, #92	@ 0x5c
 8006996:	f000 f9e7 	bl	8006d68 <memset>
 800699a:	4b0d      	ldr	r3, [pc, #52]	@ (80069d0 <std+0x58>)
 800699c:	6224      	str	r4, [r4, #32]
 800699e:	6263      	str	r3, [r4, #36]	@ 0x24
 80069a0:	4b0c      	ldr	r3, [pc, #48]	@ (80069d4 <std+0x5c>)
 80069a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069a4:	4b0c      	ldr	r3, [pc, #48]	@ (80069d8 <std+0x60>)
 80069a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069a8:	4b0c      	ldr	r3, [pc, #48]	@ (80069dc <std+0x64>)
 80069aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80069ac:	4b0c      	ldr	r3, [pc, #48]	@ (80069e0 <std+0x68>)
 80069ae:	429c      	cmp	r4, r3
 80069b0:	d006      	beq.n	80069c0 <std+0x48>
 80069b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069b6:	4294      	cmp	r4, r2
 80069b8:	d002      	beq.n	80069c0 <std+0x48>
 80069ba:	33d0      	adds	r3, #208	@ 0xd0
 80069bc:	429c      	cmp	r4, r3
 80069be:	d105      	bne.n	80069cc <std+0x54>
 80069c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80069c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c8:	f000 ba56 	b.w	8006e78 <__retarget_lock_init_recursive>
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	bf00      	nop
 80069d0:	08006bb9 	.word	0x08006bb9
 80069d4:	08006bdb 	.word	0x08006bdb
 80069d8:	08006c13 	.word	0x08006c13
 80069dc:	08006c37 	.word	0x08006c37
 80069e0:	200006b0 	.word	0x200006b0

080069e4 <stdio_exit_handler>:
 80069e4:	4a02      	ldr	r2, [pc, #8]	@ (80069f0 <stdio_exit_handler+0xc>)
 80069e6:	4903      	ldr	r1, [pc, #12]	@ (80069f4 <stdio_exit_handler+0x10>)
 80069e8:	4803      	ldr	r0, [pc, #12]	@ (80069f8 <stdio_exit_handler+0x14>)
 80069ea:	f000 b869 	b.w	8006ac0 <_fwalk_sglue>
 80069ee:	bf00      	nop
 80069f0:	2000000c 	.word	0x2000000c
 80069f4:	0800701d 	.word	0x0800701d
 80069f8:	2000001c 	.word	0x2000001c

080069fc <cleanup_stdio>:
 80069fc:	6841      	ldr	r1, [r0, #4]
 80069fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006a30 <cleanup_stdio+0x34>)
 8006a00:	4299      	cmp	r1, r3
 8006a02:	b510      	push	{r4, lr}
 8006a04:	4604      	mov	r4, r0
 8006a06:	d001      	beq.n	8006a0c <cleanup_stdio+0x10>
 8006a08:	f000 fb08 	bl	800701c <_fflush_r>
 8006a0c:	68a1      	ldr	r1, [r4, #8]
 8006a0e:	4b09      	ldr	r3, [pc, #36]	@ (8006a34 <cleanup_stdio+0x38>)
 8006a10:	4299      	cmp	r1, r3
 8006a12:	d002      	beq.n	8006a1a <cleanup_stdio+0x1e>
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 fb01 	bl	800701c <_fflush_r>
 8006a1a:	68e1      	ldr	r1, [r4, #12]
 8006a1c:	4b06      	ldr	r3, [pc, #24]	@ (8006a38 <cleanup_stdio+0x3c>)
 8006a1e:	4299      	cmp	r1, r3
 8006a20:	d004      	beq.n	8006a2c <cleanup_stdio+0x30>
 8006a22:	4620      	mov	r0, r4
 8006a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a28:	f000 baf8 	b.w	800701c <_fflush_r>
 8006a2c:	bd10      	pop	{r4, pc}
 8006a2e:	bf00      	nop
 8006a30:	200006b0 	.word	0x200006b0
 8006a34:	20000718 	.word	0x20000718
 8006a38:	20000780 	.word	0x20000780

08006a3c <global_stdio_init.part.0>:
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a6c <global_stdio_init.part.0+0x30>)
 8006a40:	2104      	movs	r1, #4
 8006a42:	4c0b      	ldr	r4, [pc, #44]	@ (8006a70 <global_stdio_init.part.0+0x34>)
 8006a44:	4a0b      	ldr	r2, [pc, #44]	@ (8006a74 <global_stdio_init.part.0+0x38>)
 8006a46:	4620      	mov	r0, r4
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f7ff ff94 	bl	8006978 <std>
 8006a50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a54:	2201      	movs	r2, #1
 8006a56:	2109      	movs	r1, #9
 8006a58:	f7ff ff8e 	bl	8006978 <std>
 8006a5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a60:	2202      	movs	r2, #2
 8006a62:	2112      	movs	r1, #18
 8006a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a68:	f7ff bf86 	b.w	8006978 <std>
 8006a6c:	200007e8 	.word	0x200007e8
 8006a70:	200006b0 	.word	0x200006b0
 8006a74:	080069e5 	.word	0x080069e5

08006a78 <__sfp_lock_acquire>:
 8006a78:	4801      	ldr	r0, [pc, #4]	@ (8006a80 <__sfp_lock_acquire+0x8>)
 8006a7a:	f000 b9fe 	b.w	8006e7a <__retarget_lock_acquire_recursive>
 8006a7e:	bf00      	nop
 8006a80:	200007f1 	.word	0x200007f1

08006a84 <__sfp_lock_release>:
 8006a84:	4801      	ldr	r0, [pc, #4]	@ (8006a8c <__sfp_lock_release+0x8>)
 8006a86:	f000 b9f9 	b.w	8006e7c <__retarget_lock_release_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	200007f1 	.word	0x200007f1

08006a90 <__sinit>:
 8006a90:	b510      	push	{r4, lr}
 8006a92:	4604      	mov	r4, r0
 8006a94:	f7ff fff0 	bl	8006a78 <__sfp_lock_acquire>
 8006a98:	6a23      	ldr	r3, [r4, #32]
 8006a9a:	b11b      	cbz	r3, 8006aa4 <__sinit+0x14>
 8006a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa0:	f7ff bff0 	b.w	8006a84 <__sfp_lock_release>
 8006aa4:	4b04      	ldr	r3, [pc, #16]	@ (8006ab8 <__sinit+0x28>)
 8006aa6:	6223      	str	r3, [r4, #32]
 8006aa8:	4b04      	ldr	r3, [pc, #16]	@ (8006abc <__sinit+0x2c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1f5      	bne.n	8006a9c <__sinit+0xc>
 8006ab0:	f7ff ffc4 	bl	8006a3c <global_stdio_init.part.0>
 8006ab4:	e7f2      	b.n	8006a9c <__sinit+0xc>
 8006ab6:	bf00      	nop
 8006ab8:	080069fd 	.word	0x080069fd
 8006abc:	200007e8 	.word	0x200007e8

08006ac0 <_fwalk_sglue>:
 8006ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	4688      	mov	r8, r1
 8006ac8:	4614      	mov	r4, r2
 8006aca:	2600      	movs	r6, #0
 8006acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ad4:	d505      	bpl.n	8006ae2 <_fwalk_sglue+0x22>
 8006ad6:	6824      	ldr	r4, [r4, #0]
 8006ad8:	2c00      	cmp	r4, #0
 8006ada:	d1f7      	bne.n	8006acc <_fwalk_sglue+0xc>
 8006adc:	4630      	mov	r0, r6
 8006ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ae2:	89ab      	ldrh	r3, [r5, #12]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d907      	bls.n	8006af8 <_fwalk_sglue+0x38>
 8006ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aec:	3301      	adds	r3, #1
 8006aee:	d003      	beq.n	8006af8 <_fwalk_sglue+0x38>
 8006af0:	4629      	mov	r1, r5
 8006af2:	4638      	mov	r0, r7
 8006af4:	47c0      	blx	r8
 8006af6:	4306      	orrs	r6, r0
 8006af8:	3568      	adds	r5, #104	@ 0x68
 8006afa:	e7e9      	b.n	8006ad0 <_fwalk_sglue+0x10>

08006afc <_puts_r>:
 8006afc:	6a03      	ldr	r3, [r0, #32]
 8006afe:	b570      	push	{r4, r5, r6, lr}
 8006b00:	4605      	mov	r5, r0
 8006b02:	460e      	mov	r6, r1
 8006b04:	6884      	ldr	r4, [r0, #8]
 8006b06:	b90b      	cbnz	r3, 8006b0c <_puts_r+0x10>
 8006b08:	f7ff ffc2 	bl	8006a90 <__sinit>
 8006b0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b0e:	07db      	lsls	r3, r3, #31
 8006b10:	d405      	bmi.n	8006b1e <_puts_r+0x22>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	0598      	lsls	r0, r3, #22
 8006b16:	d402      	bmi.n	8006b1e <_puts_r+0x22>
 8006b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b1a:	f000 f9ae 	bl	8006e7a <__retarget_lock_acquire_recursive>
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	0719      	lsls	r1, r3, #28
 8006b22:	d502      	bpl.n	8006b2a <_puts_r+0x2e>
 8006b24:	6923      	ldr	r3, [r4, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d135      	bne.n	8006b96 <_puts_r+0x9a>
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f000 f8c5 	bl	8006cbc <__swsetup_r>
 8006b32:	b380      	cbz	r0, 8006b96 <_puts_r+0x9a>
 8006b34:	f04f 35ff 	mov.w	r5, #4294967295
 8006b38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b3a:	07da      	lsls	r2, r3, #31
 8006b3c:	d405      	bmi.n	8006b4a <_puts_r+0x4e>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	059b      	lsls	r3, r3, #22
 8006b42:	d402      	bmi.n	8006b4a <_puts_r+0x4e>
 8006b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b46:	f000 f999 	bl	8006e7c <__retarget_lock_release_recursive>
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	bd70      	pop	{r4, r5, r6, pc}
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da04      	bge.n	8006b5c <_puts_r+0x60>
 8006b52:	69a2      	ldr	r2, [r4, #24]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	dc17      	bgt.n	8006b88 <_puts_r+0x8c>
 8006b58:	290a      	cmp	r1, #10
 8006b5a:	d015      	beq.n	8006b88 <_puts_r+0x8c>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	6022      	str	r2, [r4, #0]
 8006b62:	7019      	strb	r1, [r3, #0]
 8006b64:	68a3      	ldr	r3, [r4, #8]
 8006b66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	60a3      	str	r3, [r4, #8]
 8006b6e:	2900      	cmp	r1, #0
 8006b70:	d1ed      	bne.n	8006b4e <_puts_r+0x52>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	da11      	bge.n	8006b9a <_puts_r+0x9e>
 8006b76:	4622      	mov	r2, r4
 8006b78:	210a      	movs	r1, #10
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f000 f85f 	bl	8006c3e <__swbuf_r>
 8006b80:	3001      	adds	r0, #1
 8006b82:	d0d7      	beq.n	8006b34 <_puts_r+0x38>
 8006b84:	250a      	movs	r5, #10
 8006b86:	e7d7      	b.n	8006b38 <_puts_r+0x3c>
 8006b88:	4622      	mov	r2, r4
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f000 f857 	bl	8006c3e <__swbuf_r>
 8006b90:	3001      	adds	r0, #1
 8006b92:	d1e7      	bne.n	8006b64 <_puts_r+0x68>
 8006b94:	e7ce      	b.n	8006b34 <_puts_r+0x38>
 8006b96:	3e01      	subs	r6, #1
 8006b98:	e7e4      	b.n	8006b64 <_puts_r+0x68>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	6022      	str	r2, [r4, #0]
 8006ba0:	220a      	movs	r2, #10
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	e7ee      	b.n	8006b84 <_puts_r+0x88>
	...

08006ba8 <puts>:
 8006ba8:	4b02      	ldr	r3, [pc, #8]	@ (8006bb4 <puts+0xc>)
 8006baa:	4601      	mov	r1, r0
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	f7ff bfa5 	b.w	8006afc <_puts_r>
 8006bb2:	bf00      	nop
 8006bb4:	20000018 	.word	0x20000018

08006bb8 <__sread>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	460c      	mov	r4, r1
 8006bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc0:	f000 f8fc 	bl	8006dbc <_read_r>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	bfab      	itete	ge
 8006bc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bca:	89a3      	ldrhlt	r3, [r4, #12]
 8006bcc:	181b      	addge	r3, r3, r0
 8006bce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bd2:	bfac      	ite	ge
 8006bd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bd6:	81a3      	strhlt	r3, [r4, #12]
 8006bd8:	bd10      	pop	{r4, pc}

08006bda <__swrite>:
 8006bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bde:	461f      	mov	r7, r3
 8006be0:	898b      	ldrh	r3, [r1, #12]
 8006be2:	4605      	mov	r5, r0
 8006be4:	460c      	mov	r4, r1
 8006be6:	05db      	lsls	r3, r3, #23
 8006be8:	4616      	mov	r6, r2
 8006bea:	d505      	bpl.n	8006bf8 <__swrite+0x1e>
 8006bec:	2302      	movs	r3, #2
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf4:	f000 f8d0 	bl	8006d98 <_lseek_r>
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	4632      	mov	r2, r6
 8006bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c00:	4628      	mov	r0, r5
 8006c02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	463b      	mov	r3, r7
 8006c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0e:	f000 b8f7 	b.w	8006e00 <_write_r>

08006c12 <__sseek>:
 8006c12:	b510      	push	{r4, lr}
 8006c14:	460c      	mov	r4, r1
 8006c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1a:	f000 f8bd 	bl	8006d98 <_lseek_r>
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	bf15      	itete	ne
 8006c24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c2e:	81a3      	strheq	r3, [r4, #12]
 8006c30:	bf18      	it	ne
 8006c32:	81a3      	strhne	r3, [r4, #12]
 8006c34:	bd10      	pop	{r4, pc}

08006c36 <__sclose>:
 8006c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c3a:	f000 b89d 	b.w	8006d78 <_close_r>

08006c3e <__swbuf_r>:
 8006c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c40:	460e      	mov	r6, r1
 8006c42:	4614      	mov	r4, r2
 8006c44:	4605      	mov	r5, r0
 8006c46:	b118      	cbz	r0, 8006c50 <__swbuf_r+0x12>
 8006c48:	6a03      	ldr	r3, [r0, #32]
 8006c4a:	b90b      	cbnz	r3, 8006c50 <__swbuf_r+0x12>
 8006c4c:	f7ff ff20 	bl	8006a90 <__sinit>
 8006c50:	69a3      	ldr	r3, [r4, #24]
 8006c52:	60a3      	str	r3, [r4, #8]
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	071a      	lsls	r2, r3, #28
 8006c58:	d501      	bpl.n	8006c5e <__swbuf_r+0x20>
 8006c5a:	6923      	ldr	r3, [r4, #16]
 8006c5c:	b943      	cbnz	r3, 8006c70 <__swbuf_r+0x32>
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 f82b 	bl	8006cbc <__swsetup_r>
 8006c66:	b118      	cbz	r0, 8006c70 <__swbuf_r+0x32>
 8006c68:	f04f 37ff 	mov.w	r7, #4294967295
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	b2f6      	uxtb	r6, r6
 8006c74:	6922      	ldr	r2, [r4, #16]
 8006c76:	4637      	mov	r7, r6
 8006c78:	1a98      	subs	r0, r3, r2
 8006c7a:	6963      	ldr	r3, [r4, #20]
 8006c7c:	4283      	cmp	r3, r0
 8006c7e:	dc05      	bgt.n	8006c8c <__swbuf_r+0x4e>
 8006c80:	4621      	mov	r1, r4
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 f9ca 	bl	800701c <_fflush_r>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d1ed      	bne.n	8006c68 <__swbuf_r+0x2a>
 8006c8c:	68a3      	ldr	r3, [r4, #8]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	60a3      	str	r3, [r4, #8]
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	6022      	str	r2, [r4, #0]
 8006c98:	701e      	strb	r6, [r3, #0]
 8006c9a:	1c43      	adds	r3, r0, #1
 8006c9c:	6962      	ldr	r2, [r4, #20]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d004      	beq.n	8006cac <__swbuf_r+0x6e>
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	07db      	lsls	r3, r3, #31
 8006ca6:	d5e1      	bpl.n	8006c6c <__swbuf_r+0x2e>
 8006ca8:	2e0a      	cmp	r6, #10
 8006caa:	d1df      	bne.n	8006c6c <__swbuf_r+0x2e>
 8006cac:	4621      	mov	r1, r4
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f000 f9b4 	bl	800701c <_fflush_r>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d0d9      	beq.n	8006c6c <__swbuf_r+0x2e>
 8006cb8:	e7d6      	b.n	8006c68 <__swbuf_r+0x2a>
	...

08006cbc <__swsetup_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	4b29      	ldr	r3, [pc, #164]	@ (8006d64 <__swsetup_r+0xa8>)
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	b118      	cbz	r0, 8006cd0 <__swsetup_r+0x14>
 8006cc8:	6a03      	ldr	r3, [r0, #32]
 8006cca:	b90b      	cbnz	r3, 8006cd0 <__swsetup_r+0x14>
 8006ccc:	f7ff fee0 	bl	8006a90 <__sinit>
 8006cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cd4:	0719      	lsls	r1, r3, #28
 8006cd6:	d422      	bmi.n	8006d1e <__swsetup_r+0x62>
 8006cd8:	06da      	lsls	r2, r3, #27
 8006cda:	d407      	bmi.n	8006cec <__swsetup_r+0x30>
 8006cdc:	2209      	movs	r2, #9
 8006cde:	602a      	str	r2, [r5, #0]
 8006ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	81a3      	strh	r3, [r4, #12]
 8006cea:	e033      	b.n	8006d54 <__swsetup_r+0x98>
 8006cec:	0758      	lsls	r0, r3, #29
 8006cee:	d512      	bpl.n	8006d16 <__swsetup_r+0x5a>
 8006cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cf2:	b141      	cbz	r1, 8006d06 <__swsetup_r+0x4a>
 8006cf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cf8:	4299      	cmp	r1, r3
 8006cfa:	d002      	beq.n	8006d02 <__swsetup_r+0x46>
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f000 f8bf 	bl	8006e80 <_free_r>
 8006d02:	2300      	movs	r3, #0
 8006d04:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d0c:	81a3      	strh	r3, [r4, #12]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	6063      	str	r3, [r4, #4]
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	f043 0308 	orr.w	r3, r3, #8
 8006d1c:	81a3      	strh	r3, [r4, #12]
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	b94b      	cbnz	r3, 8006d36 <__swsetup_r+0x7a>
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d2c:	d003      	beq.n	8006d36 <__swsetup_r+0x7a>
 8006d2e:	4621      	mov	r1, r4
 8006d30:	4628      	mov	r0, r5
 8006d32:	f000 f9c0 	bl	80070b6 <__smakebuf_r>
 8006d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d3a:	f013 0201 	ands.w	r2, r3, #1
 8006d3e:	d00a      	beq.n	8006d56 <__swsetup_r+0x9a>
 8006d40:	2200      	movs	r2, #0
 8006d42:	60a2      	str	r2, [r4, #8]
 8006d44:	6962      	ldr	r2, [r4, #20]
 8006d46:	4252      	negs	r2, r2
 8006d48:	61a2      	str	r2, [r4, #24]
 8006d4a:	6922      	ldr	r2, [r4, #16]
 8006d4c:	b942      	cbnz	r2, 8006d60 <__swsetup_r+0xa4>
 8006d4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d52:	d1c5      	bne.n	8006ce0 <__swsetup_r+0x24>
 8006d54:	bd38      	pop	{r3, r4, r5, pc}
 8006d56:	0799      	lsls	r1, r3, #30
 8006d58:	bf58      	it	pl
 8006d5a:	6962      	ldrpl	r2, [r4, #20]
 8006d5c:	60a2      	str	r2, [r4, #8]
 8006d5e:	e7f4      	b.n	8006d4a <__swsetup_r+0x8e>
 8006d60:	2000      	movs	r0, #0
 8006d62:	e7f7      	b.n	8006d54 <__swsetup_r+0x98>
 8006d64:	20000018 	.word	0x20000018

08006d68 <memset>:
 8006d68:	4402      	add	r2, r0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d100      	bne.n	8006d72 <memset+0xa>
 8006d70:	4770      	bx	lr
 8006d72:	f803 1b01 	strb.w	r1, [r3], #1
 8006d76:	e7f9      	b.n	8006d6c <memset+0x4>

08006d78 <_close_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	4d05      	ldr	r5, [pc, #20]	@ (8006d94 <_close_r+0x1c>)
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f7fa f94f 	bl	8001026 <_close>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_close_r+0x1a>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_close_r+0x1a>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	200007ec 	.word	0x200007ec

08006d98 <_lseek_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	4d06      	ldr	r5, [pc, #24]	@ (8006db8 <_lseek_r+0x20>)
 8006d9e:	4608      	mov	r0, r1
 8006da0:	4611      	mov	r1, r2
 8006da2:	2200      	movs	r2, #0
 8006da4:	602a      	str	r2, [r5, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f7fa f964 	bl	8001074 <_lseek>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d102      	bne.n	8006db6 <_lseek_r+0x1e>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	b103      	cbz	r3, 8006db6 <_lseek_r+0x1e>
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	200007ec 	.word	0x200007ec

08006dbc <_read_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4d06      	ldr	r5, [pc, #24]	@ (8006ddc <_read_r+0x20>)
 8006dc2:	4608      	mov	r0, r1
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	602a      	str	r2, [r5, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f7fa f90e 	bl	8000fec <_read>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_read_r+0x1e>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_read_r+0x1e>
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	200007ec 	.word	0x200007ec

08006de0 <_sbrk_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	2300      	movs	r3, #0
 8006de4:	4d05      	ldr	r5, [pc, #20]	@ (8006dfc <_sbrk_r+0x1c>)
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	602b      	str	r3, [r5, #0]
 8006dec:	f7fa f950 	bl	8001090 <_sbrk>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_sbrk_r+0x1a>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_sbrk_r+0x1a>
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	200007ec 	.word	0x200007ec

08006e00 <_write_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4604      	mov	r4, r0
 8006e04:	4d06      	ldr	r5, [pc, #24]	@ (8006e20 <_write_r+0x20>)
 8006e06:	4608      	mov	r0, r1
 8006e08:	4611      	mov	r1, r2
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	602a      	str	r2, [r5, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f7f9 fe6e 	bl	8000af0 <_write>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_write_r+0x1e>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_write_r+0x1e>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	200007ec 	.word	0x200007ec

08006e24 <__errno>:
 8006e24:	4b01      	ldr	r3, [pc, #4]	@ (8006e2c <__errno+0x8>)
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20000018 	.word	0x20000018

08006e30 <__libc_init_array>:
 8006e30:	b570      	push	{r4, r5, r6, lr}
 8006e32:	4d0d      	ldr	r5, [pc, #52]	@ (8006e68 <__libc_init_array+0x38>)
 8006e34:	2600      	movs	r6, #0
 8006e36:	4c0d      	ldr	r4, [pc, #52]	@ (8006e6c <__libc_init_array+0x3c>)
 8006e38:	1b64      	subs	r4, r4, r5
 8006e3a:	10a4      	asrs	r4, r4, #2
 8006e3c:	42a6      	cmp	r6, r4
 8006e3e:	d109      	bne.n	8006e54 <__libc_init_array+0x24>
 8006e40:	4d0b      	ldr	r5, [pc, #44]	@ (8006e70 <__libc_init_array+0x40>)
 8006e42:	2600      	movs	r6, #0
 8006e44:	4c0b      	ldr	r4, [pc, #44]	@ (8006e74 <__libc_init_array+0x44>)
 8006e46:	f000 f995 	bl	8007174 <_init>
 8006e4a:	1b64      	subs	r4, r4, r5
 8006e4c:	10a4      	asrs	r4, r4, #2
 8006e4e:	42a6      	cmp	r6, r4
 8006e50:	d105      	bne.n	8006e5e <__libc_init_array+0x2e>
 8006e52:	bd70      	pop	{r4, r5, r6, pc}
 8006e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e58:	3601      	adds	r6, #1
 8006e5a:	4798      	blx	r3
 8006e5c:	e7ee      	b.n	8006e3c <__libc_init_array+0xc>
 8006e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e62:	3601      	adds	r6, #1
 8006e64:	4798      	blx	r3
 8006e66:	e7f2      	b.n	8006e4e <__libc_init_array+0x1e>
 8006e68:	08007284 	.word	0x08007284
 8006e6c:	08007284 	.word	0x08007284
 8006e70:	08007284 	.word	0x08007284
 8006e74:	08007288 	.word	0x08007288

08006e78 <__retarget_lock_init_recursive>:
 8006e78:	4770      	bx	lr

08006e7a <__retarget_lock_acquire_recursive>:
 8006e7a:	4770      	bx	lr

08006e7c <__retarget_lock_release_recursive>:
 8006e7c:	4770      	bx	lr
	...

08006e80 <_free_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4605      	mov	r5, r0
 8006e84:	2900      	cmp	r1, #0
 8006e86:	d041      	beq.n	8006f0c <_free_r+0x8c>
 8006e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e8c:	1f0c      	subs	r4, r1, #4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bfb8      	it	lt
 8006e92:	18e4      	addlt	r4, r4, r3
 8006e94:	f7ff fd64 	bl	8006960 <__malloc_lock>
 8006e98:	4a1d      	ldr	r2, [pc, #116]	@ (8006f10 <_free_r+0x90>)
 8006e9a:	6813      	ldr	r3, [r2, #0]
 8006e9c:	b933      	cbnz	r3, 8006eac <_free_r+0x2c>
 8006e9e:	6063      	str	r3, [r4, #4]
 8006ea0:	6014      	str	r4, [r2, #0]
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ea8:	f7ff bd60 	b.w	800696c <__malloc_unlock>
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	d908      	bls.n	8006ec2 <_free_r+0x42>
 8006eb0:	6820      	ldr	r0, [r4, #0]
 8006eb2:	1821      	adds	r1, r4, r0
 8006eb4:	428b      	cmp	r3, r1
 8006eb6:	bf01      	itttt	eq
 8006eb8:	6819      	ldreq	r1, [r3, #0]
 8006eba:	685b      	ldreq	r3, [r3, #4]
 8006ebc:	1809      	addeq	r1, r1, r0
 8006ebe:	6021      	streq	r1, [r4, #0]
 8006ec0:	e7ed      	b.n	8006e9e <_free_r+0x1e>
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	b10b      	cbz	r3, 8006ecc <_free_r+0x4c>
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	d9fa      	bls.n	8006ec2 <_free_r+0x42>
 8006ecc:	6811      	ldr	r1, [r2, #0]
 8006ece:	1850      	adds	r0, r2, r1
 8006ed0:	42a0      	cmp	r0, r4
 8006ed2:	d10b      	bne.n	8006eec <_free_r+0x6c>
 8006ed4:	6820      	ldr	r0, [r4, #0]
 8006ed6:	4401      	add	r1, r0
 8006ed8:	1850      	adds	r0, r2, r1
 8006eda:	6011      	str	r1, [r2, #0]
 8006edc:	4283      	cmp	r3, r0
 8006ede:	d1e0      	bne.n	8006ea2 <_free_r+0x22>
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	4408      	add	r0, r1
 8006ee6:	6053      	str	r3, [r2, #4]
 8006ee8:	6010      	str	r0, [r2, #0]
 8006eea:	e7da      	b.n	8006ea2 <_free_r+0x22>
 8006eec:	d902      	bls.n	8006ef4 <_free_r+0x74>
 8006eee:	230c      	movs	r3, #12
 8006ef0:	602b      	str	r3, [r5, #0]
 8006ef2:	e7d6      	b.n	8006ea2 <_free_r+0x22>
 8006ef4:	6820      	ldr	r0, [r4, #0]
 8006ef6:	1821      	adds	r1, r4, r0
 8006ef8:	428b      	cmp	r3, r1
 8006efa:	bf02      	ittt	eq
 8006efc:	6819      	ldreq	r1, [r3, #0]
 8006efe:	685b      	ldreq	r3, [r3, #4]
 8006f00:	1809      	addeq	r1, r1, r0
 8006f02:	6063      	str	r3, [r4, #4]
 8006f04:	bf08      	it	eq
 8006f06:	6021      	streq	r1, [r4, #0]
 8006f08:	6054      	str	r4, [r2, #4]
 8006f0a:	e7ca      	b.n	8006ea2 <_free_r+0x22>
 8006f0c:	bd38      	pop	{r3, r4, r5, pc}
 8006f0e:	bf00      	nop
 8006f10:	200006ac 	.word	0x200006ac

08006f14 <__sflush_r>:
 8006f14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1c:	0716      	lsls	r6, r2, #28
 8006f1e:	4605      	mov	r5, r0
 8006f20:	460c      	mov	r4, r1
 8006f22:	d454      	bmi.n	8006fce <__sflush_r+0xba>
 8006f24:	684b      	ldr	r3, [r1, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	dc02      	bgt.n	8006f30 <__sflush_r+0x1c>
 8006f2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	dd48      	ble.n	8006fc2 <__sflush_r+0xae>
 8006f30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f32:	2e00      	cmp	r6, #0
 8006f34:	d045      	beq.n	8006fc2 <__sflush_r+0xae>
 8006f36:	2300      	movs	r3, #0
 8006f38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f3c:	682f      	ldr	r7, [r5, #0]
 8006f3e:	6a21      	ldr	r1, [r4, #32]
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	d030      	beq.n	8006fa6 <__sflush_r+0x92>
 8006f44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	0759      	lsls	r1, r3, #29
 8006f4a:	d505      	bpl.n	8006f58 <__sflush_r+0x44>
 8006f4c:	6863      	ldr	r3, [r4, #4]
 8006f4e:	1ad2      	subs	r2, r2, r3
 8006f50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f52:	b10b      	cbz	r3, 8006f58 <__sflush_r+0x44>
 8006f54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f56:	1ad2      	subs	r2, r2, r3
 8006f58:	2300      	movs	r3, #0
 8006f5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f5c:	6a21      	ldr	r1, [r4, #32]
 8006f5e:	4628      	mov	r0, r5
 8006f60:	47b0      	blx	r6
 8006f62:	1c43      	adds	r3, r0, #1
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	d106      	bne.n	8006f76 <__sflush_r+0x62>
 8006f68:	6829      	ldr	r1, [r5, #0]
 8006f6a:	291d      	cmp	r1, #29
 8006f6c:	d82b      	bhi.n	8006fc6 <__sflush_r+0xb2>
 8006f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8007018 <__sflush_r+0x104>)
 8006f70:	40ca      	lsrs	r2, r1
 8006f72:	07d6      	lsls	r6, r2, #31
 8006f74:	d527      	bpl.n	8006fc6 <__sflush_r+0xb2>
 8006f76:	2200      	movs	r2, #0
 8006f78:	04d9      	lsls	r1, r3, #19
 8006f7a:	6062      	str	r2, [r4, #4]
 8006f7c:	6922      	ldr	r2, [r4, #16]
 8006f7e:	6022      	str	r2, [r4, #0]
 8006f80:	d504      	bpl.n	8006f8c <__sflush_r+0x78>
 8006f82:	1c42      	adds	r2, r0, #1
 8006f84:	d101      	bne.n	8006f8a <__sflush_r+0x76>
 8006f86:	682b      	ldr	r3, [r5, #0]
 8006f88:	b903      	cbnz	r3, 8006f8c <__sflush_r+0x78>
 8006f8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f8e:	602f      	str	r7, [r5, #0]
 8006f90:	b1b9      	cbz	r1, 8006fc2 <__sflush_r+0xae>
 8006f92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f96:	4299      	cmp	r1, r3
 8006f98:	d002      	beq.n	8006fa0 <__sflush_r+0x8c>
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f7ff ff70 	bl	8006e80 <_free_r>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fa4:	e00d      	b.n	8006fc2 <__sflush_r+0xae>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4628      	mov	r0, r5
 8006faa:	47b0      	blx	r6
 8006fac:	4602      	mov	r2, r0
 8006fae:	1c50      	adds	r0, r2, #1
 8006fb0:	d1c9      	bne.n	8006f46 <__sflush_r+0x32>
 8006fb2:	682b      	ldr	r3, [r5, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0c6      	beq.n	8006f46 <__sflush_r+0x32>
 8006fb8:	2b1d      	cmp	r3, #29
 8006fba:	d001      	beq.n	8006fc0 <__sflush_r+0xac>
 8006fbc:	2b16      	cmp	r3, #22
 8006fbe:	d11d      	bne.n	8006ffc <__sflush_r+0xe8>
 8006fc0:	602f      	str	r7, [r5, #0]
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	e021      	b.n	800700a <__sflush_r+0xf6>
 8006fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fca:	b21b      	sxth	r3, r3
 8006fcc:	e01a      	b.n	8007004 <__sflush_r+0xf0>
 8006fce:	690f      	ldr	r7, [r1, #16]
 8006fd0:	2f00      	cmp	r7, #0
 8006fd2:	d0f6      	beq.n	8006fc2 <__sflush_r+0xae>
 8006fd4:	0793      	lsls	r3, r2, #30
 8006fd6:	680e      	ldr	r6, [r1, #0]
 8006fd8:	600f      	str	r7, [r1, #0]
 8006fda:	bf0c      	ite	eq
 8006fdc:	694b      	ldreq	r3, [r1, #20]
 8006fde:	2300      	movne	r3, #0
 8006fe0:	eba6 0807 	sub.w	r8, r6, r7
 8006fe4:	608b      	str	r3, [r1, #8]
 8006fe6:	f1b8 0f00 	cmp.w	r8, #0
 8006fea:	ddea      	ble.n	8006fc2 <__sflush_r+0xae>
 8006fec:	4643      	mov	r3, r8
 8006fee:	463a      	mov	r2, r7
 8006ff0:	6a21      	ldr	r1, [r4, #32]
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ff6:	47b0      	blx	r6
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	dc08      	bgt.n	800700e <__sflush_r+0xfa>
 8006ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007000:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007004:	f04f 30ff 	mov.w	r0, #4294967295
 8007008:	81a3      	strh	r3, [r4, #12]
 800700a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700e:	4407      	add	r7, r0
 8007010:	eba8 0800 	sub.w	r8, r8, r0
 8007014:	e7e7      	b.n	8006fe6 <__sflush_r+0xd2>
 8007016:	bf00      	nop
 8007018:	20400001 	.word	0x20400001

0800701c <_fflush_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	690b      	ldr	r3, [r1, #16]
 8007020:	4605      	mov	r5, r0
 8007022:	460c      	mov	r4, r1
 8007024:	b913      	cbnz	r3, 800702c <_fflush_r+0x10>
 8007026:	2500      	movs	r5, #0
 8007028:	4628      	mov	r0, r5
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	b118      	cbz	r0, 8007036 <_fflush_r+0x1a>
 800702e:	6a03      	ldr	r3, [r0, #32]
 8007030:	b90b      	cbnz	r3, 8007036 <_fflush_r+0x1a>
 8007032:	f7ff fd2d 	bl	8006a90 <__sinit>
 8007036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0f3      	beq.n	8007026 <_fflush_r+0xa>
 800703e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007040:	07d0      	lsls	r0, r2, #31
 8007042:	d404      	bmi.n	800704e <_fflush_r+0x32>
 8007044:	0599      	lsls	r1, r3, #22
 8007046:	d402      	bmi.n	800704e <_fflush_r+0x32>
 8007048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800704a:	f7ff ff16 	bl	8006e7a <__retarget_lock_acquire_recursive>
 800704e:	4628      	mov	r0, r5
 8007050:	4621      	mov	r1, r4
 8007052:	f7ff ff5f 	bl	8006f14 <__sflush_r>
 8007056:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007058:	4605      	mov	r5, r0
 800705a:	07da      	lsls	r2, r3, #31
 800705c:	d4e4      	bmi.n	8007028 <_fflush_r+0xc>
 800705e:	89a3      	ldrh	r3, [r4, #12]
 8007060:	059b      	lsls	r3, r3, #22
 8007062:	d4e1      	bmi.n	8007028 <_fflush_r+0xc>
 8007064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007066:	f7ff ff09 	bl	8006e7c <__retarget_lock_release_recursive>
 800706a:	e7dd      	b.n	8007028 <_fflush_r+0xc>

0800706c <__swhatbuf_r>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	460c      	mov	r4, r1
 8007070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007074:	b096      	sub	sp, #88	@ 0x58
 8007076:	4615      	mov	r5, r2
 8007078:	2900      	cmp	r1, #0
 800707a:	461e      	mov	r6, r3
 800707c:	da0c      	bge.n	8007098 <__swhatbuf_r+0x2c>
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	2100      	movs	r1, #0
 8007082:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007086:	bf14      	ite	ne
 8007088:	2340      	movne	r3, #64	@ 0x40
 800708a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800708e:	2000      	movs	r0, #0
 8007090:	6031      	str	r1, [r6, #0]
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	b016      	add	sp, #88	@ 0x58
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	466a      	mov	r2, sp
 800709a:	f000 f849 	bl	8007130 <_fstat_r>
 800709e:	2800      	cmp	r0, #0
 80070a0:	dbed      	blt.n	800707e <__swhatbuf_r+0x12>
 80070a2:	9901      	ldr	r1, [sp, #4]
 80070a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80070a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80070ac:	4259      	negs	r1, r3
 80070ae:	4159      	adcs	r1, r3
 80070b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070b4:	e7eb      	b.n	800708e <__swhatbuf_r+0x22>

080070b6 <__smakebuf_r>:
 80070b6:	898b      	ldrh	r3, [r1, #12]
 80070b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ba:	079d      	lsls	r5, r3, #30
 80070bc:	4606      	mov	r6, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	d507      	bpl.n	80070d2 <__smakebuf_r+0x1c>
 80070c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070c6:	6023      	str	r3, [r4, #0]
 80070c8:	6123      	str	r3, [r4, #16]
 80070ca:	2301      	movs	r3, #1
 80070cc:	6163      	str	r3, [r4, #20]
 80070ce:	b003      	add	sp, #12
 80070d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070d2:	ab01      	add	r3, sp, #4
 80070d4:	466a      	mov	r2, sp
 80070d6:	f7ff ffc9 	bl	800706c <__swhatbuf_r>
 80070da:	9f00      	ldr	r7, [sp, #0]
 80070dc:	4605      	mov	r5, r0
 80070de:	4630      	mov	r0, r6
 80070e0:	4639      	mov	r1, r7
 80070e2:	f7ff fbbd 	bl	8006860 <_malloc_r>
 80070e6:	b948      	cbnz	r0, 80070fc <__smakebuf_r+0x46>
 80070e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ec:	059a      	lsls	r2, r3, #22
 80070ee:	d4ee      	bmi.n	80070ce <__smakebuf_r+0x18>
 80070f0:	f023 0303 	bic.w	r3, r3, #3
 80070f4:	f043 0302 	orr.w	r3, r3, #2
 80070f8:	81a3      	strh	r3, [r4, #12]
 80070fa:	e7e2      	b.n	80070c2 <__smakebuf_r+0xc>
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	6020      	str	r0, [r4, #0]
 8007100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	9b01      	ldr	r3, [sp, #4]
 8007108:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800710c:	b15b      	cbz	r3, 8007126 <__smakebuf_r+0x70>
 800710e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007112:	4630      	mov	r0, r6
 8007114:	f000 f81e 	bl	8007154 <_isatty_r>
 8007118:	b128      	cbz	r0, 8007126 <__smakebuf_r+0x70>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	f023 0303 	bic.w	r3, r3, #3
 8007120:	f043 0301 	orr.w	r3, r3, #1
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	89a3      	ldrh	r3, [r4, #12]
 8007128:	431d      	orrs	r5, r3
 800712a:	81a5      	strh	r5, [r4, #12]
 800712c:	e7cf      	b.n	80070ce <__smakebuf_r+0x18>
	...

08007130 <_fstat_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	2300      	movs	r3, #0
 8007134:	4d06      	ldr	r5, [pc, #24]	@ (8007150 <_fstat_r+0x20>)
 8007136:	4604      	mov	r4, r0
 8007138:	4608      	mov	r0, r1
 800713a:	4611      	mov	r1, r2
 800713c:	602b      	str	r3, [r5, #0]
 800713e:	f7f9 ff7e 	bl	800103e <_fstat>
 8007142:	1c43      	adds	r3, r0, #1
 8007144:	d102      	bne.n	800714c <_fstat_r+0x1c>
 8007146:	682b      	ldr	r3, [r5, #0]
 8007148:	b103      	cbz	r3, 800714c <_fstat_r+0x1c>
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	bd38      	pop	{r3, r4, r5, pc}
 800714e:	bf00      	nop
 8007150:	200007ec 	.word	0x200007ec

08007154 <_isatty_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	2300      	movs	r3, #0
 8007158:	4d05      	ldr	r5, [pc, #20]	@ (8007170 <_isatty_r+0x1c>)
 800715a:	4604      	mov	r4, r0
 800715c:	4608      	mov	r0, r1
 800715e:	602b      	str	r3, [r5, #0]
 8007160:	f7f9 ff7d 	bl	800105e <_isatty>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_isatty_r+0x1a>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_isatty_r+0x1a>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	200007ec 	.word	0x200007ec

08007174 <_init>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	bf00      	nop
 8007178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717a:	bc08      	pop	{r3}
 800717c:	469e      	mov	lr, r3
 800717e:	4770      	bx	lr

08007180 <_fini>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	bf00      	nop
 8007184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007186:	bc08      	pop	{r3}
 8007188:	469e      	mov	lr, r3
 800718a:	4770      	bx	lr
