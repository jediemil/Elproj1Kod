
InstaCoolerSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008360  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c6  08008598  08008598  00009598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008760  08008760  00009760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08008764  08008764  00009764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000068  20000000  08008768  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000087a  20000068  080087d0  0000a068  2**2
                  ALLOC
  7 ._user_heap_stack 00000606  200008e2  080087d0  0000a8e2  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001be6b  00000000  00000000  0000a09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000038b1  00000000  00000000  00025f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001750  00000000  00000000  000297c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000011f6  00000000  00000000  0002af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035dd2  00000000  00000000  0002c106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001ef6b  00000000  00000000  00061ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001478a9  00000000  00000000  00080e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001c86ec  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006c50  00000000  00000000  001c8730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000068  00000000  00000000  001cf380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	08008580 	.word	0x08008580

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	08008580 	.word	0x08008580

08000278 <_Z6setPWMP17TIM_HandleTypeDefmh>:
#include "include.h"

bool motor_initialized = false;
static Status status();

void setPWM(TIM_HandleTypeDef *timer_handle, uint32_t timer_channel, uint8_t duty) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	4613      	mov	r3, r2
 8000284:	71fb      	strb	r3, [r7, #7]
    uint32_t counter_period = __HAL_TIM_GET_AUTORELOAD(timer_handle); // Get the ARR value (number of ticks per period)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800028c:	617b      	str	r3, [r7, #20]
    uint32_t new_duty = duty / 255.0f * counter_period; // Calculate new duty value
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	ee07 3a90 	vmov	s15, r3
 8000294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000298:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000320 <_Z6setPWMP17TIM_HandleTypeDefmh+0xa8>
 800029c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	ee07 3a90 	vmov	s15, r3
 80002a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002b2:	ee17 3a90 	vmov	r3, s15
 80002b6:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, new_duty); // Set compare value to new duty
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d104      	bne.n	80002c8 <_Z6setPWMP17TIM_HandleTypeDefmh+0x50>
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	693a      	ldr	r2, [r7, #16]
 80002c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80002c6:	e023      	b.n	8000310 <_Z6setPWMP17TIM_HandleTypeDefmh+0x98>
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	d104      	bne.n	80002d8 <_Z6setPWMP17TIM_HandleTypeDefmh+0x60>
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	693a      	ldr	r2, [r7, #16]
 80002d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80002d6:	e01b      	b.n	8000310 <_Z6setPWMP17TIM_HandleTypeDefmh+0x98>
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	2b08      	cmp	r3, #8
 80002dc:	d104      	bne.n	80002e8 <_Z6setPWMP17TIM_HandleTypeDefmh+0x70>
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	693a      	ldr	r2, [r7, #16]
 80002e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80002e6:	e013      	b.n	8000310 <_Z6setPWMP17TIM_HandleTypeDefmh+0x98>
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	2b0c      	cmp	r3, #12
 80002ec:	d104      	bne.n	80002f8 <_Z6setPWMP17TIM_HandleTypeDefmh+0x80>
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	693a      	ldr	r2, [r7, #16]
 80002f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80002f6:	e00b      	b.n	8000310 <_Z6setPWMP17TIM_HandleTypeDefmh+0x98>
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	2b10      	cmp	r3, #16
 80002fc:	d104      	bne.n	8000308 <_Z6setPWMP17TIM_HandleTypeDefmh+0x90>
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	693a      	ldr	r2, [r7, #16]
 8000304:	649a      	str	r2, [r3, #72]	@ 0x48
 8000306:	e003      	b.n	8000310 <_Z6setPWMP17TIM_HandleTypeDefmh+0x98>
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	693a      	ldr	r2, [r7, #16]
 800030e:	64da      	str	r2, [r3, #76]	@ 0x4c
    HAL_TIM_PWM_Start(timer_handle, timer_channel); // Start PWM
 8000310:	68b9      	ldr	r1, [r7, #8]
 8000312:	68f8      	ldr	r0, [r7, #12]
 8000314:	f005 fbdc 	bl	8005ad0 <HAL_TIM_PWM_Start>
}
 8000318:	bf00      	nop
 800031a:	3718      	adds	r7, #24
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	437f0000 	.word	0x437f0000

08000324 <_Z6setRGBhhh>:
    __HAL_TIM_SET_AUTORELOAD(timer, counter_period);		// Set the ARR value (the counter period)

    setPWM(timer, channel, 128);
}

void setRGB(uint8_t r, uint8_t g, uint8_t b) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
 800032e:	460b      	mov	r3, r1
 8000330:	71bb      	strb	r3, [r7, #6]
 8000332:	4613      	mov	r3, r2
 8000334:	717b      	strb	r3, [r7, #5]
    TIM_HandleTypeDef *htim = &LED_TIMER_HANDLE;
 8000336:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <_Z6setRGBhhh+0x44>)
 8000338:	60fb      	str	r3, [r7, #12]
    setPWM(htim, LED_R_CHANNEL, r);
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	461a      	mov	r2, r3
 800033e:	2104      	movs	r1, #4
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f7ff ff99 	bl	8000278 <_Z6setPWMP17TIM_HandleTypeDefmh>
    setPWM(htim, LED_G_CHANNEL, g);
 8000346:	79bb      	ldrb	r3, [r7, #6]
 8000348:	461a      	mov	r2, r3
 800034a:	2108      	movs	r1, #8
 800034c:	68f8      	ldr	r0, [r7, #12]
 800034e:	f7ff ff93 	bl	8000278 <_Z6setPWMP17TIM_HandleTypeDefmh>
    setPWM(htim, LED_B_CHANNEL, b);
 8000352:	797b      	ldrb	r3, [r7, #5]
 8000354:	461a      	mov	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	68f8      	ldr	r0, [r7, #12]
 800035a:	f7ff ff8d 	bl	8000278 <_Z6setPWMP17TIM_HandleTypeDefmh>
}
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	200001cc 	.word	0x200001cc

0800036c <_Z9write_i2cthPKvjPv>:
	TIM_HandleTypeDef *htim = &MOTOR_TIMER_HANDLE;
	uint8_t duty = (throttle / 100.0f + 0.01f) * 255;
	setPWM(htim, MOTOR_TIMER_CHANNEL, duty);
}

bool write_i2c(uint16_t addr, uint8_t reg, void const* buf, size_t len, void* context) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b08a      	sub	sp, #40	@ 0x28
 8000370:	af04      	add	r7, sp, #16
 8000372:	60ba      	str	r2, [r7, #8]
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	4603      	mov	r3, r0
 8000378:	81fb      	strh	r3, [r7, #14]
 800037a:	460b      	mov	r3, r1
 800037c:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 800037e:	200a      	movs	r0, #10
 8000380:	f001 f8ba 	bl	80014f8 <HAL_Delay>
	printf("Write\n");
 8000384:	4822      	ldr	r0, [pc, #136]	@ (8000410 <_Z9write_i2cthPKvjPv+0xa4>)
 8000386:	f007 fabb 	bl	8007900 <puts>
	//__disable_irq();
	uint8_t status = HAL_I2C_Mem_Write(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)buf, len, 1000);
 800038a:	7b7b      	ldrb	r3, [r7, #13]
 800038c:	b29a      	uxth	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	b29b      	uxth	r3, r3
 8000392:	89f9      	ldrh	r1, [r7, #14]
 8000394:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000398:	9002      	str	r0, [sp, #8]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	2301      	movs	r3, #1
 80003a2:	481c      	ldr	r0, [pc, #112]	@ (8000414 <_Z9write_i2cthPKvjPv+0xa8>)
 80003a4:	f002 fa1e 	bl	80027e4 <HAL_I2C_Mem_Write>
 80003a8:	4603      	mov	r3, r0
 80003aa:	75fb      	strb	r3, [r7, #23]
	//__enable_irq();
	  if (status == HAL_OK) {
 80003ac:	7dfb      	ldrb	r3, [r7, #23]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d117      	bne.n	80003e2 <_Z9write_i2cthPKvjPv+0x76>
		  uint8_t color = rand() % 255;
 80003b2:	f007 f94f 	bl	8007654 <rand>
 80003b6:	4602      	mov	r2, r0
 80003b8:	4b17      	ldr	r3, [pc, #92]	@ (8000418 <_Z9write_i2cthPKvjPv+0xac>)
 80003ba:	fb83 1302 	smull	r1, r3, r3, r2
 80003be:	4413      	add	r3, r2
 80003c0:	11d9      	asrs	r1, r3, #7
 80003c2:	17d3      	asrs	r3, r2, #31
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	460b      	mov	r3, r1
 80003c8:	021b      	lsls	r3, r3, #8
 80003ca:	1a5b      	subs	r3, r3, r1
 80003cc:	1ad1      	subs	r1, r2, r3
 80003ce:	460b      	mov	r3, r1
 80003d0:	75bb      	strb	r3, [r7, #22]
		  setRGB(0, color, color);
 80003d2:	7dba      	ldrb	r2, [r7, #22]
 80003d4:	7dbb      	ldrb	r3, [r7, #22]
 80003d6:	4619      	mov	r1, r3
 80003d8:	2000      	movs	r0, #0
 80003da:	f7ff ffa3 	bl	8000324 <_Z6setRGBhhh>
		  return true;
 80003de:	2301      	movs	r3, #1
 80003e0:	e011      	b.n	8000406 <_Z9write_i2cthPKvjPv+0x9a>
	  } else if (status == HAL_ERROR) {
 80003e2:	7dfb      	ldrb	r3, [r7, #23]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d105      	bne.n	80003f4 <_Z9write_i2cthPKvjPv+0x88>
		  setRGB(255, 0, 0);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2100      	movs	r1, #0
 80003ec:	20ff      	movs	r0, #255	@ 0xff
 80003ee:	f7ff ff99 	bl	8000324 <_Z6setRGBhhh>
 80003f2:	e007      	b.n	8000404 <_Z9write_i2cthPKvjPv+0x98>
	  } else if (status == HAL_TIMEOUT) {
 80003f4:	7dfb      	ldrb	r3, [r7, #23]
 80003f6:	2b03      	cmp	r3, #3
 80003f8:	d104      	bne.n	8000404 <_Z9write_i2cthPKvjPv+0x98>
		  setRGB(0, 0, 255);
 80003fa:	22ff      	movs	r2, #255	@ 0xff
 80003fc:	2100      	movs	r1, #0
 80003fe:	2000      	movs	r0, #0
 8000400:	f7ff ff90 	bl	8000324 <_Z6setRGBhhh>
	  }
	  return false;
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	08008598 	.word	0x08008598
 8000414:	20000084 	.word	0x20000084
 8000418:	80808081 	.word	0x80808081

0800041c <_Z8read_i2cthPvjS_>:

bool read_i2c(uint16_t addr, uint8_t reg, void* buf, size_t len, void* context) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	@ 0x28
 8000420:	af04      	add	r7, sp, #16
 8000422:	60ba      	str	r2, [r7, #8]
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	4603      	mov	r3, r0
 8000428:	81fb      	strh	r3, [r7, #14]
 800042a:	460b      	mov	r3, r1
 800042c:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 800042e:	200a      	movs	r0, #10
 8000430:	f001 f862 	bl	80014f8 <HAL_Delay>
	printf("Read\n");
 8000434:	4822      	ldr	r0, [pc, #136]	@ (80004c0 <_Z8read_i2cthPvjS_+0xa4>)
 8000436:	f007 fa63 	bl	8007900 <puts>
	//__disable_irq();
	uint8_t status = HAL_I2C_Mem_Read(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)buf, len, 1000);
 800043a:	7b7b      	ldrb	r3, [r7, #13]
 800043c:	b29a      	uxth	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	b29b      	uxth	r3, r3
 8000442:	89f9      	ldrh	r1, [r7, #14]
 8000444:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000448:	9002      	str	r0, [sp, #8]
 800044a:	9301      	str	r3, [sp, #4]
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	9300      	str	r3, [sp, #0]
 8000450:	2301      	movs	r3, #1
 8000452:	481c      	ldr	r0, [pc, #112]	@ (80004c4 <_Z8read_i2cthPvjS_+0xa8>)
 8000454:	f002 fada 	bl	8002a0c <HAL_I2C_Mem_Read>
 8000458:	4603      	mov	r3, r0
 800045a:	75fb      	strb	r3, [r7, #23]
	//__enable_irq();
	if (status == HAL_OK) {
 800045c:	7dfb      	ldrb	r3, [r7, #23]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d117      	bne.n	8000492 <_Z8read_i2cthPvjS_+0x76>
		uint8_t color = rand() % 255;
 8000462:	f007 f8f7 	bl	8007654 <rand>
 8000466:	4602      	mov	r2, r0
 8000468:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <_Z8read_i2cthPvjS_+0xac>)
 800046a:	fb83 1302 	smull	r1, r3, r3, r2
 800046e:	4413      	add	r3, r2
 8000470:	11d9      	asrs	r1, r3, #7
 8000472:	17d3      	asrs	r3, r2, #31
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	460b      	mov	r3, r1
 8000478:	021b      	lsls	r3, r3, #8
 800047a:	1a5b      	subs	r3, r3, r1
 800047c:	1ad1      	subs	r1, r2, r3
 800047e:	460b      	mov	r3, r1
 8000480:	75bb      	strb	r3, [r7, #22]
		setRGB(color, 0, color);
 8000482:	7dba      	ldrb	r2, [r7, #22]
 8000484:	7dbb      	ldrb	r3, [r7, #22]
 8000486:	2100      	movs	r1, #0
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff4b 	bl	8000324 <_Z6setRGBhhh>
		return true;
 800048e:	2301      	movs	r3, #1
 8000490:	e011      	b.n	80004b6 <_Z8read_i2cthPvjS_+0x9a>
	} else if (status == HAL_ERROR) {
 8000492:	7dfb      	ldrb	r3, [r7, #23]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d105      	bne.n	80004a4 <_Z8read_i2cthPvjS_+0x88>
		setRGB(255, 0, 20);
 8000498:	2214      	movs	r2, #20
 800049a:	2100      	movs	r1, #0
 800049c:	20ff      	movs	r0, #255	@ 0xff
 800049e:	f7ff ff41 	bl	8000324 <_Z6setRGBhhh>
 80004a2:	e007      	b.n	80004b4 <_Z8read_i2cthPvjS_+0x98>
	} else if (status == HAL_TIMEOUT) {
 80004a4:	7dfb      	ldrb	r3, [r7, #23]
 80004a6:	2b03      	cmp	r3, #3
 80004a8:	d104      	bne.n	80004b4 <_Z8read_i2cthPvjS_+0x98>
		setRGB(0, 0, 20);
 80004aa:	2214      	movs	r2, #20
 80004ac:	2100      	movs	r1, #0
 80004ae:	2000      	movs	r0, #0
 80004b0:	f7ff ff38 	bl	8000324 <_Z6setRGBhhh>
	}
	return false;
 80004b4:	2300      	movs	r3, #0
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	080085a0 	.word	0x080085a0
 80004c4:	20000084 	.word	0x20000084
 80004c8:	80808081 	.word	0x80808081

080004cc <main_cpp>:

int main_cpp()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0
	stusb4500_t device;
	  device.addr = 0x28;
 80004d2:	2328      	movs	r3, #40	@ 0x28
 80004d4:	82bb      	strh	r3, [r7, #20]
	  device.write = &write_i2c;
 80004d6:	4b20      	ldr	r3, [pc, #128]	@ (8000558 <main_cpp+0x8c>)
 80004d8:	61bb      	str	r3, [r7, #24]
	  device.read = &read_i2c;
 80004da:	4b20      	ldr	r3, [pc, #128]	@ (800055c <main_cpp+0x90>)
 80004dc:	61fb      	str	r3, [r7, #28]
	  device.context = (void*)1000;
 80004de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004e2:	623b      	str	r3, [r7, #32]
	  stusb4500_gpio_cfg_t gpio_cfg;
	  gpio_cfg = STUSB4500_GPIO_CFG_SINK_POWER;
 80004e4:	2303      	movs	r3, #3
 80004e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  stusb4500_nvm_config_t config;
	  config.pdo1_current_ma = 500;
 80004ea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80004ee:	80bb      	strh	r3, [r7, #4]
	  config.pdo2_voltage_mv = 1500;
 80004f0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80004f4:	80fb      	strh	r3, [r7, #6]
	  config.pdo2_current_ma = 3000;
 80004f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80004fa:	813b      	strh	r3, [r7, #8]
	  config.pdo3_voltage_mv = 12000;
 80004fc:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000500:	817b      	strh	r3, [r7, #10]
	  config.pdo3_current_ma = 3000;
 8000502:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000506:	81bb      	strh	r3, [r7, #12]
	  config.num_valid_pdos = 3;
 8000508:	2303      	movs	r3, #3
 800050a:	743b      	strb	r3, [r7, #16]
	  config.pdo_current_fallback = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	81fb      	strh	r3, [r7, #14]
	  config.use_src_current = false;
 8000510:	2300      	movs	r3, #0
 8000512:	747b      	strb	r3, [r7, #17]
	  config.only_above_5v = false;
 8000514:	2300      	movs	r3, #0
 8000516:	74bb      	strb	r3, [r7, #18]
	  config.gpio_cfg = gpio_cfg;
 8000518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800051c:	74fb      	strb	r3, [r7, #19]
	  setRGB(0, 0, 255);
 800051e:	22ff      	movs	r2, #255	@ 0xff
 8000520:	2100      	movs	r1, #0
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff fefe 	bl	8000324 <_Z6setRGBhhh>
	  HAL_Delay(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052c:	f000 ffe4 	bl	80014f8 <HAL_Delay>
	  setRGB(0, 0, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff fef5 	bl	8000324 <_Z6setRGBhhh>
	  HAL_Delay(1000);
 800053a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800053e:	f000 ffdb 	bl	80014f8 <HAL_Delay>
	  setRGB(0, 0, 255);
 8000542:	22ff      	movs	r2, #255	@ 0xff
 8000544:	2100      	movs	r1, #0
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff feec 	bl	8000324 <_Z6setRGBhhh>

	  //bool success = stusb4500_nvm_flash(&device, &config);
	  printf("Begin\n");
 800054c:	4804      	ldr	r0, [pc, #16]	@ (8000560 <main_cpp+0x94>)
 800054e:	f007 f9d7 	bl	8007900 <puts>
	  }*/
	  /* USER CODE END 2 */

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1)
 8000552:	bf00      	nop
 8000554:	e7fd      	b.n	8000552 <main_cpp+0x86>
 8000556:	bf00      	nop
 8000558:	0800036d 	.word	0x0800036d
 800055c:	0800041d 	.word	0x0800041d
 8000560:	080085a8 	.word	0x080085a8

08000564 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800056a:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <MX_GPDMA1_Init+0x4c>)
 800056c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000570:	4a0f      	ldr	r2, [pc, #60]	@ (80005b0 <MX_GPDMA1_Init+0x4c>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800057a:	4b0d      	ldr	r3, [pc, #52]	@ (80005b0 <MX_GPDMA1_Init+0x4c>)
 800057c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2100      	movs	r1, #0
 800058c:	2021      	movs	r0, #33	@ 0x21
 800058e:	f001 f88f 	bl	80016b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 8000592:	2021      	movs	r0, #33	@ 0x21
 8000594:	f001 f8a6 	bl	80016e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	2022      	movs	r0, #34	@ 0x22
 800059e:	f001 f887 	bl	80016b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 80005a2:	2022      	movs	r0, #34	@ 0x22
 80005a4:	f001 f89e 	bl	80016e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	46020c00 	.word	0x46020c00

080005b4 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <MX_GPIO_Init+0x6c>)
 80005bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c0:	4a17      	ldr	r2, [pc, #92]	@ (8000620 <MX_GPIO_Init+0x6c>)
 80005c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <MX_GPIO_Init+0x6c>)
 80005cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_GPIO_Init+0x6c>)
 80005da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005de:	4a10      	ldr	r2, [pc, #64]	@ (8000620 <MX_GPIO_Init+0x6c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <MX_GPIO_Init+0x6c>)
 80005ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <MX_GPIO_Init+0x6c>)
 80005f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005fc:	4a08      	ldr	r2, [pc, #32]	@ (8000620 <MX_GPIO_Init+0x6c>)
 80005fe:	f043 0302 	orr.w	r3, r3, #2
 8000602:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000606:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <MX_GPIO_Init+0x6c>)
 8000608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800060c:	f003 0302 	and.w	r3, r3, #2
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	46020c00 	.word	0x46020c00

08000624 <MX_I2C2_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel5;
DMA_HandleTypeDef handle_GPDMA1_Channel4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_I2C2_Init+0x74>)
 800062a:	4a1c      	ldr	r2, [pc, #112]	@ (800069c <MX_I2C2_Init+0x78>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800062e:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000630:	4a1b      	ldr	r2, [pc, #108]	@ (80006a0 <MX_I2C2_Init+0x7c>)
 8000632:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 80;
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000636:	2250      	movs	r2, #80	@ 0x50
 8000638:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <MX_I2C2_Init+0x74>)
 800063c:	2201      	movs	r2, #1
 800063e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_I2C2_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_I2C2_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800065e:	480e      	ldr	r0, [pc, #56]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000660:	f002 f824 	bl	80026ac <HAL_I2C_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800066a:	f000 f9bb 	bl	80009e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800066e:	2100      	movs	r1, #0
 8000670:	4809      	ldr	r0, [pc, #36]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000672:	f002 fdc1 	bl	80031f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800067c:	f000 f9b2 	bl	80009e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000680:	2100      	movs	r1, #0
 8000682:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000684:	f002 fe03 	bl	800328e <HAL_I2CEx_ConfigDigitalFilter>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800068e:	f000 f9a9 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000084 	.word	0x20000084
 800069c:	40005800 	.word	0x40005800
 80006a0:	00303d5b 	.word	0x00303d5b

080006a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0ba      	sub	sp, #232	@ 0xe8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	22c0      	movs	r2, #192	@ 0xc0
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f007 f9fb 	bl	8007ac0 <memset>
  if(i2cHandle->Instance==I2C2)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a6c      	ldr	r2, [pc, #432]	@ (8000880 <HAL_I2C_MspInit+0x1dc>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	f040 80d1 	bne.w	8000878 <HAL_I2C_MspInit+0x1d4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006d6:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80006da:	f04f 0300 	mov.w	r3, #0
 80006de:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fa64 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80006f6:	f000 f975 	bl	80009e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b62      	ldr	r3, [pc, #392]	@ (8000884 <HAL_I2C_MspInit+0x1e0>)
 80006fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000700:	4a60      	ldr	r2, [pc, #384]	@ (8000884 <HAL_I2C_MspInit+0x1e0>)
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800070a:	4b5e      	ldr	r3, [pc, #376]	@ (8000884 <HAL_I2C_MspInit+0x1e0>)
 800070c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000718:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800071c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000720:	2312      	movs	r3, #18
 8000722:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000732:	2304      	movs	r3, #4
 8000734:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800073c:	4619      	mov	r1, r3
 800073e:	4852      	ldr	r0, [pc, #328]	@ (8000888 <HAL_I2C_MspInit+0x1e4>)
 8000740:	f001 fddc 	bl	80022fc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000744:	4b4f      	ldr	r3, [pc, #316]	@ (8000884 <HAL_I2C_MspInit+0x1e0>)
 8000746:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800074a:	4a4e      	ldr	r2, [pc, #312]	@ (8000884 <HAL_I2C_MspInit+0x1e0>)
 800074c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000750:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000754:	4b4b      	ldr	r3, [pc, #300]	@ (8000884 <HAL_I2C_MspInit+0x1e0>)
 8000756:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800075a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* GPDMA1_REQUEST_I2C2_TX Init */
    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 8000762:	4b4a      	ldr	r3, [pc, #296]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 8000764:	4a4a      	ldr	r2, [pc, #296]	@ (8000890 <HAL_I2C_MspInit+0x1ec>)
 8000766:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.Init.Request = GPDMA1_REQUEST_I2C2_TX;
 8000768:	4b48      	ldr	r3, [pc, #288]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 800076a:	2210      	movs	r2, #16
 800076c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel5.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800076e:	4b47      	ldr	r3, [pc, #284]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel5.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000774:	4b45      	ldr	r3, [pc, #276]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 8000776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800077a:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel5.Init.SrcInc = DMA_SINC_FIXED;
 800077c:	4b43      	ldr	r3, [pc, #268]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel5.Init.DestInc = DMA_DINC_FIXED;
 8000782:	4b42      	ldr	r3, [pc, #264]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel5.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000788:	4b40      	ldr	r3, [pc, #256]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel5.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800078e:	4b3f      	ldr	r3, [pc, #252]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel5.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000794:	4b3d      	ldr	r3, [pc, #244]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel5.Init.SrcBurstLength = 1;
 800079a:	4b3c      	ldr	r3, [pc, #240]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 800079c:	2201      	movs	r2, #1
 800079e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel5.Init.DestBurstLength = 1;
 80007a0:	4b3a      	ldr	r3, [pc, #232]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel5.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80007a6:	4b39      	ldr	r3, [pc, #228]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel5.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80007ac:	4b37      	ldr	r3, [pc, #220]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel5.Init.Mode = DMA_NORMAL;
 80007b2:	4b36      	ldr	r3, [pc, #216]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 80007b8:	4834      	ldr	r0, [pc, #208]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 80007ba:	f001 f855 	bl	8001868 <HAL_DMA_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_I2C_MspInit+0x124>
    {
      Error_Handler();
 80007c4:	f000 f90e 	bl	80009e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle, hdmatx, handle_GPDMA1_Channel5);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a30      	ldr	r2, [pc, #192]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 80007cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80007ce:	4a2f      	ldr	r2, [pc, #188]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 80007d4:	2110      	movs	r1, #16
 80007d6:	482d      	ldr	r0, [pc, #180]	@ (800088c <HAL_I2C_MspInit+0x1e8>)
 80007d8:	f001 fad3 	bl	8001d82 <HAL_DMA_ConfigChannelAttributes>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <HAL_I2C_MspInit+0x142>
    {
      Error_Handler();
 80007e2:	f000 f8ff 	bl	80009e4 <Error_Handler>
    }

    /* GPDMA1_REQUEST_I2C2_RX Init */
    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 80007e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 80007e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000898 <HAL_I2C_MspInit+0x1f4>)
 80007ea:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.Init.Request = GPDMA1_REQUEST_I2C2_RX;
 80007ec:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 80007ee:	220f      	movs	r2, #15
 80007f0:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel4.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80007f2:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f8:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel4.Init.SrcInc = DMA_SINC_FIXED;
 80007fe:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel4.Init.DestInc = DMA_DINC_FIXED;
 8000804:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel4.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800080a:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel4.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000810:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel4.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000816:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel4.Init.SrcBurstLength = 1;
 800081c:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 800081e:	2201      	movs	r2, #1
 8000820:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel4.Init.DestBurstLength = 1;
 8000822:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 8000824:	2201      	movs	r2, #1
 8000826:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel4.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 800082a:	2200      	movs	r2, #0
 800082c:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel4.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 8000830:	2200      	movs	r2, #0
 8000832:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel4.Init.Mode = DMA_NORMAL;
 8000834:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 8000836:	2200      	movs	r2, #0
 8000838:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 800083a:	4816      	ldr	r0, [pc, #88]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 800083c:	f001 f814 	bl	8001868 <HAL_DMA_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_I2C_MspInit+0x1a6>
    {
      Error_Handler();
 8000846:	f000 f8cd 	bl	80009e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle, hdmarx, handle_GPDMA1_Channel4);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a11      	ldr	r2, [pc, #68]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 800084e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000850:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000856:	2110      	movs	r1, #16
 8000858:	480e      	ldr	r0, [pc, #56]	@ (8000894 <HAL_I2C_MspInit+0x1f0>)
 800085a:	f001 fa92 	bl	8001d82 <HAL_DMA_ConfigChannelAttributes>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <HAL_I2C_MspInit+0x1c4>
    {
      Error_Handler();
 8000864:	f000 f8be 	bl	80009e4 <Error_Handler>
    }

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	2039      	movs	r0, #57	@ 0x39
 800086e:	f000 ff1f 	bl	80016b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000872:	2039      	movs	r0, #57	@ 0x39
 8000874:	f000 ff36 	bl	80016e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000878:	bf00      	nop
 800087a:	37e8      	adds	r7, #232	@ 0xe8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40005800 	.word	0x40005800
 8000884:	46020c00 	.word	0x46020c00
 8000888:	42020400 	.word	0x42020400
 800088c:	200000d8 	.word	0x200000d8
 8000890:	400202d0 	.word	0x400202d0
 8000894:	20000150 	.word	0x20000150
 8000898:	40020250 	.word	0x40020250

0800089c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d013      	beq.n	80008dc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80008b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80008bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d00b      	beq.n	80008dc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80008c4:	e000      	b.n	80008c8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80008c6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80008c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0f9      	beq.n	80008c6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80008d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80008dc:	687b      	ldr	r3, [r7, #4]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ee:	f000 fd3d 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f2:	f000 f812 	bl	800091a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f6:	f7ff fe5d 	bl	80005b4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80008fa:	f7ff fe33 	bl	8000564 <MX_GPDMA1_Init>
  MX_TIM1_Init();
 80008fe:	f000 f9c1 	bl	8000c84 <MX_TIM1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000902:	f000 fc4b 	bl	800119c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000906:	f000 fa85 	bl	8000e14 <MX_TIM2_Init>
  MX_I2C2_Init();
 800090a:	f7ff fe8b 	bl	8000624 <MX_I2C2_Init>
  MX_TIM3_Init();
 800090e:	f000 faf7 	bl	8000f00 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  main_cpp();
 8000912:	f7ff fddb 	bl	80004cc <main_cpp>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000916:	bf00      	nop
 8000918:	e7fd      	b.n	8000916 <main+0x2c>

0800091a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b09e      	sub	sp, #120	@ 0x78
 800091e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000920:	f107 0318 	add.w	r3, r7, #24
 8000924:	2260      	movs	r2, #96	@ 0x60
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f007 f8c9 	bl	8007ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092e:	463b      	mov	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
 800093c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 800093e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000942:	f002 fe2d 	bl	80035a0 <HAL_PWREx_ControlVoltageScaling>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800094c:	f000 f84a 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000950:	2321      	movs	r3, #33	@ 0x21
 8000952:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000958:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800095a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000960:	2300      	movs	r3, #0
 8000962:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f107 0318 	add.w	r3, r7, #24
 8000968:	4618      	mov	r0, r3
 800096a:	f002 feb5 	bl	80036d8 <HAL_RCC_OscConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000974:	f000 f836 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000978:	231f      	movs	r3, #31
 800097a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800097c:	2302      	movs	r3, #2
 800097e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000990:	463b      	mov	r3, r7
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f003 fd7b 	bl	8004490 <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009a0:	f000 f820 	bl	80009e4 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3778      	adds	r7, #120	@ 0x78
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e009      	b.n	80009d2 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	60ba      	str	r2, [r7, #8]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff68 	bl	800089c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	3301      	adds	r3, #1
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	697a      	ldr	r2, [r7, #20]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	dbf1      	blt.n	80009be <_write+0x12>
  }
  return len;
 80009da:	687b      	ldr	r3, [r7, #4]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HAL_MspInit+0x30>)
 80009f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009fc:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <HAL_MspInit+0x30>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_MspInit+0x30>)
 8000a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000a14:	f002 fe50 	bl	80036b8 <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	46020c00 	.word	0x46020c00

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7a:	f000 fd1d 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <GPDMA1_Channel4_IRQHandler+0x10>)
 8000a8a:	f001 f819 	bl	8001ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000150 	.word	0x20000150

08000a98 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8000a9c:	4802      	ldr	r0, [pc, #8]	@ (8000aa8 <GPDMA1_Channel5_IRQHandler+0x10>)
 8000a9e:	f001 f80f 	bl	8001ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200000d8 	.word	0x200000d8

08000aac <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000ab0:	4802      	ldr	r0, [pc, #8]	@ (8000abc <I2C2_EV_IRQHandler+0x10>)
 8000ab2:	f002 f8c5 	bl	8002c40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000084 	.word	0x20000084

08000ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return 1;
 8000ac4:	2301      	movs	r3, #1
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <_kill>:

int _kill(int pid, int sig)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ada:	f007 f84f 	bl	8007b7c <__errno>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2216      	movs	r2, #22
 8000ae2:	601a      	str	r2, [r3, #0]
  return -1;
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_exit>:

void _exit (int status)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ffe7 	bl	8000ad0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b02:	bf00      	nop
 8000b04:	e7fd      	b.n	8000b02 <_exit+0x12>

08000b06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	e00a      	b.n	8000b2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b18:	f3af 8000 	nop.w
 8000b1c:	4601      	mov	r1, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	60ba      	str	r2, [r7, #8]
 8000b24:	b2ca      	uxtb	r2, r1
 8000b26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dbf0      	blt.n	8000b18 <_read+0x12>
  }

  return len;
 8000b36:	687b      	ldr	r3, [r7, #4]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b68:	605a      	str	r2, [r3, #4]
  return 0;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_isatty>:

int _isatty(int file)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b80:	2301      	movs	r3, #1
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b085      	sub	sp, #20
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	@ (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f006 ffd0 	bl	8007b7c <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200c0000 	.word	0x200c0000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	200001c8 	.word	0x200001c8
 8000c10:	200008e8 	.word	0x200008e8

08000c14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <SystemInit+0x68>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1e:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <SystemInit+0x68>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <SystemInit+0x6c>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <SystemInit+0x6c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <SystemInit+0x6c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <SystemInit+0x6c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <SystemInit+0x6c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0e      	ldr	r2, [pc, #56]	@ (8000c80 <SystemInit+0x6c>)
 8000c46:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000c4a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c50:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <SystemInit+0x6c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <SystemInit+0x6c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a09      	ldr	r2, [pc, #36]	@ (8000c80 <SystemInit+0x6c>)
 8000c5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <SystemInit+0x6c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <SystemInit+0x68>)
 8000c6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c6e:	609a      	str	r2, [r3, #8]
  #endif
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00
 8000c80:	46020c00 	.word	0x46020c00

08000c84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09c      	sub	sp, #112	@ 0x70
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
 8000cb4:	615a      	str	r2, [r3, #20]
 8000cb6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2234      	movs	r2, #52	@ 0x34
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 fefe 	bl	8007ac0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc4:	4b51      	ldr	r3, [pc, #324]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000cc6:	4a52      	ldr	r2, [pc, #328]	@ (8000e10 <MX_TIM1_Init+0x18c>)
 8000cc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cca:	4b50      	ldr	r3, [pc, #320]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b4e      	ldr	r3, [pc, #312]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cd6:	4b4d      	ldr	r3, [pc, #308]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000cd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b4b      	ldr	r3, [pc, #300]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce4:	4b49      	ldr	r3, [pc, #292]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cea:	4b48      	ldr	r3, [pc, #288]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cf0:	4846      	ldr	r0, [pc, #280]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000cf2:	f004 fe35 	bl	8005960 <HAL_TIM_Base_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000cfc:	f7ff fe72 	bl	80009e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d04:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d06:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	483f      	ldr	r0, [pc, #252]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000d0e:	f005 f945 	bl	8005f9c <HAL_TIM_ConfigClockSource>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d18:	f7ff fe64 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d1c:	483b      	ldr	r0, [pc, #236]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000d1e:	f004 fe76 	bl	8005a0e <HAL_TIM_PWM_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d28:	f7ff fe5c 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4833      	ldr	r0, [pc, #204]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000d40:	f005 ffc6 	bl	8006cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000d4a:	f7ff fe4b 	bl	80009e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4e:	2360      	movs	r3, #96	@ 0x60
 8000d50:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d56:	2300      	movs	r3, #0
 8000d58:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d62:	2300      	movs	r3, #0
 8000d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4619      	mov	r1, r3
 8000d72:	4826      	ldr	r0, [pc, #152]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000d74:	f004 fffe 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000d7e:	f7ff fe31 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d86:	2204      	movs	r2, #4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4820      	ldr	r0, [pc, #128]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000d8c:	f004 fff2 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000d96:	f7ff fe25 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d9e:	2208      	movs	r2, #8
 8000da0:	4619      	mov	r1, r3
 8000da2:	481a      	ldr	r0, [pc, #104]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000da4:	f004 ffe6 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000dae:	f7ff fe19 	bl	80009e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4807      	ldr	r0, [pc, #28]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000df0:	f006 f830 	bl	8006e54 <HAL_TIMEx_ConfigBreakDeadTime>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000dfa:	f7ff fdf3 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dfe:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <MX_TIM1_Init+0x188>)
 8000e00:	f000 f944 	bl	800108c <HAL_TIM_MspPostInit>

}
 8000e04:	bf00      	nop
 8000e06:	3770      	adds	r7, #112	@ 0x70
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200001cc 	.word	0x200001cc
 8000e10:	40012c00 	.word	0x40012c00

08000e14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08e      	sub	sp, #56	@ 0x38
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e34:	463b      	mov	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]
 8000e42:	615a      	str	r2, [r3, #20]
 8000e44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e46:	4b2d      	ldr	r3, [pc, #180]	@ (8000efc <MX_TIM2_Init+0xe8>)
 8000e48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000efc <MX_TIM2_Init+0xe8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b29      	ldr	r3, [pc, #164]	@ (8000efc <MX_TIM2_Init+0xe8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e5a:	4b28      	ldr	r3, [pc, #160]	@ (8000efc <MX_TIM2_Init+0xe8>)
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e62:	4b26      	ldr	r3, [pc, #152]	@ (8000efc <MX_TIM2_Init+0xe8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <MX_TIM2_Init+0xe8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e6e:	4823      	ldr	r0, [pc, #140]	@ (8000efc <MX_TIM2_Init+0xe8>)
 8000e70:	f004 fd76 	bl	8005960 <HAL_TIM_Base_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e7a:	f7ff fdb3 	bl	80009e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481c      	ldr	r0, [pc, #112]	@ (8000efc <MX_TIM2_Init+0xe8>)
 8000e8c:	f005 f886 	bl	8005f9c <HAL_TIM_ConfigClockSource>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e96:	f7ff fda5 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e9a:	4818      	ldr	r0, [pc, #96]	@ (8000efc <MX_TIM2_Init+0xe8>)
 8000e9c:	f004 fdb7 	bl	8005a0e <HAL_TIM_PWM_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ea6:	f7ff fd9d 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4810      	ldr	r0, [pc, #64]	@ (8000efc <MX_TIM2_Init+0xe8>)
 8000eba:	f005 ff09 	bl	8006cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ec4:	f7ff fd8e 	bl	80009e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec8:	2360      	movs	r3, #96	@ 0x60
 8000eca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	4619      	mov	r1, r3
 8000ede:	4807      	ldr	r0, [pc, #28]	@ (8000efc <MX_TIM2_Init+0xe8>)
 8000ee0:	f004 ff48 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000eea:	f7ff fd7b 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000eee:	4803      	ldr	r0, [pc, #12]	@ (8000efc <MX_TIM2_Init+0xe8>)
 8000ef0:	f000 f8cc 	bl	800108c <HAL_TIM_MspPostInit>

}
 8000ef4:	bf00      	nop
 8000ef6:	3738      	adds	r7, #56	@ 0x38
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000218 	.word	0x20000218

08000f00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	@ 0x38
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f20:	463b      	mov	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f32:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe8 <MX_TIM3_Init+0xe8>)
 8000f34:	4a2d      	ldr	r2, [pc, #180]	@ (8000fec <MX_TIM3_Init+0xec>)
 8000f36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f38:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe8 <MX_TIM3_Init+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe8 <MX_TIM3_Init+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4294967295;
 8000f44:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <MX_TIM3_Init+0xe8>)
 8000f46:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4c:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <MX_TIM3_Init+0xe8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b25      	ldr	r3, [pc, #148]	@ (8000fe8 <MX_TIM3_Init+0xe8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f58:	4823      	ldr	r0, [pc, #140]	@ (8000fe8 <MX_TIM3_Init+0xe8>)
 8000f5a:	f004 fd01 	bl	8005960 <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f64:	f7ff fd3e 	bl	80009e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f72:	4619      	mov	r1, r3
 8000f74:	481c      	ldr	r0, [pc, #112]	@ (8000fe8 <MX_TIM3_Init+0xe8>)
 8000f76:	f005 f811 	bl	8005f9c <HAL_TIM_ConfigClockSource>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000f80:	f7ff fd30 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f84:	4818      	ldr	r0, [pc, #96]	@ (8000fe8 <MX_TIM3_Init+0xe8>)
 8000f86:	f004 fd42 	bl	8005a0e <HAL_TIM_PWM_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f90:	f7ff fd28 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4811      	ldr	r0, [pc, #68]	@ (8000fe8 <MX_TIM3_Init+0xe8>)
 8000fa4:	f005 fe94 	bl	8006cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fae:	f7ff fd19 	bl	80009e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb2:	2360      	movs	r3, #96	@ 0x60
 8000fb4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4807      	ldr	r0, [pc, #28]	@ (8000fe8 <MX_TIM3_Init+0xe8>)
 8000fca:	f004 fed3 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000fd4:	f7ff fd06 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fd8:	4803      	ldr	r0, [pc, #12]	@ (8000fe8 <MX_TIM3_Init+0xe8>)
 8000fda:	f000 f857 	bl	800108c <HAL_TIM_MspPostInit>

}
 8000fde:	bf00      	nop
 8000fe0:	3738      	adds	r7, #56	@ 0x38
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000264 	.word	0x20000264
 8000fec:	40000400 	.word	0x40000400

08000ff0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a20      	ldr	r2, [pc, #128]	@ (8001080 <HAL_TIM_Base_MspInit+0x90>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d10f      	bne.n	8001022 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001002:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <HAL_TIM_Base_MspInit+0x94>)
 8001004:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001008:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <HAL_TIM_Base_MspInit+0x94>)
 800100a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800100e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001012:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <HAL_TIM_Base_MspInit+0x94>)
 8001014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001020:	e028      	b.n	8001074 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM2)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800102a:	d10f      	bne.n	800104c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800102c:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <HAL_TIM_Base_MspInit+0x94>)
 800102e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001032:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <HAL_TIM_Base_MspInit+0x94>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <HAL_TIM_Base_MspInit+0x94>)
 800103e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
}
 800104a:	e013      	b.n	8001074 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM3)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <HAL_TIM_Base_MspInit+0x98>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d10e      	bne.n	8001074 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <HAL_TIM_Base_MspInit+0x94>)
 8001058:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800105c:	4a09      	ldr	r2, [pc, #36]	@ (8001084 <HAL_TIM_Base_MspInit+0x94>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001066:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <HAL_TIM_Base_MspInit+0x94>)
 8001068:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	bf00      	nop
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40012c00 	.word	0x40012c00
 8001084:	46020c00 	.word	0x46020c00
 8001088:	40000400 	.word	0x40000400

0800108c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	@ 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a38      	ldr	r2, [pc, #224]	@ (800118c <HAL_TIM_MspPostInit+0x100>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d120      	bne.n	80010f0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b38      	ldr	r3, [pc, #224]	@ (8001190 <HAL_TIM_MspPostInit+0x104>)
 80010b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010b4:	4a36      	ldr	r2, [pc, #216]	@ (8001190 <HAL_TIM_MspPostInit+0x104>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010be:	4b34      	ldr	r3, [pc, #208]	@ (8001190 <HAL_TIM_MspPostInit+0x104>)
 80010c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80010cc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010de:	2301      	movs	r3, #1
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	482a      	ldr	r0, [pc, #168]	@ (8001194 <HAL_TIM_MspPostInit+0x108>)
 80010ea:	f001 f907 	bl	80022fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010ee:	e048      	b.n	8001182 <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010f8:	d11f      	bne.n	800113a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <HAL_TIM_MspPostInit+0x104>)
 80010fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001100:	4a23      	ldr	r2, [pc, #140]	@ (8001190 <HAL_TIM_MspPostInit+0x104>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <HAL_TIM_MspPostInit+0x104>)
 800110c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001118:	2301      	movs	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001128:	2301      	movs	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4818      	ldr	r0, [pc, #96]	@ (8001194 <HAL_TIM_MspPostInit+0x108>)
 8001134:	f001 f8e2 	bl	80022fc <HAL_GPIO_Init>
}
 8001138:	e023      	b.n	8001182 <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM3)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a16      	ldr	r2, [pc, #88]	@ (8001198 <HAL_TIM_MspPostInit+0x10c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d11e      	bne.n	8001182 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_TIM_MspPostInit+0x104>)
 8001146:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800114a:	4a11      	ldr	r2, [pc, #68]	@ (8001190 <HAL_TIM_MspPostInit+0x104>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001154:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <HAL_TIM_MspPostInit+0x104>)
 8001156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001162:	2340      	movs	r3, #64	@ 0x40
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001172:	2302      	movs	r3, #2
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <HAL_TIM_MspPostInit+0x108>)
 800117e:	f001 f8bd 	bl	80022fc <HAL_GPIO_Init>
}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	@ 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40012c00 	.word	0x40012c00
 8001190:	46020c00 	.word	0x46020c00
 8001194:	42020000 	.word	0x42020000
 8001198:	40000400 	.word	0x40000400

0800119c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011a0:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a2:	4a16      	ldr	r2, [pc, #88]	@ (80011fc <MX_USB_OTG_FS_PCD_Init+0x60>)
 80011a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011a6:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a8:	2206      	movs	r2, #6
 80011aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e4:	f002 f8a0 	bl	8003328 <HAL_PCD_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80011ee:	f7ff fbf9 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200002b0 	.word	0x200002b0
 80011fc:	42040000 	.word	0x42040000

08001200 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0bc      	sub	sp, #240	@ 0xf0
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	22c0      	movs	r2, #192	@ 0xc0
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f006 fc4d 	bl	8007ac0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a38      	ldr	r2, [pc, #224]	@ (800130c <HAL_PCD_MspInit+0x10c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d169      	bne.n	8001304 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001230:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fcb6 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001252:	f7ff fbc7 	bl	80009e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <HAL_PCD_MspInit+0x110>)
 8001258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800125c:	4a2c      	ldr	r2, [pc, #176]	@ (8001310 <HAL_PCD_MspInit+0x110>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001266:	4b2a      	ldr	r3, [pc, #168]	@ (8001310 <HAL_PCD_MspInit+0x110>)
 8001268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001274:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001278:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800128e:	230a      	movs	r3, #10
 8001290:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001298:	4619      	mov	r1, r3
 800129a:	481e      	ldr	r0, [pc, #120]	@ (8001314 <HAL_PCD_MspInit+0x114>)
 800129c:	f001 f82e 	bl	80022fc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80012a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <HAL_PCD_MspInit+0x110>)
 80012a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001310 <HAL_PCD_MspInit+0x110>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012b0:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <HAL_PCD_MspInit+0x110>)
 80012b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <HAL_PCD_MspInit+0x110>)
 80012c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d119      	bne.n	8001300 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <HAL_PCD_MspInit+0x110>)
 80012ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001310 <HAL_PCD_MspInit+0x110>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <HAL_PCD_MspInit+0x110>)
 80012de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80012ea:	f002 f9e5 	bl	80036b8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_PCD_MspInit+0x110>)
 80012f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012f4:	4a06      	ldr	r2, [pc, #24]	@ (8001310 <HAL_PCD_MspInit+0x110>)
 80012f6:	f023 0304 	bic.w	r3, r3, #4
 80012fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80012fe:	e001      	b.n	8001304 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001300:	f002 f9da 	bl	80036b8 <HAL_PWREx_EnableVddUSB>
}
 8001304:	bf00      	nop
 8001306:	37f0      	adds	r7, #240	@ 0xf0
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	42040000 	.word	0x42040000
 8001310:	46020c00 	.word	0x46020c00
 8001314:	42020000 	.word	0x42020000

08001318 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001318:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001350 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800131c:	f7ff fc7a 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001320:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001322:	e003      	b.n	800132c <LoopCopyDataInit>

08001324 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001326:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001328:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800132a:	3104      	adds	r1, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800132c:	480a      	ldr	r0, [pc, #40]	@ (8001358 <LoopForever+0xa>)
	ldr	r3, =_edata
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001330:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001332:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001334:	d3f6      	bcc.n	8001324 <CopyDataInit>
	ldr	r2, =_sbss
 8001336:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001338:	e002      	b.n	8001340 <LoopFillZerobss>

0800133a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800133a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800133c:	f842 3b04 	str.w	r3, [r2], #4

08001340 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <LoopForever+0x16>)
	cmp	r2, r3
 8001342:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001344:	d3f9      	bcc.n	800133a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001346:	f006 fc1f 	bl	8007b88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800134a:	f7ff face 	bl	80008ea <main>

0800134e <LoopForever>:

LoopForever:
    b LoopForever
 800134e:	e7fe      	b.n	800134e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001350:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001354:	08008768 	.word	0x08008768
	ldr	r0, =_sdata
 8001358:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800135c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001360:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001364:	200008e2 	.word	0x200008e2

08001368 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC1_IRQHandler>
	...

0800136c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_Init+0x50>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a11      	ldr	r2, [pc, #68]	@ (80013bc <HAL_Init+0x50>)
 8001376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f98c 	bl	800169a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001382:	f003 fa77 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 8001386:	4602      	mov	r2, r0
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <HAL_Init+0x54>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	490c      	ldr	r1, [pc, #48]	@ (80013c4 <HAL_Init+0x58>)
 8001392:	5ccb      	ldrb	r3, [r1, r3]
 8001394:	fa22 f303 	lsr.w	r3, r2, r3
 8001398:	4a0b      	ldr	r2, [pc, #44]	@ (80013c8 <HAL_Init+0x5c>)
 800139a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800139c:	2004      	movs	r0, #4
 800139e:	f000 f9d1 	bl	8001744 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a2:	200f      	movs	r0, #15
 80013a4:	f000 f812 	bl	80013cc <HAL_InitTick>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e002      	b.n	80013b8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013b2:	f7ff fb1d 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40022000 	.word	0x40022000
 80013c0:	46020c00 	.word	0x46020c00
 80013c4:	080085b0 	.word	0x080085b0
 80013c8:	20000000 	.word	0x20000000

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80013d8:	4b33      	ldr	r3, [pc, #204]	@ (80014a8 <HAL_InitTick+0xdc>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e05c      	b.n	800149e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80013e4:	4b31      	ldr	r3, [pc, #196]	@ (80014ac <HAL_InitTick+0xe0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d10c      	bne.n	800140a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80013f0:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <HAL_InitTick+0xe4>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b2c      	ldr	r3, [pc, #176]	@ (80014a8 <HAL_InitTick+0xdc>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	e037      	b.n	800147a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800140a:	f000 f9f3 	bl	80017f4 <HAL_SYSTICK_GetCLKSourceConfig>
 800140e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d023      	beq.n	800145e <HAL_InitTick+0x92>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d82d      	bhi.n	8001478 <HAL_InitTick+0xac>
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_InitTick+0x5e>
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d00d      	beq.n	8001444 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001428:	e026      	b.n	8001478 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800142a:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <HAL_InitTick+0xe4>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <HAL_InitTick+0xdc>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001438:	fbb3 f3f1 	udiv	r3, r3, r1
 800143c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001440:	60fb      	str	r3, [r7, #12]
        break;
 8001442:	e01a      	b.n	800147a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <HAL_InitTick+0xdc>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800144e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001452:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	60fb      	str	r3, [r7, #12]
        break;
 800145c:	e00d      	b.n	800147a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800145e:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HAL_InitTick+0xdc>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001468:	fbb3 f3f2 	udiv	r3, r3, r2
 800146c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001470:	fbb2 f3f3 	udiv	r3, r2, r3
 8001474:	60fb      	str	r3, [r7, #12]
        break;
 8001476:	e000      	b.n	800147a <HAL_InitTick+0xae>
        break;
 8001478:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f940 	bl	8001700 <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e009      	b.n	800149e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148a:	2200      	movs	r2, #0
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	f04f 30ff 	mov.w	r0, #4294967295
 8001492:	f000 f90d 	bl	80016b0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001496:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <HAL_InitTick+0xe8>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000008 	.word	0x20000008
 80014ac:	e000e010 	.word	0xe000e010
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000004 	.word	0x20000004

080014b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_IncTick+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_IncTick+0x24>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <HAL_IncTick+0x24>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008
 80014dc:	20000794 	.word	0x20000794

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000794 	.word	0x20000794

080014f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff ffee 	bl	80014e0 <HAL_GetTick>
 8001504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d005      	beq.n	800151e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_Delay+0x44>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800151e:	bf00      	nop
 8001520:	f7ff ffde 	bl	80014e0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8f7      	bhi.n	8001520 <HAL_Delay+0x28>
  {
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000008 	.word	0x20000008

08001540 <__NVIC_SetPriorityGrouping>:
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4907      	ldr	r1, [pc, #28]	@ (80015dc <__NVIC_EnableIRQ+0x38>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	@ (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	@ (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	@ 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ff4c 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016be:	f7ff ff63 	bl	8001588 <__NVIC_GetPriorityGrouping>
 80016c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	6978      	ldr	r0, [r7, #20]
 80016ca:	f7ff ffb3 	bl	8001634 <NVIC_EncodePriority>
 80016ce:	4602      	mov	r2, r0
 80016d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff82 	bl	80015e0 <__NVIC_SetPriority>
}
 80016dc:	bf00      	nop
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff56 	bl	80015a4 <__NVIC_EnableIRQ>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001710:	d301      	bcc.n	8001716 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001712:	2301      	movs	r3, #1
 8001714:	e00d      	b.n	8001732 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_SYSTICK_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_SYSTICK_Config+0x40>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_SYSTICK_Config+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a05      	ldr	r2, [pc, #20]	@ (8001740 <HAL_SYSTICK_Config+0x40>)
 800172a:	f043 0303 	orr.w	r3, r3, #3
 800172e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b04      	cmp	r3, #4
 8001750:	d844      	bhi.n	80017dc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001752:	a201      	add	r2, pc, #4	@ (adr r2, 8001758 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	0800177b 	.word	0x0800177b
 800175c:	08001799 	.word	0x08001799
 8001760:	080017bb 	.word	0x080017bb
 8001764:	080017dd 	.word	0x080017dd
 8001768:	0800176d 	.word	0x0800176d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800176c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1e      	ldr	r2, [pc, #120]	@ (80017ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6013      	str	r3, [r2, #0]
      break;
 8001778:	e031      	b.n	80017de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800177a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a1b      	ldr	r2, [pc, #108]	@ (80017ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001780:	f023 0304 	bic.w	r3, r3, #4
 8001784:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001786:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178c:	4a18      	ldr	r2, [pc, #96]	@ (80017f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800178e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001796:	e022      	b.n	80017de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a13      	ldr	r2, [pc, #76]	@ (80017ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800179e:	f023 0304 	bic.w	r3, r3, #4
 80017a2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017aa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80017ae:	4a10      	ldr	r2, [pc, #64]	@ (80017f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80017b8:	e011      	b.n	80017de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80017ba:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a0b      	ldr	r2, [pc, #44]	@ (80017ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017cc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80017d0:	4a07      	ldr	r2, [pc, #28]	@ (80017f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80017da:	e000      	b.n	80017de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80017dc:	bf00      	nop
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010
 80017f0:	46020c00 	.word	0x46020c00

080017f4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001806:	2304      	movs	r3, #4
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	e021      	b.n	8001850 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800180c:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800180e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001812:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001816:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800181e:	d011      	beq.n	8001844 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001826:	d810      	bhi.n	800184a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001834:	d003      	beq.n	800183e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001836:	e008      	b.n	800184a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
        break;
 800183c:	e008      	b.n	8001850 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800183e:	2301      	movs	r3, #1
 8001840:	607b      	str	r3, [r7, #4]
        break;
 8001842:	e005      	b.n	8001850 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001844:	2302      	movs	r3, #2
 8001846:	607b      	str	r3, [r7, #4]
        break;
 8001848:	e002      	b.n	8001850 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
        break;
 800184e:	bf00      	nop
    }
  }
  return systick_source;
 8001850:	687b      	ldr	r3, [r7, #4]
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010
 8001864:	46020c00 	.word	0x46020c00

08001868 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff fe36 	bl	80014e0 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0db      	b.n	8001a38 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a6e      	ldr	r2, [pc, #440]	@ (8001a40 <HAL_DMA_Init+0x1d8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	f000 809f 	beq.w	80019ca <HAL_DMA_Init+0x162>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a6c      	ldr	r2, [pc, #432]	@ (8001a44 <HAL_DMA_Init+0x1dc>)
 8001892:	4293      	cmp	r3, r2
 8001894:	f000 8099 	beq.w	80019ca <HAL_DMA_Init+0x162>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a6a      	ldr	r2, [pc, #424]	@ (8001a48 <HAL_DMA_Init+0x1e0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	f000 8093 	beq.w	80019ca <HAL_DMA_Init+0x162>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a68      	ldr	r2, [pc, #416]	@ (8001a4c <HAL_DMA_Init+0x1e4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	f000 808d 	beq.w	80019ca <HAL_DMA_Init+0x162>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a66      	ldr	r2, [pc, #408]	@ (8001a50 <HAL_DMA_Init+0x1e8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	f000 8087 	beq.w	80019ca <HAL_DMA_Init+0x162>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a64      	ldr	r2, [pc, #400]	@ (8001a54 <HAL_DMA_Init+0x1ec>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	f000 8081 	beq.w	80019ca <HAL_DMA_Init+0x162>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a62      	ldr	r2, [pc, #392]	@ (8001a58 <HAL_DMA_Init+0x1f0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d07b      	beq.n	80019ca <HAL_DMA_Init+0x162>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a61      	ldr	r2, [pc, #388]	@ (8001a5c <HAL_DMA_Init+0x1f4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d076      	beq.n	80019ca <HAL_DMA_Init+0x162>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a5f      	ldr	r2, [pc, #380]	@ (8001a60 <HAL_DMA_Init+0x1f8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d071      	beq.n	80019ca <HAL_DMA_Init+0x162>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001a64 <HAL_DMA_Init+0x1fc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d06c      	beq.n	80019ca <HAL_DMA_Init+0x162>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a5c      	ldr	r2, [pc, #368]	@ (8001a68 <HAL_DMA_Init+0x200>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d067      	beq.n	80019ca <HAL_DMA_Init+0x162>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a5b      	ldr	r2, [pc, #364]	@ (8001a6c <HAL_DMA_Init+0x204>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d062      	beq.n	80019ca <HAL_DMA_Init+0x162>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a59      	ldr	r2, [pc, #356]	@ (8001a70 <HAL_DMA_Init+0x208>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d05d      	beq.n	80019ca <HAL_DMA_Init+0x162>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a58      	ldr	r2, [pc, #352]	@ (8001a74 <HAL_DMA_Init+0x20c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d058      	beq.n	80019ca <HAL_DMA_Init+0x162>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a56      	ldr	r2, [pc, #344]	@ (8001a78 <HAL_DMA_Init+0x210>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d053      	beq.n	80019ca <HAL_DMA_Init+0x162>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a55      	ldr	r2, [pc, #340]	@ (8001a7c <HAL_DMA_Init+0x214>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d04e      	beq.n	80019ca <HAL_DMA_Init+0x162>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a53      	ldr	r2, [pc, #332]	@ (8001a80 <HAL_DMA_Init+0x218>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d049      	beq.n	80019ca <HAL_DMA_Init+0x162>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a52      	ldr	r2, [pc, #328]	@ (8001a84 <HAL_DMA_Init+0x21c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d044      	beq.n	80019ca <HAL_DMA_Init+0x162>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a50      	ldr	r2, [pc, #320]	@ (8001a88 <HAL_DMA_Init+0x220>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d03f      	beq.n	80019ca <HAL_DMA_Init+0x162>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a4f      	ldr	r2, [pc, #316]	@ (8001a8c <HAL_DMA_Init+0x224>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d03a      	beq.n	80019ca <HAL_DMA_Init+0x162>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a4d      	ldr	r2, [pc, #308]	@ (8001a90 <HAL_DMA_Init+0x228>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d035      	beq.n	80019ca <HAL_DMA_Init+0x162>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a4c      	ldr	r2, [pc, #304]	@ (8001a94 <HAL_DMA_Init+0x22c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d030      	beq.n	80019ca <HAL_DMA_Init+0x162>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a4a      	ldr	r2, [pc, #296]	@ (8001a98 <HAL_DMA_Init+0x230>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02b      	beq.n	80019ca <HAL_DMA_Init+0x162>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a49      	ldr	r2, [pc, #292]	@ (8001a9c <HAL_DMA_Init+0x234>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d026      	beq.n	80019ca <HAL_DMA_Init+0x162>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a47      	ldr	r2, [pc, #284]	@ (8001aa0 <HAL_DMA_Init+0x238>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d021      	beq.n	80019ca <HAL_DMA_Init+0x162>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a46      	ldr	r2, [pc, #280]	@ (8001aa4 <HAL_DMA_Init+0x23c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d01c      	beq.n	80019ca <HAL_DMA_Init+0x162>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a44      	ldr	r2, [pc, #272]	@ (8001aa8 <HAL_DMA_Init+0x240>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d017      	beq.n	80019ca <HAL_DMA_Init+0x162>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a43      	ldr	r2, [pc, #268]	@ (8001aac <HAL_DMA_Init+0x244>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d012      	beq.n	80019ca <HAL_DMA_Init+0x162>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a41      	ldr	r2, [pc, #260]	@ (8001ab0 <HAL_DMA_Init+0x248>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00d      	beq.n	80019ca <HAL_DMA_Init+0x162>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a40      	ldr	r2, [pc, #256]	@ (8001ab4 <HAL_DMA_Init+0x24c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d008      	beq.n	80019ca <HAL_DMA_Init+0x162>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a3e      	ldr	r2, [pc, #248]	@ (8001ab8 <HAL_DMA_Init+0x250>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d003      	beq.n	80019ca <HAL_DMA_Init+0x162>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a3d      	ldr	r2, [pc, #244]	@ (8001abc <HAL_DMA_Init+0x254>)
 80019c8:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2202      	movs	r2, #2
 80019d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0206 	orr.w	r2, r2, #6
 80019e8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80019ea:	e00f      	b.n	8001a0c <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80019ec:	f7ff fd78 	bl	80014e0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d908      	bls.n	8001a0c <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2210      	movs	r2, #16
 80019fe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2203      	movs	r2, #3
 8001a04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e015      	b.n	8001a38 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1e8      	bne.n	80019ec <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f9ee 	bl	8001dfc <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40020050 	.word	0x40020050
 8001a44:	50020050 	.word	0x50020050
 8001a48:	400200d0 	.word	0x400200d0
 8001a4c:	500200d0 	.word	0x500200d0
 8001a50:	40020150 	.word	0x40020150
 8001a54:	50020150 	.word	0x50020150
 8001a58:	400201d0 	.word	0x400201d0
 8001a5c:	500201d0 	.word	0x500201d0
 8001a60:	40020250 	.word	0x40020250
 8001a64:	50020250 	.word	0x50020250
 8001a68:	400202d0 	.word	0x400202d0
 8001a6c:	500202d0 	.word	0x500202d0
 8001a70:	40020350 	.word	0x40020350
 8001a74:	50020350 	.word	0x50020350
 8001a78:	400203d0 	.word	0x400203d0
 8001a7c:	500203d0 	.word	0x500203d0
 8001a80:	40020450 	.word	0x40020450
 8001a84:	50020450 	.word	0x50020450
 8001a88:	400204d0 	.word	0x400204d0
 8001a8c:	500204d0 	.word	0x500204d0
 8001a90:	40020550 	.word	0x40020550
 8001a94:	50020550 	.word	0x50020550
 8001a98:	400205d0 	.word	0x400205d0
 8001a9c:	500205d0 	.word	0x500205d0
 8001aa0:	40020650 	.word	0x40020650
 8001aa4:	50020650 	.word	0x50020650
 8001aa8:	400206d0 	.word	0x400206d0
 8001aac:	500206d0 	.word	0x500206d0
 8001ab0:	40020750 	.word	0x40020750
 8001ab4:	50020750 	.word	0x50020750
 8001ab8:	400207d0 	.word	0x400207d0
 8001abc:	500207d0 	.word	0x500207d0

08001ac0 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001ad0:	f023 030f 	bic.w	r3, r3, #15
 8001ad4:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ade:	3b50      	subs	r3, #80	@ 0x50
 8001ae0:	09db      	lsrs	r3, r3, #7
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 813b 	beq.w	8001d76 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d011      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00a      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b24:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d011      	beq.n	8001b64 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b56:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5c:	f043 0202 	orr.w	r2, r3, #2
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d011      	beq.n	8001b96 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00a      	beq.n	8001b96 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b88:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8e:	f043 0204 	orr.w	r2, r3, #4
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d011      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00a      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bba:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc0:	f043 0208 	orr.w	r2, r3, #8
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d013      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00c      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bec:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d04c      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d045      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c22:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d12e      	bne.n	8001c8e <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c3e:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0202 	orr.w	r2, r2, #2
 8001c4e:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c68:	2201      	movs	r2, #1
 8001c6a:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2200      	movs	r2, #0
 8001c72:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d07a      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
        }

        return;
 8001c8c:	e075      	b.n	8001d7a <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2205      	movs	r2, #5
 8001c92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d039      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d032      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d012      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d116      	bne.n	8001d06 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d111      	bne.n	8001d06 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cee:	2201      	movs	r2, #1
 8001cf0:	731a      	strb	r2, [r3, #12]
 8001cf2:	e008      	b.n	8001d06 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d0e:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d025      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0202 	orr.w	r2, r2, #2
 8001d3e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d58:	2201      	movs	r2, #1
 8001d5a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	4798      	blx	r3
 8001d74:	e002      	b.n	8001d7c <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001d76:	bf00      	nop
 8001d78:	e000      	b.n	8001d7c <HAL_DMA_IRQHandler+0x2bc>
        return;
 8001d7a:	bf00      	nop
    }
  }
}
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e02b      	b.n	8001dee <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001d9e:	f023 030f 	bic.w	r3, r3, #15
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dac:	3b50      	subs	r3, #80	@ 0x50
 8001dae:	09db      	lsrs	r3, r3, #7
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	2201      	movs	r2, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d012      	beq.n	8001dec <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f003 0311 	and.w	r3, r3, #17
 8001dcc:	2b11      	cmp	r3, #17
 8001dce:	d106      	bne.n	8001dde <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	e006      	b.n	8001dec <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a53      	ldr	r2, [pc, #332]	@ (8001f88 <DMA_Init+0x18c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	f000 80a0 	beq.w	8001f82 <DMA_Init+0x186>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a51      	ldr	r2, [pc, #324]	@ (8001f8c <DMA_Init+0x190>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	f000 809a 	beq.w	8001f82 <DMA_Init+0x186>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a4f      	ldr	r2, [pc, #316]	@ (8001f90 <DMA_Init+0x194>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	f000 8094 	beq.w	8001f82 <DMA_Init+0x186>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a4d      	ldr	r2, [pc, #308]	@ (8001f94 <DMA_Init+0x198>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	f000 808e 	beq.w	8001f82 <DMA_Init+0x186>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a4b      	ldr	r2, [pc, #300]	@ (8001f98 <DMA_Init+0x19c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	f000 8088 	beq.w	8001f82 <DMA_Init+0x186>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a49      	ldr	r2, [pc, #292]	@ (8001f9c <DMA_Init+0x1a0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	f000 8082 	beq.w	8001f82 <DMA_Init+0x186>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a47      	ldr	r2, [pc, #284]	@ (8001fa0 <DMA_Init+0x1a4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d07c      	beq.n	8001f82 <DMA_Init+0x186>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a45      	ldr	r2, [pc, #276]	@ (8001fa4 <DMA_Init+0x1a8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d077      	beq.n	8001f82 <DMA_Init+0x186>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a44      	ldr	r2, [pc, #272]	@ (8001fa8 <DMA_Init+0x1ac>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d072      	beq.n	8001f82 <DMA_Init+0x186>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a42      	ldr	r2, [pc, #264]	@ (8001fac <DMA_Init+0x1b0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d06d      	beq.n	8001f82 <DMA_Init+0x186>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a41      	ldr	r2, [pc, #260]	@ (8001fb0 <DMA_Init+0x1b4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d068      	beq.n	8001f82 <DMA_Init+0x186>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3f      	ldr	r2, [pc, #252]	@ (8001fb4 <DMA_Init+0x1b8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d063      	beq.n	8001f82 <DMA_Init+0x186>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8001fb8 <DMA_Init+0x1bc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d05e      	beq.n	8001f82 <DMA_Init+0x186>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a3c      	ldr	r2, [pc, #240]	@ (8001fbc <DMA_Init+0x1c0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d059      	beq.n	8001f82 <DMA_Init+0x186>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8001fc0 <DMA_Init+0x1c4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d054      	beq.n	8001f82 <DMA_Init+0x186>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a39      	ldr	r2, [pc, #228]	@ (8001fc4 <DMA_Init+0x1c8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d04f      	beq.n	8001f82 <DMA_Init+0x186>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a38      	ldr	r2, [pc, #224]	@ (8001fc8 <DMA_Init+0x1cc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d04a      	beq.n	8001f82 <DMA_Init+0x186>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a36      	ldr	r2, [pc, #216]	@ (8001fcc <DMA_Init+0x1d0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d045      	beq.n	8001f82 <DMA_Init+0x186>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a35      	ldr	r2, [pc, #212]	@ (8001fd0 <DMA_Init+0x1d4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d040      	beq.n	8001f82 <DMA_Init+0x186>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a33      	ldr	r2, [pc, #204]	@ (8001fd4 <DMA_Init+0x1d8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d03b      	beq.n	8001f82 <DMA_Init+0x186>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a32      	ldr	r2, [pc, #200]	@ (8001fd8 <DMA_Init+0x1dc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d036      	beq.n	8001f82 <DMA_Init+0x186>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a30      	ldr	r2, [pc, #192]	@ (8001fdc <DMA_Init+0x1e0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d031      	beq.n	8001f82 <DMA_Init+0x186>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe0 <DMA_Init+0x1e4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d02c      	beq.n	8001f82 <DMA_Init+0x186>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe4 <DMA_Init+0x1e8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d027      	beq.n	8001f82 <DMA_Init+0x186>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe8 <DMA_Init+0x1ec>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d022      	beq.n	8001f82 <DMA_Init+0x186>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a2a      	ldr	r2, [pc, #168]	@ (8001fec <DMA_Init+0x1f0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01d      	beq.n	8001f82 <DMA_Init+0x186>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a29      	ldr	r2, [pc, #164]	@ (8001ff0 <DMA_Init+0x1f4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d018      	beq.n	8001f82 <DMA_Init+0x186>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a27      	ldr	r2, [pc, #156]	@ (8001ff4 <DMA_Init+0x1f8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <DMA_Init+0x186>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a26      	ldr	r2, [pc, #152]	@ (8001ff8 <DMA_Init+0x1fc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00e      	beq.n	8001f82 <DMA_Init+0x186>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a24      	ldr	r2, [pc, #144]	@ (8001ffc <DMA_Init+0x200>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <DMA_Init+0x186>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a23      	ldr	r2, [pc, #140]	@ (8002000 <DMA_Init+0x204>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d004      	beq.n	8001f82 <DMA_Init+0x186>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a21      	ldr	r2, [pc, #132]	@ (8002004 <DMA_Init+0x208>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d142      	bne.n	8002008 <DMA_Init+0x20c>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e041      	b.n	800200a <DMA_Init+0x20e>
 8001f86:	bf00      	nop
 8001f88:	40020050 	.word	0x40020050
 8001f8c:	50020050 	.word	0x50020050
 8001f90:	400200d0 	.word	0x400200d0
 8001f94:	500200d0 	.word	0x500200d0
 8001f98:	40020150 	.word	0x40020150
 8001f9c:	50020150 	.word	0x50020150
 8001fa0:	400201d0 	.word	0x400201d0
 8001fa4:	500201d0 	.word	0x500201d0
 8001fa8:	40020250 	.word	0x40020250
 8001fac:	50020250 	.word	0x50020250
 8001fb0:	400202d0 	.word	0x400202d0
 8001fb4:	500202d0 	.word	0x500202d0
 8001fb8:	40020350 	.word	0x40020350
 8001fbc:	50020350 	.word	0x50020350
 8001fc0:	400203d0 	.word	0x400203d0
 8001fc4:	500203d0 	.word	0x500203d0
 8001fc8:	40020450 	.word	0x40020450
 8001fcc:	50020450 	.word	0x50020450
 8001fd0:	400204d0 	.word	0x400204d0
 8001fd4:	500204d0 	.word	0x500204d0
 8001fd8:	40020550 	.word	0x40020550
 8001fdc:	50020550 	.word	0x50020550
 8001fe0:	400205d0 	.word	0x400205d0
 8001fe4:	500205d0 	.word	0x500205d0
 8001fe8:	40020650 	.word	0x40020650
 8001fec:	50020650 	.word	0x50020650
 8001ff0:	400206d0 	.word	0x400206d0
 8001ff4:	500206d0 	.word	0x500206d0
 8001ff8:	40020750 	.word	0x40020750
 8001ffc:	50020750 	.word	0x50020750
 8002000:	400207d0 	.word	0x400207d0
 8002004:	500207d0 	.word	0x500207d0
 8002008:	2300      	movs	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d012      	beq.n	8002034 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002016:	3b01      	subs	r3, #1
 8002018:	051b      	lsls	r3, r3, #20
 800201a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800201e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	3b01      	subs	r3, #1
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800202c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	430a      	orrs	r2, r1
 8002046:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002066:	f040 80b0 	bne.w	80021ca <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a82      	ldr	r2, [pc, #520]	@ (8002278 <DMA_Init+0x47c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	f000 80a0 	beq.w	80021b6 <DMA_Init+0x3ba>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a80      	ldr	r2, [pc, #512]	@ (800227c <DMA_Init+0x480>)
 800207c:	4293      	cmp	r3, r2
 800207e:	f000 809a 	beq.w	80021b6 <DMA_Init+0x3ba>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7e      	ldr	r2, [pc, #504]	@ (8002280 <DMA_Init+0x484>)
 8002088:	4293      	cmp	r3, r2
 800208a:	f000 8094 	beq.w	80021b6 <DMA_Init+0x3ba>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a7c      	ldr	r2, [pc, #496]	@ (8002284 <DMA_Init+0x488>)
 8002094:	4293      	cmp	r3, r2
 8002096:	f000 808e 	beq.w	80021b6 <DMA_Init+0x3ba>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7a      	ldr	r2, [pc, #488]	@ (8002288 <DMA_Init+0x48c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	f000 8088 	beq.w	80021b6 <DMA_Init+0x3ba>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a78      	ldr	r2, [pc, #480]	@ (800228c <DMA_Init+0x490>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	f000 8082 	beq.w	80021b6 <DMA_Init+0x3ba>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a76      	ldr	r2, [pc, #472]	@ (8002290 <DMA_Init+0x494>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d07c      	beq.n	80021b6 <DMA_Init+0x3ba>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a74      	ldr	r2, [pc, #464]	@ (8002294 <DMA_Init+0x498>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d077      	beq.n	80021b6 <DMA_Init+0x3ba>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a73      	ldr	r2, [pc, #460]	@ (8002298 <DMA_Init+0x49c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d072      	beq.n	80021b6 <DMA_Init+0x3ba>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a71      	ldr	r2, [pc, #452]	@ (800229c <DMA_Init+0x4a0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d06d      	beq.n	80021b6 <DMA_Init+0x3ba>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a70      	ldr	r2, [pc, #448]	@ (80022a0 <DMA_Init+0x4a4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d068      	beq.n	80021b6 <DMA_Init+0x3ba>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a6e      	ldr	r2, [pc, #440]	@ (80022a4 <DMA_Init+0x4a8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d063      	beq.n	80021b6 <DMA_Init+0x3ba>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6d      	ldr	r2, [pc, #436]	@ (80022a8 <DMA_Init+0x4ac>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d05e      	beq.n	80021b6 <DMA_Init+0x3ba>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a6b      	ldr	r2, [pc, #428]	@ (80022ac <DMA_Init+0x4b0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d059      	beq.n	80021b6 <DMA_Init+0x3ba>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a6a      	ldr	r2, [pc, #424]	@ (80022b0 <DMA_Init+0x4b4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d054      	beq.n	80021b6 <DMA_Init+0x3ba>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a68      	ldr	r2, [pc, #416]	@ (80022b4 <DMA_Init+0x4b8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d04f      	beq.n	80021b6 <DMA_Init+0x3ba>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a67      	ldr	r2, [pc, #412]	@ (80022b8 <DMA_Init+0x4bc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d04a      	beq.n	80021b6 <DMA_Init+0x3ba>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a65      	ldr	r2, [pc, #404]	@ (80022bc <DMA_Init+0x4c0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d045      	beq.n	80021b6 <DMA_Init+0x3ba>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a64      	ldr	r2, [pc, #400]	@ (80022c0 <DMA_Init+0x4c4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d040      	beq.n	80021b6 <DMA_Init+0x3ba>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a62      	ldr	r2, [pc, #392]	@ (80022c4 <DMA_Init+0x4c8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d03b      	beq.n	80021b6 <DMA_Init+0x3ba>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a61      	ldr	r2, [pc, #388]	@ (80022c8 <DMA_Init+0x4cc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d036      	beq.n	80021b6 <DMA_Init+0x3ba>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a5f      	ldr	r2, [pc, #380]	@ (80022cc <DMA_Init+0x4d0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d031      	beq.n	80021b6 <DMA_Init+0x3ba>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a5e      	ldr	r2, [pc, #376]	@ (80022d0 <DMA_Init+0x4d4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d02c      	beq.n	80021b6 <DMA_Init+0x3ba>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a5c      	ldr	r2, [pc, #368]	@ (80022d4 <DMA_Init+0x4d8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d027      	beq.n	80021b6 <DMA_Init+0x3ba>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a5b      	ldr	r2, [pc, #364]	@ (80022d8 <DMA_Init+0x4dc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d022      	beq.n	80021b6 <DMA_Init+0x3ba>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a59      	ldr	r2, [pc, #356]	@ (80022dc <DMA_Init+0x4e0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01d      	beq.n	80021b6 <DMA_Init+0x3ba>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a58      	ldr	r2, [pc, #352]	@ (80022e0 <DMA_Init+0x4e4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d018      	beq.n	80021b6 <DMA_Init+0x3ba>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a56      	ldr	r2, [pc, #344]	@ (80022e4 <DMA_Init+0x4e8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <DMA_Init+0x3ba>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a55      	ldr	r2, [pc, #340]	@ (80022e8 <DMA_Init+0x4ec>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00e      	beq.n	80021b6 <DMA_Init+0x3ba>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a53      	ldr	r2, [pc, #332]	@ (80022ec <DMA_Init+0x4f0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d009      	beq.n	80021b6 <DMA_Init+0x3ba>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a52      	ldr	r2, [pc, #328]	@ (80022f0 <DMA_Init+0x4f4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d004      	beq.n	80021b6 <DMA_Init+0x3ba>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a50      	ldr	r2, [pc, #320]	@ (80022f4 <DMA_Init+0x4f8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <DMA_Init+0x3be>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <DMA_Init+0x3c0>
 80021ba:	2300      	movs	r3, #0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00d      	beq.n	80021dc <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e008      	b.n	80021dc <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d2:	d103      	bne.n	80021dc <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021da:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021e2:	4b45      	ldr	r3, [pc, #276]	@ (80022f8 <DMA_Init+0x4fc>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	68f9      	ldr	r1, [r7, #12]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2200      	movs	r2, #0
 80021f6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a36      	ldr	r2, [pc, #216]	@ (80022d8 <DMA_Init+0x4dc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d022      	beq.n	8002248 <DMA_Init+0x44c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a35      	ldr	r2, [pc, #212]	@ (80022dc <DMA_Init+0x4e0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d01d      	beq.n	8002248 <DMA_Init+0x44c>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a33      	ldr	r2, [pc, #204]	@ (80022e0 <DMA_Init+0x4e4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d018      	beq.n	8002248 <DMA_Init+0x44c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a32      	ldr	r2, [pc, #200]	@ (80022e4 <DMA_Init+0x4e8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d013      	beq.n	8002248 <DMA_Init+0x44c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a30      	ldr	r2, [pc, #192]	@ (80022e8 <DMA_Init+0x4ec>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00e      	beq.n	8002248 <DMA_Init+0x44c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2f      	ldr	r2, [pc, #188]	@ (80022ec <DMA_Init+0x4f0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d009      	beq.n	8002248 <DMA_Init+0x44c>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2d      	ldr	r2, [pc, #180]	@ (80022f0 <DMA_Init+0x4f4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d004      	beq.n	8002248 <DMA_Init+0x44c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a2c      	ldr	r2, [pc, #176]	@ (80022f4 <DMA_Init+0x4f8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d101      	bne.n	800224c <DMA_Init+0x450>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <DMA_Init+0x452>
 800224c:	2300      	movs	r3, #0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2200      	movs	r2, #0
 8002258:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40020050 	.word	0x40020050
 800227c:	50020050 	.word	0x50020050
 8002280:	400200d0 	.word	0x400200d0
 8002284:	500200d0 	.word	0x500200d0
 8002288:	40020150 	.word	0x40020150
 800228c:	50020150 	.word	0x50020150
 8002290:	400201d0 	.word	0x400201d0
 8002294:	500201d0 	.word	0x500201d0
 8002298:	40020250 	.word	0x40020250
 800229c:	50020250 	.word	0x50020250
 80022a0:	400202d0 	.word	0x400202d0
 80022a4:	500202d0 	.word	0x500202d0
 80022a8:	40020350 	.word	0x40020350
 80022ac:	50020350 	.word	0x50020350
 80022b0:	400203d0 	.word	0x400203d0
 80022b4:	500203d0 	.word	0x500203d0
 80022b8:	40020450 	.word	0x40020450
 80022bc:	50020450 	.word	0x50020450
 80022c0:	400204d0 	.word	0x400204d0
 80022c4:	500204d0 	.word	0x500204d0
 80022c8:	40020550 	.word	0x40020550
 80022cc:	50020550 	.word	0x50020550
 80022d0:	400205d0 	.word	0x400205d0
 80022d4:	500205d0 	.word	0x500205d0
 80022d8:	40020650 	.word	0x40020650
 80022dc:	50020650 	.word	0x50020650
 80022e0:	400206d0 	.word	0x400206d0
 80022e4:	500206d0 	.word	0x500206d0
 80022e8:	40020750 	.word	0x40020750
 80022ec:	50020750 	.word	0x50020750
 80022f0:	400207d0 	.word	0x400207d0
 80022f4:	500207d0 	.word	0x500207d0
 80022f8:	3cc03180 	.word	0x3cc03180

080022fc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	@ 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800230e:	e1ba      	b.n	8002686 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 81aa 	beq.w	8002680 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a55      	ldr	r2, [pc, #340]	@ (8002484 <HAL_GPIO_Init+0x188>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d15d      	bne.n	80023f0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800233a:	2201      	movs	r2, #1
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	4013      	ands	r3, r2
 8002348:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0201 	and.w	r2, r3, #1
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	4313      	orrs	r3, r2
 800235c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002364:	4a48      	ldr	r2, [pc, #288]	@ (8002488 <HAL_GPIO_Init+0x18c>)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800236c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800236e:	4a46      	ldr	r2, [pc, #280]	@ (8002488 <HAL_GPIO_Init+0x18c>)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	08da      	lsrs	r2, r3, #3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	3208      	adds	r2, #8
 8002382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002386:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	4013      	ands	r3, r2
 800239c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	220b      	movs	r2, #11
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	08da      	lsrs	r2, r3, #3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	3208      	adds	r2, #8
 80023ba:	69f9      	ldr	r1, [r7, #28]
 80023bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2202      	movs	r2, #2
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e067      	b.n	80024c0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x104>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b12      	cmp	r3, #18
 80023fe:	d145      	bne.n	800248c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	08da      	lsrs	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3208      	adds	r2, #8
 8002408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	220f      	movs	r2, #15
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	4013      	ands	r3, r2
 8002422:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	4313      	orrs	r3, r2
 800243c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	08da      	lsrs	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3208      	adds	r2, #8
 8002446:	69f9      	ldr	r1, [r7, #28]
 8002448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	4013      	ands	r3, r2
 8002462:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0203 	and.w	r2, r3, #3
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	4313      	orrs	r3, r2
 8002478:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e01e      	b.n	80024c0 <HAL_GPIO_Init+0x1c4>
 8002482:	bf00      	nop
 8002484:	46020000 	.word	0x46020000
 8002488:	08008600 	.word	0x08008600
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d00b      	beq.n	80024e0 <HAL_GPIO_Init+0x1e4>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d007      	beq.n	80024e0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024d4:	2b11      	cmp	r3, #17
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b12      	cmp	r3, #18
 80024de:	d130      	bne.n	8002542 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	4313      	orrs	r3, r2
 8002508:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002516:	2201      	movs	r2, #1
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	4013      	ands	r3, r2
 8002524:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	f003 0201 	and.w	r2, r3, #1
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	4313      	orrs	r3, r2
 800253a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d017      	beq.n	800257a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	4013      	ands	r3, r2
 8002560:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	4313      	orrs	r3, r2
 8002572:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d07c      	beq.n	8002680 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002586:	4a47      	ldr	r2, [pc, #284]	@ (80026a4 <HAL_GPIO_Init+0x3a8>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3318      	adds	r3, #24
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0a9a      	lsrs	r2, r3, #10
 80025ae:	4b3e      	ldr	r3, [pc, #248]	@ (80026a8 <HAL_GPIO_Init+0x3ac>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	f002 0203 	and.w	r2, r2, #3
 80025b8:	00d2      	lsls	r2, r2, #3
 80025ba:	4093      	lsls	r3, r2
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80025c2:	4938      	ldr	r1, [pc, #224]	@ (80026a4 <HAL_GPIO_Init+0x3a8>)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3318      	adds	r3, #24
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80025d0:	4b34      	ldr	r3, [pc, #208]	@ (80026a4 <HAL_GPIO_Init+0x3a8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	4013      	ands	r3, r2
 80025de:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80025f4:	4a2b      	ldr	r2, [pc, #172]	@ (80026a4 <HAL_GPIO_Init+0x3a8>)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80025fa:	4b2a      	ldr	r3, [pc, #168]	@ (80026a4 <HAL_GPIO_Init+0x3a8>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	4013      	ands	r3, r2
 8002608:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800261e:	4a21      	ldr	r2, [pc, #132]	@ (80026a4 <HAL_GPIO_Init+0x3a8>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002624:	4b1f      	ldr	r3, [pc, #124]	@ (80026a4 <HAL_GPIO_Init+0x3a8>)
 8002626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800262a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	43db      	mvns	r3, r3
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	4013      	ands	r3, r2
 8002634:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800264a:	4a16      	ldr	r2, [pc, #88]	@ (80026a4 <HAL_GPIO_Init+0x3a8>)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002652:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <HAL_GPIO_Init+0x3a8>)
 8002654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002658:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	43db      	mvns	r3, r3
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	4013      	ands	r3, r2
 8002662:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002678:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <HAL_GPIO_Init+0x3a8>)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3301      	adds	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	f47f ae3d 	bne.w	8002310 <HAL_GPIO_Init+0x14>
  }
}
 8002696:	bf00      	nop
 8002698:	bf00      	nop
 800269a:	3724      	adds	r7, #36	@ 0x24
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	46022000 	.word	0x46022000
 80026a8:	002f7f7f 	.word	0x002f7f7f

080026ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e08d      	b.n	80027da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fd ffe6 	bl	80006a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	@ 0x24
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800270c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d107      	bne.n	8002726 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	e006      	b.n	8002734 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002732:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d108      	bne.n	800274e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	e007      	b.n	800275e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800276c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002770:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002780:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69d9      	ldr	r1, [r3, #28]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1a      	ldr	r2, [r3, #32]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	4608      	mov	r0, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	817b      	strh	r3, [r7, #10]
 80027f6:	460b      	mov	r3, r1
 80027f8:	813b      	strh	r3, [r7, #8]
 80027fa:	4613      	mov	r3, r2
 80027fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b20      	cmp	r3, #32
 8002808:	f040 80f9 	bne.w	80029fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_I2C_Mem_Write+0x34>
 8002812:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800281e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0ed      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_I2C_Mem_Write+0x4e>
 800282e:	2302      	movs	r3, #2
 8002830:	e0e6      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800283a:	f7fe fe51 	bl	80014e0 <HAL_GetTick>
 800283e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2319      	movs	r3, #25
 8002846:	2201      	movs	r2, #1
 8002848:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fadd 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0d1      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2221      	movs	r2, #33	@ 0x21
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	@ 0x40
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800287c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002884:	88f8      	ldrh	r0, [r7, #6]
 8002886:	893a      	ldrh	r2, [r7, #8]
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4603      	mov	r3, r0
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f9ed 	bl	8002c74 <I2C_RequestMemoryWrite>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0a9      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2bff      	cmp	r3, #255	@ 0xff
 80028b4:	d90e      	bls.n	80028d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	22ff      	movs	r2, #255	@ 0xff
 80028ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	8979      	ldrh	r1, [r7, #10]
 80028c4:	2300      	movs	r3, #0
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fc61 	bl	8003194 <I2C_TransferConfig>
 80028d2:	e00f      	b.n	80028f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	8979      	ldrh	r1, [r7, #10]
 80028e6:	2300      	movs	r3, #0
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fc50 	bl	8003194 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fae0 	bl	8002ebe <I2C_WaitOnTXISFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e07b      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d034      	beq.n	80029ac <HAL_I2C_Mem_Write+0x1c8>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	d130      	bne.n	80029ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	@ 0x80
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fa59 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e04d      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	2bff      	cmp	r3, #255	@ 0xff
 800296c:	d90e      	bls.n	800298c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	22ff      	movs	r2, #255	@ 0xff
 8002972:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002978:	b2da      	uxtb	r2, r3
 800297a:	8979      	ldrh	r1, [r7, #10]
 800297c:	2300      	movs	r3, #0
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fc05 	bl	8003194 <I2C_TransferConfig>
 800298a:	e00f      	b.n	80029ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299a:	b2da      	uxtb	r2, r3
 800299c:	8979      	ldrh	r1, [r7, #10]
 800299e:	2300      	movs	r3, #0
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fbf4 	bl	8003194 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d19e      	bne.n	80028f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fac6 	bl	8002f4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e01a      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2220      	movs	r2, #32
 80029d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <HAL_I2C_Mem_Write+0x224>)
 80029de:	400b      	ands	r3, r1
 80029e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	fe00e800 	.word	0xfe00e800

08002a0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	4608      	mov	r0, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	817b      	strh	r3, [r7, #10]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	813b      	strh	r3, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	f040 80fd 	bne.w	8002c2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_I2C_Mem_Read+0x34>
 8002a3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a46:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0f1      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_I2C_Mem_Read+0x4e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e0ea      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a62:	f7fe fd3d 	bl	80014e0 <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2319      	movs	r3, #25
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f9c9 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0d5      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2222      	movs	r2, #34	@ 0x22
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2240      	movs	r2, #64	@ 0x40
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aac:	88f8      	ldrh	r0, [r7, #6]
 8002aae:	893a      	ldrh	r2, [r7, #8]
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	4603      	mov	r3, r0
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f92d 	bl	8002d1c <I2C_RequestMemoryRead>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0ad      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2bff      	cmp	r3, #255	@ 0xff
 8002adc:	d90e      	bls.n	8002afc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	22ff      	movs	r2, #255	@ 0xff
 8002ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	4b52      	ldr	r3, [pc, #328]	@ (8002c38 <HAL_I2C_Mem_Read+0x22c>)
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fb4d 	bl	8003194 <I2C_TransferConfig>
 8002afa:	e00f      	b.n	8002b1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	8979      	ldrh	r1, [r7, #10]
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c38 <HAL_I2C_Mem_Read+0x22c>)
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fb3c 	bl	8003194 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b22:	2200      	movs	r2, #0
 8002b24:	2104      	movs	r1, #4
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f970 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e07c      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d034      	beq.n	8002bdc <HAL_I2C_Mem_Read+0x1d0>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d130      	bne.n	8002bdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b80:	2200      	movs	r2, #0
 8002b82:	2180      	movs	r1, #128	@ 0x80
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f941 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e04d      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2bff      	cmp	r3, #255	@ 0xff
 8002b9c:	d90e      	bls.n	8002bbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	22ff      	movs	r2, #255	@ 0xff
 8002ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	8979      	ldrh	r1, [r7, #10]
 8002bac:	2300      	movs	r3, #0
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 faed 	bl	8003194 <I2C_TransferConfig>
 8002bba:	e00f      	b.n	8002bdc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	8979      	ldrh	r1, [r7, #10]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 fadc 	bl	8003194 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d19a      	bne.n	8002b1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f9ae 	bl	8002f4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e01a      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <HAL_I2C_Mem_Read+0x230>)
 8002c0e:	400b      	ands	r3, r1
 8002c10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e000      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
  }
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	80002400 	.word	0x80002400
 8002c3c:	fe00e800 	.word	0xfe00e800

08002c40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	68f9      	ldr	r1, [r7, #12]
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	817b      	strh	r3, [r7, #10]
 8002c86:	460b      	mov	r3, r1
 8002c88:	813b      	strh	r3, [r7, #8]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	8979      	ldrh	r1, [r7, #10]
 8002c94:	4b20      	ldr	r3, [pc, #128]	@ (8002d18 <I2C_RequestMemoryWrite+0xa4>)
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fa79 	bl	8003194 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	69b9      	ldr	r1, [r7, #24]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f909 	bl	8002ebe <I2C_WaitOnTXISFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e02c      	b.n	8002d10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cbc:	893b      	ldrh	r3, [r7, #8]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cc6:	e015      	b.n	8002cf4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cc8:	893b      	ldrh	r3, [r7, #8]
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	69b9      	ldr	r1, [r7, #24]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f8ef 	bl	8002ebe <I2C_WaitOnTXISFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e012      	b.n	8002d10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cea:	893b      	ldrh	r3, [r7, #8]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2180      	movs	r1, #128	@ 0x80
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f884 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	80002000 	.word	0x80002000

08002d1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	4608      	mov	r0, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	817b      	strh	r3, [r7, #10]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	813b      	strh	r3, [r7, #8]
 8002d32:	4613      	mov	r3, r2
 8002d34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	8979      	ldrh	r1, [r7, #10]
 8002d3c:	4b20      	ldr	r3, [pc, #128]	@ (8002dc0 <I2C_RequestMemoryRead+0xa4>)
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	2300      	movs	r3, #0
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fa26 	bl	8003194 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f8b6 	bl	8002ebe <I2C_WaitOnTXISFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e02c      	b.n	8002db6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d105      	bne.n	8002d6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d62:	893b      	ldrh	r3, [r7, #8]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d6c:	e015      	b.n	8002d9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d6e:	893b      	ldrh	r3, [r7, #8]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	69b9      	ldr	r1, [r7, #24]
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 f89c 	bl	8002ebe <I2C_WaitOnTXISFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e012      	b.n	8002db6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d90:	893b      	ldrh	r3, [r7, #8]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2200      	movs	r2, #0
 8002da2:	2140      	movs	r1, #64	@ 0x40
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f831 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	80002000 	.word	0x80002000

08002dc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d103      	bne.n	8002de2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2200      	movs	r2, #0
 8002de0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d007      	beq.n	8002e00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	619a      	str	r2, [r3, #24]
  }
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e1c:	e03b      	b.n	8002e96 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f8d6 	bl	8002fd4 <I2C_IsErrorOccurred>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e041      	b.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d02d      	beq.n	8002e96 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3a:	f7fe fb51 	bl	80014e0 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d302      	bcc.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d122      	bne.n	8002e96 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d113      	bne.n	8002e96 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00f      	b.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d0b4      	beq.n	8002e1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eca:	e033      	b.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f87f 	bl	8002fd4 <I2C_IsErrorOccurred>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e031      	b.n	8002f44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d025      	beq.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee8:	f7fe fafa 	bl	80014e0 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d302      	bcc.n	8002efe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d11a      	bne.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d013      	beq.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f10:	f043 0220 	orr.w	r2, r3, #32
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e007      	b.n	8002f44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d1c4      	bne.n	8002ecc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f58:	e02f      	b.n	8002fba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f838 	bl	8002fd4 <I2C_IsErrorOccurred>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e02d      	b.n	8002fca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7fe fab7 	bl	80014e0 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d11a      	bne.n	8002fba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d013      	beq.n	8002fba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	f043 0220 	orr.w	r2, r3, #32
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e007      	b.n	8002fca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d1c8      	bne.n	8002f5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	@ 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d068      	beq.n	80030d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2210      	movs	r2, #16
 8003006:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003008:	e049      	b.n	800309e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d045      	beq.n	800309e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7fe fa65 	bl	80014e0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	429a      	cmp	r2, r3
 8003020:	d302      	bcc.n	8003028 <I2C_IsErrorOccurred+0x54>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d13a      	bne.n	800309e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003032:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800303a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800304a:	d121      	bne.n	8003090 <I2C_IsErrorOccurred+0xbc>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003052:	d01d      	beq.n	8003090 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	2b20      	cmp	r3, #32
 8003058:	d01a      	beq.n	8003090 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003068:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800306a:	f7fe fa39 	bl	80014e0 <HAL_GetTick>
 800306e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003070:	e00e      	b.n	8003090 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003072:	f7fe fa35 	bl	80014e0 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b19      	cmp	r3, #25
 800307e:	d907      	bls.n	8003090 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	f043 0320 	orr.w	r3, r3, #32
 8003086:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800308e:	e006      	b.n	800309e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b20      	cmp	r3, #32
 800309c:	d1e9      	bne.n	8003072 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d003      	beq.n	80030b4 <I2C_IsErrorOccurred+0xe0>
 80030ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0aa      	beq.n	800300a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2220      	movs	r2, #32
 80030c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	f043 0304 	orr.w	r3, r3, #4
 80030ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	f043 0308 	orr.w	r3, r3, #8
 800310c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003116:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003138:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01c      	beq.n	8003182 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff fe3b 	bl	8002dc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b0d      	ldr	r3, [pc, #52]	@ (8003190 <I2C_IsErrorOccurred+0x1bc>)
 800315a:	400b      	ands	r3, r1
 800315c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	431a      	orrs	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003182:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003186:	4618      	mov	r0, r3
 8003188:	3728      	adds	r7, #40	@ 0x28
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	fe00e800 	.word	0xfe00e800

08003194 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	4613      	mov	r3, r2
 80031a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031a6:	897b      	ldrh	r3, [r7, #10]
 80031a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031ac:	7a7b      	ldrb	r3, [r7, #9]
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031b4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	4313      	orrs	r3, r2
 80031be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031c2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	0d5b      	lsrs	r3, r3, #21
 80031ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80031d2:	4b08      	ldr	r3, [pc, #32]	@ (80031f4 <I2C_TransferConfig+0x60>)
 80031d4:	430b      	orrs	r3, r1
 80031d6:	43db      	mvns	r3, r3
 80031d8:	ea02 0103 	and.w	r1, r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031e6:	bf00      	nop
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	03ff63ff 	.word	0x03ff63ff

080031f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b20      	cmp	r3, #32
 800320c:	d138      	bne.n	8003280 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003218:	2302      	movs	r3, #2
 800321a:	e032      	b.n	8003282 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	@ 0x24
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800324a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800328e:	b480      	push	{r7}
 8003290:	b085      	sub	sp, #20
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d139      	bne.n	8003318 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e033      	b.n	800331a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2224      	movs	r2, #36	@ 0x24
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e000      	b.n	800331a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af02      	add	r7, sp, #8
 800332e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e108      	b.n	800354c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fd ff53 	bl	8001200 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2203      	movs	r2, #3
 800335e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4a7b      	ldr	r2, [pc, #492]	@ (8003554 <HAL_PCD_Init+0x22c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d102      	bne.n	8003370 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f003 fe34 	bl	8006fe2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7c1a      	ldrb	r2, [r3, #16]
 8003382:	f88d 2000 	strb.w	r2, [sp]
 8003386:	3304      	adds	r3, #4
 8003388:	cb0e      	ldmia	r3, {r1, r2, r3}
 800338a:	f003 fdfd 	bl	8006f88 <USB_CoreInit>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0d5      	b.n	800354c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f003 fe2c 	bl	8007004 <USB_SetCurrentMode>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0c6      	b.n	800354c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	e04a      	b.n	800345a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033c4:	7bfa      	ldrb	r2, [r7, #15]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3315      	adds	r3, #21
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	3314      	adds	r3, #20
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	b298      	uxth	r0, r3
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	332e      	adds	r3, #46	@ 0x2e
 8003400:	4602      	mov	r2, r0
 8003402:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	3318      	adds	r3, #24
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	331c      	adds	r3, #28
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	3320      	adds	r3, #32
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	3324      	adds	r3, #36	@ 0x24
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	3301      	adds	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	791b      	ldrb	r3, [r3, #4]
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	429a      	cmp	r2, r3
 8003462:	d3af      	bcc.n	80033c4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	e044      	b.n	80034f4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034c2:	7bfa      	ldrb	r2, [r7, #15]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	3301      	adds	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	791b      	ldrb	r3, [r3, #4]
 80034f8:	7bfa      	ldrb	r2, [r7, #15]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d3b5      	bcc.n	800346a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7c1a      	ldrb	r2, [r3, #16]
 8003506:	f88d 2000 	strb.w	r2, [sp]
 800350a:	3304      	adds	r3, #4
 800350c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800350e:	f003 fdc5 	bl	800709c <USB_DevInit>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e013      	b.n	800354c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	7b1b      	ldrb	r3, [r3, #12]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d102      	bne.n	8003540 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f80c 	bl	8003558 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f003 ff6e 	bl	8007426 <USB_DevDisconnect>

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	42040000 	.word	0x42040000

08003558 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800358a:	f043 0303 	orr.w	r3, r3, #3
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80035a8:	4b39      	ldr	r3, [pc, #228]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035b0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d10b      	bne.n	80035d2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c0:	d905      	bls.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80035c2:	4b33      	ldr	r3, [pc, #204]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4a32      	ldr	r2, [pc, #200]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035cc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e057      	b.n	8003682 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d8:	d90a      	bls.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80035da:	4b2d      	ldr	r3, [pc, #180]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ec:	60d3      	str	r3, [r2, #12]
 80035ee:	e007      	b.n	8003600 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80035f0:	4b27      	ldr	r3, [pc, #156]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80035f8:	4925      	ldr	r1, [pc, #148]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003600:	4b24      	ldr	r3, [pc, #144]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a24      	ldr	r2, [pc, #144]	@ (8003698 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	099b      	lsrs	r3, r3, #6
 800360c:	2232      	movs	r2, #50	@ 0x32
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	4a21      	ldr	r2, [pc, #132]	@ (8003698 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	3301      	adds	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800361e:	e002      	b.n	8003626 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	3b01      	subs	r3, #1
 8003624:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003626:	4b1a      	ldr	r3, [pc, #104]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f3      	bne.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01b      	beq.n	8003676 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800363e:	4b15      	ldr	r3, [pc, #84]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a15      	ldr	r2, [pc, #84]	@ (8003698 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	099b      	lsrs	r3, r3, #6
 800364a:	2232      	movs	r2, #50	@ 0x32
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	4a11      	ldr	r2, [pc, #68]	@ (8003698 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	099b      	lsrs	r3, r3, #6
 8003658:	3301      	adds	r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800365c:	e002      	b.n	8003664 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3b01      	subs	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003664:	4b0a      	ldr	r3, [pc, #40]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f3      	bne.n	800365e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e000      	b.n	8003682 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	46020800 	.word	0x46020800
 8003694:	20000000 	.word	0x20000000
 8003698:	10624dd3 	.word	0x10624dd3

0800369c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80036a0:	4b04      	ldr	r3, [pc, #16]	@ (80036b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80036a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	46020800 	.word	0x46020800

080036b8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80036bc:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	4a04      	ldr	r2, [pc, #16]	@ (80036d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c6:	6113      	str	r3, [r2, #16]
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	46020800 	.word	0x46020800

080036d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	@ 0x38
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f000 bec8 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f2:	4b99      	ldr	r3, [pc, #612]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036fc:	4b96      	ldr	r3, [pc, #600]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 816c 	beq.w	80039ec <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_RCC_OscConfig+0x52>
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	2b0c      	cmp	r3, #12
 800371e:	f040 80de 	bne.w	80038de <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003724:	2b01      	cmp	r3, #1
 8003726:	f040 80da 	bne.w	80038de <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f000 bea5 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800373c:	4b86      	ldr	r3, [pc, #536]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_RCC_OscConfig+0x7a>
 8003748:	4b83      	ldr	r3, [pc, #524]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003750:	e005      	b.n	800375e <HAL_RCC_OscConfig+0x86>
 8003752:	4b81      	ldr	r3, [pc, #516]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003754:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800375e:	4293      	cmp	r3, r2
 8003760:	d255      	bcs.n	800380e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	4618      	mov	r0, r3
 800376e:	f001 f99d 	bl	8004aac <RCC_SetFlashLatencyFromMSIRange>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f000 be82 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800377e:	4b76      	ldr	r3, [pc, #472]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4a75      	ldr	r2, [pc, #468]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003784:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003788:	6093      	str	r3, [r2, #8]
 800378a:	4b73      	ldr	r3, [pc, #460]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	4970      	ldr	r1, [pc, #448]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80037a4:	d309      	bcc.n	80037ba <HAL_RCC_OscConfig+0xe2>
 80037a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f023 021f 	bic.w	r2, r3, #31
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4969      	ldr	r1, [pc, #420]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60cb      	str	r3, [r1, #12]
 80037b8:	e07e      	b.n	80038b8 <HAL_RCC_OscConfig+0x1e0>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	da0a      	bge.n	80037d8 <HAL_RCC_OscConfig+0x100>
 80037c2:	4b65      	ldr	r3, [pc, #404]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	015b      	lsls	r3, r3, #5
 80037d0:	4961      	ldr	r1, [pc, #388]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60cb      	str	r3, [r1, #12]
 80037d6:	e06f      	b.n	80038b8 <HAL_RCC_OscConfig+0x1e0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e0:	d30a      	bcc.n	80037f8 <HAL_RCC_OscConfig+0x120>
 80037e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	029b      	lsls	r3, r3, #10
 80037f0:	4959      	ldr	r1, [pc, #356]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60cb      	str	r3, [r1, #12]
 80037f6:	e05f      	b.n	80038b8 <HAL_RCC_OscConfig+0x1e0>
 80037f8:	4b57      	ldr	r3, [pc, #348]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	03db      	lsls	r3, r3, #15
 8003806:	4954      	ldr	r1, [pc, #336]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003808:	4313      	orrs	r3, r2
 800380a:	60cb      	str	r3, [r1, #12]
 800380c:	e054      	b.n	80038b8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800380e:	4b52      	ldr	r3, [pc, #328]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4a51      	ldr	r2, [pc, #324]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003814:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003818:	6093      	str	r3, [r2, #8]
 800381a:	4b4f      	ldr	r3, [pc, #316]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	494c      	ldr	r1, [pc, #304]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003828:	4313      	orrs	r3, r2
 800382a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003834:	d309      	bcc.n	800384a <HAL_RCC_OscConfig+0x172>
 8003836:	4b48      	ldr	r3, [pc, #288]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f023 021f 	bic.w	r2, r3, #31
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4945      	ldr	r1, [pc, #276]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003844:	4313      	orrs	r3, r2
 8003846:	60cb      	str	r3, [r1, #12]
 8003848:	e028      	b.n	800389c <HAL_RCC_OscConfig+0x1c4>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	da0a      	bge.n	8003868 <HAL_RCC_OscConfig+0x190>
 8003852:	4b41      	ldr	r3, [pc, #260]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	015b      	lsls	r3, r3, #5
 8003860:	493d      	ldr	r1, [pc, #244]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003862:	4313      	orrs	r3, r2
 8003864:	60cb      	str	r3, [r1, #12]
 8003866:	e019      	b.n	800389c <HAL_RCC_OscConfig+0x1c4>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003870:	d30a      	bcc.n	8003888 <HAL_RCC_OscConfig+0x1b0>
 8003872:	4b39      	ldr	r3, [pc, #228]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	029b      	lsls	r3, r3, #10
 8003880:	4935      	ldr	r1, [pc, #212]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003882:	4313      	orrs	r3, r2
 8003884:	60cb      	str	r3, [r1, #12]
 8003886:	e009      	b.n	800389c <HAL_RCC_OscConfig+0x1c4>
 8003888:	4b33      	ldr	r3, [pc, #204]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	03db      	lsls	r3, r3, #15
 8003896:	4930      	ldr	r1, [pc, #192]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 f900 	bl	8004aac <RCC_SetFlashLatencyFromMSIRange>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f000 bde5 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80038b8:	f001 f8de 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038bc:	4b27      	ldr	r3, [pc, #156]	@ (800395c <HAL_RCC_OscConfig+0x284>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd fd83 	bl	80013cc <HAL_InitTick>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80038cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 808a 	beq.w	80039ea <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80038d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038da:	f000 bdd2 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d066      	beq.n	80039b4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80038e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038f2:	f7fd fdf5 	bl	80014e0 <HAL_GetTick>
 80038f6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80038f8:	e009      	b.n	800390e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038fa:	f7fd fdf1 	bl	80014e0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d902      	bls.n	800390e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	f000 bdba 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800390e:	4b12      	ldr	r3, [pc, #72]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0ef      	beq.n	80038fa <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800391a:	4b0f      	ldr	r3, [pc, #60]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	4a0e      	ldr	r2, [pc, #56]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003920:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003924:	6093      	str	r3, [r2, #8]
 8003926:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	4909      	ldr	r1, [pc, #36]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003934:	4313      	orrs	r3, r2
 8003936:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003940:	d30e      	bcc.n	8003960 <HAL_RCC_OscConfig+0x288>
 8003942:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f023 021f 	bic.w	r2, r3, #31
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4902      	ldr	r1, [pc, #8]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003950:	4313      	orrs	r3, r2
 8003952:	60cb      	str	r3, [r1, #12]
 8003954:	e04a      	b.n	80039ec <HAL_RCC_OscConfig+0x314>
 8003956:	bf00      	nop
 8003958:	46020c00 	.word	0x46020c00
 800395c:	20000004 	.word	0x20000004
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	da0a      	bge.n	800397e <HAL_RCC_OscConfig+0x2a6>
 8003968:	4b98      	ldr	r3, [pc, #608]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	015b      	lsls	r3, r3, #5
 8003976:	4995      	ldr	r1, [pc, #596]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003978:	4313      	orrs	r3, r2
 800397a:	60cb      	str	r3, [r1, #12]
 800397c:	e036      	b.n	80039ec <HAL_RCC_OscConfig+0x314>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003986:	d30a      	bcc.n	800399e <HAL_RCC_OscConfig+0x2c6>
 8003988:	4b90      	ldr	r3, [pc, #576]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	029b      	lsls	r3, r3, #10
 8003996:	498d      	ldr	r1, [pc, #564]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	60cb      	str	r3, [r1, #12]
 800399c:	e026      	b.n	80039ec <HAL_RCC_OscConfig+0x314>
 800399e:	4b8b      	ldr	r3, [pc, #556]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	03db      	lsls	r3, r3, #15
 80039ac:	4987      	ldr	r1, [pc, #540]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60cb      	str	r3, [r1, #12]
 80039b2:	e01b      	b.n	80039ec <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80039b4:	4b85      	ldr	r3, [pc, #532]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a84      	ldr	r2, [pc, #528]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80039c0:	f7fd fd8e 	bl	80014e0 <HAL_GetTick>
 80039c4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80039c6:	e009      	b.n	80039dc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039c8:	f7fd fd8a 	bl	80014e0 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d902      	bls.n	80039dc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	f000 bd53 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80039dc:	4b7b      	ldr	r3, [pc, #492]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1ef      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2f0>
 80039e8:	e000      	b.n	80039ec <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80039ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 808b 	beq.w	8003b10 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80039fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_OscConfig+0x334>
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d109      	bne.n	8003a1a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d17d      	bne.n	8003b10 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f000 bd34 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a22:	d106      	bne.n	8003a32 <HAL_RCC_OscConfig+0x35a>
 8003a24:	4b69      	ldr	r3, [pc, #420]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a68      	ldr	r2, [pc, #416]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e041      	b.n	8003ab6 <HAL_RCC_OscConfig+0x3de>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a3a:	d112      	bne.n	8003a62 <HAL_RCC_OscConfig+0x38a>
 8003a3c:	4b63      	ldr	r3, [pc, #396]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a62      	ldr	r2, [pc, #392]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4b60      	ldr	r3, [pc, #384]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5f      	ldr	r2, [pc, #380]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a4e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	4b5d      	ldr	r3, [pc, #372]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a5c      	ldr	r2, [pc, #368]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	e029      	b.n	8003ab6 <HAL_RCC_OscConfig+0x3de>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003a6a:	d112      	bne.n	8003a92 <HAL_RCC_OscConfig+0x3ba>
 8003a6c:	4b57      	ldr	r3, [pc, #348]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a56      	ldr	r2, [pc, #344]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b54      	ldr	r3, [pc, #336]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a53      	ldr	r2, [pc, #332]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b51      	ldr	r3, [pc, #324]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a50      	ldr	r2, [pc, #320]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	e011      	b.n	8003ab6 <HAL_RCC_OscConfig+0x3de>
 8003a92:	4b4e      	ldr	r3, [pc, #312]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a4d      	ldr	r2, [pc, #308]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a4a      	ldr	r2, [pc, #296]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003aa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b48      	ldr	r3, [pc, #288]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a47      	ldr	r2, [pc, #284]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003ab0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d014      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003abe:	f7fd fd0f 	bl	80014e0 <HAL_GetTick>
 8003ac2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac4:	e009      	b.n	8003ada <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac6:	f7fd fd0b 	bl	80014e0 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b64      	cmp	r3, #100	@ 0x64
 8003ad2:	d902      	bls.n	8003ada <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	f000 bcd4 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ada:	4b3c      	ldr	r3, [pc, #240]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0ef      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x3ee>
 8003ae6:	e013      	b.n	8003b10 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fcfa 	bl	80014e0 <HAL_GetTick>
 8003aec:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aee:	e009      	b.n	8003b04 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af0:	f7fd fcf6 	bl	80014e0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	@ 0x64
 8003afc:	d902      	bls.n	8003b04 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	f000 bcbf 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b04:	4b31      	ldr	r3, [pc, #196]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1ef      	bne.n	8003af0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d05f      	beq.n	8003bdc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d005      	beq.n	8003b2e <HAL_RCC_OscConfig+0x456>
 8003b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d114      	bne.n	8003b52 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d111      	bne.n	8003b52 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d102      	bne.n	8003b3c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f000 bca3 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b23      	ldr	r3, [pc, #140]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	4920      	ldr	r1, [pc, #128]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b50:	e044      	b.n	8003bdc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d024      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b64:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b66:	f7fd fcbb 	bl	80014e0 <HAL_GetTick>
 8003b6a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b6c:	e009      	b.n	8003b82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6e:	f7fd fcb7 	bl	80014e0 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d902      	bls.n	8003b82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	f000 bc80 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b82:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0ef      	beq.n	8003b6e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	490b      	ldr	r1, [pc, #44]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	610b      	str	r3, [r1, #16]
 8003ba2:	e01b      	b.n	8003bdc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003ba4:	4b09      	ldr	r3, [pc, #36]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a08      	ldr	r2, [pc, #32]	@ (8003bcc <HAL_RCC_OscConfig+0x4f4>)
 8003baa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003bb0:	f7fd fc96 	bl	80014e0 <HAL_GetTick>
 8003bb4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bb6:	e00b      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb8:	f7fd fc92 	bl	80014e0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d904      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	f000 bc5b 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
 8003bcc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd0:	4baf      	ldr	r3, [pc, #700]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ed      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80c8 	beq.w	8003d7a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003bea:	2300      	movs	r3, #0
 8003bec:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf0:	4ba7      	ldr	r3, [pc, #668]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d111      	bne.n	8003c22 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	4ba4      	ldr	r3, [pc, #656]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c04:	4aa2      	ldr	r2, [pc, #648]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003c06:	f043 0304 	orr.w	r3, r3, #4
 8003c0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c0e:	4ba0      	ldr	r3, [pc, #640]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c22:	4b9c      	ldr	r3, [pc, #624]	@ (8003e94 <HAL_RCC_OscConfig+0x7bc>)
 8003c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d119      	bne.n	8003c62 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c2e:	4b99      	ldr	r3, [pc, #612]	@ (8003e94 <HAL_RCC_OscConfig+0x7bc>)
 8003c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c32:	4a98      	ldr	r2, [pc, #608]	@ (8003e94 <HAL_RCC_OscConfig+0x7bc>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fd fc51 	bl	80014e0 <HAL_GetTick>
 8003c3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c40:	e009      	b.n	8003c56 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7fd fc4d 	bl	80014e0 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d902      	bls.n	8003c56 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	f000 bc16 	b.w	8004482 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c56:	4b8f      	ldr	r3, [pc, #572]	@ (8003e94 <HAL_RCC_OscConfig+0x7bc>)
 8003c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0ef      	beq.n	8003c42 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d05f      	beq.n	8003d2a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003c6a:	4b89      	ldr	r3, [pc, #548]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c70:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d037      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d006      	beq.n	8003c98 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e3f4      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01b      	beq.n	8003cda <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003ca2:	4b7b      	ldr	r3, [pc, #492]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ca8:	4a79      	ldr	r2, [pc, #484]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003caa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003cae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003cb2:	f7fd fc15 	bl	80014e0 <HAL_GetTick>
 8003cb6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fd fc11 	bl	80014e0 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b05      	cmp	r3, #5
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e3da      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ccc:	4b70      	ldr	r3, [pc, #448]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1ef      	bne.n	8003cba <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003cda:	4b6d      	ldr	r3, [pc, #436]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ce0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	4969      	ldr	r1, [pc, #420]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003cf0:	4b67      	ldr	r3, [pc, #412]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cf6:	4a66      	ldr	r2, [pc, #408]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003cf8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cfc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d00:	f7fd fbee 	bl	80014e0 <HAL_GetTick>
 8003d04:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d08:	f7fd fbea 	bl	80014e0 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b05      	cmp	r3, #5
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e3b3      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0ef      	beq.n	8003d08 <HAL_RCC_OscConfig+0x630>
 8003d28:	e01b      	b.n	8003d62 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003d2a:	4b59      	ldr	r3, [pc, #356]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d30:	4a57      	ldr	r2, [pc, #348]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003d32:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003d36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d3a:	f7fd fbd1 	bl	80014e0 <HAL_GetTick>
 8003d3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fd fbcd 	bl	80014e0 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b05      	cmp	r3, #5
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e396      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d54:	4b4e      	ldr	r3, [pc, #312]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003d56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ef      	bne.n	8003d42 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d62:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d107      	bne.n	8003d7a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6a:	4b49      	ldr	r3, [pc, #292]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d70:	4a47      	ldr	r2, [pc, #284]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003d72:	f023 0304 	bic.w	r3, r3, #4
 8003d76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8111 	beq.w	8003faa <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b40      	ldr	r3, [pc, #256]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d111      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da2:	4a3b      	ldr	r2, [pc, #236]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003da4:	f043 0304 	orr.w	r3, r3, #4
 8003da8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003dac:	4b38      	ldr	r3, [pc, #224]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003dc0:	4b34      	ldr	r3, [pc, #208]	@ (8003e94 <HAL_RCC_OscConfig+0x7bc>)
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d118      	bne.n	8003dfe <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003dcc:	4b31      	ldr	r3, [pc, #196]	@ (8003e94 <HAL_RCC_OscConfig+0x7bc>)
 8003dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd0:	4a30      	ldr	r2, [pc, #192]	@ (8003e94 <HAL_RCC_OscConfig+0x7bc>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd8:	f7fd fb82 	bl	80014e0 <HAL_GetTick>
 8003ddc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de0:	f7fd fb7e 	bl	80014e0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e347      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003df2:	4b28      	ldr	r3, [pc, #160]	@ (8003e94 <HAL_RCC_OscConfig+0x7bc>)
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d01f      	beq.n	8003e4a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d010      	beq.n	8003e38 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e16:	4b1e      	ldr	r3, [pc, #120]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003e1e:	f043 0304 	orr.w	r3, r3, #4
 8003e22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e26:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e2c:	4a18      	ldr	r2, [pc, #96]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e36:	e018      	b.n	8003e6a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e38:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e3e:	4a14      	ldr	r2, [pc, #80]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e48:	e00f      	b.n	8003e6a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e4a:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e50:	4a0f      	ldr	r2, [pc, #60]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e60:	4a0b      	ldr	r2, [pc, #44]	@ (8003e90 <HAL_RCC_OscConfig+0x7b8>)
 8003e62:	f023 0304 	bic.w	r3, r3, #4
 8003e66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d057      	beq.n	8003f22 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003e72:	f7fd fb35 	bl	80014e0 <HAL_GetTick>
 8003e76:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e78:	e00e      	b.n	8003e98 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd fb31 	bl	80014e0 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d905      	bls.n	8003e98 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e2f8      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
 8003e90:	46020c00 	.word	0x46020c00
 8003e94:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e98:	4b9c      	ldr	r3, [pc, #624]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0e9      	beq.n	8003e7a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01b      	beq.n	8003eea <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003eb2:	4b96      	ldr	r3, [pc, #600]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eb8:	4a94      	ldr	r2, [pc, #592]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec4:	f7fd fb0c 	bl	80014e0 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e2d3      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003eda:	4b8c      	ldr	r3, [pc, #560]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0ed      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x7ec>
 8003ee8:	e053      	b.n	8003f92 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003eea:	4b88      	ldr	r3, [pc, #544]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ef0:	4a86      	ldr	r2, [pc, #536]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ef6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fd faf0 	bl	80014e0 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e2b7      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f12:	4b7e      	ldr	r3, [pc, #504]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1ed      	bne.n	8003efc <HAL_RCC_OscConfig+0x824>
 8003f20:	e037      	b.n	8003f92 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003f22:	f7fd fadd 	bl	80014e0 <HAL_GetTick>
 8003f26:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fd fad9 	bl	80014e0 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e2a0      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f40:	4b72      	ldr	r3, [pc, #456]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1ed      	bne.n	8003f2a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003f4e:	4b6f      	ldr	r3, [pc, #444]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01a      	beq.n	8003f92 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f5c:	4b6b      	ldr	r3, [pc, #428]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f62:	4a6a      	ldr	r2, [pc, #424]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003f64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f7fd fab7 	bl	80014e0 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e27e      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f84:	4b61      	ldr	r3, [pc, #388]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003f86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ed      	bne.n	8003f6e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f92:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fa0:	4a5a      	ldr	r2, [pc, #360]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003fa2:	f023 0304 	bic.w	r3, r3, #4
 8003fa6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d036      	beq.n	8004024 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d019      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003fbe:	4b53      	ldr	r3, [pc, #332]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a52      	ldr	r2, [pc, #328]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003fc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003fc8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003fca:	f7fd fa89 	bl	80014e0 <HAL_GetTick>
 8003fce:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fd2:	f7fd fa85 	bl	80014e0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e24e      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003fe4:	4b49      	ldr	r3, [pc, #292]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x8fa>
 8003ff0:	e018      	b.n	8004024 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003ff2:	4b46      	ldr	r3, [pc, #280]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a45      	ldr	r2, [pc, #276]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8003ff8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ffc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ffe:	f7fd fa6f 	bl	80014e0 <HAL_GetTick>
 8004002:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004006:	f7fd fa6b 	bl	80014e0 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e234      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004018:	4b3c      	ldr	r3, [pc, #240]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f0      	bne.n	8004006 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d036      	beq.n	800409e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004034:	2b00      	cmp	r3, #0
 8004036:	d019      	beq.n	800406c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004038:	4b34      	ldr	r3, [pc, #208]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a33      	ldr	r2, [pc, #204]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 800403e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004042:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004044:	f7fd fa4c 	bl	80014e0 <HAL_GetTick>
 8004048:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800404c:	f7fd fa48 	bl	80014e0 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e211      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800405e:	4b2b      	ldr	r3, [pc, #172]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x974>
 800406a:	e018      	b.n	800409e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800406c:	4b27      	ldr	r3, [pc, #156]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a26      	ldr	r2, [pc, #152]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8004072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004076:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004078:	f7fd fa32 	bl	80014e0 <HAL_GetTick>
 800407c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004080:	f7fd fa2e 	bl	80014e0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e1f7      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004092:	4b1e      	ldr	r3, [pc, #120]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d07f      	beq.n	80041aa <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d062      	beq.n	8004178 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80040b2:	4b16      	ldr	r3, [pc, #88]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	4a15      	ldr	r2, [pc, #84]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 80040b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040bc:	6093      	str	r3, [r2, #8]
 80040be:	4b13      	ldr	r3, [pc, #76]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ca:	4910      	ldr	r1, [pc, #64]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80040d8:	d309      	bcc.n	80040ee <HAL_RCC_OscConfig+0xa16>
 80040da:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f023 021f 	bic.w	r2, r3, #31
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4909      	ldr	r1, [pc, #36]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60cb      	str	r3, [r1, #12]
 80040ec:	e02a      	b.n	8004144 <HAL_RCC_OscConfig+0xa6c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da0c      	bge.n	8004110 <HAL_RCC_OscConfig+0xa38>
 80040f6:	4b05      	ldr	r3, [pc, #20]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	015b      	lsls	r3, r3, #5
 8004104:	4901      	ldr	r1, [pc, #4]	@ (800410c <HAL_RCC_OscConfig+0xa34>)
 8004106:	4313      	orrs	r3, r2
 8004108:	60cb      	str	r3, [r1, #12]
 800410a:	e01b      	b.n	8004144 <HAL_RCC_OscConfig+0xa6c>
 800410c:	46020c00 	.word	0x46020c00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004118:	d30a      	bcc.n	8004130 <HAL_RCC_OscConfig+0xa58>
 800411a:	4ba1      	ldr	r3, [pc, #644]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	029b      	lsls	r3, r3, #10
 8004128:	499d      	ldr	r1, [pc, #628]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 800412a:	4313      	orrs	r3, r2
 800412c:	60cb      	str	r3, [r1, #12]
 800412e:	e009      	b.n	8004144 <HAL_RCC_OscConfig+0xa6c>
 8004130:	4b9b      	ldr	r3, [pc, #620]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	03db      	lsls	r3, r3, #15
 800413e:	4998      	ldr	r1, [pc, #608]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004140:	4313      	orrs	r3, r2
 8004142:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004144:	4b96      	ldr	r3, [pc, #600]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a95      	ldr	r2, [pc, #596]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 800414a:	f043 0310 	orr.w	r3, r3, #16
 800414e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004150:	f7fd f9c6 	bl	80014e0 <HAL_GetTick>
 8004154:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004158:	f7fd f9c2 	bl	80014e0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e18b      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800416a:	4b8d      	ldr	r3, [pc, #564]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0xa80>
 8004176:	e018      	b.n	80041aa <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004178:	4b89      	ldr	r3, [pc, #548]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a88      	ldr	r2, [pc, #544]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 800417e:	f023 0310 	bic.w	r3, r3, #16
 8004182:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004184:	f7fd f9ac 	bl	80014e0 <HAL_GetTick>
 8004188:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800418c:	f7fd f9a8 	bl	80014e0 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e171      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800419e:	4b80      	ldr	r3, [pc, #512]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8166 	beq.w	8004480 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041ba:	4b79      	ldr	r3, [pc, #484]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b0c      	cmp	r3, #12
 80041c4:	f000 80f2 	beq.w	80043ac <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	f040 80c5 	bne.w	800435c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80041d2:	4b73      	ldr	r3, [pc, #460]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a72      	ldr	r2, [pc, #456]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80041d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041de:	f7fd f97f 	bl	80014e0 <HAL_GetTick>
 80041e2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e6:	f7fd f97b 	bl	80014e0 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e144      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041f8:	4b69      	ldr	r3, [pc, #420]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f0      	bne.n	80041e6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004204:	4b66      	ldr	r3, [pc, #408]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d111      	bne.n	8004236 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	4b63      	ldr	r3, [pc, #396]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004218:	4a61      	ldr	r2, [pc, #388]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 800421a:	f043 0304 	orr.w	r3, r3, #4
 800421e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004222:	4b5f      	ldr	r3, [pc, #380]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004236:	4b5b      	ldr	r3, [pc, #364]	@ (80043a4 <HAL_RCC_OscConfig+0xccc>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800423e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004242:	d102      	bne.n	800424a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800424a:	4b56      	ldr	r3, [pc, #344]	@ (80043a4 <HAL_RCC_OscConfig+0xccc>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	4a55      	ldr	r2, [pc, #340]	@ (80043a4 <HAL_RCC_OscConfig+0xccc>)
 8004250:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004254:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004256:	4b52      	ldr	r3, [pc, #328]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800425e:	f023 0303 	bic.w	r3, r3, #3
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800426a:	3a01      	subs	r2, #1
 800426c:	0212      	lsls	r2, r2, #8
 800426e:	4311      	orrs	r1, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004274:	430a      	orrs	r2, r1
 8004276:	494a      	ldr	r1, [pc, #296]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004278:	4313      	orrs	r3, r2
 800427a:	628b      	str	r3, [r1, #40]	@ 0x28
 800427c:	4b48      	ldr	r3, [pc, #288]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 800427e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004280:	4b49      	ldr	r3, [pc, #292]	@ (80043a8 <HAL_RCC_OscConfig+0xcd0>)
 8004282:	4013      	ands	r3, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004288:	3a01      	subs	r2, #1
 800428a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004292:	3a01      	subs	r2, #1
 8004294:	0252      	lsls	r2, r2, #9
 8004296:	b292      	uxth	r2, r2
 8004298:	4311      	orrs	r1, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800429e:	3a01      	subs	r2, #1
 80042a0:	0412      	lsls	r2, r2, #16
 80042a2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80042a6:	4311      	orrs	r1, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80042ac:	3a01      	subs	r2, #1
 80042ae:	0612      	lsls	r2, r2, #24
 80042b0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80042b4:	430a      	orrs	r2, r1
 80042b6:	493a      	ldr	r1, [pc, #232]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80042bc:	4b38      	ldr	r3, [pc, #224]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	4a37      	ldr	r2, [pc, #220]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80042c2:	f023 0310 	bic.w	r3, r3, #16
 80042c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042cc:	4a34      	ldr	r2, [pc, #208]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80042d2:	4b33      	ldr	r3, [pc, #204]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80042d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d6:	4a32      	ldr	r2, [pc, #200]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80042d8:	f043 0310 	orr.w	r3, r3, #16
 80042dc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80042de:	4b30      	ldr	r3, [pc, #192]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80042e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e2:	f023 020c 	bic.w	r2, r3, #12
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ea:	492d      	ldr	r1, [pc, #180]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80042f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d105      	bne.n	8004304 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80042f8:	4b2a      	ldr	r3, [pc, #168]	@ (80043a4 <HAL_RCC_OscConfig+0xccc>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a29      	ldr	r2, [pc, #164]	@ (80043a4 <HAL_RCC_OscConfig+0xccc>)
 80042fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004302:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004304:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004308:	2b01      	cmp	r3, #1
 800430a:	d107      	bne.n	800431c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b24      	ldr	r3, [pc, #144]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 800430e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004312:	4a23      	ldr	r2, [pc, #140]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004314:	f023 0304 	bic.w	r3, r3, #4
 8004318:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800431c:	4b20      	ldr	r3, [pc, #128]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1f      	ldr	r2, [pc, #124]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004326:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004328:	f7fd f8da 	bl	80014e0 <HAL_GetTick>
 800432c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004330:	f7fd f8d6 	bl	80014e0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e09f      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004342:	4b17      	ldr	r3, [pc, #92]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800434e:	4b14      	ldr	r3, [pc, #80]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	4a13      	ldr	r2, [pc, #76]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004358:	6293      	str	r3, [r2, #40]	@ 0x28
 800435a:	e091      	b.n	8004480 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800435c:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a0f      	ldr	r2, [pc, #60]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004366:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004368:	f7fd f8ba 	bl	80014e0 <HAL_GetTick>
 800436c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd f8b6 	bl	80014e0 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e07f      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004382:	4b07      	ldr	r3, [pc, #28]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800438e:	4b04      	ldr	r3, [pc, #16]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	4a03      	ldr	r2, [pc, #12]	@ (80043a0 <HAL_RCC_OscConfig+0xcc8>)
 8004394:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004398:	f023 0303 	bic.w	r3, r3, #3
 800439c:	6293      	str	r3, [r2, #40]	@ 0x28
 800439e:	e06f      	b.n	8004480 <HAL_RCC_OscConfig+0xda8>
 80043a0:	46020c00 	.word	0x46020c00
 80043a4:	46020800 	.word	0x46020800
 80043a8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80043ac:	4b37      	ldr	r3, [pc, #220]	@ (800448c <HAL_RCC_OscConfig+0xdb4>)
 80043ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043b2:	4b36      	ldr	r3, [pc, #216]	@ (800448c <HAL_RCC_OscConfig+0xdb4>)
 80043b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d039      	beq.n	8004434 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 0203 	and.w	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d132      	bne.n	8004434 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	0a1b      	lsrs	r3, r3, #8
 80043d2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d129      	bne.n	8004434 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d122      	bne.n	8004434 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d11a      	bne.n	8004434 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	0a5b      	lsrs	r3, r3, #9
 8004402:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d111      	bne.n	8004434 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800441c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d108      	bne.n	8004434 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	0e1b      	lsrs	r3, r3, #24
 8004426:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e024      	b.n	8004482 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004438:	4b14      	ldr	r3, [pc, #80]	@ (800448c <HAL_RCC_OscConfig+0xdb4>)
 800443a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443c:	08db      	lsrs	r3, r3, #3
 800443e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004446:	429a      	cmp	r2, r3
 8004448:	d01a      	beq.n	8004480 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800444a:	4b10      	ldr	r3, [pc, #64]	@ (800448c <HAL_RCC_OscConfig+0xdb4>)
 800444c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444e:	4a0f      	ldr	r2, [pc, #60]	@ (800448c <HAL_RCC_OscConfig+0xdb4>)
 8004450:	f023 0310 	bic.w	r3, r3, #16
 8004454:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fd f843 	bl	80014e0 <HAL_GetTick>
 800445a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800445c:	bf00      	nop
 800445e:	f7fd f83f 	bl	80014e0 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004466:	4293      	cmp	r3, r2
 8004468:	d0f9      	beq.n	800445e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446e:	4a07      	ldr	r2, [pc, #28]	@ (800448c <HAL_RCC_OscConfig+0xdb4>)
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004474:	4b05      	ldr	r3, [pc, #20]	@ (800448c <HAL_RCC_OscConfig+0xdb4>)
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	4a04      	ldr	r2, [pc, #16]	@ (800448c <HAL_RCC_OscConfig+0xdb4>)
 800447a:	f043 0310 	orr.w	r3, r3, #16
 800447e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3738      	adds	r7, #56	@ 0x38
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	46020c00 	.word	0x46020c00

08004490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e1d9      	b.n	8004858 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a4:	4b9b      	ldr	r3, [pc, #620]	@ (8004714 <HAL_RCC_ClockConfig+0x284>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d910      	bls.n	80044d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	4b98      	ldr	r3, [pc, #608]	@ (8004714 <HAL_RCC_ClockConfig+0x284>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 020f 	bic.w	r2, r3, #15
 80044ba:	4996      	ldr	r1, [pc, #600]	@ (8004714 <HAL_RCC_ClockConfig+0x284>)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	4b94      	ldr	r3, [pc, #592]	@ (8004714 <HAL_RCC_ClockConfig+0x284>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e1c1      	b.n	8004858 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d010      	beq.n	8004502 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	4b8c      	ldr	r3, [pc, #560]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d908      	bls.n	8004502 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80044f0:	4b89      	ldr	r3, [pc, #548]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	4986      	ldr	r1, [pc, #536]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d012      	beq.n	8004534 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	4b81      	ldr	r3, [pc, #516]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800451c:	429a      	cmp	r2, r3
 800451e:	d909      	bls.n	8004534 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004520:	4b7d      	ldr	r3, [pc, #500]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	497a      	ldr	r1, [pc, #488]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004530:	4313      	orrs	r3, r2
 8004532:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d010      	beq.n	8004562 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	4b74      	ldr	r3, [pc, #464]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800454c:	429a      	cmp	r2, r3
 800454e:	d908      	bls.n	8004562 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004550:	4b71      	ldr	r3, [pc, #452]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	496e      	ldr	r1, [pc, #440]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 800455e:	4313      	orrs	r3, r2
 8004560:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d010      	beq.n	8004590 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	4b69      	ldr	r3, [pc, #420]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	429a      	cmp	r2, r3
 800457c:	d908      	bls.n	8004590 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800457e:	4b66      	ldr	r3, [pc, #408]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f023 020f 	bic.w	r2, r3, #15
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	4963      	ldr	r1, [pc, #396]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 800458c:	4313      	orrs	r3, r2
 800458e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80d2 	beq.w	8004742 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800459e:	2300      	movs	r3, #0
 80045a0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d143      	bne.n	8004632 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 80045ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d110      	bne.n	80045da <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80045b8:	4b57      	ldr	r3, [pc, #348]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 80045ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045be:	4a56      	ldr	r2, [pc, #344]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 80045c0:	f043 0304 	orr.w	r3, r3, #4
 80045c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80045c8:	4b53      	ldr	r3, [pc, #332]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 80045ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80045da:	f7fc ff81 	bl	80014e0 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80045e0:	4b4e      	ldr	r3, [pc, #312]	@ (800471c <HAL_RCC_ClockConfig+0x28c>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00f      	beq.n	800460c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80045ee:	f7fc ff77 	bl	80014e0 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e12b      	b.n	8004858 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004600:	4b46      	ldr	r3, [pc, #280]	@ (800471c <HAL_RCC_ClockConfig+0x28c>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004612:	4b41      	ldr	r3, [pc, #260]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004618:	4a3f      	ldr	r2, [pc, #252]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 800461a:	f023 0304 	bic.w	r3, r3, #4
 800461e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004622:	4b3d      	ldr	r3, [pc, #244]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d121      	bne.n	8004672 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e112      	b.n	8004858 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800463a:	4b37      	ldr	r3, [pc, #220]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d115      	bne.n	8004672 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e106      	b.n	8004858 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004652:	4b31      	ldr	r3, [pc, #196]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e0fa      	b.n	8004858 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004662:	4b2d      	ldr	r3, [pc, #180]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0f2      	b.n	8004858 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004672:	4b29      	ldr	r3, [pc, #164]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f023 0203 	bic.w	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4926      	ldr	r1, [pc, #152]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004680:	4313      	orrs	r3, r2
 8004682:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004684:	f7fc ff2c 	bl	80014e0 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b03      	cmp	r3, #3
 8004690:	d112      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004692:	e00a      	b.n	80046aa <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004694:	f7fc ff24 	bl	80014e0 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e0d6      	b.n	8004858 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b0c      	cmp	r3, #12
 80046b4:	d1ee      	bne.n	8004694 <HAL_RCC_ClockConfig+0x204>
 80046b6:	e044      	b.n	8004742 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d112      	bne.n	80046e6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046c0:	e00a      	b.n	80046d8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c2:	f7fc ff0d 	bl	80014e0 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e0bf      	b.n	8004858 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d1ee      	bne.n	80046c2 <HAL_RCC_ClockConfig+0x232>
 80046e4:	e02d      	b.n	8004742 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d123      	bne.n	8004736 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046ee:	e00a      	b.n	8004706 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f0:	f7fc fef6 	bl	80014e0 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e0a8      	b.n	8004858 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004706:	4b04      	ldr	r3, [pc, #16]	@ (8004718 <HAL_RCC_ClockConfig+0x288>)
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ee      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x260>
 8004712:	e016      	b.n	8004742 <HAL_RCC_ClockConfig+0x2b2>
 8004714:	40022000 	.word	0x40022000
 8004718:	46020c00 	.word	0x46020c00
 800471c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004720:	f7fc fede 	bl	80014e0 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e090      	b.n	8004858 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004736:	4b4a      	ldr	r3, [pc, #296]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b04      	cmp	r3, #4
 8004740:	d1ee      	bne.n	8004720 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d010      	beq.n	8004770 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	4b43      	ldr	r3, [pc, #268]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	429a      	cmp	r2, r3
 800475c:	d208      	bcs.n	8004770 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800475e:	4b40      	ldr	r3, [pc, #256]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f023 020f 	bic.w	r2, r3, #15
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	493d      	ldr	r1, [pc, #244]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 800476c:	4313      	orrs	r3, r2
 800476e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004770:	4b3c      	ldr	r3, [pc, #240]	@ (8004864 <HAL_RCC_ClockConfig+0x3d4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d210      	bcs.n	80047a0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477e:	4b39      	ldr	r3, [pc, #228]	@ (8004864 <HAL_RCC_ClockConfig+0x3d4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 020f 	bic.w	r2, r3, #15
 8004786:	4937      	ldr	r1, [pc, #220]	@ (8004864 <HAL_RCC_ClockConfig+0x3d4>)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478e:	4b35      	ldr	r3, [pc, #212]	@ (8004864 <HAL_RCC_ClockConfig+0x3d4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e05b      	b.n	8004858 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d010      	beq.n	80047ce <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d208      	bcs.n	80047ce <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80047bc:	4b28      	ldr	r3, [pc, #160]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4925      	ldr	r1, [pc, #148]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d012      	beq.n	8004800 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	4b20      	ldr	r3, [pc, #128]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d209      	bcs.n	8004800 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80047ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	4919      	ldr	r1, [pc, #100]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	d010      	beq.n	800482e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	4b13      	ldr	r3, [pc, #76]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004818:	429a      	cmp	r2, r3
 800481a:	d208      	bcs.n	800482e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800481c:	4b10      	ldr	r3, [pc, #64]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	490d      	ldr	r1, [pc, #52]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 800482a:	4313      	orrs	r3, r2
 800482c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800482e:	f000 f821 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 8004832:	4602      	mov	r2, r0
 8004834:	4b0a      	ldr	r3, [pc, #40]	@ (8004860 <HAL_RCC_ClockConfig+0x3d0>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	490a      	ldr	r1, [pc, #40]	@ (8004868 <HAL_RCC_ClockConfig+0x3d8>)
 800483e:	5ccb      	ldrb	r3, [r1, r3]
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
 8004844:	4a09      	ldr	r2, [pc, #36]	@ (800486c <HAL_RCC_ClockConfig+0x3dc>)
 8004846:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004848:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <HAL_RCC_ClockConfig+0x3e0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f7fc fdbd 	bl	80013cc <HAL_InitTick>
 8004852:	4603      	mov	r3, r0
 8004854:	73fb      	strb	r3, [r7, #15]

  return status;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	46020c00 	.word	0x46020c00
 8004864:	40022000 	.word	0x40022000
 8004868:	080085b0 	.word	0x080085b0
 800486c:	20000000 	.word	0x20000000
 8004870:	20000004 	.word	0x20000004

08004874 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004874:	b480      	push	{r7}
 8004876:	b08b      	sub	sp, #44	@ 0x2c
 8004878:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004882:	4b78      	ldr	r3, [pc, #480]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800488c:	4b75      	ldr	r3, [pc, #468]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0x34>
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d121      	bne.n	80048e6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d11e      	bne.n	80048e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80048a8:	4b6e      	ldr	r3, [pc, #440]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d107      	bne.n	80048c4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80048b4:	4b6b      	ldr	r3, [pc, #428]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048ba:	0b1b      	lsrs	r3, r3, #12
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c2:	e005      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80048c4:	4b67      	ldr	r3, [pc, #412]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	0f1b      	lsrs	r3, r3, #28
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048d0:	4a65      	ldr	r2, [pc, #404]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d110      	bne.n	8004902 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048e4:	e00d      	b.n	8004902 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d102      	bne.n	80048f8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048f2:	4b5e      	ldr	r3, [pc, #376]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80048f4:	623b      	str	r3, [r7, #32]
 80048f6:	e004      	b.n	8004902 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048fe:	4b5b      	ldr	r3, [pc, #364]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004900:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b0c      	cmp	r3, #12
 8004906:	f040 80a5 	bne.w	8004a54 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800490a:	4b56      	ldr	r3, [pc, #344]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800490c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004914:	4b53      	ldr	r3, [pc, #332]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	3301      	adds	r3, #1
 8004920:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004922:	4b50      	ldr	r3, [pc, #320]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800492e:	4b4d      	ldr	r3, [pc, #308]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004932:	08db      	lsrs	r3, r3, #3
 8004934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d003      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0xe4>
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b03      	cmp	r3, #3
 8004954:	d022      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0x128>
 8004956:	e043      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004a70 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800496a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800496c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800497a:	ed97 6a01 	vldr	s12, [r7, #4]
 800497e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x200>
 8004982:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004986:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800498a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800498e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800499a:	e046      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004a70 <HAL_RCC_GetSysClockFreq+0x1fc>
 80049aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049be:	ed97 6a01 	vldr	s12, [r7, #4]
 80049c2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x200>
 80049c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049de:	e024      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	ee07 3a90 	vmov	s15, r3
 80049f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a08:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a0c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x200>
 8004a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a28:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2e:	0e1b      	lsrs	r3, r3, #24
 8004a30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a34:	3301      	adds	r3, #1
 8004a36:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4e:	ee17 3a90 	vmov	r3, s15
 8004a52:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004a54:	6a3b      	ldr	r3, [r7, #32]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	372c      	adds	r7, #44	@ 0x2c
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	46020c00 	.word	0x46020c00
 8004a68:	080085c0 	.word	0x080085c0
 8004a6c:	00f42400 	.word	0x00f42400
 8004a70:	4b742400 	.word	0x4b742400
 8004a74:	46000000 	.word	0x46000000

08004a78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004a7c:	f7ff fefa 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4b07      	ldr	r3, [pc, #28]	@ (8004aa0 <HAL_RCC_GetHCLKFreq+0x28>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	4906      	ldr	r1, [pc, #24]	@ (8004aa4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004a8c:	5ccb      	ldrb	r3, [r1, r3]
 8004a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a92:	4a05      	ldr	r2, [pc, #20]	@ (8004aa8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a94:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004a96:	4b04      	ldr	r3, [pc, #16]	@ (8004aa8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a98:	681b      	ldr	r3, [r3, #0]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	46020c00 	.word	0x46020c00
 8004aa4:	080085b0 	.word	0x080085b0
 8004aa8:	20000000 	.word	0x20000000

08004aac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ab4:	4b3e      	ldr	r3, [pc, #248]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ac2:	f7fe fdeb 	bl	800369c <HAL_PWREx_GetVoltageRange>
 8004ac6:	6178      	str	r0, [r7, #20]
 8004ac8:	e019      	b.n	8004afe <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	4b39      	ldr	r3, [pc, #228]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ad0:	4a37      	ldr	r2, [pc, #220]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ad2:	f043 0304 	orr.w	r3, r3, #4
 8004ad6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004ada:	4b35      	ldr	r3, [pc, #212]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ae8:	f7fe fdd8 	bl	800369c <HAL_PWREx_GetVoltageRange>
 8004aec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004aee:	4b30      	ldr	r3, [pc, #192]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004af4:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004af6:	f023 0304 	bic.w	r3, r3, #4
 8004afa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b04:	d003      	beq.n	8004b0e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b0c:	d109      	bne.n	8004b22 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b14:	d202      	bcs.n	8004b1c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004b16:	2301      	movs	r3, #1
 8004b18:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004b1a:	e033      	b.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004b20:	e030      	b.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b28:	d208      	bcs.n	8004b3c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b30:	d102      	bne.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004b32:	2303      	movs	r3, #3
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	e025      	b.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e035      	b.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b42:	d90f      	bls.n	8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b50:	d902      	bls.n	8004b58 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e015      	b.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004b58:	2301      	movs	r3, #1
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	e012      	b.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004b5e:	2300      	movs	r3, #0
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	e00f      	b.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b6a:	d109      	bne.n	8004b80 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b72:	d102      	bne.n	8004b7a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004b74:	2301      	movs	r3, #1
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	e004      	b.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	e001      	b.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004b80:	2301      	movs	r3, #1
 8004b82:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b84:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 020f 	bic.w	r2, r3, #15
 8004b8c:	4909      	ldr	r1, [pc, #36]	@ (8004bb4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004b94:	4b07      	ldr	r3, [pc, #28]	@ (8004bb4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d001      	beq.n	8004ba6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	46020c00 	.word	0x46020c00
 8004bb4:	40022000 	.word	0x40022000

08004bb8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bbc:	b0b8      	sub	sp, #224	@ 0xe0
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd8:	f002 0401 	and.w	r4, r2, #1
 8004bdc:	2500      	movs	r5, #0
 8004bde:	ea54 0305 	orrs.w	r3, r4, r5
 8004be2:	d00b      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004be4:	4bca      	ldr	r3, [pc, #808]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bea:	f023 0103 	bic.w	r1, r3, #3
 8004bee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf4:	4ac6      	ldr	r2, [pc, #792]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f002 0802 	and.w	r8, r2, #2
 8004c08:	f04f 0900 	mov.w	r9, #0
 8004c0c:	ea58 0309 	orrs.w	r3, r8, r9
 8004c10:	d00b      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004c12:	4bbf      	ldr	r3, [pc, #764]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c18:	f023 010c 	bic.w	r1, r3, #12
 8004c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c22:	4abb      	ldr	r2, [pc, #748]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c24:	430b      	orrs	r3, r1
 8004c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c32:	f002 0a04 	and.w	sl, r2, #4
 8004c36:	f04f 0b00 	mov.w	fp, #0
 8004c3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c3e:	d00b      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004c40:	4bb3      	ldr	r3, [pc, #716]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c46:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c50:	4aaf      	ldr	r2, [pc, #700]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c52:	430b      	orrs	r3, r1
 8004c54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f002 0308 	and.w	r3, r2, #8
 8004c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4313      	orrs	r3, r2
 8004c76:	d00b      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004c78:	4ba5      	ldr	r3, [pc, #660]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c88:	4aa1      	ldr	r2, [pc, #644]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	f002 0310 	and.w	r3, r2, #16
 8004c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004ca6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004caa:	460b      	mov	r3, r1
 8004cac:	4313      	orrs	r3, r2
 8004cae:	d00b      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004cb0:	4b97      	ldr	r3, [pc, #604]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc0:	4a93      	ldr	r2, [pc, #588]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f002 0320 	and.w	r3, r2, #32
 8004cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cde:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004ce8:	4b89      	ldr	r3, [pc, #548]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cee:	f023 0107 	bic.w	r1, r3, #7
 8004cf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cf8:	4a85      	ldr	r2, [pc, #532]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d10:	2300      	movs	r3, #0
 8004d12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d16:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004d20:	4b7b      	ldr	r3, [pc, #492]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d26:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004d2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d30:	4a77      	ldr	r2, [pc, #476]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d32:	430b      	orrs	r3, r1
 8004d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004d44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d4e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4313      	orrs	r3, r2
 8004d56:	d00b      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004d58:	4b6d      	ldr	r3, [pc, #436]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d68:	4a69      	ldr	r2, [pc, #420]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004d7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004d90:	4b5f      	ldr	r3, [pc, #380]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da0:	4a5b      	ldr	r2, [pc, #364]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004da2:	430b      	orrs	r3, r1
 8004da4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004da8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004db4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004db8:	2300      	movs	r3, #0
 8004dba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004dbe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	d00b      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004dc8:	4b51      	ldr	r3, [pc, #324]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dce:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004dd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd8:	4a4d      	ldr	r2, [pc, #308]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004de0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004dec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004df6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004e00:	4b43      	ldr	r3, [pc, #268]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e06:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004e0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e10:	4a3f      	ldr	r2, [pc, #252]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e12:	430b      	orrs	r3, r1
 8004e14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004e24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004e32:	460b      	mov	r3, r1
 8004e34:	4313      	orrs	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004e38:	4b35      	ldr	r3, [pc, #212]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e3e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e48:	4a31      	ldr	r2, [pc, #196]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004e5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e5e:	2300      	movs	r3, #0
 8004e60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e62:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004e66:	460b      	mov	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	d00c      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004e6c:	4b28      	ldr	r3, [pc, #160]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e7e:	4a24      	ldr	r2, [pc, #144]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e80:	430b      	orrs	r3, r1
 8004e82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e92:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e94:	2300      	movs	r3, #0
 8004e96:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	d04f      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004ea2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eaa:	2b80      	cmp	r3, #128	@ 0x80
 8004eac:	d02d      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004eae:	2b80      	cmp	r3, #128	@ 0x80
 8004eb0:	d827      	bhi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004eb2:	2b60      	cmp	r3, #96	@ 0x60
 8004eb4:	d02e      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004eb6:	2b60      	cmp	r3, #96	@ 0x60
 8004eb8:	d823      	bhi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004eba:	2b40      	cmp	r3, #64	@ 0x40
 8004ebc:	d006      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004ebe:	2b40      	cmp	r3, #64	@ 0x40
 8004ec0:	d81f      	bhi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d011      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004eca:	e01a      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ecc:	4b10      	ldr	r3, [pc, #64]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ed8:	e01d      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ede:	3308      	adds	r3, #8
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fc0d 	bl	8005700 <RCCEx_PLL2_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004eec:	e013      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004eee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ef2:	332c      	adds	r3, #44	@ 0x2c
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fc9b 	bl	8005830 <RCCEx_PLL3_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f00:	e009      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004f08:	e005      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004f0a:	bf00      	nop
 8004f0c:	e003      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004f0e:	bf00      	nop
 8004f10:	46020c00 	.word	0x46020c00
        break;
 8004f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f16:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10d      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004f1e:	4bb6      	ldr	r3, [pc, #728]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f24:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004f28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f30:	4ab1      	ldr	r2, [pc, #708]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f32:	430b      	orrs	r3, r1
 8004f34:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f38:	e003      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f3e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004f4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f50:	2300      	movs	r3, #0
 8004f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f54:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	d053      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6a:	d033      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f70:	d82c      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f76:	d02f      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004f78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f7c:	d826      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f82:	d008      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f88:	d820      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f92:	d011      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004f94:	e01a      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f96:	4b98      	ldr	r3, [pc, #608]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9a:	4a97      	ldr	r2, [pc, #604]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fa2:	e01a      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fa8:	3308      	adds	r3, #8
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fba8 	bl	8005700 <RCCEx_PLL2_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fb6:	e010      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fbc:	332c      	adds	r3, #44	@ 0x2c
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fc36 	bl	8005830 <RCCEx_PLL3_Config>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fca:	e006      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004fd2:	e002      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004fd4:	bf00      	nop
 8004fd6:	e000      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fda:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10d      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004fe2:	4b85      	ldr	r3, [pc, #532]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fe4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fe8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff4:	4a80      	ldr	r2, [pc, #512]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004ffc:	e003      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005002:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005006:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005012:	663b      	str	r3, [r7, #96]	@ 0x60
 8005014:	2300      	movs	r3, #0
 8005016:	667b      	str	r3, [r7, #100]	@ 0x64
 8005018:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800501c:	460b      	mov	r3, r1
 800501e:	4313      	orrs	r3, r2
 8005020:	d046      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005022:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800502a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800502e:	d028      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005030:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005034:	d821      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800503a:	d022      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800503c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005040:	d81b      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005042:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005046:	d01c      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005048:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800504c:	d815      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800504e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005052:	d008      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005058:	d80f      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d011      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005062:	d00e      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005064:	e009      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005066:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800506a:	3308      	adds	r3, #8
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fb47 	bl	8005700 <RCCEx_PLL2_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005078:	e004      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005080:	e000      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8005082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005084:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10d      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800508c:	4b5a      	ldr	r3, [pc, #360]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800508e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005092:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005096:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800509a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800509e:	4a56      	ldr	r2, [pc, #344]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050a0:	430b      	orrs	r3, r1
 80050a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80050a6:	e003      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050ac:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80050b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80050bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050be:	2300      	movs	r3, #0
 80050c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80050c6:	460b      	mov	r3, r1
 80050c8:	4313      	orrs	r3, r2
 80050ca:	d03f      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80050cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d81e      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80050d8:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80050da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050de:	bf00      	nop
 80050e0:	0800511f 	.word	0x0800511f
 80050e4:	080050f5 	.word	0x080050f5
 80050e8:	08005103 	.word	0x08005103
 80050ec:	0800511f 	.word	0x0800511f
 80050f0:	0800511f 	.word	0x0800511f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050f4:	4b40      	ldr	r3, [pc, #256]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f8:	4a3f      	ldr	r2, [pc, #252]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050fe:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005100:	e00e      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005102:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005106:	332c      	adds	r3, #44	@ 0x2c
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fb91 	bl	8005830 <RCCEx_PLL3_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005114:	e004      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800511c:	e000      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800511e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005120:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10d      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005128:	4b33      	ldr	r3, [pc, #204]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800512a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800512e:	f023 0107 	bic.w	r1, r3, #7
 8005132:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513a:	4a2f      	ldr	r2, [pc, #188]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800513c:	430b      	orrs	r3, r1
 800513e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005142:	e003      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005144:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005148:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800514c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005158:	653b      	str	r3, [r7, #80]	@ 0x50
 800515a:	2300      	movs	r3, #0
 800515c:	657b      	str	r3, [r7, #84]	@ 0x54
 800515e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005162:	460b      	mov	r3, r1
 8005164:	4313      	orrs	r3, r2
 8005166:	d04d      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005168:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800516c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005170:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005174:	d028      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8005176:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800517a:	d821      	bhi.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800517c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005180:	d024      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005182:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005186:	d81b      	bhi.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800518c:	d00e      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800518e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005192:	d815      	bhi.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01b      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800519c:	d110      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800519e:	4b16      	ldr	r3, [pc, #88]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	4a15      	ldr	r2, [pc, #84]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051a8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80051aa:	e012      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051b0:	332c      	adds	r3, #44	@ 0x2c
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fb3c 	bl	8005830 <RCCEx_PLL3_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80051be:	e008      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80051c6:	e004      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80051c8:	bf00      	nop
 80051ca:	e002      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80051cc:	bf00      	nop
 80051ce:	e000      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80051d0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80051d2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d110      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80051da:	4b07      	ldr	r3, [pc, #28]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80051e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051ec:	4a02      	ldr	r2, [pc, #8]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051ee:	430b      	orrs	r3, r1
 80051f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80051f4:	e006      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80051f6:	bf00      	nop
 80051f8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005200:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005204:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005210:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005212:	2300      	movs	r3, #0
 8005214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005216:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800521a:	460b      	mov	r3, r1
 800521c:	4313      	orrs	r3, r2
 800521e:	f000 80b5 	beq.w	800538c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005222:	2300      	movs	r3, #0
 8005224:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005228:	4b9d      	ldr	r3, [pc, #628]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800522a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d113      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005236:	4b9a      	ldr	r3, [pc, #616]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005238:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800523c:	4a98      	ldr	r2, [pc, #608]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800523e:	f043 0304 	orr.w	r3, r3, #4
 8005242:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005246:	4b96      	ldr	r3, [pc, #600]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005254:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8005258:	2301      	movs	r3, #1
 800525a:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800525e:	4b91      	ldr	r3, [pc, #580]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005262:	4a90      	ldr	r2, [pc, #576]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800526a:	f7fc f939 	bl	80014e0 <HAL_GetTick>
 800526e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005272:	e00b      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005274:	f7fc f934 	bl	80014e0 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d903      	bls.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800528a:	e005      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800528c:	4b85      	ldr	r3, [pc, #532]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0ed      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005298:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800529c:	2b00      	cmp	r3, #0
 800529e:	d165      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052a0:	4b7f      	ldr	r3, [pc, #508]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80052ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d023      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x746>
 80052b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052ba:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80052be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01b      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052c6:	4b76      	ldr	r3, [pc, #472]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052d4:	4b72      	ldr	r3, [pc, #456]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052da:	4a71      	ldr	r2, [pc, #452]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052e4:	4b6e      	ldr	r3, [pc, #440]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052ea:	4a6d      	ldr	r2, [pc, #436]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052f4:	4a6a      	ldr	r2, [pc, #424]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d019      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530a:	f7fc f8e9 	bl	80014e0 <HAL_GetTick>
 800530e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005312:	e00d      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005314:	f7fc f8e4 	bl	80014e0 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800531e:	1ad2      	subs	r2, r2, r3
 8005320:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005324:	429a      	cmp	r2, r3
 8005326:	d903      	bls.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 800532e:	e006      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005330:	4b5b      	ldr	r3, [pc, #364]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0ea      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800533e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10d      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005346:	4b56      	ldr	r3, [pc, #344]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800534c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005354:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005358:	4a51      	ldr	r2, [pc, #324]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800535a:	430b      	orrs	r3, r1
 800535c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005360:	e008      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005362:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005366:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800536a:	e003      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005370:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005374:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8005378:	2b01      	cmp	r3, #1
 800537a:	d107      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800537c:	4b48      	ldr	r3, [pc, #288]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800537e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005382:	4a47      	ldr	r2, [pc, #284]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005384:	f023 0304 	bic.w	r3, r3, #4
 8005388:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800538c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005398:	643b      	str	r3, [r7, #64]	@ 0x40
 800539a:	2300      	movs	r3, #0
 800539c:	647b      	str	r3, [r7, #68]	@ 0x44
 800539e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80053a2:	460b      	mov	r3, r1
 80053a4:	4313      	orrs	r3, r2
 80053a6:	d042      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80053a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053b0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80053b4:	d022      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x844>
 80053b6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80053ba:	d81b      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80053bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053c0:	d011      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80053c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053c6:	d815      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d019      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80053cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053d0:	d110      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053d6:	3308      	adds	r3, #8
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 f991 	bl	8005700 <RCCEx_PLL2_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80053e4:	e00d      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e6:	4b2e      	ldr	r3, [pc, #184]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ea:	4a2d      	ldr	r2, [pc, #180]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80053f2:	e006      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80053fa:	e002      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80053fc:	bf00      	nop
 80053fe:	e000      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005400:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005402:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10d      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800540a:	4b25      	ldr	r3, [pc, #148]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800540c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005410:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005418:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800541c:	4a20      	ldr	r2, [pc, #128]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800541e:	430b      	orrs	r3, r1
 8005420:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005424:	e003      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005426:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800542a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800542e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005436:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800543a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800543c:	2300      	movs	r3, #0
 800543e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005440:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005444:	460b      	mov	r3, r1
 8005446:	4313      	orrs	r3, r2
 8005448:	d032      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800544a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800544e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005456:	d00b      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800545c:	d804      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005466:	d007      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800546e:	e004      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005470:	bf00      	nop
 8005472:	e002      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005474:	bf00      	nop
 8005476:	e000      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005478:	bf00      	nop
    }
    if (ret == HAL_OK)
 800547a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800547e:	2b00      	cmp	r3, #0
 8005480:	d112      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005482:	4b07      	ldr	r3, [pc, #28]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005484:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005488:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800548c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005490:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005494:	4a02      	ldr	r2, [pc, #8]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005496:	430b      	orrs	r3, r1
 8005498:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800549c:	e008      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800549e:	bf00      	nop
 80054a0:	46020c00 	.word	0x46020c00
 80054a4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054ac:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80054b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80054bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80054be:	2300      	movs	r3, #0
 80054c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80054c6:	460b      	mov	r3, r1
 80054c8:	4313      	orrs	r3, r2
 80054ca:	d019      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80054cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054d8:	d105      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054da:	4b88      	ldr	r3, [pc, #544]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	4a87      	ldr	r2, [pc, #540]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e4:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80054e6:	4b85      	ldr	r3, [pc, #532]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054ec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80054f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054f8:	4a80      	ldr	r2, [pc, #512]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054fa:	430b      	orrs	r3, r1
 80054fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005500:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800550c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800550e:	2300      	movs	r3, #0
 8005510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005512:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005516:	460b      	mov	r3, r1
 8005518:	4313      	orrs	r3, r2
 800551a:	d00c      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800551c:	4b77      	ldr	r3, [pc, #476]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800551e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005522:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005526:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800552a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800552e:	4973      	ldr	r1, [pc, #460]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005536:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005542:	623b      	str	r3, [r7, #32]
 8005544:	2300      	movs	r3, #0
 8005546:	627b      	str	r3, [r7, #36]	@ 0x24
 8005548:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800554c:	460b      	mov	r3, r1
 800554e:	4313      	orrs	r3, r2
 8005550:	d00c      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005552:	4b6a      	ldr	r3, [pc, #424]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005558:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800555c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005560:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005564:	4965      	ldr	r1, [pc, #404]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800556c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005582:	460b      	mov	r3, r1
 8005584:	4313      	orrs	r3, r2
 8005586:	d00c      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005588:	4b5c      	ldr	r3, [pc, #368]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800558a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800558e:	f023 0218 	bic.w	r2, r3, #24
 8005592:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005596:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800559a:	4958      	ldr	r1, [pc, #352]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80055a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80055b8:	460b      	mov	r3, r1
 80055ba:	4313      	orrs	r3, r2
 80055bc:	d032      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80055be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80055c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055ca:	d105      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055cc:	4b4b      	ldr	r3, [pc, #300]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d0:	4a4a      	ldr	r2, [pc, #296]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055d6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80055d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80055e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055e4:	d108      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055ea:	3308      	adds	r3, #8
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f887 	bl	8005700 <RCCEx_PLL2_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80055f8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10d      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005600:	4b3e      	ldr	r3, [pc, #248]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005602:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005606:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800560a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800560e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005612:	493a      	ldr	r1, [pc, #232]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800561a:	e003      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005620:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800563a:	460b      	mov	r3, r1
 800563c:	4313      	orrs	r3, r2
 800563e:	d03a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005644:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005648:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800564c:	d00e      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800564e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005652:	d815      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d017      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8005658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800565c:	d110      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800565e:	4b27      	ldr	r3, [pc, #156]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005662:	4a26      	ldr	r2, [pc, #152]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005668:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800566a:	e00e      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800566c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005670:	3308      	adds	r3, #8
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f844 	bl	8005700 <RCCEx_PLL2_Config>
 8005678:	4603      	mov	r3, r0
 800567a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800567e:	e004      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005686:	e000      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8005688:	bf00      	nop
    }
    if (ret == HAL_OK)
 800568a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10d      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005692:	4b1a      	ldr	r3, [pc, #104]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005698:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800569c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056a4:	4915      	ldr	r1, [pc, #84]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80056ac:	e003      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056b2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80056b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	2300      	movs	r3, #0
 80056c6:	607b      	str	r3, [r7, #4]
 80056c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80056cc:	460b      	mov	r3, r1
 80056ce:	4313      	orrs	r3, r2
 80056d0:	d00c      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80056d2:	4b0a      	ldr	r3, [pc, #40]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056d8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80056dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056e4:	4905      	ldr	r1, [pc, #20]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80056ec:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	37e0      	adds	r7, #224	@ 0xe0
 80056f4:	46bd      	mov	sp, r7
 80056f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056fa:	bf00      	nop
 80056fc:	46020c00 	.word	0x46020c00

08005700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005708:	4b47      	ldr	r3, [pc, #284]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a46      	ldr	r2, [pc, #280]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 800570e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005712:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005714:	f7fb fee4 	bl	80014e0 <HAL_GetTick>
 8005718:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800571a:	e008      	b.n	800572e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800571c:	f7fb fee0 	bl	80014e0 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e077      	b.n	800581e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800572e:	4b3e      	ldr	r3, [pc, #248]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800573a:	4b3b      	ldr	r3, [pc, #236]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 800573c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005742:	f023 0303 	bic.w	r3, r3, #3
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6811      	ldr	r1, [r2, #0]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6852      	ldr	r2, [r2, #4]
 800574e:	3a01      	subs	r2, #1
 8005750:	0212      	lsls	r2, r2, #8
 8005752:	430a      	orrs	r2, r1
 8005754:	4934      	ldr	r1, [pc, #208]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 8005756:	4313      	orrs	r3, r2
 8005758:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800575a:	4b33      	ldr	r3, [pc, #204]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 800575c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800575e:	4b33      	ldr	r3, [pc, #204]	@ (800582c <RCCEx_PLL2_Config+0x12c>)
 8005760:	4013      	ands	r3, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6892      	ldr	r2, [r2, #8]
 8005766:	3a01      	subs	r2, #1
 8005768:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	68d2      	ldr	r2, [r2, #12]
 8005770:	3a01      	subs	r2, #1
 8005772:	0252      	lsls	r2, r2, #9
 8005774:	b292      	uxth	r2, r2
 8005776:	4311      	orrs	r1, r2
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6912      	ldr	r2, [r2, #16]
 800577c:	3a01      	subs	r2, #1
 800577e:	0412      	lsls	r2, r2, #16
 8005780:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005784:	4311      	orrs	r1, r2
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6952      	ldr	r2, [r2, #20]
 800578a:	3a01      	subs	r2, #1
 800578c:	0612      	lsls	r2, r2, #24
 800578e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005792:	430a      	orrs	r2, r1
 8005794:	4924      	ldr	r1, [pc, #144]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 8005796:	4313      	orrs	r3, r2
 8005798:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800579a:	4b23      	ldr	r3, [pc, #140]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 800579c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579e:	f023 020c 	bic.w	r2, r3, #12
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	4920      	ldr	r1, [pc, #128]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80057ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 80057ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	491c      	ldr	r1, [pc, #112]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80057ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	4a1a      	ldr	r2, [pc, #104]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 80057c0:	f023 0310 	bic.w	r3, r3, #16
 80057c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057c6:	4b18      	ldr	r3, [pc, #96]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	69d2      	ldr	r2, [r2, #28]
 80057d6:	00d2      	lsls	r2, r2, #3
 80057d8:	4913      	ldr	r1, [pc, #76]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80057de:	4b12      	ldr	r3, [pc, #72]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 80057e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e2:	4a11      	ldr	r2, [pc, #68]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 80057e4:	f043 0310 	orr.w	r3, r3, #16
 80057e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80057ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a0e      	ldr	r2, [pc, #56]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 80057f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057f4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057f6:	f7fb fe73 	bl	80014e0 <HAL_GetTick>
 80057fa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057fc:	e008      	b.n	8005810 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057fe:	f7fb fe6f 	bl	80014e0 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e006      	b.n	800581e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005810:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <RCCEx_PLL2_Config+0x128>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800581c:	2300      	movs	r3, #0

}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	46020c00 	.word	0x46020c00
 800582c:	80800000 	.word	0x80800000

08005830 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005838:	4b47      	ldr	r3, [pc, #284]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a46      	ldr	r2, [pc, #280]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 800583e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005842:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005844:	f7fb fe4c 	bl	80014e0 <HAL_GetTick>
 8005848:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800584a:	e008      	b.n	800585e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800584c:	f7fb fe48 	bl	80014e0 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e077      	b.n	800594e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800585e:	4b3e      	ldr	r3, [pc, #248]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800586a:	4b3b      	ldr	r3, [pc, #236]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005872:	f023 0303 	bic.w	r3, r3, #3
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6811      	ldr	r1, [r2, #0]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6852      	ldr	r2, [r2, #4]
 800587e:	3a01      	subs	r2, #1
 8005880:	0212      	lsls	r2, r2, #8
 8005882:	430a      	orrs	r2, r1
 8005884:	4934      	ldr	r1, [pc, #208]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 8005886:	4313      	orrs	r3, r2
 8005888:	630b      	str	r3, [r1, #48]	@ 0x30
 800588a:	4b33      	ldr	r3, [pc, #204]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 800588c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800588e:	4b33      	ldr	r3, [pc, #204]	@ (800595c <RCCEx_PLL3_Config+0x12c>)
 8005890:	4013      	ands	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6892      	ldr	r2, [r2, #8]
 8005896:	3a01      	subs	r2, #1
 8005898:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	68d2      	ldr	r2, [r2, #12]
 80058a0:	3a01      	subs	r2, #1
 80058a2:	0252      	lsls	r2, r2, #9
 80058a4:	b292      	uxth	r2, r2
 80058a6:	4311      	orrs	r1, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6912      	ldr	r2, [r2, #16]
 80058ac:	3a01      	subs	r2, #1
 80058ae:	0412      	lsls	r2, r2, #16
 80058b0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80058b4:	4311      	orrs	r1, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6952      	ldr	r2, [r2, #20]
 80058ba:	3a01      	subs	r2, #1
 80058bc:	0612      	lsls	r2, r2, #24
 80058be:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80058c2:	430a      	orrs	r2, r1
 80058c4:	4924      	ldr	r1, [pc, #144]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80058ca:	4b23      	ldr	r3, [pc, #140]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ce:	f023 020c 	bic.w	r2, r3, #12
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	4920      	ldr	r1, [pc, #128]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80058dc:	4b1e      	ldr	r3, [pc, #120]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 80058de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	491c      	ldr	r1, [pc, #112]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80058ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 80058f0:	f023 0310 	bic.w	r3, r3, #16
 80058f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058f6:	4b18      	ldr	r3, [pc, #96]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 80058f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058fe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	69d2      	ldr	r2, [r2, #28]
 8005906:	00d2      	lsls	r2, r2, #3
 8005908:	4913      	ldr	r1, [pc, #76]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 800590a:	4313      	orrs	r3, r2
 800590c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800590e:	4b12      	ldr	r3, [pc, #72]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005912:	4a11      	ldr	r2, [pc, #68]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 8005914:	f043 0310 	orr.w	r3, r3, #16
 8005918:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800591a:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a0e      	ldr	r2, [pc, #56]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 8005920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005924:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005926:	f7fb fddb 	bl	80014e0 <HAL_GetTick>
 800592a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800592c:	e008      	b.n	8005940 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800592e:	f7fb fdd7 	bl	80014e0 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e006      	b.n	800594e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005940:	4b05      	ldr	r3, [pc, #20]	@ (8005958 <RCCEx_PLL3_Config+0x128>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	46020c00 	.word	0x46020c00
 800595c:	80800000 	.word	0x80800000

08005960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e049      	b.n	8005a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fb fb32 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f000 fbfe 	bl	80061a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e049      	b.n	8005ab4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d106      	bne.n	8005a3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f841 	bl	8005abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	f000 fba7 	bl	80061a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d109      	bne.n	8005af4 <HAL_TIM_PWM_Start+0x24>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	bf14      	ite	ne
 8005aec:	2301      	movne	r3, #1
 8005aee:	2300      	moveq	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	e03c      	b.n	8005b6e <HAL_TIM_PWM_Start+0x9e>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d109      	bne.n	8005b0e <HAL_TIM_PWM_Start+0x3e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	bf14      	ite	ne
 8005b06:	2301      	movne	r3, #1
 8005b08:	2300      	moveq	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	e02f      	b.n	8005b6e <HAL_TIM_PWM_Start+0x9e>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d109      	bne.n	8005b28 <HAL_TIM_PWM_Start+0x58>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	bf14      	ite	ne
 8005b20:	2301      	movne	r3, #1
 8005b22:	2300      	moveq	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	e022      	b.n	8005b6e <HAL_TIM_PWM_Start+0x9e>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b0c      	cmp	r3, #12
 8005b2c:	d109      	bne.n	8005b42 <HAL_TIM_PWM_Start+0x72>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	bf14      	ite	ne
 8005b3a:	2301      	movne	r3, #1
 8005b3c:	2300      	moveq	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	e015      	b.n	8005b6e <HAL_TIM_PWM_Start+0x9e>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d109      	bne.n	8005b5c <HAL_TIM_PWM_Start+0x8c>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	e008      	b.n	8005b6e <HAL_TIM_PWM_Start+0x9e>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	bf14      	ite	ne
 8005b68:	2301      	movne	r3, #1
 8005b6a:	2300      	moveq	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e0d8      	b.n	8005d28 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d104      	bne.n	8005b86 <HAL_TIM_PWM_Start+0xb6>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b84:	e023      	b.n	8005bce <HAL_TIM_PWM_Start+0xfe>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d104      	bne.n	8005b96 <HAL_TIM_PWM_Start+0xc6>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b94:	e01b      	b.n	8005bce <HAL_TIM_PWM_Start+0xfe>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d104      	bne.n	8005ba6 <HAL_TIM_PWM_Start+0xd6>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ba4:	e013      	b.n	8005bce <HAL_TIM_PWM_Start+0xfe>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b0c      	cmp	r3, #12
 8005baa:	d104      	bne.n	8005bb6 <HAL_TIM_PWM_Start+0xe6>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bb4:	e00b      	b.n	8005bce <HAL_TIM_PWM_Start+0xfe>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d104      	bne.n	8005bc6 <HAL_TIM_PWM_Start+0xf6>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bc4:	e003      	b.n	8005bce <HAL_TIM_PWM_Start+0xfe>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	6839      	ldr	r1, [r7, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 f854 	bl	8006c84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a53      	ldr	r2, [pc, #332]	@ (8005d30 <HAL_TIM_PWM_Start+0x260>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d02c      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x170>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a52      	ldr	r2, [pc, #328]	@ (8005d34 <HAL_TIM_PWM_Start+0x264>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d027      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x170>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a50      	ldr	r2, [pc, #320]	@ (8005d38 <HAL_TIM_PWM_Start+0x268>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d022      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x170>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a4f      	ldr	r2, [pc, #316]	@ (8005d3c <HAL_TIM_PWM_Start+0x26c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d01d      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x170>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a4d      	ldr	r2, [pc, #308]	@ (8005d40 <HAL_TIM_PWM_Start+0x270>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d018      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x170>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a4c      	ldr	r2, [pc, #304]	@ (8005d44 <HAL_TIM_PWM_Start+0x274>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x170>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8005d48 <HAL_TIM_PWM_Start+0x278>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00e      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x170>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a49      	ldr	r2, [pc, #292]	@ (8005d4c <HAL_TIM_PWM_Start+0x27c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x170>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a47      	ldr	r2, [pc, #284]	@ (8005d50 <HAL_TIM_PWM_Start+0x280>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x170>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a46      	ldr	r2, [pc, #280]	@ (8005d54 <HAL_TIM_PWM_Start+0x284>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d101      	bne.n	8005c44 <HAL_TIM_PWM_Start+0x174>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <HAL_TIM_PWM_Start+0x176>
 8005c44:	2300      	movs	r3, #0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a34      	ldr	r2, [pc, #208]	@ (8005d30 <HAL_TIM_PWM_Start+0x260>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d040      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a32      	ldr	r2, [pc, #200]	@ (8005d34 <HAL_TIM_PWM_Start+0x264>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d03b      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c76:	d036      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c80:	d031      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a34      	ldr	r2, [pc, #208]	@ (8005d58 <HAL_TIM_PWM_Start+0x288>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d02c      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a32      	ldr	r2, [pc, #200]	@ (8005d5c <HAL_TIM_PWM_Start+0x28c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d027      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a31      	ldr	r2, [pc, #196]	@ (8005d60 <HAL_TIM_PWM_Start+0x290>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d022      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8005d64 <HAL_TIM_PWM_Start+0x294>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01d      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a2e      	ldr	r2, [pc, #184]	@ (8005d68 <HAL_TIM_PWM_Start+0x298>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d018      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8005d6c <HAL_TIM_PWM_Start+0x29c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d38 <HAL_TIM_PWM_Start+0x268>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00e      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d3c <HAL_TIM_PWM_Start+0x26c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d009      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d40 <HAL_TIM_PWM_Start+0x270>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d004      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x216>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a18      	ldr	r2, [pc, #96]	@ (8005d44 <HAL_TIM_PWM_Start+0x274>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d115      	bne.n	8005d12 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	4b20      	ldr	r3, [pc, #128]	@ (8005d70 <HAL_TIM_PWM_Start+0x2a0>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b06      	cmp	r3, #6
 8005cf6:	d015      	beq.n	8005d24 <HAL_TIM_PWM_Start+0x254>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cfe:	d011      	beq.n	8005d24 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d10:	e008      	b.n	8005d24 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0201 	orr.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	e000      	b.n	8005d26 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	50012c00 	.word	0x50012c00
 8005d38:	40013400 	.word	0x40013400
 8005d3c:	50013400 	.word	0x50013400
 8005d40:	40014000 	.word	0x40014000
 8005d44:	50014000 	.word	0x50014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	50014400 	.word	0x50014400
 8005d50:	40014800 	.word	0x40014800
 8005d54:	50014800 	.word	0x50014800
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	50000400 	.word	0x50000400
 8005d60:	40000800 	.word	0x40000800
 8005d64:	50000800 	.word	0x50000800
 8005d68:	40000c00 	.word	0x40000c00
 8005d6c:	50000c00 	.word	0x50000c00
 8005d70:	00010007 	.word	0x00010007

08005d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e0ff      	b.n	8005f92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b14      	cmp	r3, #20
 8005d9e:	f200 80f0 	bhi.w	8005f82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005da2:	a201      	add	r2, pc, #4	@ (adr r2, 8005da8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005dfd 	.word	0x08005dfd
 8005dac:	08005f83 	.word	0x08005f83
 8005db0:	08005f83 	.word	0x08005f83
 8005db4:	08005f83 	.word	0x08005f83
 8005db8:	08005e3d 	.word	0x08005e3d
 8005dbc:	08005f83 	.word	0x08005f83
 8005dc0:	08005f83 	.word	0x08005f83
 8005dc4:	08005f83 	.word	0x08005f83
 8005dc8:	08005e7f 	.word	0x08005e7f
 8005dcc:	08005f83 	.word	0x08005f83
 8005dd0:	08005f83 	.word	0x08005f83
 8005dd4:	08005f83 	.word	0x08005f83
 8005dd8:	08005ebf 	.word	0x08005ebf
 8005ddc:	08005f83 	.word	0x08005f83
 8005de0:	08005f83 	.word	0x08005f83
 8005de4:	08005f83 	.word	0x08005f83
 8005de8:	08005f01 	.word	0x08005f01
 8005dec:	08005f83 	.word	0x08005f83
 8005df0:	08005f83 	.word	0x08005f83
 8005df4:	08005f83 	.word	0x08005f83
 8005df8:	08005f41 	.word	0x08005f41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 facc 	bl	80063a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0208 	orr.w	r2, r2, #8
 8005e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0204 	bic.w	r2, r2, #4
 8005e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6999      	ldr	r1, [r3, #24]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	619a      	str	r2, [r3, #24]
      break;
 8005e3a:	e0a5      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fb6e 	bl	8006524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6999      	ldr	r1, [r3, #24]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	021a      	lsls	r2, r3, #8
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	619a      	str	r2, [r3, #24]
      break;
 8005e7c:	e084      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fbfd 	bl	8006684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0208 	orr.w	r2, r2, #8
 8005e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0204 	bic.w	r2, r2, #4
 8005ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69d9      	ldr	r1, [r3, #28]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	61da      	str	r2, [r3, #28]
      break;
 8005ebc:	e064      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fc8b 	bl	80067e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69d9      	ldr	r1, [r3, #28]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	021a      	lsls	r2, r3, #8
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	61da      	str	r2, [r3, #28]
      break;
 8005efe:	e043      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fd1a 	bl	8006940 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0208 	orr.w	r2, r2, #8
 8005f1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0204 	bic.w	r2, r2, #4
 8005f2a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f3e:	e023      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68b9      	ldr	r1, [r7, #8]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fd7c 	bl	8006a44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	021a      	lsls	r2, r3, #8
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f80:	e002      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
      break;
 8005f86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop

08005f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e0e6      	b.n	8006186 <HAL_TIM_ConfigClockSource+0x1ea>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005fd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a67      	ldr	r2, [pc, #412]	@ (8006190 <HAL_TIM_ConfigClockSource+0x1f4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	f000 80b1 	beq.w	800615a <HAL_TIM_ConfigClockSource+0x1be>
 8005ff8:	4a65      	ldr	r2, [pc, #404]	@ (8006190 <HAL_TIM_ConfigClockSource+0x1f4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	f200 80b6 	bhi.w	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 8006000:	4a64      	ldr	r2, [pc, #400]	@ (8006194 <HAL_TIM_ConfigClockSource+0x1f8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	f000 80a9 	beq.w	800615a <HAL_TIM_ConfigClockSource+0x1be>
 8006008:	4a62      	ldr	r2, [pc, #392]	@ (8006194 <HAL_TIM_ConfigClockSource+0x1f8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	f200 80ae 	bhi.w	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 8006010:	4a61      	ldr	r2, [pc, #388]	@ (8006198 <HAL_TIM_ConfigClockSource+0x1fc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	f000 80a1 	beq.w	800615a <HAL_TIM_ConfigClockSource+0x1be>
 8006018:	4a5f      	ldr	r2, [pc, #380]	@ (8006198 <HAL_TIM_ConfigClockSource+0x1fc>)
 800601a:	4293      	cmp	r3, r2
 800601c:	f200 80a6 	bhi.w	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 8006020:	4a5e      	ldr	r2, [pc, #376]	@ (800619c <HAL_TIM_ConfigClockSource+0x200>)
 8006022:	4293      	cmp	r3, r2
 8006024:	f000 8099 	beq.w	800615a <HAL_TIM_ConfigClockSource+0x1be>
 8006028:	4a5c      	ldr	r2, [pc, #368]	@ (800619c <HAL_TIM_ConfigClockSource+0x200>)
 800602a:	4293      	cmp	r3, r2
 800602c:	f200 809e 	bhi.w	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 8006030:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006034:	f000 8091 	beq.w	800615a <HAL_TIM_ConfigClockSource+0x1be>
 8006038:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800603c:	f200 8096 	bhi.w	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 8006040:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006044:	f000 8089 	beq.w	800615a <HAL_TIM_ConfigClockSource+0x1be>
 8006048:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800604c:	f200 808e 	bhi.w	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 8006050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006054:	d03e      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0x138>
 8006056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800605a:	f200 8087 	bhi.w	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 800605e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006062:	f000 8086 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x1d6>
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606a:	d87f      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 800606c:	2b70      	cmp	r3, #112	@ 0x70
 800606e:	d01a      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0x10a>
 8006070:	2b70      	cmp	r3, #112	@ 0x70
 8006072:	d87b      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 8006074:	2b60      	cmp	r3, #96	@ 0x60
 8006076:	d050      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x17e>
 8006078:	2b60      	cmp	r3, #96	@ 0x60
 800607a:	d877      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 800607c:	2b50      	cmp	r3, #80	@ 0x50
 800607e:	d03c      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x15e>
 8006080:	2b50      	cmp	r3, #80	@ 0x50
 8006082:	d873      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 8006084:	2b40      	cmp	r3, #64	@ 0x40
 8006086:	d058      	beq.n	800613a <HAL_TIM_ConfigClockSource+0x19e>
 8006088:	2b40      	cmp	r3, #64	@ 0x40
 800608a:	d86f      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 800608c:	2b30      	cmp	r3, #48	@ 0x30
 800608e:	d064      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x1be>
 8006090:	2b30      	cmp	r3, #48	@ 0x30
 8006092:	d86b      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 8006094:	2b20      	cmp	r3, #32
 8006096:	d060      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x1be>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d867      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x1d0>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d05c      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x1be>
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d05a      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x1be>
 80060a4:	e062      	b.n	800616c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060b6:	f000 fdc5 	bl	8006c44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	609a      	str	r2, [r3, #8]
      break;
 80060d2:	e04f      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060e4:	f000 fdae 	bl	8006c44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060f6:	609a      	str	r2, [r3, #8]
      break;
 80060f8:	e03c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006106:	461a      	mov	r2, r3
 8006108:	f000 fd20 	bl	8006b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2150      	movs	r1, #80	@ 0x50
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fd79 	bl	8006c0a <TIM_ITRx_SetConfig>
      break;
 8006118:	e02c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006126:	461a      	mov	r2, r3
 8006128:	f000 fd3f 	bl	8006baa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2160      	movs	r1, #96	@ 0x60
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fd69 	bl	8006c0a <TIM_ITRx_SetConfig>
      break;
 8006138:	e01c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006146:	461a      	mov	r2, r3
 8006148:	f000 fd00 	bl	8006b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2140      	movs	r1, #64	@ 0x40
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fd59 	bl	8006c0a <TIM_ITRx_SetConfig>
      break;
 8006158:	e00c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f000 fd50 	bl	8006c0a <TIM_ITRx_SetConfig>
      break;
 800616a:	e003      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	73fb      	strb	r3, [r7, #15]
      break;
 8006170:	e000      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8006172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	00100070 	.word	0x00100070
 8006194:	00100040 	.word	0x00100040
 8006198:	00100030 	.word	0x00100030
 800619c:	00100020 	.word	0x00100020

080061a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a6b      	ldr	r2, [pc, #428]	@ (8006360 <TIM_Base_SetConfig+0x1c0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d02b      	beq.n	8006210 <TIM_Base_SetConfig+0x70>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a6a      	ldr	r2, [pc, #424]	@ (8006364 <TIM_Base_SetConfig+0x1c4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d027      	beq.n	8006210 <TIM_Base_SetConfig+0x70>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c6:	d023      	beq.n	8006210 <TIM_Base_SetConfig+0x70>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061ce:	d01f      	beq.n	8006210 <TIM_Base_SetConfig+0x70>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a65      	ldr	r2, [pc, #404]	@ (8006368 <TIM_Base_SetConfig+0x1c8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d01b      	beq.n	8006210 <TIM_Base_SetConfig+0x70>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a64      	ldr	r2, [pc, #400]	@ (800636c <TIM_Base_SetConfig+0x1cc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d017      	beq.n	8006210 <TIM_Base_SetConfig+0x70>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a63      	ldr	r2, [pc, #396]	@ (8006370 <TIM_Base_SetConfig+0x1d0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d013      	beq.n	8006210 <TIM_Base_SetConfig+0x70>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a62      	ldr	r2, [pc, #392]	@ (8006374 <TIM_Base_SetConfig+0x1d4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00f      	beq.n	8006210 <TIM_Base_SetConfig+0x70>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a61      	ldr	r2, [pc, #388]	@ (8006378 <TIM_Base_SetConfig+0x1d8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00b      	beq.n	8006210 <TIM_Base_SetConfig+0x70>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a60      	ldr	r2, [pc, #384]	@ (800637c <TIM_Base_SetConfig+0x1dc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d007      	beq.n	8006210 <TIM_Base_SetConfig+0x70>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a5f      	ldr	r2, [pc, #380]	@ (8006380 <TIM_Base_SetConfig+0x1e0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_Base_SetConfig+0x70>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a5e      	ldr	r2, [pc, #376]	@ (8006384 <TIM_Base_SetConfig+0x1e4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d108      	bne.n	8006222 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a4e      	ldr	r2, [pc, #312]	@ (8006360 <TIM_Base_SetConfig+0x1c0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d043      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a4d      	ldr	r2, [pc, #308]	@ (8006364 <TIM_Base_SetConfig+0x1c4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d03f      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006238:	d03b      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006240:	d037      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a48      	ldr	r2, [pc, #288]	@ (8006368 <TIM_Base_SetConfig+0x1c8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d033      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a47      	ldr	r2, [pc, #284]	@ (800636c <TIM_Base_SetConfig+0x1cc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d02f      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a46      	ldr	r2, [pc, #280]	@ (8006370 <TIM_Base_SetConfig+0x1d0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d02b      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a45      	ldr	r2, [pc, #276]	@ (8006374 <TIM_Base_SetConfig+0x1d4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d027      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a44      	ldr	r2, [pc, #272]	@ (8006378 <TIM_Base_SetConfig+0x1d8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d023      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a43      	ldr	r2, [pc, #268]	@ (800637c <TIM_Base_SetConfig+0x1dc>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d01f      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a42      	ldr	r2, [pc, #264]	@ (8006380 <TIM_Base_SetConfig+0x1e0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d01b      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a41      	ldr	r2, [pc, #260]	@ (8006384 <TIM_Base_SetConfig+0x1e4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d017      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a40      	ldr	r2, [pc, #256]	@ (8006388 <TIM_Base_SetConfig+0x1e8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d013      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a3f      	ldr	r2, [pc, #252]	@ (800638c <TIM_Base_SetConfig+0x1ec>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00f      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a3e      	ldr	r2, [pc, #248]	@ (8006390 <TIM_Base_SetConfig+0x1f0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00b      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a3d      	ldr	r2, [pc, #244]	@ (8006394 <TIM_Base_SetConfig+0x1f4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d007      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006398 <TIM_Base_SetConfig+0x1f8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d003      	beq.n	80062b2 <TIM_Base_SetConfig+0x112>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a3b      	ldr	r2, [pc, #236]	@ (800639c <TIM_Base_SetConfig+0x1fc>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d108      	bne.n	80062c4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006360 <TIM_Base_SetConfig+0x1c0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d023      	beq.n	8006332 <TIM_Base_SetConfig+0x192>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006364 <TIM_Base_SetConfig+0x1c4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01f      	beq.n	8006332 <TIM_Base_SetConfig+0x192>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a22      	ldr	r2, [pc, #136]	@ (8006380 <TIM_Base_SetConfig+0x1e0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01b      	beq.n	8006332 <TIM_Base_SetConfig+0x192>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a21      	ldr	r2, [pc, #132]	@ (8006384 <TIM_Base_SetConfig+0x1e4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d017      	beq.n	8006332 <TIM_Base_SetConfig+0x192>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a20      	ldr	r2, [pc, #128]	@ (8006388 <TIM_Base_SetConfig+0x1e8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d013      	beq.n	8006332 <TIM_Base_SetConfig+0x192>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a1f      	ldr	r2, [pc, #124]	@ (800638c <TIM_Base_SetConfig+0x1ec>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00f      	beq.n	8006332 <TIM_Base_SetConfig+0x192>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a1e      	ldr	r2, [pc, #120]	@ (8006390 <TIM_Base_SetConfig+0x1f0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00b      	beq.n	8006332 <TIM_Base_SetConfig+0x192>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a1d      	ldr	r2, [pc, #116]	@ (8006394 <TIM_Base_SetConfig+0x1f4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d007      	beq.n	8006332 <TIM_Base_SetConfig+0x192>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a1c      	ldr	r2, [pc, #112]	@ (8006398 <TIM_Base_SetConfig+0x1f8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d003      	beq.n	8006332 <TIM_Base_SetConfig+0x192>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a1b      	ldr	r2, [pc, #108]	@ (800639c <TIM_Base_SetConfig+0x1fc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d103      	bne.n	800633a <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f043 0204 	orr.w	r2, r3, #4
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	601a      	str	r2, [r3, #0]
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40012c00 	.word	0x40012c00
 8006364:	50012c00 	.word	0x50012c00
 8006368:	40000400 	.word	0x40000400
 800636c:	50000400 	.word	0x50000400
 8006370:	40000800 	.word	0x40000800
 8006374:	50000800 	.word	0x50000800
 8006378:	40000c00 	.word	0x40000c00
 800637c:	50000c00 	.word	0x50000c00
 8006380:	40013400 	.word	0x40013400
 8006384:	50013400 	.word	0x50013400
 8006388:	40014000 	.word	0x40014000
 800638c:	50014000 	.word	0x50014000
 8006390:	40014400 	.word	0x40014400
 8006394:	50014400 	.word	0x50014400
 8006398:	40014800 	.word	0x40014800
 800639c:	50014800 	.word	0x50014800

080063a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	f023 0201 	bic.w	r2, r3, #1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 0302 	bic.w	r3, r3, #2
 80063ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a40      	ldr	r2, [pc, #256]	@ (80064fc <TIM_OC1_SetConfig+0x15c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d023      	beq.n	8006448 <TIM_OC1_SetConfig+0xa8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a3f      	ldr	r2, [pc, #252]	@ (8006500 <TIM_OC1_SetConfig+0x160>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d01f      	beq.n	8006448 <TIM_OC1_SetConfig+0xa8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a3e      	ldr	r2, [pc, #248]	@ (8006504 <TIM_OC1_SetConfig+0x164>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d01b      	beq.n	8006448 <TIM_OC1_SetConfig+0xa8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a3d      	ldr	r2, [pc, #244]	@ (8006508 <TIM_OC1_SetConfig+0x168>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d017      	beq.n	8006448 <TIM_OC1_SetConfig+0xa8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a3c      	ldr	r2, [pc, #240]	@ (800650c <TIM_OC1_SetConfig+0x16c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <TIM_OC1_SetConfig+0xa8>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a3b      	ldr	r2, [pc, #236]	@ (8006510 <TIM_OC1_SetConfig+0x170>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00f      	beq.n	8006448 <TIM_OC1_SetConfig+0xa8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a3a      	ldr	r2, [pc, #232]	@ (8006514 <TIM_OC1_SetConfig+0x174>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00b      	beq.n	8006448 <TIM_OC1_SetConfig+0xa8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a39      	ldr	r2, [pc, #228]	@ (8006518 <TIM_OC1_SetConfig+0x178>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d007      	beq.n	8006448 <TIM_OC1_SetConfig+0xa8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a38      	ldr	r2, [pc, #224]	@ (800651c <TIM_OC1_SetConfig+0x17c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d003      	beq.n	8006448 <TIM_OC1_SetConfig+0xa8>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a37      	ldr	r2, [pc, #220]	@ (8006520 <TIM_OC1_SetConfig+0x180>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d10c      	bne.n	8006462 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f023 0308 	bic.w	r3, r3, #8
 800644e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f023 0304 	bic.w	r3, r3, #4
 8006460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a25      	ldr	r2, [pc, #148]	@ (80064fc <TIM_OC1_SetConfig+0x15c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d023      	beq.n	80064b2 <TIM_OC1_SetConfig+0x112>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a24      	ldr	r2, [pc, #144]	@ (8006500 <TIM_OC1_SetConfig+0x160>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01f      	beq.n	80064b2 <TIM_OC1_SetConfig+0x112>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a23      	ldr	r2, [pc, #140]	@ (8006504 <TIM_OC1_SetConfig+0x164>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01b      	beq.n	80064b2 <TIM_OC1_SetConfig+0x112>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a22      	ldr	r2, [pc, #136]	@ (8006508 <TIM_OC1_SetConfig+0x168>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d017      	beq.n	80064b2 <TIM_OC1_SetConfig+0x112>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a21      	ldr	r2, [pc, #132]	@ (800650c <TIM_OC1_SetConfig+0x16c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <TIM_OC1_SetConfig+0x112>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a20      	ldr	r2, [pc, #128]	@ (8006510 <TIM_OC1_SetConfig+0x170>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00f      	beq.n	80064b2 <TIM_OC1_SetConfig+0x112>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a1f      	ldr	r2, [pc, #124]	@ (8006514 <TIM_OC1_SetConfig+0x174>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00b      	beq.n	80064b2 <TIM_OC1_SetConfig+0x112>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a1e      	ldr	r2, [pc, #120]	@ (8006518 <TIM_OC1_SetConfig+0x178>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d007      	beq.n	80064b2 <TIM_OC1_SetConfig+0x112>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a1d      	ldr	r2, [pc, #116]	@ (800651c <TIM_OC1_SetConfig+0x17c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d003      	beq.n	80064b2 <TIM_OC1_SetConfig+0x112>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006520 <TIM_OC1_SetConfig+0x180>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d111      	bne.n	80064d6 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	621a      	str	r2, [r3, #32]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	50012c00 	.word	0x50012c00
 8006504:	40013400 	.word	0x40013400
 8006508:	50013400 	.word	0x50013400
 800650c:	40014000 	.word	0x40014000
 8006510:	50014000 	.word	0x50014000
 8006514:	40014400 	.word	0x40014400
 8006518:	50014400 	.word	0x50014400
 800651c:	40014800 	.word	0x40014800
 8006520:	50014800 	.word	0x50014800

08006524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	f023 0210 	bic.w	r2, r3, #16
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800655e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f023 0320 	bic.w	r3, r3, #32
 8006572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a36      	ldr	r2, [pc, #216]	@ (800665c <TIM_OC2_SetConfig+0x138>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00b      	beq.n	80065a0 <TIM_OC2_SetConfig+0x7c>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a35      	ldr	r2, [pc, #212]	@ (8006660 <TIM_OC2_SetConfig+0x13c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d007      	beq.n	80065a0 <TIM_OC2_SetConfig+0x7c>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a34      	ldr	r2, [pc, #208]	@ (8006664 <TIM_OC2_SetConfig+0x140>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC2_SetConfig+0x7c>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a33      	ldr	r2, [pc, #204]	@ (8006668 <TIM_OC2_SetConfig+0x144>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10d      	bne.n	80065bc <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a27      	ldr	r2, [pc, #156]	@ (800665c <TIM_OC2_SetConfig+0x138>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d023      	beq.n	800660c <TIM_OC2_SetConfig+0xe8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a26      	ldr	r2, [pc, #152]	@ (8006660 <TIM_OC2_SetConfig+0x13c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d01f      	beq.n	800660c <TIM_OC2_SetConfig+0xe8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a25      	ldr	r2, [pc, #148]	@ (8006664 <TIM_OC2_SetConfig+0x140>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d01b      	beq.n	800660c <TIM_OC2_SetConfig+0xe8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a24      	ldr	r2, [pc, #144]	@ (8006668 <TIM_OC2_SetConfig+0x144>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d017      	beq.n	800660c <TIM_OC2_SetConfig+0xe8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a23      	ldr	r2, [pc, #140]	@ (800666c <TIM_OC2_SetConfig+0x148>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d013      	beq.n	800660c <TIM_OC2_SetConfig+0xe8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a22      	ldr	r2, [pc, #136]	@ (8006670 <TIM_OC2_SetConfig+0x14c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00f      	beq.n	800660c <TIM_OC2_SetConfig+0xe8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a21      	ldr	r2, [pc, #132]	@ (8006674 <TIM_OC2_SetConfig+0x150>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00b      	beq.n	800660c <TIM_OC2_SetConfig+0xe8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a20      	ldr	r2, [pc, #128]	@ (8006678 <TIM_OC2_SetConfig+0x154>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d007      	beq.n	800660c <TIM_OC2_SetConfig+0xe8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a1f      	ldr	r2, [pc, #124]	@ (800667c <TIM_OC2_SetConfig+0x158>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_OC2_SetConfig+0xe8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a1e      	ldr	r2, [pc, #120]	@ (8006680 <TIM_OC2_SetConfig+0x15c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d113      	bne.n	8006634 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800661a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40012c00 	.word	0x40012c00
 8006660:	50012c00 	.word	0x50012c00
 8006664:	40013400 	.word	0x40013400
 8006668:	50013400 	.word	0x50013400
 800666c:	40014000 	.word	0x40014000
 8006670:	50014000 	.word	0x50014000
 8006674:	40014400 	.word	0x40014400
 8006678:	50014400 	.word	0x50014400
 800667c:	40014800 	.word	0x40014800
 8006680:	50014800 	.word	0x50014800

08006684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0303 	bic.w	r3, r3, #3
 80066be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	021b      	lsls	r3, r3, #8
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a35      	ldr	r2, [pc, #212]	@ (80067b8 <TIM_OC3_SetConfig+0x134>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00b      	beq.n	80066fe <TIM_OC3_SetConfig+0x7a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a34      	ldr	r2, [pc, #208]	@ (80067bc <TIM_OC3_SetConfig+0x138>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d007      	beq.n	80066fe <TIM_OC3_SetConfig+0x7a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a33      	ldr	r2, [pc, #204]	@ (80067c0 <TIM_OC3_SetConfig+0x13c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d003      	beq.n	80066fe <TIM_OC3_SetConfig+0x7a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a32      	ldr	r2, [pc, #200]	@ (80067c4 <TIM_OC3_SetConfig+0x140>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d10d      	bne.n	800671a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a26      	ldr	r2, [pc, #152]	@ (80067b8 <TIM_OC3_SetConfig+0x134>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d023      	beq.n	800676a <TIM_OC3_SetConfig+0xe6>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a25      	ldr	r2, [pc, #148]	@ (80067bc <TIM_OC3_SetConfig+0x138>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01f      	beq.n	800676a <TIM_OC3_SetConfig+0xe6>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a24      	ldr	r2, [pc, #144]	@ (80067c0 <TIM_OC3_SetConfig+0x13c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01b      	beq.n	800676a <TIM_OC3_SetConfig+0xe6>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a23      	ldr	r2, [pc, #140]	@ (80067c4 <TIM_OC3_SetConfig+0x140>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d017      	beq.n	800676a <TIM_OC3_SetConfig+0xe6>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a22      	ldr	r2, [pc, #136]	@ (80067c8 <TIM_OC3_SetConfig+0x144>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <TIM_OC3_SetConfig+0xe6>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a21      	ldr	r2, [pc, #132]	@ (80067cc <TIM_OC3_SetConfig+0x148>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00f      	beq.n	800676a <TIM_OC3_SetConfig+0xe6>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a20      	ldr	r2, [pc, #128]	@ (80067d0 <TIM_OC3_SetConfig+0x14c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00b      	beq.n	800676a <TIM_OC3_SetConfig+0xe6>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a1f      	ldr	r2, [pc, #124]	@ (80067d4 <TIM_OC3_SetConfig+0x150>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d007      	beq.n	800676a <TIM_OC3_SetConfig+0xe6>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a1e      	ldr	r2, [pc, #120]	@ (80067d8 <TIM_OC3_SetConfig+0x154>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d003      	beq.n	800676a <TIM_OC3_SetConfig+0xe6>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1d      	ldr	r2, [pc, #116]	@ (80067dc <TIM_OC3_SetConfig+0x158>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d113      	bne.n	8006792 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	621a      	str	r2, [r3, #32]
}
 80067ac:	bf00      	nop
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	40012c00 	.word	0x40012c00
 80067bc:	50012c00 	.word	0x50012c00
 80067c0:	40013400 	.word	0x40013400
 80067c4:	50013400 	.word	0x50013400
 80067c8:	40014000 	.word	0x40014000
 80067cc:	50014000 	.word	0x50014000
 80067d0:	40014400 	.word	0x40014400
 80067d4:	50014400 	.word	0x50014400
 80067d8:	40014800 	.word	0x40014800
 80067dc:	50014800 	.word	0x50014800

080067e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800680e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800681a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	4313      	orrs	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800682e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	031b      	lsls	r3, r3, #12
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a36      	ldr	r2, [pc, #216]	@ (8006918 <TIM_OC4_SetConfig+0x138>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00b      	beq.n	800685c <TIM_OC4_SetConfig+0x7c>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a35      	ldr	r2, [pc, #212]	@ (800691c <TIM_OC4_SetConfig+0x13c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d007      	beq.n	800685c <TIM_OC4_SetConfig+0x7c>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a34      	ldr	r2, [pc, #208]	@ (8006920 <TIM_OC4_SetConfig+0x140>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_OC4_SetConfig+0x7c>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a33      	ldr	r2, [pc, #204]	@ (8006924 <TIM_OC4_SetConfig+0x144>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d10d      	bne.n	8006878 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	031b      	lsls	r3, r3, #12
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a27      	ldr	r2, [pc, #156]	@ (8006918 <TIM_OC4_SetConfig+0x138>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d023      	beq.n	80068c8 <TIM_OC4_SetConfig+0xe8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a26      	ldr	r2, [pc, #152]	@ (800691c <TIM_OC4_SetConfig+0x13c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d01f      	beq.n	80068c8 <TIM_OC4_SetConfig+0xe8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a25      	ldr	r2, [pc, #148]	@ (8006920 <TIM_OC4_SetConfig+0x140>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d01b      	beq.n	80068c8 <TIM_OC4_SetConfig+0xe8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a24      	ldr	r2, [pc, #144]	@ (8006924 <TIM_OC4_SetConfig+0x144>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d017      	beq.n	80068c8 <TIM_OC4_SetConfig+0xe8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a23      	ldr	r2, [pc, #140]	@ (8006928 <TIM_OC4_SetConfig+0x148>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d013      	beq.n	80068c8 <TIM_OC4_SetConfig+0xe8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a22      	ldr	r2, [pc, #136]	@ (800692c <TIM_OC4_SetConfig+0x14c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00f      	beq.n	80068c8 <TIM_OC4_SetConfig+0xe8>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a21      	ldr	r2, [pc, #132]	@ (8006930 <TIM_OC4_SetConfig+0x150>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00b      	beq.n	80068c8 <TIM_OC4_SetConfig+0xe8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a20      	ldr	r2, [pc, #128]	@ (8006934 <TIM_OC4_SetConfig+0x154>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d007      	beq.n	80068c8 <TIM_OC4_SetConfig+0xe8>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006938 <TIM_OC4_SetConfig+0x158>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC4_SetConfig+0xe8>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a1e      	ldr	r2, [pc, #120]	@ (800693c <TIM_OC4_SetConfig+0x15c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d113      	bne.n	80068f0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	019b      	lsls	r3, r3, #6
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	019b      	lsls	r3, r3, #6
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00
 800691c:	50012c00 	.word	0x50012c00
 8006920:	40013400 	.word	0x40013400
 8006924:	50013400 	.word	0x50013400
 8006928:	40014000 	.word	0x40014000
 800692c:	50014000 	.word	0x50014000
 8006930:	40014400 	.word	0x40014400
 8006934:	50014400 	.word	0x50014400
 8006938:	40014800 	.word	0x40014800
 800693c:	50014800 	.word	0x50014800

08006940 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800696e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006984:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	041b      	lsls	r3, r3, #16
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a21      	ldr	r2, [pc, #132]	@ (8006a1c <TIM_OC5_SetConfig+0xdc>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d023      	beq.n	80069e2 <TIM_OC5_SetConfig+0xa2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a20      	ldr	r2, [pc, #128]	@ (8006a20 <TIM_OC5_SetConfig+0xe0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01f      	beq.n	80069e2 <TIM_OC5_SetConfig+0xa2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a24 <TIM_OC5_SetConfig+0xe4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d01b      	beq.n	80069e2 <TIM_OC5_SetConfig+0xa2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006a28 <TIM_OC5_SetConfig+0xe8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d017      	beq.n	80069e2 <TIM_OC5_SetConfig+0xa2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a2c <TIM_OC5_SetConfig+0xec>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <TIM_OC5_SetConfig+0xa2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a30 <TIM_OC5_SetConfig+0xf0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00f      	beq.n	80069e2 <TIM_OC5_SetConfig+0xa2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a34 <TIM_OC5_SetConfig+0xf4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00b      	beq.n	80069e2 <TIM_OC5_SetConfig+0xa2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a38 <TIM_OC5_SetConfig+0xf8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d007      	beq.n	80069e2 <TIM_OC5_SetConfig+0xa2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a19      	ldr	r2, [pc, #100]	@ (8006a3c <TIM_OC5_SetConfig+0xfc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d003      	beq.n	80069e2 <TIM_OC5_SetConfig+0xa2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a18      	ldr	r2, [pc, #96]	@ (8006a40 <TIM_OC5_SetConfig+0x100>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d109      	bne.n	80069f6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	621a      	str	r2, [r3, #32]
}
 8006a10:	bf00      	nop
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	50012c00 	.word	0x50012c00
 8006a24:	40013400 	.word	0x40013400
 8006a28:	50013400 	.word	0x50013400
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	50014000 	.word	0x50014000
 8006a34:	40014400 	.word	0x40014400
 8006a38:	50014400 	.word	0x50014400
 8006a3c:	40014800 	.word	0x40014800
 8006a40:	50014800 	.word	0x50014800

08006a44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	021b      	lsls	r3, r3, #8
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	051b      	lsls	r3, r3, #20
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a22      	ldr	r2, [pc, #136]	@ (8006b24 <TIM_OC6_SetConfig+0xe0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d023      	beq.n	8006ae8 <TIM_OC6_SetConfig+0xa4>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a21      	ldr	r2, [pc, #132]	@ (8006b28 <TIM_OC6_SetConfig+0xe4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d01f      	beq.n	8006ae8 <TIM_OC6_SetConfig+0xa4>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a20      	ldr	r2, [pc, #128]	@ (8006b2c <TIM_OC6_SetConfig+0xe8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d01b      	beq.n	8006ae8 <TIM_OC6_SetConfig+0xa4>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b30 <TIM_OC6_SetConfig+0xec>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d017      	beq.n	8006ae8 <TIM_OC6_SetConfig+0xa4>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a1e      	ldr	r2, [pc, #120]	@ (8006b34 <TIM_OC6_SetConfig+0xf0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d013      	beq.n	8006ae8 <TIM_OC6_SetConfig+0xa4>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8006b38 <TIM_OC6_SetConfig+0xf4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00f      	beq.n	8006ae8 <TIM_OC6_SetConfig+0xa4>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a1c      	ldr	r2, [pc, #112]	@ (8006b3c <TIM_OC6_SetConfig+0xf8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00b      	beq.n	8006ae8 <TIM_OC6_SetConfig+0xa4>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b40 <TIM_OC6_SetConfig+0xfc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d007      	beq.n	8006ae8 <TIM_OC6_SetConfig+0xa4>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a1a      	ldr	r2, [pc, #104]	@ (8006b44 <TIM_OC6_SetConfig+0x100>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_OC6_SetConfig+0xa4>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a19      	ldr	r2, [pc, #100]	@ (8006b48 <TIM_OC6_SetConfig+0x104>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d109      	bne.n	8006afc <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	029b      	lsls	r3, r3, #10
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	621a      	str	r2, [r3, #32]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	50012c00 	.word	0x50012c00
 8006b2c:	40013400 	.word	0x40013400
 8006b30:	50013400 	.word	0x50013400
 8006b34:	40014000 	.word	0x40014000
 8006b38:	50014000 	.word	0x50014000
 8006b3c:	40014400 	.word	0x40014400
 8006b40:	50014400 	.word	0x50014400
 8006b44:	40014800 	.word	0x40014800
 8006b48:	50014800 	.word	0x50014800

08006b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f023 0201 	bic.w	r2, r3, #1
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f023 030a 	bic.w	r3, r3, #10
 8006b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b087      	sub	sp, #28
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	f023 0210 	bic.w	r2, r3, #16
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	031b      	lsls	r3, r3, #12
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006be6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	f043 0307 	orr.w	r3, r3, #7
 8006c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	609a      	str	r2, [r3, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	021a      	lsls	r2, r3, #8
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	431a      	orrs	r2, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	609a      	str	r2, [r3, #8]
}
 8006c78:	bf00      	nop
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f003 031f 	and.w	r3, r3, #31
 8006c96:	2201      	movs	r2, #1
 8006c98:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a1a      	ldr	r2, [r3, #32]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	401a      	ands	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a1a      	ldr	r2, [r3, #32]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	621a      	str	r2, [r3, #32]
}
 8006cc2:	bf00      	nop
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e097      	b.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a45      	ldr	r2, [pc, #276]	@ (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00e      	beq.n	8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a44      	ldr	r2, [pc, #272]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a42      	ldr	r2, [pc, #264]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a41      	ldr	r2, [pc, #260]	@ (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d108      	bne.n	8006d42 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a2f      	ldr	r2, [pc, #188]	@ (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d040      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d03b      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d7c:	d036      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d86:	d031      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a29      	ldr	r2, [pc, #164]	@ (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d02c      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a28      	ldr	r2, [pc, #160]	@ (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d027      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a26      	ldr	r2, [pc, #152]	@ (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d022      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a25      	ldr	r2, [pc, #148]	@ (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d01d      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a23      	ldr	r2, [pc, #140]	@ (8006e44 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d018      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a22      	ldr	r2, [pc, #136]	@ (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d013      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a18      	ldr	r2, [pc, #96]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00e      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a17      	ldr	r2, [pc, #92]	@ (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d009      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1a      	ldr	r2, [pc, #104]	@ (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d10c      	bne.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006df2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	40012c00 	.word	0x40012c00
 8006e28:	50012c00 	.word	0x50012c00
 8006e2c:	40013400 	.word	0x40013400
 8006e30:	50013400 	.word	0x50013400
 8006e34:	40000400 	.word	0x40000400
 8006e38:	50000400 	.word	0x50000400
 8006e3c:	40000800 	.word	0x40000800
 8006e40:	50000800 	.word	0x50000800
 8006e44:	40000c00 	.word	0x40000c00
 8006e48:	50000c00 	.word	0x50000c00
 8006e4c:	40014000 	.word	0x40014000
 8006e50:	50014000 	.word	0x50014000

08006e54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e07d      	b.n	8006f6c <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	041b      	lsls	r3, r3, #16
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a1e      	ldr	r2, [pc, #120]	@ (8006f78 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d00e      	beq.n	8006f20 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1d      	ldr	r2, [pc, #116]	@ (8006f7c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d009      	beq.n	8006f20 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1b      	ldr	r2, [pc, #108]	@ (8006f80 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d004      	beq.n	8006f20 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8006f84 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d11c      	bne.n	8006f5a <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2a:	051b      	lsls	r3, r3, #20
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	50012c00 	.word	0x50012c00
 8006f80:	40013400 	.word	0x40013400
 8006f84:	50013400 	.word	0x50013400

08006f88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f88:	b084      	sub	sp, #16
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	f107 001c 	add.w	r0, r7, #28
 8006f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa6c 	bl	8007484 <USB_CoreReset>
 8006fac:	4603      	mov	r3, r0
 8006fae:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006fb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d106      	bne.n	8006fc6 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006fc4:	e005      	b.n	8006fd2 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fde:	b004      	add	sp, #16
 8006fe0:	4770      	bx	lr

08006fe2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f023 0201 	bic.w	r2, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d115      	bne.n	8007052 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007032:	200a      	movs	r0, #10
 8007034:	f7fa fa60 	bl	80014f8 <HAL_Delay>
      ms += 10U;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	330a      	adds	r3, #10
 800703c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa12 	bl	8007468 <USB_GetMode>
 8007044:	4603      	mov	r3, r0
 8007046:	2b01      	cmp	r3, #1
 8007048:	d01e      	beq.n	8007088 <USB_SetCurrentMode+0x84>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2bc7      	cmp	r3, #199	@ 0xc7
 800704e:	d9f0      	bls.n	8007032 <USB_SetCurrentMode+0x2e>
 8007050:	e01a      	b.n	8007088 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d115      	bne.n	8007084 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007064:	200a      	movs	r0, #10
 8007066:	f7fa fa47 	bl	80014f8 <HAL_Delay>
      ms += 10U;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	330a      	adds	r3, #10
 800706e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f9f9 	bl	8007468 <USB_GetMode>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <USB_SetCurrentMode+0x84>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007080:	d9f0      	bls.n	8007064 <USB_SetCurrentMode+0x60>
 8007082:	e001      	b.n	8007088 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e005      	b.n	8007094 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2bc8      	cmp	r3, #200	@ 0xc8
 800708c:	d101      	bne.n	8007092 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800709c:	b084      	sub	sp, #16
 800709e:	b580      	push	{r7, lr}
 80070a0:	b086      	sub	sp, #24
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80070aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070b6:	2300      	movs	r3, #0
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	e009      	b.n	80070d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	3340      	adds	r3, #64	@ 0x40
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	2200      	movs	r2, #0
 80070c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	3301      	adds	r3, #1
 80070ce:	613b      	str	r3, [r7, #16]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	2b0e      	cmp	r3, #14
 80070d4:	d9f2      	bls.n	80070bc <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80070d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d11c      	bne.n	8007118 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070ec:	f043 0302 	orr.w	r3, r3, #2
 80070f0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	e005      	b.n	8007124 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800712a:	461a      	mov	r2, r3
 800712c:	2300      	movs	r3, #0
 800712e:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007130:	2103      	movs	r1, #3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f95e 	bl	80073f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007138:	2110      	movs	r1, #16
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f8fa 	bl	8007334 <USB_FlushTxFifo>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f924 	bl	8007398 <USB_FlushRxFifo>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007160:	461a      	mov	r2, r3
 8007162:	2300      	movs	r3, #0
 8007164:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800716c:	461a      	mov	r2, r3
 800716e:	2300      	movs	r3, #0
 8007170:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007178:	461a      	mov	r2, r3
 800717a:	2300      	movs	r3, #0
 800717c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800717e:	2300      	movs	r3, #0
 8007180:	613b      	str	r3, [r7, #16]
 8007182:	e043      	b.n	800720c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007196:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800719a:	d118      	bne.n	80071ce <USB_DevInit+0x132>
    {
      if (i == 0U)
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10a      	bne.n	80071b8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ae:	461a      	mov	r2, r3
 80071b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	e013      	b.n	80071e0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071c4:	461a      	mov	r2, r3
 80071c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	e008      	b.n	80071e0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071da:	461a      	mov	r2, r3
 80071dc:	2300      	movs	r3, #0
 80071de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ec:	461a      	mov	r2, r3
 80071ee:	2300      	movs	r3, #0
 80071f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071fe:	461a      	mov	r2, r3
 8007200:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007204:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	3301      	adds	r3, #1
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007210:	461a      	mov	r2, r3
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	4293      	cmp	r3, r2
 8007216:	d3b5      	bcc.n	8007184 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007218:	2300      	movs	r3, #0
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	e043      	b.n	80072a6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007234:	d118      	bne.n	8007268 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007248:	461a      	mov	r2, r3
 800724a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	e013      	b.n	800727a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4413      	add	r3, r2
 800725a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800725e:	461a      	mov	r2, r3
 8007260:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	e008      	b.n	800727a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007274:	461a      	mov	r2, r3
 8007276:	2300      	movs	r3, #0
 8007278:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007286:	461a      	mov	r2, r3
 8007288:	2300      	movs	r3, #0
 800728a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007298:	461a      	mov	r2, r3
 800729a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800729e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	3301      	adds	r3, #1
 80072a4:	613b      	str	r3, [r7, #16]
 80072a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80072aa:	461a      	mov	r2, r3
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d3b5      	bcc.n	800721e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80072d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d105      	bne.n	80072e8 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f043 0210 	orr.w	r2, r3, #16
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	699a      	ldr	r2, [r3, #24]
 80072ec:	4b10      	ldr	r3, [pc, #64]	@ (8007330 <USB_DevInit+0x294>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	f043 0208 	orr.w	r2, r3, #8
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007308:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800730c:	2b01      	cmp	r3, #1
 800730e:	d107      	bne.n	8007320 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007318:	f043 0304 	orr.w	r3, r3, #4
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007320:	7dfb      	ldrb	r3, [r7, #23]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800732c:	b004      	add	sp, #16
 800732e:	4770      	bx	lr
 8007330:	803c3800 	.word	0x803c3800

08007334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3301      	adds	r3, #1
 8007346:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800734e:	d901      	bls.n	8007354 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e01b      	b.n	800738c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	daf2      	bge.n	8007342 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	019b      	lsls	r3, r3, #6
 8007364:	f043 0220 	orr.w	r2, r3, #32
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3301      	adds	r3, #1
 8007370:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007378:	d901      	bls.n	800737e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e006      	b.n	800738c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b20      	cmp	r3, #32
 8007388:	d0f0      	beq.n	800736c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3301      	adds	r3, #1
 80073a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073b0:	d901      	bls.n	80073b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e018      	b.n	80073e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	daf2      	bge.n	80073a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2210      	movs	r2, #16
 80073c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073d4:	d901      	bls.n	80073da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e006      	b.n	80073e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	f003 0310 	and.w	r3, r3, #16
 80073e2:	2b10      	cmp	r3, #16
 80073e4:	d0f0      	beq.n	80073c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	68f9      	ldr	r1, [r7, #12]
 8007410:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007414:	4313      	orrs	r3, r2
 8007416:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007440:	f023 0303 	bic.w	r3, r3, #3
 8007444:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007454:	f043 0302 	orr.w	r3, r3, #2
 8007458:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	f003 0301 	and.w	r3, r3, #1
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3301      	adds	r3, #1
 8007494:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800749c:	d901      	bls.n	80074a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e01b      	b.n	80074da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	daf2      	bge.n	8007490 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f043 0201 	orr.w	r2, r3, #1
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3301      	adds	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074c6:	d901      	bls.n	80074cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e006      	b.n	80074da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d0f0      	beq.n	80074ba <USB_CoreReset+0x36>

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
	...

080074e8 <malloc>:
 80074e8:	4b02      	ldr	r3, [pc, #8]	@ (80074f4 <malloc+0xc>)
 80074ea:	4601      	mov	r1, r0
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	f000 b825 	b.w	800753c <_malloc_r>
 80074f2:	bf00      	nop
 80074f4:	20000018 	.word	0x20000018

080074f8 <sbrk_aligned>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4e0f      	ldr	r6, [pc, #60]	@ (8007538 <sbrk_aligned+0x40>)
 80074fc:	460c      	mov	r4, r1
 80074fe:	4605      	mov	r5, r0
 8007500:	6831      	ldr	r1, [r6, #0]
 8007502:	b911      	cbnz	r1, 800750a <sbrk_aligned+0x12>
 8007504:	f000 fb18 	bl	8007b38 <_sbrk_r>
 8007508:	6030      	str	r0, [r6, #0]
 800750a:	4621      	mov	r1, r4
 800750c:	4628      	mov	r0, r5
 800750e:	f000 fb13 	bl	8007b38 <_sbrk_r>
 8007512:	1c43      	adds	r3, r0, #1
 8007514:	d103      	bne.n	800751e <sbrk_aligned+0x26>
 8007516:	f04f 34ff 	mov.w	r4, #4294967295
 800751a:	4620      	mov	r0, r4
 800751c:	bd70      	pop	{r4, r5, r6, pc}
 800751e:	1cc4      	adds	r4, r0, #3
 8007520:	f024 0403 	bic.w	r4, r4, #3
 8007524:	42a0      	cmp	r0, r4
 8007526:	d0f8      	beq.n	800751a <sbrk_aligned+0x22>
 8007528:	1a21      	subs	r1, r4, r0
 800752a:	4628      	mov	r0, r5
 800752c:	f000 fb04 	bl	8007b38 <_sbrk_r>
 8007530:	3001      	adds	r0, #1
 8007532:	d1f2      	bne.n	800751a <sbrk_aligned+0x22>
 8007534:	e7ef      	b.n	8007516 <sbrk_aligned+0x1e>
 8007536:	bf00      	nop
 8007538:	20000798 	.word	0x20000798

0800753c <_malloc_r>:
 800753c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007540:	1ccd      	adds	r5, r1, #3
 8007542:	4606      	mov	r6, r0
 8007544:	f025 0503 	bic.w	r5, r5, #3
 8007548:	3508      	adds	r5, #8
 800754a:	2d0c      	cmp	r5, #12
 800754c:	bf38      	it	cc
 800754e:	250c      	movcc	r5, #12
 8007550:	2d00      	cmp	r5, #0
 8007552:	db01      	blt.n	8007558 <_malloc_r+0x1c>
 8007554:	42a9      	cmp	r1, r5
 8007556:	d904      	bls.n	8007562 <_malloc_r+0x26>
 8007558:	230c      	movs	r3, #12
 800755a:	6033      	str	r3, [r6, #0]
 800755c:	2000      	movs	r0, #0
 800755e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007562:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007638 <_malloc_r+0xfc>
 8007566:	f000 f869 	bl	800763c <__malloc_lock>
 800756a:	f8d8 3000 	ldr.w	r3, [r8]
 800756e:	461c      	mov	r4, r3
 8007570:	bb44      	cbnz	r4, 80075c4 <_malloc_r+0x88>
 8007572:	4629      	mov	r1, r5
 8007574:	4630      	mov	r0, r6
 8007576:	f7ff ffbf 	bl	80074f8 <sbrk_aligned>
 800757a:	1c43      	adds	r3, r0, #1
 800757c:	4604      	mov	r4, r0
 800757e:	d158      	bne.n	8007632 <_malloc_r+0xf6>
 8007580:	f8d8 4000 	ldr.w	r4, [r8]
 8007584:	4627      	mov	r7, r4
 8007586:	2f00      	cmp	r7, #0
 8007588:	d143      	bne.n	8007612 <_malloc_r+0xd6>
 800758a:	2c00      	cmp	r4, #0
 800758c:	d04b      	beq.n	8007626 <_malloc_r+0xea>
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	4639      	mov	r1, r7
 8007592:	4630      	mov	r0, r6
 8007594:	eb04 0903 	add.w	r9, r4, r3
 8007598:	f000 face 	bl	8007b38 <_sbrk_r>
 800759c:	4581      	cmp	r9, r0
 800759e:	d142      	bne.n	8007626 <_malloc_r+0xea>
 80075a0:	6821      	ldr	r1, [r4, #0]
 80075a2:	4630      	mov	r0, r6
 80075a4:	1a6d      	subs	r5, r5, r1
 80075a6:	4629      	mov	r1, r5
 80075a8:	f7ff ffa6 	bl	80074f8 <sbrk_aligned>
 80075ac:	3001      	adds	r0, #1
 80075ae:	d03a      	beq.n	8007626 <_malloc_r+0xea>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	442b      	add	r3, r5
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	f8d8 3000 	ldr.w	r3, [r8]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	bb62      	cbnz	r2, 8007618 <_malloc_r+0xdc>
 80075be:	f8c8 7000 	str.w	r7, [r8]
 80075c2:	e00f      	b.n	80075e4 <_malloc_r+0xa8>
 80075c4:	6822      	ldr	r2, [r4, #0]
 80075c6:	1b52      	subs	r2, r2, r5
 80075c8:	d420      	bmi.n	800760c <_malloc_r+0xd0>
 80075ca:	2a0b      	cmp	r2, #11
 80075cc:	d917      	bls.n	80075fe <_malloc_r+0xc2>
 80075ce:	1961      	adds	r1, r4, r5
 80075d0:	42a3      	cmp	r3, r4
 80075d2:	6025      	str	r5, [r4, #0]
 80075d4:	bf18      	it	ne
 80075d6:	6059      	strne	r1, [r3, #4]
 80075d8:	6863      	ldr	r3, [r4, #4]
 80075da:	bf08      	it	eq
 80075dc:	f8c8 1000 	streq.w	r1, [r8]
 80075e0:	5162      	str	r2, [r4, r5]
 80075e2:	604b      	str	r3, [r1, #4]
 80075e4:	4630      	mov	r0, r6
 80075e6:	f000 f82f 	bl	8007648 <__malloc_unlock>
 80075ea:	f104 000b 	add.w	r0, r4, #11
 80075ee:	1d23      	adds	r3, r4, #4
 80075f0:	f020 0007 	bic.w	r0, r0, #7
 80075f4:	1ac2      	subs	r2, r0, r3
 80075f6:	bf1c      	itt	ne
 80075f8:	1a1b      	subne	r3, r3, r0
 80075fa:	50a3      	strne	r3, [r4, r2]
 80075fc:	e7af      	b.n	800755e <_malloc_r+0x22>
 80075fe:	6862      	ldr	r2, [r4, #4]
 8007600:	42a3      	cmp	r3, r4
 8007602:	bf0c      	ite	eq
 8007604:	f8c8 2000 	streq.w	r2, [r8]
 8007608:	605a      	strne	r2, [r3, #4]
 800760a:	e7eb      	b.n	80075e4 <_malloc_r+0xa8>
 800760c:	4623      	mov	r3, r4
 800760e:	6864      	ldr	r4, [r4, #4]
 8007610:	e7ae      	b.n	8007570 <_malloc_r+0x34>
 8007612:	463c      	mov	r4, r7
 8007614:	687f      	ldr	r7, [r7, #4]
 8007616:	e7b6      	b.n	8007586 <_malloc_r+0x4a>
 8007618:	461a      	mov	r2, r3
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	42a3      	cmp	r3, r4
 800761e:	d1fb      	bne.n	8007618 <_malloc_r+0xdc>
 8007620:	2300      	movs	r3, #0
 8007622:	6053      	str	r3, [r2, #4]
 8007624:	e7de      	b.n	80075e4 <_malloc_r+0xa8>
 8007626:	230c      	movs	r3, #12
 8007628:	4630      	mov	r0, r6
 800762a:	6033      	str	r3, [r6, #0]
 800762c:	f000 f80c 	bl	8007648 <__malloc_unlock>
 8007630:	e794      	b.n	800755c <_malloc_r+0x20>
 8007632:	6005      	str	r5, [r0, #0]
 8007634:	e7d6      	b.n	80075e4 <_malloc_r+0xa8>
 8007636:	bf00      	nop
 8007638:	2000079c 	.word	0x2000079c

0800763c <__malloc_lock>:
 800763c:	4801      	ldr	r0, [pc, #4]	@ (8007644 <__malloc_lock+0x8>)
 800763e:	f000 bac8 	b.w	8007bd2 <__retarget_lock_acquire_recursive>
 8007642:	bf00      	nop
 8007644:	200008e0 	.word	0x200008e0

08007648 <__malloc_unlock>:
 8007648:	4801      	ldr	r0, [pc, #4]	@ (8007650 <__malloc_unlock+0x8>)
 800764a:	f000 bac3 	b.w	8007bd4 <__retarget_lock_release_recursive>
 800764e:	bf00      	nop
 8007650:	200008e0 	.word	0x200008e0

08007654 <rand>:
 8007654:	4b16      	ldr	r3, [pc, #88]	@ (80076b0 <rand+0x5c>)
 8007656:	b510      	push	{r4, lr}
 8007658:	681c      	ldr	r4, [r3, #0]
 800765a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800765c:	b9b3      	cbnz	r3, 800768c <rand+0x38>
 800765e:	2018      	movs	r0, #24
 8007660:	f7ff ff42 	bl	80074e8 <malloc>
 8007664:	4602      	mov	r2, r0
 8007666:	6320      	str	r0, [r4, #48]	@ 0x30
 8007668:	b920      	cbnz	r0, 8007674 <rand+0x20>
 800766a:	4b12      	ldr	r3, [pc, #72]	@ (80076b4 <rand+0x60>)
 800766c:	2152      	movs	r1, #82	@ 0x52
 800766e:	4812      	ldr	r0, [pc, #72]	@ (80076b8 <rand+0x64>)
 8007670:	f000 fab2 	bl	8007bd8 <__assert_func>
 8007674:	4911      	ldr	r1, [pc, #68]	@ (80076bc <rand+0x68>)
 8007676:	4b12      	ldr	r3, [pc, #72]	@ (80076c0 <rand+0x6c>)
 8007678:	e9c0 1300 	strd	r1, r3, [r0]
 800767c:	4b11      	ldr	r3, [pc, #68]	@ (80076c4 <rand+0x70>)
 800767e:	2100      	movs	r1, #0
 8007680:	6083      	str	r3, [r0, #8]
 8007682:	230b      	movs	r3, #11
 8007684:	8183      	strh	r3, [r0, #12]
 8007686:	2001      	movs	r0, #1
 8007688:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800768c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800768e:	480e      	ldr	r0, [pc, #56]	@ (80076c8 <rand+0x74>)
 8007690:	690b      	ldr	r3, [r1, #16]
 8007692:	694c      	ldr	r4, [r1, #20]
 8007694:	4a0d      	ldr	r2, [pc, #52]	@ (80076cc <rand+0x78>)
 8007696:	4358      	muls	r0, r3
 8007698:	fb02 0004 	mla	r0, r2, r4, r0
 800769c:	fba3 3202 	umull	r3, r2, r3, r2
 80076a0:	3301      	adds	r3, #1
 80076a2:	eb40 0002 	adc.w	r0, r0, r2
 80076a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80076aa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80076ae:	bd10      	pop	{r4, pc}
 80076b0:	20000018 	.word	0x20000018
 80076b4:	08008680 	.word	0x08008680
 80076b8:	08008697 	.word	0x08008697
 80076bc:	abcd330e 	.word	0xabcd330e
 80076c0:	e66d1234 	.word	0xe66d1234
 80076c4:	0005deec 	.word	0x0005deec
 80076c8:	5851f42d 	.word	0x5851f42d
 80076cc:	4c957f2d 	.word	0x4c957f2d

080076d0 <std>:
 80076d0:	2300      	movs	r3, #0
 80076d2:	b510      	push	{r4, lr}
 80076d4:	4604      	mov	r4, r0
 80076d6:	6083      	str	r3, [r0, #8]
 80076d8:	8181      	strh	r1, [r0, #12]
 80076da:	4619      	mov	r1, r3
 80076dc:	6643      	str	r3, [r0, #100]	@ 0x64
 80076de:	81c2      	strh	r2, [r0, #14]
 80076e0:	2208      	movs	r2, #8
 80076e2:	6183      	str	r3, [r0, #24]
 80076e4:	e9c0 3300 	strd	r3, r3, [r0]
 80076e8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ec:	305c      	adds	r0, #92	@ 0x5c
 80076ee:	f000 f9e7 	bl	8007ac0 <memset>
 80076f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007728 <std+0x58>)
 80076f4:	6224      	str	r4, [r4, #32]
 80076f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80076f8:	4b0c      	ldr	r3, [pc, #48]	@ (800772c <std+0x5c>)
 80076fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007730 <std+0x60>)
 80076fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007700:	4b0c      	ldr	r3, [pc, #48]	@ (8007734 <std+0x64>)
 8007702:	6323      	str	r3, [r4, #48]	@ 0x30
 8007704:	4b0c      	ldr	r3, [pc, #48]	@ (8007738 <std+0x68>)
 8007706:	429c      	cmp	r4, r3
 8007708:	d006      	beq.n	8007718 <std+0x48>
 800770a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800770e:	4294      	cmp	r4, r2
 8007710:	d002      	beq.n	8007718 <std+0x48>
 8007712:	33d0      	adds	r3, #208	@ 0xd0
 8007714:	429c      	cmp	r4, r3
 8007716:	d105      	bne.n	8007724 <std+0x54>
 8007718:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800771c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007720:	f000 ba56 	b.w	8007bd0 <__retarget_lock_init_recursive>
 8007724:	bd10      	pop	{r4, pc}
 8007726:	bf00      	nop
 8007728:	08007911 	.word	0x08007911
 800772c:	08007933 	.word	0x08007933
 8007730:	0800796b 	.word	0x0800796b
 8007734:	0800798f 	.word	0x0800798f
 8007738:	200007a0 	.word	0x200007a0

0800773c <stdio_exit_handler>:
 800773c:	4a02      	ldr	r2, [pc, #8]	@ (8007748 <stdio_exit_handler+0xc>)
 800773e:	4903      	ldr	r1, [pc, #12]	@ (800774c <stdio_exit_handler+0x10>)
 8007740:	4803      	ldr	r0, [pc, #12]	@ (8007750 <stdio_exit_handler+0x14>)
 8007742:	f000 b869 	b.w	8007818 <_fwalk_sglue>
 8007746:	bf00      	nop
 8007748:	2000000c 	.word	0x2000000c
 800774c:	08007db1 	.word	0x08007db1
 8007750:	2000001c 	.word	0x2000001c

08007754 <cleanup_stdio>:
 8007754:	6841      	ldr	r1, [r0, #4]
 8007756:	4b0c      	ldr	r3, [pc, #48]	@ (8007788 <cleanup_stdio+0x34>)
 8007758:	4299      	cmp	r1, r3
 800775a:	b510      	push	{r4, lr}
 800775c:	4604      	mov	r4, r0
 800775e:	d001      	beq.n	8007764 <cleanup_stdio+0x10>
 8007760:	f000 fb26 	bl	8007db0 <_fflush_r>
 8007764:	68a1      	ldr	r1, [r4, #8]
 8007766:	4b09      	ldr	r3, [pc, #36]	@ (800778c <cleanup_stdio+0x38>)
 8007768:	4299      	cmp	r1, r3
 800776a:	d002      	beq.n	8007772 <cleanup_stdio+0x1e>
 800776c:	4620      	mov	r0, r4
 800776e:	f000 fb1f 	bl	8007db0 <_fflush_r>
 8007772:	68e1      	ldr	r1, [r4, #12]
 8007774:	4b06      	ldr	r3, [pc, #24]	@ (8007790 <cleanup_stdio+0x3c>)
 8007776:	4299      	cmp	r1, r3
 8007778:	d004      	beq.n	8007784 <cleanup_stdio+0x30>
 800777a:	4620      	mov	r0, r4
 800777c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007780:	f000 bb16 	b.w	8007db0 <_fflush_r>
 8007784:	bd10      	pop	{r4, pc}
 8007786:	bf00      	nop
 8007788:	200007a0 	.word	0x200007a0
 800778c:	20000808 	.word	0x20000808
 8007790:	20000870 	.word	0x20000870

08007794 <global_stdio_init.part.0>:
 8007794:	b510      	push	{r4, lr}
 8007796:	4b0b      	ldr	r3, [pc, #44]	@ (80077c4 <global_stdio_init.part.0+0x30>)
 8007798:	2104      	movs	r1, #4
 800779a:	4c0b      	ldr	r4, [pc, #44]	@ (80077c8 <global_stdio_init.part.0+0x34>)
 800779c:	4a0b      	ldr	r2, [pc, #44]	@ (80077cc <global_stdio_init.part.0+0x38>)
 800779e:	4620      	mov	r0, r4
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f7ff ff94 	bl	80076d0 <std>
 80077a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077ac:	2201      	movs	r2, #1
 80077ae:	2109      	movs	r1, #9
 80077b0:	f7ff ff8e 	bl	80076d0 <std>
 80077b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077b8:	2202      	movs	r2, #2
 80077ba:	2112      	movs	r1, #18
 80077bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c0:	f7ff bf86 	b.w	80076d0 <std>
 80077c4:	200008d8 	.word	0x200008d8
 80077c8:	200007a0 	.word	0x200007a0
 80077cc:	0800773d 	.word	0x0800773d

080077d0 <__sfp_lock_acquire>:
 80077d0:	4801      	ldr	r0, [pc, #4]	@ (80077d8 <__sfp_lock_acquire+0x8>)
 80077d2:	f000 b9fe 	b.w	8007bd2 <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	200008e1 	.word	0x200008e1

080077dc <__sfp_lock_release>:
 80077dc:	4801      	ldr	r0, [pc, #4]	@ (80077e4 <__sfp_lock_release+0x8>)
 80077de:	f000 b9f9 	b.w	8007bd4 <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	200008e1 	.word	0x200008e1

080077e8 <__sinit>:
 80077e8:	b510      	push	{r4, lr}
 80077ea:	4604      	mov	r4, r0
 80077ec:	f7ff fff0 	bl	80077d0 <__sfp_lock_acquire>
 80077f0:	6a23      	ldr	r3, [r4, #32]
 80077f2:	b11b      	cbz	r3, 80077fc <__sinit+0x14>
 80077f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f8:	f7ff bff0 	b.w	80077dc <__sfp_lock_release>
 80077fc:	4b04      	ldr	r3, [pc, #16]	@ (8007810 <__sinit+0x28>)
 80077fe:	6223      	str	r3, [r4, #32]
 8007800:	4b04      	ldr	r3, [pc, #16]	@ (8007814 <__sinit+0x2c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f5      	bne.n	80077f4 <__sinit+0xc>
 8007808:	f7ff ffc4 	bl	8007794 <global_stdio_init.part.0>
 800780c:	e7f2      	b.n	80077f4 <__sinit+0xc>
 800780e:	bf00      	nop
 8007810:	08007755 	.word	0x08007755
 8007814:	200008d8 	.word	0x200008d8

08007818 <_fwalk_sglue>:
 8007818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800781c:	4607      	mov	r7, r0
 800781e:	4688      	mov	r8, r1
 8007820:	4614      	mov	r4, r2
 8007822:	2600      	movs	r6, #0
 8007824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007828:	f1b9 0901 	subs.w	r9, r9, #1
 800782c:	d505      	bpl.n	800783a <_fwalk_sglue+0x22>
 800782e:	6824      	ldr	r4, [r4, #0]
 8007830:	2c00      	cmp	r4, #0
 8007832:	d1f7      	bne.n	8007824 <_fwalk_sglue+0xc>
 8007834:	4630      	mov	r0, r6
 8007836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800783a:	89ab      	ldrh	r3, [r5, #12]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d907      	bls.n	8007850 <_fwalk_sglue+0x38>
 8007840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007844:	3301      	adds	r3, #1
 8007846:	d003      	beq.n	8007850 <_fwalk_sglue+0x38>
 8007848:	4629      	mov	r1, r5
 800784a:	4638      	mov	r0, r7
 800784c:	47c0      	blx	r8
 800784e:	4306      	orrs	r6, r0
 8007850:	3568      	adds	r5, #104	@ 0x68
 8007852:	e7e9      	b.n	8007828 <_fwalk_sglue+0x10>

08007854 <_puts_r>:
 8007854:	6a03      	ldr	r3, [r0, #32]
 8007856:	b570      	push	{r4, r5, r6, lr}
 8007858:	4605      	mov	r5, r0
 800785a:	460e      	mov	r6, r1
 800785c:	6884      	ldr	r4, [r0, #8]
 800785e:	b90b      	cbnz	r3, 8007864 <_puts_r+0x10>
 8007860:	f7ff ffc2 	bl	80077e8 <__sinit>
 8007864:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007866:	07db      	lsls	r3, r3, #31
 8007868:	d405      	bmi.n	8007876 <_puts_r+0x22>
 800786a:	89a3      	ldrh	r3, [r4, #12]
 800786c:	0598      	lsls	r0, r3, #22
 800786e:	d402      	bmi.n	8007876 <_puts_r+0x22>
 8007870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007872:	f000 f9ae 	bl	8007bd2 <__retarget_lock_acquire_recursive>
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	0719      	lsls	r1, r3, #28
 800787a:	d502      	bpl.n	8007882 <_puts_r+0x2e>
 800787c:	6923      	ldr	r3, [r4, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d135      	bne.n	80078ee <_puts_r+0x9a>
 8007882:	4621      	mov	r1, r4
 8007884:	4628      	mov	r0, r5
 8007886:	f000 f8c5 	bl	8007a14 <__swsetup_r>
 800788a:	b380      	cbz	r0, 80078ee <_puts_r+0x9a>
 800788c:	f04f 35ff 	mov.w	r5, #4294967295
 8007890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007892:	07da      	lsls	r2, r3, #31
 8007894:	d405      	bmi.n	80078a2 <_puts_r+0x4e>
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	059b      	lsls	r3, r3, #22
 800789a:	d402      	bmi.n	80078a2 <_puts_r+0x4e>
 800789c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800789e:	f000 f999 	bl	8007bd4 <__retarget_lock_release_recursive>
 80078a2:	4628      	mov	r0, r5
 80078a4:	bd70      	pop	{r4, r5, r6, pc}
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	da04      	bge.n	80078b4 <_puts_r+0x60>
 80078aa:	69a2      	ldr	r2, [r4, #24]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	dc17      	bgt.n	80078e0 <_puts_r+0x8c>
 80078b0:	290a      	cmp	r1, #10
 80078b2:	d015      	beq.n	80078e0 <_puts_r+0x8c>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	6022      	str	r2, [r4, #0]
 80078ba:	7019      	strb	r1, [r3, #0]
 80078bc:	68a3      	ldr	r3, [r4, #8]
 80078be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078c2:	3b01      	subs	r3, #1
 80078c4:	60a3      	str	r3, [r4, #8]
 80078c6:	2900      	cmp	r1, #0
 80078c8:	d1ed      	bne.n	80078a6 <_puts_r+0x52>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	da11      	bge.n	80078f2 <_puts_r+0x9e>
 80078ce:	4622      	mov	r2, r4
 80078d0:	210a      	movs	r1, #10
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 f85f 	bl	8007996 <__swbuf_r>
 80078d8:	3001      	adds	r0, #1
 80078da:	d0d7      	beq.n	800788c <_puts_r+0x38>
 80078dc:	250a      	movs	r5, #10
 80078de:	e7d7      	b.n	8007890 <_puts_r+0x3c>
 80078e0:	4622      	mov	r2, r4
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 f857 	bl	8007996 <__swbuf_r>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d1e7      	bne.n	80078bc <_puts_r+0x68>
 80078ec:	e7ce      	b.n	800788c <_puts_r+0x38>
 80078ee:	3e01      	subs	r6, #1
 80078f0:	e7e4      	b.n	80078bc <_puts_r+0x68>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	6022      	str	r2, [r4, #0]
 80078f8:	220a      	movs	r2, #10
 80078fa:	701a      	strb	r2, [r3, #0]
 80078fc:	e7ee      	b.n	80078dc <_puts_r+0x88>
	...

08007900 <puts>:
 8007900:	4b02      	ldr	r3, [pc, #8]	@ (800790c <puts+0xc>)
 8007902:	4601      	mov	r1, r0
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	f7ff bfa5 	b.w	8007854 <_puts_r>
 800790a:	bf00      	nop
 800790c:	20000018 	.word	0x20000018

08007910 <__sread>:
 8007910:	b510      	push	{r4, lr}
 8007912:	460c      	mov	r4, r1
 8007914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007918:	f000 f8fc 	bl	8007b14 <_read_r>
 800791c:	2800      	cmp	r0, #0
 800791e:	bfab      	itete	ge
 8007920:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007922:	89a3      	ldrhlt	r3, [r4, #12]
 8007924:	181b      	addge	r3, r3, r0
 8007926:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800792a:	bfac      	ite	ge
 800792c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800792e:	81a3      	strhlt	r3, [r4, #12]
 8007930:	bd10      	pop	{r4, pc}

08007932 <__swrite>:
 8007932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007936:	461f      	mov	r7, r3
 8007938:	898b      	ldrh	r3, [r1, #12]
 800793a:	4605      	mov	r5, r0
 800793c:	460c      	mov	r4, r1
 800793e:	05db      	lsls	r3, r3, #23
 8007940:	4616      	mov	r6, r2
 8007942:	d505      	bpl.n	8007950 <__swrite+0x1e>
 8007944:	2302      	movs	r3, #2
 8007946:	2200      	movs	r2, #0
 8007948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794c:	f000 f8d0 	bl	8007af0 <_lseek_r>
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	4632      	mov	r2, r6
 8007954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007958:	4628      	mov	r0, r5
 800795a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800795e:	81a3      	strh	r3, [r4, #12]
 8007960:	463b      	mov	r3, r7
 8007962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007966:	f000 b8f7 	b.w	8007b58 <_write_r>

0800796a <__sseek>:
 800796a:	b510      	push	{r4, lr}
 800796c:	460c      	mov	r4, r1
 800796e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007972:	f000 f8bd 	bl	8007af0 <_lseek_r>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	bf15      	itete	ne
 800797c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800797e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007982:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007986:	81a3      	strheq	r3, [r4, #12]
 8007988:	bf18      	it	ne
 800798a:	81a3      	strhne	r3, [r4, #12]
 800798c:	bd10      	pop	{r4, pc}

0800798e <__sclose>:
 800798e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007992:	f000 b89d 	b.w	8007ad0 <_close_r>

08007996 <__swbuf_r>:
 8007996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007998:	460e      	mov	r6, r1
 800799a:	4614      	mov	r4, r2
 800799c:	4605      	mov	r5, r0
 800799e:	b118      	cbz	r0, 80079a8 <__swbuf_r+0x12>
 80079a0:	6a03      	ldr	r3, [r0, #32]
 80079a2:	b90b      	cbnz	r3, 80079a8 <__swbuf_r+0x12>
 80079a4:	f7ff ff20 	bl	80077e8 <__sinit>
 80079a8:	69a3      	ldr	r3, [r4, #24]
 80079aa:	60a3      	str	r3, [r4, #8]
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	071a      	lsls	r2, r3, #28
 80079b0:	d501      	bpl.n	80079b6 <__swbuf_r+0x20>
 80079b2:	6923      	ldr	r3, [r4, #16]
 80079b4:	b943      	cbnz	r3, 80079c8 <__swbuf_r+0x32>
 80079b6:	4621      	mov	r1, r4
 80079b8:	4628      	mov	r0, r5
 80079ba:	f000 f82b 	bl	8007a14 <__swsetup_r>
 80079be:	b118      	cbz	r0, 80079c8 <__swbuf_r+0x32>
 80079c0:	f04f 37ff 	mov.w	r7, #4294967295
 80079c4:	4638      	mov	r0, r7
 80079c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	b2f6      	uxtb	r6, r6
 80079cc:	6922      	ldr	r2, [r4, #16]
 80079ce:	4637      	mov	r7, r6
 80079d0:	1a98      	subs	r0, r3, r2
 80079d2:	6963      	ldr	r3, [r4, #20]
 80079d4:	4283      	cmp	r3, r0
 80079d6:	dc05      	bgt.n	80079e4 <__swbuf_r+0x4e>
 80079d8:	4621      	mov	r1, r4
 80079da:	4628      	mov	r0, r5
 80079dc:	f000 f9e8 	bl	8007db0 <_fflush_r>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d1ed      	bne.n	80079c0 <__swbuf_r+0x2a>
 80079e4:	68a3      	ldr	r3, [r4, #8]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	60a3      	str	r3, [r4, #8]
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	6022      	str	r2, [r4, #0]
 80079f0:	701e      	strb	r6, [r3, #0]
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	6962      	ldr	r2, [r4, #20]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d004      	beq.n	8007a04 <__swbuf_r+0x6e>
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	07db      	lsls	r3, r3, #31
 80079fe:	d5e1      	bpl.n	80079c4 <__swbuf_r+0x2e>
 8007a00:	2e0a      	cmp	r6, #10
 8007a02:	d1df      	bne.n	80079c4 <__swbuf_r+0x2e>
 8007a04:	4621      	mov	r1, r4
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 f9d2 	bl	8007db0 <_fflush_r>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d0d9      	beq.n	80079c4 <__swbuf_r+0x2e>
 8007a10:	e7d6      	b.n	80079c0 <__swbuf_r+0x2a>
	...

08007a14 <__swsetup_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4b29      	ldr	r3, [pc, #164]	@ (8007abc <__swsetup_r+0xa8>)
 8007a18:	4605      	mov	r5, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	6818      	ldr	r0, [r3, #0]
 8007a1e:	b118      	cbz	r0, 8007a28 <__swsetup_r+0x14>
 8007a20:	6a03      	ldr	r3, [r0, #32]
 8007a22:	b90b      	cbnz	r3, 8007a28 <__swsetup_r+0x14>
 8007a24:	f7ff fee0 	bl	80077e8 <__sinit>
 8007a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a2c:	0719      	lsls	r1, r3, #28
 8007a2e:	d422      	bmi.n	8007a76 <__swsetup_r+0x62>
 8007a30:	06da      	lsls	r2, r3, #27
 8007a32:	d407      	bmi.n	8007a44 <__swsetup_r+0x30>
 8007a34:	2209      	movs	r2, #9
 8007a36:	602a      	str	r2, [r5, #0]
 8007a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	81a3      	strh	r3, [r4, #12]
 8007a42:	e033      	b.n	8007aac <__swsetup_r+0x98>
 8007a44:	0758      	lsls	r0, r3, #29
 8007a46:	d512      	bpl.n	8007a6e <__swsetup_r+0x5a>
 8007a48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a4a:	b141      	cbz	r1, 8007a5e <__swsetup_r+0x4a>
 8007a4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a50:	4299      	cmp	r1, r3
 8007a52:	d002      	beq.n	8007a5a <__swsetup_r+0x46>
 8007a54:	4628      	mov	r0, r5
 8007a56:	f000 f8dd 	bl	8007c14 <_free_r>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a64:	81a3      	strh	r3, [r4, #12]
 8007a66:	2300      	movs	r3, #0
 8007a68:	6063      	str	r3, [r4, #4]
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	f043 0308 	orr.w	r3, r3, #8
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	b94b      	cbnz	r3, 8007a8e <__swsetup_r+0x7a>
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a84:	d003      	beq.n	8007a8e <__swsetup_r+0x7a>
 8007a86:	4621      	mov	r1, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f000 f9f0 	bl	8007e6e <__smakebuf_r>
 8007a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a92:	f013 0201 	ands.w	r2, r3, #1
 8007a96:	d00a      	beq.n	8007aae <__swsetup_r+0x9a>
 8007a98:	2200      	movs	r2, #0
 8007a9a:	60a2      	str	r2, [r4, #8]
 8007a9c:	6962      	ldr	r2, [r4, #20]
 8007a9e:	4252      	negs	r2, r2
 8007aa0:	61a2      	str	r2, [r4, #24]
 8007aa2:	6922      	ldr	r2, [r4, #16]
 8007aa4:	b942      	cbnz	r2, 8007ab8 <__swsetup_r+0xa4>
 8007aa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007aaa:	d1c5      	bne.n	8007a38 <__swsetup_r+0x24>
 8007aac:	bd38      	pop	{r3, r4, r5, pc}
 8007aae:	0799      	lsls	r1, r3, #30
 8007ab0:	bf58      	it	pl
 8007ab2:	6962      	ldrpl	r2, [r4, #20]
 8007ab4:	60a2      	str	r2, [r4, #8]
 8007ab6:	e7f4      	b.n	8007aa2 <__swsetup_r+0x8e>
 8007ab8:	2000      	movs	r0, #0
 8007aba:	e7f7      	b.n	8007aac <__swsetup_r+0x98>
 8007abc:	20000018 	.word	0x20000018

08007ac0 <memset>:
 8007ac0:	4402      	add	r2, r0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d100      	bne.n	8007aca <memset+0xa>
 8007ac8:	4770      	bx	lr
 8007aca:	f803 1b01 	strb.w	r1, [r3], #1
 8007ace:	e7f9      	b.n	8007ac4 <memset+0x4>

08007ad0 <_close_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	4d05      	ldr	r5, [pc, #20]	@ (8007aec <_close_r+0x1c>)
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4608      	mov	r0, r1
 8007ada:	602b      	str	r3, [r5, #0]
 8007adc:	f7f9 f830 	bl	8000b40 <_close>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_close_r+0x1a>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_close_r+0x1a>
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	200008dc 	.word	0x200008dc

08007af0 <_lseek_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4604      	mov	r4, r0
 8007af4:	4d06      	ldr	r5, [pc, #24]	@ (8007b10 <_lseek_r+0x20>)
 8007af6:	4608      	mov	r0, r1
 8007af8:	4611      	mov	r1, r2
 8007afa:	2200      	movs	r2, #0
 8007afc:	602a      	str	r2, [r5, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	f7f9 f845 	bl	8000b8e <_lseek>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d102      	bne.n	8007b0e <_lseek_r+0x1e>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	b103      	cbz	r3, 8007b0e <_lseek_r+0x1e>
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	200008dc 	.word	0x200008dc

08007b14 <_read_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4604      	mov	r4, r0
 8007b18:	4d06      	ldr	r5, [pc, #24]	@ (8007b34 <_read_r+0x20>)
 8007b1a:	4608      	mov	r0, r1
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	2200      	movs	r2, #0
 8007b20:	602a      	str	r2, [r5, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f7f8 ffef 	bl	8000b06 <_read>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_read_r+0x1e>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_read_r+0x1e>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	200008dc 	.word	0x200008dc

08007b38 <_sbrk_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	4d05      	ldr	r5, [pc, #20]	@ (8007b54 <_sbrk_r+0x1c>)
 8007b3e:	4604      	mov	r4, r0
 8007b40:	4608      	mov	r0, r1
 8007b42:	602b      	str	r3, [r5, #0]
 8007b44:	f7f9 f830 	bl	8000ba8 <_sbrk>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d102      	bne.n	8007b52 <_sbrk_r+0x1a>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	b103      	cbz	r3, 8007b52 <_sbrk_r+0x1a>
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	200008dc 	.word	0x200008dc

08007b58 <_write_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	4d06      	ldr	r5, [pc, #24]	@ (8007b78 <_write_r+0x20>)
 8007b5e:	4608      	mov	r0, r1
 8007b60:	4611      	mov	r1, r2
 8007b62:	2200      	movs	r2, #0
 8007b64:	602a      	str	r2, [r5, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	f7f8 ff20 	bl	80009ac <_write>
 8007b6c:	1c43      	adds	r3, r0, #1
 8007b6e:	d102      	bne.n	8007b76 <_write_r+0x1e>
 8007b70:	682b      	ldr	r3, [r5, #0]
 8007b72:	b103      	cbz	r3, 8007b76 <_write_r+0x1e>
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	200008dc 	.word	0x200008dc

08007b7c <__errno>:
 8007b7c:	4b01      	ldr	r3, [pc, #4]	@ (8007b84 <__errno+0x8>)
 8007b7e:	6818      	ldr	r0, [r3, #0]
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	20000018 	.word	0x20000018

08007b88 <__libc_init_array>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8007bc0 <__libc_init_array+0x38>)
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	4c0d      	ldr	r4, [pc, #52]	@ (8007bc4 <__libc_init_array+0x3c>)
 8007b90:	1b64      	subs	r4, r4, r5
 8007b92:	10a4      	asrs	r4, r4, #2
 8007b94:	42a6      	cmp	r6, r4
 8007b96:	d109      	bne.n	8007bac <__libc_init_array+0x24>
 8007b98:	4d0b      	ldr	r5, [pc, #44]	@ (8007bc8 <__libc_init_array+0x40>)
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	4c0b      	ldr	r4, [pc, #44]	@ (8007bcc <__libc_init_array+0x44>)
 8007b9e:	f000 fcef 	bl	8008580 <_init>
 8007ba2:	1b64      	subs	r4, r4, r5
 8007ba4:	10a4      	asrs	r4, r4, #2
 8007ba6:	42a6      	cmp	r6, r4
 8007ba8:	d105      	bne.n	8007bb6 <__libc_init_array+0x2e>
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb0:	3601      	adds	r6, #1
 8007bb2:	4798      	blx	r3
 8007bb4:	e7ee      	b.n	8007b94 <__libc_init_array+0xc>
 8007bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bba:	3601      	adds	r6, #1
 8007bbc:	4798      	blx	r3
 8007bbe:	e7f2      	b.n	8007ba6 <__libc_init_array+0x1e>
 8007bc0:	0800875e 	.word	0x0800875e
 8007bc4:	0800875e 	.word	0x0800875e
 8007bc8:	08008760 	.word	0x08008760
 8007bcc:	08008764 	.word	0x08008764

08007bd0 <__retarget_lock_init_recursive>:
 8007bd0:	4770      	bx	lr

08007bd2 <__retarget_lock_acquire_recursive>:
 8007bd2:	4770      	bx	lr

08007bd4 <__retarget_lock_release_recursive>:
 8007bd4:	4770      	bx	lr
	...

08007bd8 <__assert_func>:
 8007bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bda:	4614      	mov	r4, r2
 8007bdc:	461a      	mov	r2, r3
 8007bde:	4b09      	ldr	r3, [pc, #36]	@ (8007c04 <__assert_func+0x2c>)
 8007be0:	4605      	mov	r5, r0
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68d8      	ldr	r0, [r3, #12]
 8007be6:	b14c      	cbz	r4, 8007bfc <__assert_func+0x24>
 8007be8:	4b07      	ldr	r3, [pc, #28]	@ (8007c08 <__assert_func+0x30>)
 8007bea:	9100      	str	r1, [sp, #0]
 8007bec:	4907      	ldr	r1, [pc, #28]	@ (8007c0c <__assert_func+0x34>)
 8007bee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bf2:	462b      	mov	r3, r5
 8007bf4:	f000 f904 	bl	8007e00 <fiprintf>
 8007bf8:	f000 f998 	bl	8007f2c <abort>
 8007bfc:	4b04      	ldr	r3, [pc, #16]	@ (8007c10 <__assert_func+0x38>)
 8007bfe:	461c      	mov	r4, r3
 8007c00:	e7f3      	b.n	8007bea <__assert_func+0x12>
 8007c02:	bf00      	nop
 8007c04:	20000018 	.word	0x20000018
 8007c08:	080086ef 	.word	0x080086ef
 8007c0c:	080086fc 	.word	0x080086fc
 8007c10:	0800872a 	.word	0x0800872a

08007c14 <_free_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4605      	mov	r5, r0
 8007c18:	2900      	cmp	r1, #0
 8007c1a:	d041      	beq.n	8007ca0 <_free_r+0x8c>
 8007c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c20:	1f0c      	subs	r4, r1, #4
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bfb8      	it	lt
 8007c26:	18e4      	addlt	r4, r4, r3
 8007c28:	f7ff fd08 	bl	800763c <__malloc_lock>
 8007c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ca4 <_free_r+0x90>)
 8007c2e:	6813      	ldr	r3, [r2, #0]
 8007c30:	b933      	cbnz	r3, 8007c40 <_free_r+0x2c>
 8007c32:	6063      	str	r3, [r4, #4]
 8007c34:	6014      	str	r4, [r2, #0]
 8007c36:	4628      	mov	r0, r5
 8007c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c3c:	f7ff bd04 	b.w	8007648 <__malloc_unlock>
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	d908      	bls.n	8007c56 <_free_r+0x42>
 8007c44:	6820      	ldr	r0, [r4, #0]
 8007c46:	1821      	adds	r1, r4, r0
 8007c48:	428b      	cmp	r3, r1
 8007c4a:	bf01      	itttt	eq
 8007c4c:	6819      	ldreq	r1, [r3, #0]
 8007c4e:	685b      	ldreq	r3, [r3, #4]
 8007c50:	1809      	addeq	r1, r1, r0
 8007c52:	6021      	streq	r1, [r4, #0]
 8007c54:	e7ed      	b.n	8007c32 <_free_r+0x1e>
 8007c56:	461a      	mov	r2, r3
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	b10b      	cbz	r3, 8007c60 <_free_r+0x4c>
 8007c5c:	42a3      	cmp	r3, r4
 8007c5e:	d9fa      	bls.n	8007c56 <_free_r+0x42>
 8007c60:	6811      	ldr	r1, [r2, #0]
 8007c62:	1850      	adds	r0, r2, r1
 8007c64:	42a0      	cmp	r0, r4
 8007c66:	d10b      	bne.n	8007c80 <_free_r+0x6c>
 8007c68:	6820      	ldr	r0, [r4, #0]
 8007c6a:	4401      	add	r1, r0
 8007c6c:	1850      	adds	r0, r2, r1
 8007c6e:	6011      	str	r1, [r2, #0]
 8007c70:	4283      	cmp	r3, r0
 8007c72:	d1e0      	bne.n	8007c36 <_free_r+0x22>
 8007c74:	6818      	ldr	r0, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	4408      	add	r0, r1
 8007c7a:	6053      	str	r3, [r2, #4]
 8007c7c:	6010      	str	r0, [r2, #0]
 8007c7e:	e7da      	b.n	8007c36 <_free_r+0x22>
 8007c80:	d902      	bls.n	8007c88 <_free_r+0x74>
 8007c82:	230c      	movs	r3, #12
 8007c84:	602b      	str	r3, [r5, #0]
 8007c86:	e7d6      	b.n	8007c36 <_free_r+0x22>
 8007c88:	6820      	ldr	r0, [r4, #0]
 8007c8a:	1821      	adds	r1, r4, r0
 8007c8c:	428b      	cmp	r3, r1
 8007c8e:	bf02      	ittt	eq
 8007c90:	6819      	ldreq	r1, [r3, #0]
 8007c92:	685b      	ldreq	r3, [r3, #4]
 8007c94:	1809      	addeq	r1, r1, r0
 8007c96:	6063      	str	r3, [r4, #4]
 8007c98:	bf08      	it	eq
 8007c9a:	6021      	streq	r1, [r4, #0]
 8007c9c:	6054      	str	r4, [r2, #4]
 8007c9e:	e7ca      	b.n	8007c36 <_free_r+0x22>
 8007ca0:	bd38      	pop	{r3, r4, r5, pc}
 8007ca2:	bf00      	nop
 8007ca4:	2000079c 	.word	0x2000079c

08007ca8 <__sflush_r>:
 8007ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb0:	0716      	lsls	r6, r2, #28
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	d454      	bmi.n	8007d62 <__sflush_r+0xba>
 8007cb8:	684b      	ldr	r3, [r1, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	dc02      	bgt.n	8007cc4 <__sflush_r+0x1c>
 8007cbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	dd48      	ble.n	8007d56 <__sflush_r+0xae>
 8007cc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cc6:	2e00      	cmp	r6, #0
 8007cc8:	d045      	beq.n	8007d56 <__sflush_r+0xae>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007cd0:	682f      	ldr	r7, [r5, #0]
 8007cd2:	6a21      	ldr	r1, [r4, #32]
 8007cd4:	602b      	str	r3, [r5, #0]
 8007cd6:	d030      	beq.n	8007d3a <__sflush_r+0x92>
 8007cd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	0759      	lsls	r1, r3, #29
 8007cde:	d505      	bpl.n	8007cec <__sflush_r+0x44>
 8007ce0:	6863      	ldr	r3, [r4, #4]
 8007ce2:	1ad2      	subs	r2, r2, r3
 8007ce4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ce6:	b10b      	cbz	r3, 8007cec <__sflush_r+0x44>
 8007ce8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cea:	1ad2      	subs	r2, r2, r3
 8007cec:	2300      	movs	r3, #0
 8007cee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cf0:	6a21      	ldr	r1, [r4, #32]
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	47b0      	blx	r6
 8007cf6:	1c43      	adds	r3, r0, #1
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	d106      	bne.n	8007d0a <__sflush_r+0x62>
 8007cfc:	6829      	ldr	r1, [r5, #0]
 8007cfe:	291d      	cmp	r1, #29
 8007d00:	d82b      	bhi.n	8007d5a <__sflush_r+0xb2>
 8007d02:	4a2a      	ldr	r2, [pc, #168]	@ (8007dac <__sflush_r+0x104>)
 8007d04:	40ca      	lsrs	r2, r1
 8007d06:	07d6      	lsls	r6, r2, #31
 8007d08:	d527      	bpl.n	8007d5a <__sflush_r+0xb2>
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	04d9      	lsls	r1, r3, #19
 8007d0e:	6062      	str	r2, [r4, #4]
 8007d10:	6922      	ldr	r2, [r4, #16]
 8007d12:	6022      	str	r2, [r4, #0]
 8007d14:	d504      	bpl.n	8007d20 <__sflush_r+0x78>
 8007d16:	1c42      	adds	r2, r0, #1
 8007d18:	d101      	bne.n	8007d1e <__sflush_r+0x76>
 8007d1a:	682b      	ldr	r3, [r5, #0]
 8007d1c:	b903      	cbnz	r3, 8007d20 <__sflush_r+0x78>
 8007d1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d22:	602f      	str	r7, [r5, #0]
 8007d24:	b1b9      	cbz	r1, 8007d56 <__sflush_r+0xae>
 8007d26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d2a:	4299      	cmp	r1, r3
 8007d2c:	d002      	beq.n	8007d34 <__sflush_r+0x8c>
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f7ff ff70 	bl	8007c14 <_free_r>
 8007d34:	2300      	movs	r3, #0
 8007d36:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d38:	e00d      	b.n	8007d56 <__sflush_r+0xae>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b0      	blx	r6
 8007d40:	4602      	mov	r2, r0
 8007d42:	1c50      	adds	r0, r2, #1
 8007d44:	d1c9      	bne.n	8007cda <__sflush_r+0x32>
 8007d46:	682b      	ldr	r3, [r5, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d0c6      	beq.n	8007cda <__sflush_r+0x32>
 8007d4c:	2b1d      	cmp	r3, #29
 8007d4e:	d001      	beq.n	8007d54 <__sflush_r+0xac>
 8007d50:	2b16      	cmp	r3, #22
 8007d52:	d11d      	bne.n	8007d90 <__sflush_r+0xe8>
 8007d54:	602f      	str	r7, [r5, #0]
 8007d56:	2000      	movs	r0, #0
 8007d58:	e021      	b.n	8007d9e <__sflush_r+0xf6>
 8007d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d5e:	b21b      	sxth	r3, r3
 8007d60:	e01a      	b.n	8007d98 <__sflush_r+0xf0>
 8007d62:	690f      	ldr	r7, [r1, #16]
 8007d64:	2f00      	cmp	r7, #0
 8007d66:	d0f6      	beq.n	8007d56 <__sflush_r+0xae>
 8007d68:	0793      	lsls	r3, r2, #30
 8007d6a:	680e      	ldr	r6, [r1, #0]
 8007d6c:	600f      	str	r7, [r1, #0]
 8007d6e:	bf0c      	ite	eq
 8007d70:	694b      	ldreq	r3, [r1, #20]
 8007d72:	2300      	movne	r3, #0
 8007d74:	eba6 0807 	sub.w	r8, r6, r7
 8007d78:	608b      	str	r3, [r1, #8]
 8007d7a:	f1b8 0f00 	cmp.w	r8, #0
 8007d7e:	ddea      	ble.n	8007d56 <__sflush_r+0xae>
 8007d80:	4643      	mov	r3, r8
 8007d82:	463a      	mov	r2, r7
 8007d84:	6a21      	ldr	r1, [r4, #32]
 8007d86:	4628      	mov	r0, r5
 8007d88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d8a:	47b0      	blx	r6
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	dc08      	bgt.n	8007da2 <__sflush_r+0xfa>
 8007d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	81a3      	strh	r3, [r4, #12]
 8007d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007da2:	4407      	add	r7, r0
 8007da4:	eba8 0800 	sub.w	r8, r8, r0
 8007da8:	e7e7      	b.n	8007d7a <__sflush_r+0xd2>
 8007daa:	bf00      	nop
 8007dac:	20400001 	.word	0x20400001

08007db0 <_fflush_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	690b      	ldr	r3, [r1, #16]
 8007db4:	4605      	mov	r5, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	b913      	cbnz	r3, 8007dc0 <_fflush_r+0x10>
 8007dba:	2500      	movs	r5, #0
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	b118      	cbz	r0, 8007dca <_fflush_r+0x1a>
 8007dc2:	6a03      	ldr	r3, [r0, #32]
 8007dc4:	b90b      	cbnz	r3, 8007dca <_fflush_r+0x1a>
 8007dc6:	f7ff fd0f 	bl	80077e8 <__sinit>
 8007dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0f3      	beq.n	8007dba <_fflush_r+0xa>
 8007dd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007dd4:	07d0      	lsls	r0, r2, #31
 8007dd6:	d404      	bmi.n	8007de2 <_fflush_r+0x32>
 8007dd8:	0599      	lsls	r1, r3, #22
 8007dda:	d402      	bmi.n	8007de2 <_fflush_r+0x32>
 8007ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dde:	f7ff fef8 	bl	8007bd2 <__retarget_lock_acquire_recursive>
 8007de2:	4628      	mov	r0, r5
 8007de4:	4621      	mov	r1, r4
 8007de6:	f7ff ff5f 	bl	8007ca8 <__sflush_r>
 8007dea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dec:	4605      	mov	r5, r0
 8007dee:	07da      	lsls	r2, r3, #31
 8007df0:	d4e4      	bmi.n	8007dbc <_fflush_r+0xc>
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	059b      	lsls	r3, r3, #22
 8007df6:	d4e1      	bmi.n	8007dbc <_fflush_r+0xc>
 8007df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dfa:	f7ff feeb 	bl	8007bd4 <__retarget_lock_release_recursive>
 8007dfe:	e7dd      	b.n	8007dbc <_fflush_r+0xc>

08007e00 <fiprintf>:
 8007e00:	b40e      	push	{r1, r2, r3}
 8007e02:	b503      	push	{r0, r1, lr}
 8007e04:	ab03      	add	r3, sp, #12
 8007e06:	4601      	mov	r1, r0
 8007e08:	4805      	ldr	r0, [pc, #20]	@ (8007e20 <fiprintf+0x20>)
 8007e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e0e:	6800      	ldr	r0, [r0, #0]
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	f000 f8bb 	bl	8007f8c <_vfiprintf_r>
 8007e16:	b002      	add	sp, #8
 8007e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e1c:	b003      	add	sp, #12
 8007e1e:	4770      	bx	lr
 8007e20:	20000018 	.word	0x20000018

08007e24 <__swhatbuf_r>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	460c      	mov	r4, r1
 8007e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2c:	b096      	sub	sp, #88	@ 0x58
 8007e2e:	4615      	mov	r5, r2
 8007e30:	2900      	cmp	r1, #0
 8007e32:	461e      	mov	r6, r3
 8007e34:	da0c      	bge.n	8007e50 <__swhatbuf_r+0x2c>
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	2100      	movs	r1, #0
 8007e3a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e3e:	bf14      	ite	ne
 8007e40:	2340      	movne	r3, #64	@ 0x40
 8007e42:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e46:	2000      	movs	r0, #0
 8007e48:	6031      	str	r1, [r6, #0]
 8007e4a:	602b      	str	r3, [r5, #0]
 8007e4c:	b016      	add	sp, #88	@ 0x58
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	466a      	mov	r2, sp
 8007e52:	f000 f849 	bl	8007ee8 <_fstat_r>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	dbed      	blt.n	8007e36 <__swhatbuf_r+0x12>
 8007e5a:	9901      	ldr	r1, [sp, #4]
 8007e5c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e60:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e64:	4259      	negs	r1, r3
 8007e66:	4159      	adcs	r1, r3
 8007e68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e6c:	e7eb      	b.n	8007e46 <__swhatbuf_r+0x22>

08007e6e <__smakebuf_r>:
 8007e6e:	898b      	ldrh	r3, [r1, #12]
 8007e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e72:	079d      	lsls	r5, r3, #30
 8007e74:	4606      	mov	r6, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	d507      	bpl.n	8007e8a <__smakebuf_r+0x1c>
 8007e7a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	6123      	str	r3, [r4, #16]
 8007e82:	2301      	movs	r3, #1
 8007e84:	6163      	str	r3, [r4, #20]
 8007e86:	b003      	add	sp, #12
 8007e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8a:	ab01      	add	r3, sp, #4
 8007e8c:	466a      	mov	r2, sp
 8007e8e:	f7ff ffc9 	bl	8007e24 <__swhatbuf_r>
 8007e92:	9f00      	ldr	r7, [sp, #0]
 8007e94:	4605      	mov	r5, r0
 8007e96:	4630      	mov	r0, r6
 8007e98:	4639      	mov	r1, r7
 8007e9a:	f7ff fb4f 	bl	800753c <_malloc_r>
 8007e9e:	b948      	cbnz	r0, 8007eb4 <__smakebuf_r+0x46>
 8007ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ea4:	059a      	lsls	r2, r3, #22
 8007ea6:	d4ee      	bmi.n	8007e86 <__smakebuf_r+0x18>
 8007ea8:	f023 0303 	bic.w	r3, r3, #3
 8007eac:	f043 0302 	orr.w	r3, r3, #2
 8007eb0:	81a3      	strh	r3, [r4, #12]
 8007eb2:	e7e2      	b.n	8007e7a <__smakebuf_r+0xc>
 8007eb4:	89a3      	ldrh	r3, [r4, #12]
 8007eb6:	6020      	str	r0, [r4, #0]
 8007eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ebc:	81a3      	strh	r3, [r4, #12]
 8007ebe:	9b01      	ldr	r3, [sp, #4]
 8007ec0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ec4:	b15b      	cbz	r3, 8007ede <__smakebuf_r+0x70>
 8007ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f000 f81e 	bl	8007f0c <_isatty_r>
 8007ed0:	b128      	cbz	r0, 8007ede <__smakebuf_r+0x70>
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	f023 0303 	bic.w	r3, r3, #3
 8007ed8:	f043 0301 	orr.w	r3, r3, #1
 8007edc:	81a3      	strh	r3, [r4, #12]
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	431d      	orrs	r5, r3
 8007ee2:	81a5      	strh	r5, [r4, #12]
 8007ee4:	e7cf      	b.n	8007e86 <__smakebuf_r+0x18>
	...

08007ee8 <_fstat_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	2300      	movs	r3, #0
 8007eec:	4d06      	ldr	r5, [pc, #24]	@ (8007f08 <_fstat_r+0x20>)
 8007eee:	4604      	mov	r4, r0
 8007ef0:	4608      	mov	r0, r1
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	602b      	str	r3, [r5, #0]
 8007ef6:	f7f8 fe2f 	bl	8000b58 <_fstat>
 8007efa:	1c43      	adds	r3, r0, #1
 8007efc:	d102      	bne.n	8007f04 <_fstat_r+0x1c>
 8007efe:	682b      	ldr	r3, [r5, #0]
 8007f00:	b103      	cbz	r3, 8007f04 <_fstat_r+0x1c>
 8007f02:	6023      	str	r3, [r4, #0]
 8007f04:	bd38      	pop	{r3, r4, r5, pc}
 8007f06:	bf00      	nop
 8007f08:	200008dc 	.word	0x200008dc

08007f0c <_isatty_r>:
 8007f0c:	b538      	push	{r3, r4, r5, lr}
 8007f0e:	2300      	movs	r3, #0
 8007f10:	4d05      	ldr	r5, [pc, #20]	@ (8007f28 <_isatty_r+0x1c>)
 8007f12:	4604      	mov	r4, r0
 8007f14:	4608      	mov	r0, r1
 8007f16:	602b      	str	r3, [r5, #0]
 8007f18:	f7f8 fe2e 	bl	8000b78 <_isatty>
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d102      	bne.n	8007f26 <_isatty_r+0x1a>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	b103      	cbz	r3, 8007f26 <_isatty_r+0x1a>
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	200008dc 	.word	0x200008dc

08007f2c <abort>:
 8007f2c:	2006      	movs	r0, #6
 8007f2e:	b508      	push	{r3, lr}
 8007f30:	f000 fafc 	bl	800852c <raise>
 8007f34:	2001      	movs	r0, #1
 8007f36:	f7f8 fddb 	bl	8000af0 <_exit>

08007f3a <__sfputc_r>:
 8007f3a:	6893      	ldr	r3, [r2, #8]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	b410      	push	{r4}
 8007f42:	6093      	str	r3, [r2, #8]
 8007f44:	da08      	bge.n	8007f58 <__sfputc_r+0x1e>
 8007f46:	6994      	ldr	r4, [r2, #24]
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	db01      	blt.n	8007f50 <__sfputc_r+0x16>
 8007f4c:	290a      	cmp	r1, #10
 8007f4e:	d103      	bne.n	8007f58 <__sfputc_r+0x1e>
 8007f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f54:	f7ff bd1f 	b.w	8007996 <__swbuf_r>
 8007f58:	6813      	ldr	r3, [r2, #0]
 8007f5a:	1c58      	adds	r0, r3, #1
 8007f5c:	6010      	str	r0, [r2, #0]
 8007f5e:	4608      	mov	r0, r1
 8007f60:	7019      	strb	r1, [r3, #0]
 8007f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <__sfputs_r>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	460f      	mov	r7, r1
 8007f6e:	4614      	mov	r4, r2
 8007f70:	18d5      	adds	r5, r2, r3
 8007f72:	42ac      	cmp	r4, r5
 8007f74:	d101      	bne.n	8007f7a <__sfputs_r+0x12>
 8007f76:	2000      	movs	r0, #0
 8007f78:	e007      	b.n	8007f8a <__sfputs_r+0x22>
 8007f7a:	463a      	mov	r2, r7
 8007f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff ffda 	bl	8007f3a <__sfputc_r>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	d1f3      	bne.n	8007f72 <__sfputs_r+0xa>
 8007f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f8c <_vfiprintf_r>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	460d      	mov	r5, r1
 8007f92:	b09d      	sub	sp, #116	@ 0x74
 8007f94:	4614      	mov	r4, r2
 8007f96:	4698      	mov	r8, r3
 8007f98:	4606      	mov	r6, r0
 8007f9a:	b118      	cbz	r0, 8007fa4 <_vfiprintf_r+0x18>
 8007f9c:	6a03      	ldr	r3, [r0, #32]
 8007f9e:	b90b      	cbnz	r3, 8007fa4 <_vfiprintf_r+0x18>
 8007fa0:	f7ff fc22 	bl	80077e8 <__sinit>
 8007fa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fa6:	07d9      	lsls	r1, r3, #31
 8007fa8:	d405      	bmi.n	8007fb6 <_vfiprintf_r+0x2a>
 8007faa:	89ab      	ldrh	r3, [r5, #12]
 8007fac:	059a      	lsls	r2, r3, #22
 8007fae:	d402      	bmi.n	8007fb6 <_vfiprintf_r+0x2a>
 8007fb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fb2:	f7ff fe0e 	bl	8007bd2 <__retarget_lock_acquire_recursive>
 8007fb6:	89ab      	ldrh	r3, [r5, #12]
 8007fb8:	071b      	lsls	r3, r3, #28
 8007fba:	d501      	bpl.n	8007fc0 <_vfiprintf_r+0x34>
 8007fbc:	692b      	ldr	r3, [r5, #16]
 8007fbe:	b99b      	cbnz	r3, 8007fe8 <_vfiprintf_r+0x5c>
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	f7ff fd26 	bl	8007a14 <__swsetup_r>
 8007fc8:	b170      	cbz	r0, 8007fe8 <_vfiprintf_r+0x5c>
 8007fca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fcc:	07dc      	lsls	r4, r3, #31
 8007fce:	d504      	bpl.n	8007fda <_vfiprintf_r+0x4e>
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	b01d      	add	sp, #116	@ 0x74
 8007fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fda:	89ab      	ldrh	r3, [r5, #12]
 8007fdc:	0598      	lsls	r0, r3, #22
 8007fde:	d4f7      	bmi.n	8007fd0 <_vfiprintf_r+0x44>
 8007fe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fe2:	f7ff fdf7 	bl	8007bd4 <__retarget_lock_release_recursive>
 8007fe6:	e7f3      	b.n	8007fd0 <_vfiprintf_r+0x44>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fee:	f04f 0901 	mov.w	r9, #1
 8007ff2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80081a8 <_vfiprintf_r+0x21c>
 8007ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ffe:	2330      	movs	r3, #48	@ 0x30
 8008000:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008004:	4623      	mov	r3, r4
 8008006:	469a      	mov	sl, r3
 8008008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800800c:	b10a      	cbz	r2, 8008012 <_vfiprintf_r+0x86>
 800800e:	2a25      	cmp	r2, #37	@ 0x25
 8008010:	d1f9      	bne.n	8008006 <_vfiprintf_r+0x7a>
 8008012:	ebba 0b04 	subs.w	fp, sl, r4
 8008016:	d00b      	beq.n	8008030 <_vfiprintf_r+0xa4>
 8008018:	465b      	mov	r3, fp
 800801a:	4622      	mov	r2, r4
 800801c:	4629      	mov	r1, r5
 800801e:	4630      	mov	r0, r6
 8008020:	f7ff ffa2 	bl	8007f68 <__sfputs_r>
 8008024:	3001      	adds	r0, #1
 8008026:	f000 80a7 	beq.w	8008178 <_vfiprintf_r+0x1ec>
 800802a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800802c:	445a      	add	r2, fp
 800802e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008030:	f89a 3000 	ldrb.w	r3, [sl]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 809f 	beq.w	8008178 <_vfiprintf_r+0x1ec>
 800803a:	2300      	movs	r3, #0
 800803c:	f04f 32ff 	mov.w	r2, #4294967295
 8008040:	f10a 0a01 	add.w	sl, sl, #1
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	9307      	str	r3, [sp, #28]
 8008048:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800804c:	931a      	str	r3, [sp, #104]	@ 0x68
 800804e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008052:	4654      	mov	r4, sl
 8008054:	2205      	movs	r2, #5
 8008056:	4854      	ldr	r0, [pc, #336]	@ (80081a8 <_vfiprintf_r+0x21c>)
 8008058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800805c:	f000 fa82 	bl	8008564 <memchr>
 8008060:	9a04      	ldr	r2, [sp, #16]
 8008062:	b9d8      	cbnz	r0, 800809c <_vfiprintf_r+0x110>
 8008064:	06d1      	lsls	r1, r2, #27
 8008066:	bf44      	itt	mi
 8008068:	2320      	movmi	r3, #32
 800806a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800806e:	0713      	lsls	r3, r2, #28
 8008070:	bf44      	itt	mi
 8008072:	232b      	movmi	r3, #43	@ 0x2b
 8008074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008078:	f89a 3000 	ldrb.w	r3, [sl]
 800807c:	2b2a      	cmp	r3, #42	@ 0x2a
 800807e:	d015      	beq.n	80080ac <_vfiprintf_r+0x120>
 8008080:	9a07      	ldr	r2, [sp, #28]
 8008082:	4654      	mov	r4, sl
 8008084:	2000      	movs	r0, #0
 8008086:	f04f 0c0a 	mov.w	ip, #10
 800808a:	4621      	mov	r1, r4
 800808c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008090:	3b30      	subs	r3, #48	@ 0x30
 8008092:	2b09      	cmp	r3, #9
 8008094:	d94b      	bls.n	800812e <_vfiprintf_r+0x1a2>
 8008096:	b1b0      	cbz	r0, 80080c6 <_vfiprintf_r+0x13a>
 8008098:	9207      	str	r2, [sp, #28]
 800809a:	e014      	b.n	80080c6 <_vfiprintf_r+0x13a>
 800809c:	eba0 0308 	sub.w	r3, r0, r8
 80080a0:	46a2      	mov	sl, r4
 80080a2:	fa09 f303 	lsl.w	r3, r9, r3
 80080a6:	4313      	orrs	r3, r2
 80080a8:	9304      	str	r3, [sp, #16]
 80080aa:	e7d2      	b.n	8008052 <_vfiprintf_r+0xc6>
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	1d19      	adds	r1, r3, #4
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	9103      	str	r1, [sp, #12]
 80080b6:	bfbb      	ittet	lt
 80080b8:	425b      	neglt	r3, r3
 80080ba:	f042 0202 	orrlt.w	r2, r2, #2
 80080be:	9307      	strge	r3, [sp, #28]
 80080c0:	9307      	strlt	r3, [sp, #28]
 80080c2:	bfb8      	it	lt
 80080c4:	9204      	strlt	r2, [sp, #16]
 80080c6:	7823      	ldrb	r3, [r4, #0]
 80080c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80080ca:	d10a      	bne.n	80080e2 <_vfiprintf_r+0x156>
 80080cc:	7863      	ldrb	r3, [r4, #1]
 80080ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80080d0:	d132      	bne.n	8008138 <_vfiprintf_r+0x1ac>
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	3402      	adds	r4, #2
 80080d6:	1d1a      	adds	r2, r3, #4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080de:	9203      	str	r2, [sp, #12]
 80080e0:	9305      	str	r3, [sp, #20]
 80080e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081b8 <_vfiprintf_r+0x22c>
 80080e6:	2203      	movs	r2, #3
 80080e8:	7821      	ldrb	r1, [r4, #0]
 80080ea:	4650      	mov	r0, sl
 80080ec:	f000 fa3a 	bl	8008564 <memchr>
 80080f0:	b138      	cbz	r0, 8008102 <_vfiprintf_r+0x176>
 80080f2:	eba0 000a 	sub.w	r0, r0, sl
 80080f6:	2240      	movs	r2, #64	@ 0x40
 80080f8:	9b04      	ldr	r3, [sp, #16]
 80080fa:	3401      	adds	r4, #1
 80080fc:	4082      	lsls	r2, r0
 80080fe:	4313      	orrs	r3, r2
 8008100:	9304      	str	r3, [sp, #16]
 8008102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008106:	2206      	movs	r2, #6
 8008108:	4828      	ldr	r0, [pc, #160]	@ (80081ac <_vfiprintf_r+0x220>)
 800810a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800810e:	f000 fa29 	bl	8008564 <memchr>
 8008112:	2800      	cmp	r0, #0
 8008114:	d03f      	beq.n	8008196 <_vfiprintf_r+0x20a>
 8008116:	4b26      	ldr	r3, [pc, #152]	@ (80081b0 <_vfiprintf_r+0x224>)
 8008118:	bb1b      	cbnz	r3, 8008162 <_vfiprintf_r+0x1d6>
 800811a:	9b03      	ldr	r3, [sp, #12]
 800811c:	3307      	adds	r3, #7
 800811e:	f023 0307 	bic.w	r3, r3, #7
 8008122:	3308      	adds	r3, #8
 8008124:	9303      	str	r3, [sp, #12]
 8008126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008128:	443b      	add	r3, r7
 800812a:	9309      	str	r3, [sp, #36]	@ 0x24
 800812c:	e76a      	b.n	8008004 <_vfiprintf_r+0x78>
 800812e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008132:	460c      	mov	r4, r1
 8008134:	2001      	movs	r0, #1
 8008136:	e7a8      	b.n	800808a <_vfiprintf_r+0xfe>
 8008138:	2300      	movs	r3, #0
 800813a:	3401      	adds	r4, #1
 800813c:	f04f 0c0a 	mov.w	ip, #10
 8008140:	4619      	mov	r1, r3
 8008142:	9305      	str	r3, [sp, #20]
 8008144:	4620      	mov	r0, r4
 8008146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800814a:	3a30      	subs	r2, #48	@ 0x30
 800814c:	2a09      	cmp	r2, #9
 800814e:	d903      	bls.n	8008158 <_vfiprintf_r+0x1cc>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d0c6      	beq.n	80080e2 <_vfiprintf_r+0x156>
 8008154:	9105      	str	r1, [sp, #20]
 8008156:	e7c4      	b.n	80080e2 <_vfiprintf_r+0x156>
 8008158:	fb0c 2101 	mla	r1, ip, r1, r2
 800815c:	4604      	mov	r4, r0
 800815e:	2301      	movs	r3, #1
 8008160:	e7f0      	b.n	8008144 <_vfiprintf_r+0x1b8>
 8008162:	ab03      	add	r3, sp, #12
 8008164:	462a      	mov	r2, r5
 8008166:	a904      	add	r1, sp, #16
 8008168:	4630      	mov	r0, r6
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	4b11      	ldr	r3, [pc, #68]	@ (80081b4 <_vfiprintf_r+0x228>)
 800816e:	f3af 8000 	nop.w
 8008172:	4607      	mov	r7, r0
 8008174:	1c78      	adds	r0, r7, #1
 8008176:	d1d6      	bne.n	8008126 <_vfiprintf_r+0x19a>
 8008178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800817a:	07d9      	lsls	r1, r3, #31
 800817c:	d405      	bmi.n	800818a <_vfiprintf_r+0x1fe>
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	059a      	lsls	r2, r3, #22
 8008182:	d402      	bmi.n	800818a <_vfiprintf_r+0x1fe>
 8008184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008186:	f7ff fd25 	bl	8007bd4 <__retarget_lock_release_recursive>
 800818a:	89ab      	ldrh	r3, [r5, #12]
 800818c:	065b      	lsls	r3, r3, #25
 800818e:	f53f af1f 	bmi.w	8007fd0 <_vfiprintf_r+0x44>
 8008192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008194:	e71e      	b.n	8007fd4 <_vfiprintf_r+0x48>
 8008196:	ab03      	add	r3, sp, #12
 8008198:	462a      	mov	r2, r5
 800819a:	a904      	add	r1, sp, #16
 800819c:	4630      	mov	r0, r6
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	4b04      	ldr	r3, [pc, #16]	@ (80081b4 <_vfiprintf_r+0x228>)
 80081a2:	f000 f87d 	bl	80082a0 <_printf_i>
 80081a6:	e7e4      	b.n	8008172 <_vfiprintf_r+0x1e6>
 80081a8:	0800872b 	.word	0x0800872b
 80081ac:	08008735 	.word	0x08008735
 80081b0:	00000000 	.word	0x00000000
 80081b4:	08007f69 	.word	0x08007f69
 80081b8:	08008731 	.word	0x08008731

080081bc <_printf_common>:
 80081bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c0:	4616      	mov	r6, r2
 80081c2:	4698      	mov	r8, r3
 80081c4:	688a      	ldr	r2, [r1, #8]
 80081c6:	4607      	mov	r7, r0
 80081c8:	690b      	ldr	r3, [r1, #16]
 80081ca:	460c      	mov	r4, r1
 80081cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081d0:	4293      	cmp	r3, r2
 80081d2:	bfb8      	it	lt
 80081d4:	4613      	movlt	r3, r2
 80081d6:	6033      	str	r3, [r6, #0]
 80081d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081dc:	b10a      	cbz	r2, 80081e2 <_printf_common+0x26>
 80081de:	3301      	adds	r3, #1
 80081e0:	6033      	str	r3, [r6, #0]
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	0699      	lsls	r1, r3, #26
 80081e6:	bf42      	ittt	mi
 80081e8:	6833      	ldrmi	r3, [r6, #0]
 80081ea:	3302      	addmi	r3, #2
 80081ec:	6033      	strmi	r3, [r6, #0]
 80081ee:	6825      	ldr	r5, [r4, #0]
 80081f0:	f015 0506 	ands.w	r5, r5, #6
 80081f4:	d106      	bne.n	8008204 <_printf_common+0x48>
 80081f6:	f104 0a19 	add.w	sl, r4, #25
 80081fa:	68e3      	ldr	r3, [r4, #12]
 80081fc:	6832      	ldr	r2, [r6, #0]
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	42ab      	cmp	r3, r5
 8008202:	dc2b      	bgt.n	800825c <_printf_common+0xa0>
 8008204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008208:	6822      	ldr	r2, [r4, #0]
 800820a:	3b00      	subs	r3, #0
 800820c:	bf18      	it	ne
 800820e:	2301      	movne	r3, #1
 8008210:	0692      	lsls	r2, r2, #26
 8008212:	d430      	bmi.n	8008276 <_printf_common+0xba>
 8008214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008218:	4641      	mov	r1, r8
 800821a:	4638      	mov	r0, r7
 800821c:	47c8      	blx	r9
 800821e:	3001      	adds	r0, #1
 8008220:	d023      	beq.n	800826a <_printf_common+0xae>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	341a      	adds	r4, #26
 8008226:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800822a:	f003 0306 	and.w	r3, r3, #6
 800822e:	2b04      	cmp	r3, #4
 8008230:	bf0a      	itet	eq
 8008232:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008236:	2500      	movne	r5, #0
 8008238:	6833      	ldreq	r3, [r6, #0]
 800823a:	f04f 0600 	mov.w	r6, #0
 800823e:	bf08      	it	eq
 8008240:	1aed      	subeq	r5, r5, r3
 8008242:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008246:	bf08      	it	eq
 8008248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800824c:	4293      	cmp	r3, r2
 800824e:	bfc4      	itt	gt
 8008250:	1a9b      	subgt	r3, r3, r2
 8008252:	18ed      	addgt	r5, r5, r3
 8008254:	42b5      	cmp	r5, r6
 8008256:	d11a      	bne.n	800828e <_printf_common+0xd2>
 8008258:	2000      	movs	r0, #0
 800825a:	e008      	b.n	800826e <_printf_common+0xb2>
 800825c:	2301      	movs	r3, #1
 800825e:	4652      	mov	r2, sl
 8008260:	4641      	mov	r1, r8
 8008262:	4638      	mov	r0, r7
 8008264:	47c8      	blx	r9
 8008266:	3001      	adds	r0, #1
 8008268:	d103      	bne.n	8008272 <_printf_common+0xb6>
 800826a:	f04f 30ff 	mov.w	r0, #4294967295
 800826e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008272:	3501      	adds	r5, #1
 8008274:	e7c1      	b.n	80081fa <_printf_common+0x3e>
 8008276:	18e1      	adds	r1, r4, r3
 8008278:	1c5a      	adds	r2, r3, #1
 800827a:	2030      	movs	r0, #48	@ 0x30
 800827c:	3302      	adds	r3, #2
 800827e:	4422      	add	r2, r4
 8008280:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800828c:	e7c2      	b.n	8008214 <_printf_common+0x58>
 800828e:	2301      	movs	r3, #1
 8008290:	4622      	mov	r2, r4
 8008292:	4641      	mov	r1, r8
 8008294:	4638      	mov	r0, r7
 8008296:	47c8      	blx	r9
 8008298:	3001      	adds	r0, #1
 800829a:	d0e6      	beq.n	800826a <_printf_common+0xae>
 800829c:	3601      	adds	r6, #1
 800829e:	e7d9      	b.n	8008254 <_printf_common+0x98>

080082a0 <_printf_i>:
 80082a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082a4:	7e0f      	ldrb	r7, [r1, #24]
 80082a6:	4691      	mov	r9, r2
 80082a8:	4680      	mov	r8, r0
 80082aa:	460c      	mov	r4, r1
 80082ac:	2f78      	cmp	r7, #120	@ 0x78
 80082ae:	469a      	mov	sl, r3
 80082b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082b6:	d807      	bhi.n	80082c8 <_printf_i+0x28>
 80082b8:	2f62      	cmp	r7, #98	@ 0x62
 80082ba:	d80a      	bhi.n	80082d2 <_printf_i+0x32>
 80082bc:	2f00      	cmp	r7, #0
 80082be:	f000 80d1 	beq.w	8008464 <_printf_i+0x1c4>
 80082c2:	2f58      	cmp	r7, #88	@ 0x58
 80082c4:	f000 80b8 	beq.w	8008438 <_printf_i+0x198>
 80082c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082d0:	e03a      	b.n	8008348 <_printf_i+0xa8>
 80082d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082d6:	2b15      	cmp	r3, #21
 80082d8:	d8f6      	bhi.n	80082c8 <_printf_i+0x28>
 80082da:	a101      	add	r1, pc, #4	@ (adr r1, 80082e0 <_printf_i+0x40>)
 80082dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082e0:	08008339 	.word	0x08008339
 80082e4:	0800834d 	.word	0x0800834d
 80082e8:	080082c9 	.word	0x080082c9
 80082ec:	080082c9 	.word	0x080082c9
 80082f0:	080082c9 	.word	0x080082c9
 80082f4:	080082c9 	.word	0x080082c9
 80082f8:	0800834d 	.word	0x0800834d
 80082fc:	080082c9 	.word	0x080082c9
 8008300:	080082c9 	.word	0x080082c9
 8008304:	080082c9 	.word	0x080082c9
 8008308:	080082c9 	.word	0x080082c9
 800830c:	0800844b 	.word	0x0800844b
 8008310:	08008377 	.word	0x08008377
 8008314:	08008405 	.word	0x08008405
 8008318:	080082c9 	.word	0x080082c9
 800831c:	080082c9 	.word	0x080082c9
 8008320:	0800846d 	.word	0x0800846d
 8008324:	080082c9 	.word	0x080082c9
 8008328:	08008377 	.word	0x08008377
 800832c:	080082c9 	.word	0x080082c9
 8008330:	080082c9 	.word	0x080082c9
 8008334:	0800840d 	.word	0x0800840d
 8008338:	6833      	ldr	r3, [r6, #0]
 800833a:	1d1a      	adds	r2, r3, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6032      	str	r2, [r6, #0]
 8008340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008348:	2301      	movs	r3, #1
 800834a:	e09c      	b.n	8008486 <_printf_i+0x1e6>
 800834c:	6833      	ldr	r3, [r6, #0]
 800834e:	6820      	ldr	r0, [r4, #0]
 8008350:	1d19      	adds	r1, r3, #4
 8008352:	6031      	str	r1, [r6, #0]
 8008354:	0606      	lsls	r6, r0, #24
 8008356:	d501      	bpl.n	800835c <_printf_i+0xbc>
 8008358:	681d      	ldr	r5, [r3, #0]
 800835a:	e003      	b.n	8008364 <_printf_i+0xc4>
 800835c:	0645      	lsls	r5, r0, #25
 800835e:	d5fb      	bpl.n	8008358 <_printf_i+0xb8>
 8008360:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008364:	2d00      	cmp	r5, #0
 8008366:	da03      	bge.n	8008370 <_printf_i+0xd0>
 8008368:	232d      	movs	r3, #45	@ 0x2d
 800836a:	426d      	negs	r5, r5
 800836c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008370:	4858      	ldr	r0, [pc, #352]	@ (80084d4 <_printf_i+0x234>)
 8008372:	230a      	movs	r3, #10
 8008374:	e011      	b.n	800839a <_printf_i+0xfa>
 8008376:	6821      	ldr	r1, [r4, #0]
 8008378:	6833      	ldr	r3, [r6, #0]
 800837a:	0608      	lsls	r0, r1, #24
 800837c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008380:	d402      	bmi.n	8008388 <_printf_i+0xe8>
 8008382:	0649      	lsls	r1, r1, #25
 8008384:	bf48      	it	mi
 8008386:	b2ad      	uxthmi	r5, r5
 8008388:	2f6f      	cmp	r7, #111	@ 0x6f
 800838a:	6033      	str	r3, [r6, #0]
 800838c:	4851      	ldr	r0, [pc, #324]	@ (80084d4 <_printf_i+0x234>)
 800838e:	bf14      	ite	ne
 8008390:	230a      	movne	r3, #10
 8008392:	2308      	moveq	r3, #8
 8008394:	2100      	movs	r1, #0
 8008396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800839a:	6866      	ldr	r6, [r4, #4]
 800839c:	2e00      	cmp	r6, #0
 800839e:	60a6      	str	r6, [r4, #8]
 80083a0:	db05      	blt.n	80083ae <_printf_i+0x10e>
 80083a2:	6821      	ldr	r1, [r4, #0]
 80083a4:	432e      	orrs	r6, r5
 80083a6:	f021 0104 	bic.w	r1, r1, #4
 80083aa:	6021      	str	r1, [r4, #0]
 80083ac:	d04b      	beq.n	8008446 <_printf_i+0x1a6>
 80083ae:	4616      	mov	r6, r2
 80083b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80083b4:	fb03 5711 	mls	r7, r3, r1, r5
 80083b8:	5dc7      	ldrb	r7, [r0, r7]
 80083ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083be:	462f      	mov	r7, r5
 80083c0:	460d      	mov	r5, r1
 80083c2:	42bb      	cmp	r3, r7
 80083c4:	d9f4      	bls.n	80083b0 <_printf_i+0x110>
 80083c6:	2b08      	cmp	r3, #8
 80083c8:	d10b      	bne.n	80083e2 <_printf_i+0x142>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	07df      	lsls	r7, r3, #31
 80083ce:	d508      	bpl.n	80083e2 <_printf_i+0x142>
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	6861      	ldr	r1, [r4, #4]
 80083d4:	4299      	cmp	r1, r3
 80083d6:	bfde      	ittt	le
 80083d8:	2330      	movle	r3, #48	@ 0x30
 80083da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083e2:	1b92      	subs	r2, r2, r6
 80083e4:	6122      	str	r2, [r4, #16]
 80083e6:	464b      	mov	r3, r9
 80083e8:	aa03      	add	r2, sp, #12
 80083ea:	4621      	mov	r1, r4
 80083ec:	4640      	mov	r0, r8
 80083ee:	f8cd a000 	str.w	sl, [sp]
 80083f2:	f7ff fee3 	bl	80081bc <_printf_common>
 80083f6:	3001      	adds	r0, #1
 80083f8:	d14a      	bne.n	8008490 <_printf_i+0x1f0>
 80083fa:	f04f 30ff 	mov.w	r0, #4294967295
 80083fe:	b004      	add	sp, #16
 8008400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	f043 0320 	orr.w	r3, r3, #32
 800840a:	6023      	str	r3, [r4, #0]
 800840c:	2778      	movs	r7, #120	@ 0x78
 800840e:	4832      	ldr	r0, [pc, #200]	@ (80084d8 <_printf_i+0x238>)
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008416:	061f      	lsls	r7, r3, #24
 8008418:	6831      	ldr	r1, [r6, #0]
 800841a:	f851 5b04 	ldr.w	r5, [r1], #4
 800841e:	d402      	bmi.n	8008426 <_printf_i+0x186>
 8008420:	065f      	lsls	r7, r3, #25
 8008422:	bf48      	it	mi
 8008424:	b2ad      	uxthmi	r5, r5
 8008426:	6031      	str	r1, [r6, #0]
 8008428:	07d9      	lsls	r1, r3, #31
 800842a:	bf44      	itt	mi
 800842c:	f043 0320 	orrmi.w	r3, r3, #32
 8008430:	6023      	strmi	r3, [r4, #0]
 8008432:	b11d      	cbz	r5, 800843c <_printf_i+0x19c>
 8008434:	2310      	movs	r3, #16
 8008436:	e7ad      	b.n	8008394 <_printf_i+0xf4>
 8008438:	4826      	ldr	r0, [pc, #152]	@ (80084d4 <_printf_i+0x234>)
 800843a:	e7e9      	b.n	8008410 <_printf_i+0x170>
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	f023 0320 	bic.w	r3, r3, #32
 8008442:	6023      	str	r3, [r4, #0]
 8008444:	e7f6      	b.n	8008434 <_printf_i+0x194>
 8008446:	4616      	mov	r6, r2
 8008448:	e7bd      	b.n	80083c6 <_printf_i+0x126>
 800844a:	6833      	ldr	r3, [r6, #0]
 800844c:	6825      	ldr	r5, [r4, #0]
 800844e:	1d18      	adds	r0, r3, #4
 8008450:	6961      	ldr	r1, [r4, #20]
 8008452:	6030      	str	r0, [r6, #0]
 8008454:	062e      	lsls	r6, r5, #24
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	d501      	bpl.n	800845e <_printf_i+0x1be>
 800845a:	6019      	str	r1, [r3, #0]
 800845c:	e002      	b.n	8008464 <_printf_i+0x1c4>
 800845e:	0668      	lsls	r0, r5, #25
 8008460:	d5fb      	bpl.n	800845a <_printf_i+0x1ba>
 8008462:	8019      	strh	r1, [r3, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	4616      	mov	r6, r2
 8008468:	6123      	str	r3, [r4, #16]
 800846a:	e7bc      	b.n	80083e6 <_printf_i+0x146>
 800846c:	6833      	ldr	r3, [r6, #0]
 800846e:	2100      	movs	r1, #0
 8008470:	1d1a      	adds	r2, r3, #4
 8008472:	6032      	str	r2, [r6, #0]
 8008474:	681e      	ldr	r6, [r3, #0]
 8008476:	6862      	ldr	r2, [r4, #4]
 8008478:	4630      	mov	r0, r6
 800847a:	f000 f873 	bl	8008564 <memchr>
 800847e:	b108      	cbz	r0, 8008484 <_printf_i+0x1e4>
 8008480:	1b80      	subs	r0, r0, r6
 8008482:	6060      	str	r0, [r4, #4]
 8008484:	6863      	ldr	r3, [r4, #4]
 8008486:	6123      	str	r3, [r4, #16]
 8008488:	2300      	movs	r3, #0
 800848a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800848e:	e7aa      	b.n	80083e6 <_printf_i+0x146>
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	4632      	mov	r2, r6
 8008494:	4649      	mov	r1, r9
 8008496:	4640      	mov	r0, r8
 8008498:	47d0      	blx	sl
 800849a:	3001      	adds	r0, #1
 800849c:	d0ad      	beq.n	80083fa <_printf_i+0x15a>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	079b      	lsls	r3, r3, #30
 80084a2:	d413      	bmi.n	80084cc <_printf_i+0x22c>
 80084a4:	68e0      	ldr	r0, [r4, #12]
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	4298      	cmp	r0, r3
 80084aa:	bfb8      	it	lt
 80084ac:	4618      	movlt	r0, r3
 80084ae:	e7a6      	b.n	80083fe <_printf_i+0x15e>
 80084b0:	2301      	movs	r3, #1
 80084b2:	4632      	mov	r2, r6
 80084b4:	4649      	mov	r1, r9
 80084b6:	4640      	mov	r0, r8
 80084b8:	47d0      	blx	sl
 80084ba:	3001      	adds	r0, #1
 80084bc:	d09d      	beq.n	80083fa <_printf_i+0x15a>
 80084be:	3501      	adds	r5, #1
 80084c0:	68e3      	ldr	r3, [r4, #12]
 80084c2:	9903      	ldr	r1, [sp, #12]
 80084c4:	1a5b      	subs	r3, r3, r1
 80084c6:	42ab      	cmp	r3, r5
 80084c8:	dcf2      	bgt.n	80084b0 <_printf_i+0x210>
 80084ca:	e7eb      	b.n	80084a4 <_printf_i+0x204>
 80084cc:	2500      	movs	r5, #0
 80084ce:	f104 0619 	add.w	r6, r4, #25
 80084d2:	e7f5      	b.n	80084c0 <_printf_i+0x220>
 80084d4:	0800873c 	.word	0x0800873c
 80084d8:	0800874d 	.word	0x0800874d

080084dc <_raise_r>:
 80084dc:	291f      	cmp	r1, #31
 80084de:	b538      	push	{r3, r4, r5, lr}
 80084e0:	4605      	mov	r5, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	d904      	bls.n	80084f0 <_raise_r+0x14>
 80084e6:	2316      	movs	r3, #22
 80084e8:	6003      	str	r3, [r0, #0]
 80084ea:	f04f 30ff 	mov.w	r0, #4294967295
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80084f2:	b112      	cbz	r2, 80084fa <_raise_r+0x1e>
 80084f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084f8:	b94b      	cbnz	r3, 800850e <_raise_r+0x32>
 80084fa:	4628      	mov	r0, r5
 80084fc:	f000 f830 	bl	8008560 <_getpid_r>
 8008500:	4622      	mov	r2, r4
 8008502:	4601      	mov	r1, r0
 8008504:	4628      	mov	r0, r5
 8008506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800850a:	f000 b817 	b.w	800853c <_kill_r>
 800850e:	2b01      	cmp	r3, #1
 8008510:	d00a      	beq.n	8008528 <_raise_r+0x4c>
 8008512:	1c59      	adds	r1, r3, #1
 8008514:	d103      	bne.n	800851e <_raise_r+0x42>
 8008516:	2316      	movs	r3, #22
 8008518:	6003      	str	r3, [r0, #0]
 800851a:	2001      	movs	r0, #1
 800851c:	e7e7      	b.n	80084ee <_raise_r+0x12>
 800851e:	2100      	movs	r1, #0
 8008520:	4620      	mov	r0, r4
 8008522:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008526:	4798      	blx	r3
 8008528:	2000      	movs	r0, #0
 800852a:	e7e0      	b.n	80084ee <_raise_r+0x12>

0800852c <raise>:
 800852c:	4b02      	ldr	r3, [pc, #8]	@ (8008538 <raise+0xc>)
 800852e:	4601      	mov	r1, r0
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	f7ff bfd3 	b.w	80084dc <_raise_r>
 8008536:	bf00      	nop
 8008538:	20000018 	.word	0x20000018

0800853c <_kill_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	2300      	movs	r3, #0
 8008540:	4d06      	ldr	r5, [pc, #24]	@ (800855c <_kill_r+0x20>)
 8008542:	4604      	mov	r4, r0
 8008544:	4608      	mov	r0, r1
 8008546:	4611      	mov	r1, r2
 8008548:	602b      	str	r3, [r5, #0]
 800854a:	f7f8 fac1 	bl	8000ad0 <_kill>
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	d102      	bne.n	8008558 <_kill_r+0x1c>
 8008552:	682b      	ldr	r3, [r5, #0]
 8008554:	b103      	cbz	r3, 8008558 <_kill_r+0x1c>
 8008556:	6023      	str	r3, [r4, #0]
 8008558:	bd38      	pop	{r3, r4, r5, pc}
 800855a:	bf00      	nop
 800855c:	200008dc 	.word	0x200008dc

08008560 <_getpid_r>:
 8008560:	f7f8 baae 	b.w	8000ac0 <_getpid>

08008564 <memchr>:
 8008564:	b2c9      	uxtb	r1, r1
 8008566:	4603      	mov	r3, r0
 8008568:	4402      	add	r2, r0
 800856a:	b510      	push	{r4, lr}
 800856c:	4293      	cmp	r3, r2
 800856e:	4618      	mov	r0, r3
 8008570:	d101      	bne.n	8008576 <memchr+0x12>
 8008572:	2000      	movs	r0, #0
 8008574:	e003      	b.n	800857e <memchr+0x1a>
 8008576:	7804      	ldrb	r4, [r0, #0]
 8008578:	3301      	adds	r3, #1
 800857a:	428c      	cmp	r4, r1
 800857c:	d1f6      	bne.n	800856c <memchr+0x8>
 800857e:	bd10      	pop	{r4, pc}

08008580 <_init>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	bf00      	nop
 8008584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008586:	bc08      	pop	{r3}
 8008588:	469e      	mov	lr, r3
 800858a:	4770      	bx	lr

0800858c <_fini>:
 800858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858e:	bf00      	nop
 8008590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008592:	bc08      	pop	{r3}
 8008594:	469e      	mov	lr, r3
 8008596:	4770      	bx	lr
