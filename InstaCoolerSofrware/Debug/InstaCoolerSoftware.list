
InstaCoolerSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008440  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ca  08008678  08008678  00009678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008844  08008844  00009844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08008848  08008848  00009848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000068  20000000  0800884c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000087a  20000068  080088b4  0000a068  2**2
                  ALLOC
  7 ._user_heap_stack 00000606  200008e2  080088b4  0000a8e2  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018b01  00000000  00000000  0000a09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002f34  00000000  00000000  00022b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000016b8  00000000  00000000  00025ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000011a2  00000000  00000000  00027190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033b2a  00000000  00000000  00028332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001b628  00000000  00000000  0005be5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00144646  00000000  00000000  00077484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001bbaca  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006c48  00000000  00000000  001bbb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  001c2758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	08008660 	.word	0x08008660

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	08008660 	.word	0x08008660

08000278 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000280:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000284:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000288:	f003 0301 	and.w	r3, r3, #1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d013      	beq.n	80002b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000290:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000294:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000298:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800029c:	2b00      	cmp	r3, #0
 800029e:	d00b      	beq.n	80002b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002a0:	e000      	b.n	80002a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80002a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f9      	beq.n	80002a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002ae:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	b2d2      	uxtb	r2, r2
 80002b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b8:	687b      	ldr	r3, [r7, #4]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
	...

080002c8 <setPWM>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setPWM(TIM_HandleTypeDef *timer_handle, uint32_t timer_channel, uint8_t duty) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	4613      	mov	r3, r2
 80002d4:	71fb      	strb	r3, [r7, #7]
    uint32_t counter_period = __HAL_TIM_GET_AUTORELOAD(timer_handle); // Get the ARR value (number of ticks per period)
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002dc:	617b      	str	r3, [r7, #20]
    uint32_t new_duty = duty / 255.0f * counter_period; // Calculate new duty value
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	ee07 3a90 	vmov	s15, r3
 80002e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002e8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000370 <setPWM+0xa8>
 80002ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	ee07 3a90 	vmov	s15, r3
 80002f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000302:	ee17 3a90 	vmov	r3, s15
 8000306:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, new_duty); // Set compare value to new duty
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d104      	bne.n	8000318 <setPWM+0x50>
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	693a      	ldr	r2, [r7, #16]
 8000314:	635a      	str	r2, [r3, #52]	@ 0x34
 8000316:	e023      	b.n	8000360 <setPWM+0x98>
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	2b04      	cmp	r3, #4
 800031c:	d104      	bne.n	8000328 <setPWM+0x60>
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	6393      	str	r3, [r2, #56]	@ 0x38
 8000326:	e01b      	b.n	8000360 <setPWM+0x98>
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	2b08      	cmp	r3, #8
 800032c:	d104      	bne.n	8000338 <setPWM+0x70>
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000336:	e013      	b.n	8000360 <setPWM+0x98>
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	2b0c      	cmp	r3, #12
 800033c:	d104      	bne.n	8000348 <setPWM+0x80>
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	6413      	str	r3, [r2, #64]	@ 0x40
 8000346:	e00b      	b.n	8000360 <setPWM+0x98>
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	2b10      	cmp	r3, #16
 800034c:	d104      	bne.n	8000358 <setPWM+0x90>
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	6493      	str	r3, [r2, #72]	@ 0x48
 8000356:	e003      	b.n	8000360 <setPWM+0x98>
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	693b      	ldr	r3, [r7, #16]
 800035e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    HAL_TIM_PWM_Start(timer_handle, timer_channel); // Start PWM
 8000360:	68b9      	ldr	r1, [r7, #8]
 8000362:	68f8      	ldr	r0, [r7, #12]
 8000364:	f005 fc10 	bl	8005b88 <HAL_TIM_PWM_Start>
}
 8000368:	bf00      	nop
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	437f0000 	.word	0x437f0000

08000374 <setRGB>:
    __HAL_TIM_SET_AUTORELOAD(timer, counter_period);		// Set the ARR value (the counter period)

    setPWM(timer, channel, 128);
}

void setRGB(uint8_t r, uint8_t g, uint8_t b) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
 800037e:	460b      	mov	r3, r1
 8000380:	71bb      	strb	r3, [r7, #6]
 8000382:	4613      	mov	r3, r2
 8000384:	717b      	strb	r3, [r7, #5]
    TIM_HandleTypeDef *htim = &LED_TIMER_HANDLE;
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <setRGB+0x44>)
 8000388:	60fb      	str	r3, [r7, #12]
    setPWM(htim, LED_R_CHANNEL, r);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	461a      	mov	r2, r3
 800038e:	2104      	movs	r1, #4
 8000390:	68f8      	ldr	r0, [r7, #12]
 8000392:	f7ff ff99 	bl	80002c8 <setPWM>
    setPWM(htim, LED_G_CHANNEL, g);
 8000396:	79bb      	ldrb	r3, [r7, #6]
 8000398:	461a      	mov	r2, r3
 800039a:	2108      	movs	r1, #8
 800039c:	68f8      	ldr	r0, [r7, #12]
 800039e:	f7ff ff93 	bl	80002c8 <setPWM>
    setPWM(htim, LED_B_CHANNEL, b);
 80003a2:	797b      	ldrb	r3, [r7, #5]
 80003a4:	461a      	mov	r2, r3
 80003a6:	2100      	movs	r1, #0
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f7ff ff8d 	bl	80002c8 <setPWM>
}
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200001c8 	.word	0x200001c8

080003bc <write_i2c>:
	TIM_HandleTypeDef *htim = &MOTOR_TIMER_HANDLE;
	uint8_t duty = (throttle / 100.0f + 0.01f) * 255;
	setPWM(htim, MOTOR_TIMER_CHANNEL, duty);
}

bool write_i2c(uint16_t addr, uint8_t reg, void const* buf, size_t len, void* context) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08a      	sub	sp, #40	@ 0x28
 80003c0:	af04      	add	r7, sp, #16
 80003c2:	60ba      	str	r2, [r7, #8]
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	4603      	mov	r3, r0
 80003c8:	81fb      	strh	r3, [r7, #14]
 80003ca:	460b      	mov	r3, r1
 80003cc:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 80003ce:	200a      	movs	r0, #10
 80003d0:	f001 f8e2 	bl	8001598 <HAL_Delay>
	printf("Write\n");
 80003d4:	4822      	ldr	r0, [pc, #136]	@ (8000460 <write_i2c+0xa4>)
 80003d6:	f007 fb01 	bl	80079dc <puts>
	//__disable_irq();
	uint8_t status = HAL_I2C_Mem_Write(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 1000);
 80003da:	7b7b      	ldrb	r3, [r7, #13]
 80003dc:	b29a      	uxth	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	89f9      	ldrh	r1, [r7, #14]
 80003e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003e8:	9002      	str	r0, [sp, #8]
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	2301      	movs	r3, #1
 80003f2:	481c      	ldr	r0, [pc, #112]	@ (8000464 <write_i2c+0xa8>)
 80003f4:	f002 fa46 	bl	8002884 <HAL_I2C_Mem_Write>
 80003f8:	4603      	mov	r3, r0
 80003fa:	75fb      	strb	r3, [r7, #23]
	//__enable_irq();
	  if (status == HAL_OK) {
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d117      	bne.n	8000432 <write_i2c+0x76>
		  uint8_t color = rand() % 255;
 8000402:	f007 f983 	bl	800770c <rand>
 8000406:	4602      	mov	r2, r0
 8000408:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <write_i2c+0xac>)
 800040a:	fb83 1302 	smull	r1, r3, r3, r2
 800040e:	4413      	add	r3, r2
 8000410:	11d9      	asrs	r1, r3, #7
 8000412:	17d3      	asrs	r3, r2, #31
 8000414:	1ac9      	subs	r1, r1, r3
 8000416:	460b      	mov	r3, r1
 8000418:	021b      	lsls	r3, r3, #8
 800041a:	1a5b      	subs	r3, r3, r1
 800041c:	1ad1      	subs	r1, r2, r3
 800041e:	460b      	mov	r3, r1
 8000420:	75bb      	strb	r3, [r7, #22]
		  setRGB(0, color, color);
 8000422:	7dba      	ldrb	r2, [r7, #22]
 8000424:	7dbb      	ldrb	r3, [r7, #22]
 8000426:	4619      	mov	r1, r3
 8000428:	2000      	movs	r0, #0
 800042a:	f7ff ffa3 	bl	8000374 <setRGB>
		  return true;
 800042e:	2301      	movs	r3, #1
 8000430:	e011      	b.n	8000456 <write_i2c+0x9a>
	  } else if (status == HAL_ERROR) {
 8000432:	7dfb      	ldrb	r3, [r7, #23]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d105      	bne.n	8000444 <write_i2c+0x88>
		  setRGB(255, 0, 0);
 8000438:	2200      	movs	r2, #0
 800043a:	2100      	movs	r1, #0
 800043c:	20ff      	movs	r0, #255	@ 0xff
 800043e:	f7ff ff99 	bl	8000374 <setRGB>
 8000442:	e007      	b.n	8000454 <write_i2c+0x98>
	  } else if (status == HAL_TIMEOUT) {
 8000444:	7dfb      	ldrb	r3, [r7, #23]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d104      	bne.n	8000454 <write_i2c+0x98>
		  setRGB(0, 0, 255);
 800044a:	22ff      	movs	r2, #255	@ 0xff
 800044c:	2100      	movs	r1, #0
 800044e:	2000      	movs	r0, #0
 8000450:	f7ff ff90 	bl	8000374 <setRGB>
	  }
	  return false;
 8000454:	2300      	movs	r3, #0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	08008678 	.word	0x08008678
 8000464:	20000084 	.word	0x20000084
 8000468:	80808081 	.word	0x80808081

0800046c <read_i2c>:

bool read_i2c(uint16_t addr, uint8_t reg, void* buf, size_t len, void* context) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	@ 0x28
 8000470:	af04      	add	r7, sp, #16
 8000472:	60ba      	str	r2, [r7, #8]
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	4603      	mov	r3, r0
 8000478:	81fb      	strh	r3, [r7, #14]
 800047a:	460b      	mov	r3, r1
 800047c:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 800047e:	200a      	movs	r0, #10
 8000480:	f001 f88a 	bl	8001598 <HAL_Delay>
	printf("Read\n");
 8000484:	4822      	ldr	r0, [pc, #136]	@ (8000510 <read_i2c+0xa4>)
 8000486:	f007 faa9 	bl	80079dc <puts>
	//__disable_irq();
	uint8_t status = HAL_I2C_Mem_Read(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 1000);
 800048a:	7b7b      	ldrb	r3, [r7, #13]
 800048c:	b29a      	uxth	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	b29b      	uxth	r3, r3
 8000492:	89f9      	ldrh	r1, [r7, #14]
 8000494:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000498:	9002      	str	r0, [sp, #8]
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	2301      	movs	r3, #1
 80004a2:	481c      	ldr	r0, [pc, #112]	@ (8000514 <read_i2c+0xa8>)
 80004a4:	f002 fb02 	bl	8002aac <HAL_I2C_Mem_Read>
 80004a8:	4603      	mov	r3, r0
 80004aa:	75fb      	strb	r3, [r7, #23]
	//__enable_irq();
	if (status == HAL_OK) {
 80004ac:	7dfb      	ldrb	r3, [r7, #23]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d117      	bne.n	80004e2 <read_i2c+0x76>
		uint8_t color = rand() % 255;
 80004b2:	f007 f92b 	bl	800770c <rand>
 80004b6:	4602      	mov	r2, r0
 80004b8:	4b17      	ldr	r3, [pc, #92]	@ (8000518 <read_i2c+0xac>)
 80004ba:	fb83 1302 	smull	r1, r3, r3, r2
 80004be:	4413      	add	r3, r2
 80004c0:	11d9      	asrs	r1, r3, #7
 80004c2:	17d3      	asrs	r3, r2, #31
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	460b      	mov	r3, r1
 80004c8:	021b      	lsls	r3, r3, #8
 80004ca:	1a5b      	subs	r3, r3, r1
 80004cc:	1ad1      	subs	r1, r2, r3
 80004ce:	460b      	mov	r3, r1
 80004d0:	75bb      	strb	r3, [r7, #22]
		setRGB(color, 0, color);
 80004d2:	7dba      	ldrb	r2, [r7, #22]
 80004d4:	7dbb      	ldrb	r3, [r7, #22]
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff4b 	bl	8000374 <setRGB>
		return true;
 80004de:	2301      	movs	r3, #1
 80004e0:	e011      	b.n	8000506 <read_i2c+0x9a>
	} else if (status == HAL_ERROR) {
 80004e2:	7dfb      	ldrb	r3, [r7, #23]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d105      	bne.n	80004f4 <read_i2c+0x88>
		setRGB(255, 0, 20);
 80004e8:	2214      	movs	r2, #20
 80004ea:	2100      	movs	r1, #0
 80004ec:	20ff      	movs	r0, #255	@ 0xff
 80004ee:	f7ff ff41 	bl	8000374 <setRGB>
 80004f2:	e007      	b.n	8000504 <read_i2c+0x98>
	} else if (status == HAL_TIMEOUT) {
 80004f4:	7dfb      	ldrb	r3, [r7, #23]
 80004f6:	2b03      	cmp	r3, #3
 80004f8:	d104      	bne.n	8000504 <read_i2c+0x98>
		setRGB(0, 0, 20);
 80004fa:	2214      	movs	r2, #20
 80004fc:	2100      	movs	r1, #0
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff ff38 	bl	8000374 <setRGB>
	}
	return false;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	08008680 	.word	0x08008680
 8000514:	20000084 	.word	0x20000084
 8000518:	80808081 	.word	0x80808081

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08e      	sub	sp, #56	@ 0x38
 8000520:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 ff73 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f8ab 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 fb43 	bl	8000bb4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800052e:	f000 f8f1 	bl	8000714 <MX_GPDMA1_Init>
  MX_TIM1_Init();
 8000532:	f000 f957 	bl	80007e4 <MX_TIM1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000536:	f000 fb0b 	bl	8000b50 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800053a:	f000 fa1b 	bl	8000974 <MX_TIM2_Init>
  MX_I2C2_Init();
 800053e:	f000 f911 	bl	8000764 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000542:	f000 fa8d 	bl	8000a60 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  stusb4500_t device;
  device.addr = 0x28;
 8000546:	2328      	movs	r3, #40	@ 0x28
 8000548:	82bb      	strh	r3, [r7, #20]
  device.write = &write_i2c;
 800054a:	4b47      	ldr	r3, [pc, #284]	@ (8000668 <main+0x14c>)
 800054c:	61bb      	str	r3, [r7, #24]
  device.read = &read_i2c;
 800054e:	4b47      	ldr	r3, [pc, #284]	@ (800066c <main+0x150>)
 8000550:	61fb      	str	r3, [r7, #28]
  device.context = 1000;
 8000552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000556:	623b      	str	r3, [r7, #32]
  stusb4500_gpio_cfg_t gpio_cfg;
  gpio_cfg = STUSB4500_GPIO_CFG_SINK_POWER;
 8000558:	2303      	movs	r3, #3
 800055a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  stusb4500_nvm_config_t config;
  config.pdo1_current_ma = 500;
 800055e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000562:	80bb      	strh	r3, [r7, #4]
  config.pdo2_voltage_mv = 1500;
 8000564:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000568:	80fb      	strh	r3, [r7, #6]
  config.pdo2_current_ma = 3000;
 800056a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800056e:	813b      	strh	r3, [r7, #8]
  config.pdo3_voltage_mv = 12000;
 8000570:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000574:	817b      	strh	r3, [r7, #10]
  config.pdo3_current_ma = 3000;
 8000576:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800057a:	81bb      	strh	r3, [r7, #12]
  config.num_valid_pdos = 3;
 800057c:	2303      	movs	r3, #3
 800057e:	743b      	strb	r3, [r7, #16]
  config.pdo_current_fallback = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	81fb      	strh	r3, [r7, #14]
  config.use_src_current = false;
 8000584:	2300      	movs	r3, #0
 8000586:	747b      	strb	r3, [r7, #17]
  config.only_above_5v = false;
 8000588:	2300      	movs	r3, #0
 800058a:	74bb      	strb	r3, [r7, #18]
  config.gpio_cfg = gpio_cfg;
 800058c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000590:	74fb      	strb	r3, [r7, #19]
  setRGB(0, 0, 255);
 8000592:	22ff      	movs	r2, #255	@ 0xff
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff feec 	bl	8000374 <setRGB>
  HAL_Delay(1000);
 800059c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a0:	f000 fffa 	bl	8001598 <HAL_Delay>
  setRGB(0, 0, 0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2100      	movs	r1, #0
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff fee3 	bl	8000374 <setRGB>
  HAL_Delay(1000);
 80005ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b2:	f000 fff1 	bl	8001598 <HAL_Delay>
  setRGB(0, 0, 255);
 80005b6:	22ff      	movs	r2, #255	@ 0xff
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f7ff feda 	bl	8000374 <setRGB>

  //bool success = stusb4500_nvm_flash(&device, &config);
  printf("Begin\n");
 80005c0:	482b      	ldr	r0, [pc, #172]	@ (8000670 <main+0x154>)
 80005c2:	f007 fa0b 	bl	80079dc <puts>
  //bool success = stusb4500_set_gpio_state(&device, true);
  //uint8_t nvm_buf = 10;
  //bool success = stusb4500_nvm_read(&device, &nvm_buf);
  uint8_t buf;
  uint8_t status = HAL_I2C_Mem_Read(&hi2c2, 0x28, 0x2FUL, I2C_MEMADD_SIZE_8BIT, &buf, 1, 1000);
 80005c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ca:	9302      	str	r3, [sp, #8]
 80005cc:	2301      	movs	r3, #1
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	1cfb      	adds	r3, r7, #3
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	222f      	movs	r2, #47	@ 0x2f
 80005d8:	2128      	movs	r1, #40	@ 0x28
 80005da:	4826      	ldr	r0, [pc, #152]	@ (8000674 <main+0x158>)
 80005dc:	f002 fa66 	bl	8002aac <HAL_I2C_Mem_Read>
 80005e0:	4603      	mov	r3, r0
 80005e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  printf("%lu", HAL_I2C_GetError(&hi2c2));
 80005e6:	4823      	ldr	r0, [pc, #140]	@ (8000674 <main+0x158>)
 80005e8:	f002 fb94 	bl	8002d14 <HAL_I2C_GetError>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4619      	mov	r1, r3
 80005f0:	4821      	ldr	r0, [pc, #132]	@ (8000678 <main+0x15c>)
 80005f2:	f007 f98b 	bl	800790c <iprintf>
  	//__enable_irq();
  	if (status == HAL_OK) {
 80005f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d11a      	bne.n	8000634 <main+0x118>
  		uint8_t color = rand() % 255;
 80005fe:	f007 f885 	bl	800770c <rand>
 8000602:	4602      	mov	r2, r0
 8000604:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <main+0x160>)
 8000606:	fb83 1302 	smull	r1, r3, r3, r2
 800060a:	4413      	add	r3, r2
 800060c:	11d9      	asrs	r1, r3, #7
 800060e:	17d3      	asrs	r3, r2, #31
 8000610:	1ac9      	subs	r1, r1, r3
 8000612:	460b      	mov	r3, r1
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	1a5b      	subs	r3, r3, r1
 8000618:	1ad1      	subs	r1, r2, r3
 800061a:	460b      	mov	r3, r1
 800061c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  		setRGB(color, 0, color);
 8000620:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000624:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fea2 	bl	8000374 <setRGB>
  		return true;
 8000630:	2301      	movs	r3, #1
 8000632:	e015      	b.n	8000660 <main+0x144>
  	} else if (status == HAL_ERROR) {
 8000634:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000638:	2b01      	cmp	r3, #1
 800063a:	d105      	bne.n	8000648 <main+0x12c>
  		setRGB(255, 0, 20);
 800063c:	2214      	movs	r2, #20
 800063e:	2100      	movs	r1, #0
 8000640:	20ff      	movs	r0, #255	@ 0xff
 8000642:	f7ff fe97 	bl	8000374 <setRGB>
 8000646:	e009      	b.n	800065c <main+0x140>
  	} else if (status == HAL_TIMEOUT) {
 8000648:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800064c:	2b03      	cmp	r3, #3
 800064e:	d105      	bne.n	800065c <main+0x140>
  		setRGB(0, 0, 20);
 8000650:	2214      	movs	r2, #20
 8000652:	2100      	movs	r1, #0
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff fe8d 	bl	8000374 <setRGB>
  }*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <main+0x140>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000660:	4618      	mov	r0, r3
 8000662:	3728      	adds	r7, #40	@ 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	080003bd 	.word	0x080003bd
 800066c:	0800046d 	.word	0x0800046d
 8000670:	08008688 	.word	0x08008688
 8000674:	20000084 	.word	0x20000084
 8000678:	08008690 	.word	0x08008690
 800067c:	80808081 	.word	0x80808081

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09e      	sub	sp, #120	@ 0x78
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2260      	movs	r2, #96	@ 0x60
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f007 fa84 	bl	8007b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
 80006a2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 80006a4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80006a8:	f002 ffd6 	bl	8003658 <HAL_PWREx_ControlVoltageScaling>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80006b2:	f000 fad3 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006b6:	2321      	movs	r3, #33	@ 0x21
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 f85e 	bl	8003790 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006da:	f000 fabf 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	231f      	movs	r3, #31
 80006e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006e2:	2302      	movs	r3, #2
 80006e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 ff24 	bl	8004548 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000706:	f000 faa9 	bl	8000c5c <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3778      	adds	r7, #120	@ 0x78
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_GPDMA1_Init+0x4c>)
 800071c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000720:	4a0f      	ldr	r2, [pc, #60]	@ (8000760 <MX_GPDMA1_Init+0x4c>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <MX_GPDMA1_Init+0x4c>)
 800072c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	2021      	movs	r0, #33	@ 0x21
 800073e:	f001 f807 	bl	8001750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 8000742:	2021      	movs	r0, #33	@ 0x21
 8000744:	f001 f81e 	bl	8001784 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2022      	movs	r0, #34	@ 0x22
 800074e:	f000 ffff 	bl	8001750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 8000752:	2022      	movs	r0, #34	@ 0x22
 8000754:	f001 f816 	bl	8001784 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	46020c00 	.word	0x46020c00

08000764 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_I2C2_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	@ (80007dc <MX_I2C2_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_I2C2_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	@ (80007e0 <MX_I2C2_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 80;
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_I2C2_Init+0x74>)
 8000776:	2250      	movs	r2, #80	@ 0x50
 8000778:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_I2C2_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_I2C2_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_I2C2_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_I2C2_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_I2C2_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_I2C2_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	@ (80007d8 <MX_I2C2_Init+0x74>)
 80007a0:	f001 ffd4 	bl	800274c <HAL_I2C_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007aa:	f000 fa57 	bl	8000c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <MX_I2C2_Init+0x74>)
 80007b2:	f002 fd7d 	bl	80032b0 <HAL_I2CEx_ConfigAnalogFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007bc:	f000 fa4e 	bl	8000c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_I2C2_Init+0x74>)
 80007c4:	f002 fdbf 	bl	8003346 <HAL_I2CEx_ConfigDigitalFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 fa45 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000084 	.word	0x20000084
 80007dc:	40005800 	.word	0x40005800
 80007e0:	00303d5b 	.word	0x00303d5b

080007e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	@ 0x70
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000804:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2234      	movs	r2, #52	@ 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f007 f9bc 	bl	8007b9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000824:	4b51      	ldr	r3, [pc, #324]	@ (800096c <MX_TIM1_Init+0x188>)
 8000826:	4a52      	ldr	r2, [pc, #328]	@ (8000970 <MX_TIM1_Init+0x18c>)
 8000828:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800082a:	4b50      	ldr	r3, [pc, #320]	@ (800096c <MX_TIM1_Init+0x188>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b4e      	ldr	r3, [pc, #312]	@ (800096c <MX_TIM1_Init+0x188>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000836:	4b4d      	ldr	r3, [pc, #308]	@ (800096c <MX_TIM1_Init+0x188>)
 8000838:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800083c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b4b      	ldr	r3, [pc, #300]	@ (800096c <MX_TIM1_Init+0x188>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000844:	4b49      	ldr	r3, [pc, #292]	@ (800096c <MX_TIM1_Init+0x188>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084a:	4b48      	ldr	r3, [pc, #288]	@ (800096c <MX_TIM1_Init+0x188>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000850:	4846      	ldr	r0, [pc, #280]	@ (800096c <MX_TIM1_Init+0x188>)
 8000852:	f005 f8e1 	bl	8005a18 <HAL_TIM_Base_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800085c:	f000 f9fe 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000864:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000866:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800086a:	4619      	mov	r1, r3
 800086c:	483f      	ldr	r0, [pc, #252]	@ (800096c <MX_TIM1_Init+0x188>)
 800086e:	f005 fbf1 	bl	8006054 <HAL_TIM_ConfigClockSource>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000878:	f000 f9f0 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800087c:	483b      	ldr	r0, [pc, #236]	@ (800096c <MX_TIM1_Init+0x188>)
 800087e:	f005 f922 	bl	8005ac6 <HAL_TIM_PWM_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000888:	f000 f9e8 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000898:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800089c:	4619      	mov	r1, r3
 800089e:	4833      	ldr	r0, [pc, #204]	@ (800096c <MX_TIM1_Init+0x188>)
 80008a0:	f006 fa72 	bl	8006d88 <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008aa:	f000 f9d7 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ae:	2360      	movs	r3, #96	@ 0x60
 80008b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b6:	2300      	movs	r3, #0
 80008b8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ba:	2300      	movs	r3, #0
 80008bc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	4826      	ldr	r0, [pc, #152]	@ (800096c <MX_TIM1_Init+0x188>)
 80008d4:	f005 faaa 	bl	8005e2c <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80008de:	f000 f9bd 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008e6:	2204      	movs	r2, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4820      	ldr	r0, [pc, #128]	@ (800096c <MX_TIM1_Init+0x188>)
 80008ec:	f005 fa9e 	bl	8005e2c <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80008f6:	f000 f9b1 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008fe:	2208      	movs	r2, #8
 8000900:	4619      	mov	r1, r3
 8000902:	481a      	ldr	r0, [pc, #104]	@ (800096c <MX_TIM1_Init+0x188>)
 8000904:	f005 fa92 	bl	8005e2c <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800090e:	f000 f9a5 	bl	8000c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000926:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000938:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	@ (800096c <MX_TIM1_Init+0x188>)
 8000950:	f006 fadc 	bl	8006f0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800095a:	f000 f97f 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800095e:	4803      	ldr	r0, [pc, #12]	@ (800096c <MX_TIM1_Init+0x188>)
 8000960:	f000 fae6 	bl	8000f30 <HAL_TIM_MspPostInit>

}
 8000964:	bf00      	nop
 8000966:	3770      	adds	r7, #112	@ 0x70
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200001c8 	.word	0x200001c8
 8000970:	40012c00 	.word	0x40012c00

08000974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	@ 0x38
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ae:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009ba:	4b28      	ldr	r3, [pc, #160]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b24      	ldr	r3, [pc, #144]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ce:	4823      	ldr	r0, [pc, #140]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009d0:	f005 f822 	bl	8005a18 <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009da:	f000 f93f 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e8:	4619      	mov	r1, r3
 80009ea:	481c      	ldr	r0, [pc, #112]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009ec:	f005 fb32 	bl	8006054 <HAL_TIM_ConfigClockSource>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80009f6:	f000 f931 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009fa:	4818      	ldr	r0, [pc, #96]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009fc:	f005 f863 	bl	8005ac6 <HAL_TIM_PWM_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a06:	f000 f929 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4810      	ldr	r0, [pc, #64]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 8000a1a:	f006 f9b5 	bl	8006d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a24:	f000 f91a 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a28:	2360      	movs	r3, #96	@ 0x60
 8000a2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 8000a40:	f005 f9f4 	bl	8005e2c <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a4a:	f000 f907 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a4e:	4803      	ldr	r0, [pc, #12]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 8000a50:	f000 fa6e 	bl	8000f30 <HAL_TIM_MspPostInit>

}
 8000a54:	bf00      	nop
 8000a56:	3738      	adds	r7, #56	@ 0x38
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000214 	.word	0x20000214

08000a60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	@ 0x38
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a92:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000a94:	4a2d      	ldr	r2, [pc, #180]	@ (8000b4c <MX_TIM3_Init+0xec>)
 8000a96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4294967295;
 8000aa4:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8000aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ab8:	4823      	ldr	r0, [pc, #140]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000aba:	f004 ffad 	bl	8005a18 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ac4:	f000 f8ca 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ace:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481c      	ldr	r0, [pc, #112]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000ad6:	f005 fabd 	bl	8006054 <HAL_TIM_ConfigClockSource>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ae0:	f000 f8bc 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ae4:	4818      	ldr	r0, [pc, #96]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000ae6:	f004 ffee 	bl	8005ac6 <HAL_TIM_PWM_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000af0:	f000 f8b4 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4811      	ldr	r0, [pc, #68]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000b04:	f006 f940 	bl	8006d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b0e:	f000 f8a5 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b12:	2360      	movs	r3, #96	@ 0x60
 8000b14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b22:	463b      	mov	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	4619      	mov	r1, r3
 8000b28:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000b2a:	f005 f97f 	bl	8005e2c <HAL_TIM_PWM_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000b34:	f000 f892 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b38:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000b3a:	f000 f9f9 	bl	8000f30 <HAL_TIM_MspPostInit>

}
 8000b3e:	bf00      	nop
 8000b40:	3738      	adds	r7, #56	@ 0x38
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000260 	.word	0x20000260
 8000b4c:	40000400 	.word	0x40000400

08000b50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b54:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b56:	4a16      	ldr	r2, [pc, #88]	@ (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5c:	2206      	movs	r2, #6
 8000b5e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b68:	2202      	movs	r2, #2
 8000b6a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b84:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b98:	f002 fc22 	bl	80033e0 <HAL_PCD_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ba2:	f000 f85b 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200002ac 	.word	0x200002ac
 8000bb0:	42040000 	.word	0x42040000

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc0:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bde:	4a10      	ldr	r2, [pc, #64]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000be8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bfc:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c0c:	f003 0302 	and.w	r3, r3, #2
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	46020c00 	.word	0x46020c00

08000c24 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	e009      	b.n	8000c4a <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	60ba      	str	r2, [r7, #8]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fb1a 	bl	8000278 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dbf1      	blt.n	8000c36 <_write+0x12>
  }
  return len;
 8000c52:	687b      	ldr	r3, [r7, #4]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_MspInit+0x30>)
 8000c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c74:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_MspInit+0x30>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_MspInit+0x30>)
 8000c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000c8c:	f002 fd70 	bl	8003770 <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	46020c00 	.word	0x46020c00

08000c9c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0ba      	sub	sp, #232	@ 0xe8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	22c0      	movs	r2, #192	@ 0xc0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f006 ff6d 	bl	8007b9c <memset>
  if(hi2c->Instance==I2C2)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a6c      	ldr	r2, [pc, #432]	@ (8000e78 <HAL_I2C_MspInit+0x1dc>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	f040 80d1 	bne.w	8000e70 <HAL_I2C_MspInit+0x1d4>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cce:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000cd2:	f04f 0300 	mov.w	r3, #0
 8000cd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 ffc4 	bl	8004c70 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000cee:	f7ff ffb5 	bl	8000c5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b62      	ldr	r3, [pc, #392]	@ (8000e7c <HAL_I2C_MspInit+0x1e0>)
 8000cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf8:	4a60      	ldr	r2, [pc, #384]	@ (8000e7c <HAL_I2C_MspInit+0x1e0>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d02:	4b5e      	ldr	r3, [pc, #376]	@ (8000e7c <HAL_I2C_MspInit+0x1e0>)
 8000d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000d10:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d18:	2312      	movs	r3, #18
 8000d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4852      	ldr	r0, [pc, #328]	@ (8000e80 <HAL_I2C_MspInit+0x1e4>)
 8000d38:	f001 fb30 	bl	800239c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8000e7c <HAL_I2C_MspInit+0x1e0>)
 8000d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d42:	4a4e      	ldr	r2, [pc, #312]	@ (8000e7c <HAL_I2C_MspInit+0x1e0>)
 8000d44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d48:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8000e7c <HAL_I2C_MspInit+0x1e0>)
 8000d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* GPDMA1_REQUEST_I2C2_TX Init */
    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 8000d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000d5c:	4a4a      	ldr	r2, [pc, #296]	@ (8000e88 <HAL_I2C_MspInit+0x1ec>)
 8000d5e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.Init.Request = GPDMA1_REQUEST_I2C2_TX;
 8000d60:	4b48      	ldr	r3, [pc, #288]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000d62:	2210      	movs	r2, #16
 8000d64:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel5.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000d66:	4b47      	ldr	r3, [pc, #284]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel5.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d6c:	4b45      	ldr	r3, [pc, #276]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000d6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d72:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel5.Init.SrcInc = DMA_SINC_FIXED;
 8000d74:	4b43      	ldr	r3, [pc, #268]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel5.Init.DestInc = DMA_DINC_FIXED;
 8000d7a:	4b42      	ldr	r3, [pc, #264]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel5.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000d80:	4b40      	ldr	r3, [pc, #256]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel5.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000d86:	4b3f      	ldr	r3, [pc, #252]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel5.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel5.Init.SrcBurstLength = 1;
 8000d92:	4b3c      	ldr	r3, [pc, #240]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel5.Init.DestBurstLength = 1;
 8000d98:	4b3a      	ldr	r3, [pc, #232]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel5.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000d9e:	4b39      	ldr	r3, [pc, #228]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel5.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000da4:	4b37      	ldr	r3, [pc, #220]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel5.Init.Mode = DMA_NORMAL;
 8000daa:	4b36      	ldr	r3, [pc, #216]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 8000db0:	4834      	ldr	r0, [pc, #208]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000db2:	f000 fda9 	bl	8001908 <HAL_DMA_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_I2C_MspInit+0x124>
    {
      Error_Handler();
 8000dbc:	f7ff ff4e 	bl	8000c5c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c, hdmatx, handle_GPDMA1_Channel5);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a30      	ldr	r2, [pc, #192]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000dc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000dcc:	2110      	movs	r1, #16
 8000dce:	482d      	ldr	r0, [pc, #180]	@ (8000e84 <HAL_I2C_MspInit+0x1e8>)
 8000dd0:	f001 f827 	bl	8001e22 <HAL_DMA_ConfigChannelAttributes>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_I2C_MspInit+0x142>
    {
      Error_Handler();
 8000dda:	f7ff ff3f 	bl	8000c5c <Error_Handler>
    }

    /* GPDMA1_REQUEST_I2C2_RX Init */
    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 8000dde:	4b2b      	ldr	r3, [pc, #172]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000de0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e90 <HAL_I2C_MspInit+0x1f4>)
 8000de2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.Init.Request = GPDMA1_REQUEST_I2C2_RX;
 8000de4:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000de6:	220f      	movs	r2, #15
 8000de8:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel4.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000dea:	4b28      	ldr	r3, [pc, #160]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df0:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel4.Init.SrcInc = DMA_SINC_FIXED;
 8000df6:	4b25      	ldr	r3, [pc, #148]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel4.Init.DestInc = DMA_DINC_FIXED;
 8000dfc:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel4.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000e02:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel4.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000e08:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel4.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel4.Init.SrcBurstLength = 1;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel4.Init.DestBurstLength = 1;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel4.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel4.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel4.Init.Mode = DMA_NORMAL;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 8000e32:	4816      	ldr	r0, [pc, #88]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000e34:	f000 fd68 	bl	8001908 <HAL_DMA_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_I2C_MspInit+0x1a6>
    {
      Error_Handler();
 8000e3e:	f7ff ff0d 	bl	8000c5c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c, hdmarx, handle_GPDMA1_Channel4);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a11      	ldr	r2, [pc, #68]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000e46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e48:	4a10      	ldr	r2, [pc, #64]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e4e:	2110      	movs	r1, #16
 8000e50:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <HAL_I2C_MspInit+0x1f0>)
 8000e52:	f000 ffe6 	bl	8001e22 <HAL_DMA_ConfigChannelAttributes>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_I2C_MspInit+0x1c4>
    {
      Error_Handler();
 8000e5c:	f7ff fefe 	bl	8000c5c <Error_Handler>
    }

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2039      	movs	r0, #57	@ 0x39
 8000e66:	f000 fc73 	bl	8001750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000e6a:	2039      	movs	r0, #57	@ 0x39
 8000e6c:	f000 fc8a 	bl	8001784 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000e70:	bf00      	nop
 8000e72:	37e8      	adds	r7, #232	@ 0xe8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40005800 	.word	0x40005800
 8000e7c:	46020c00 	.word	0x46020c00
 8000e80:	42020400 	.word	0x42020400
 8000e84:	200000d8 	.word	0x200000d8
 8000e88:	400202d0 	.word	0x400202d0
 8000e8c:	20000150 	.word	0x20000150
 8000e90:	40020250 	.word	0x40020250

08000e94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a20      	ldr	r2, [pc, #128]	@ (8000f24 <HAL_TIM_Base_MspInit+0x90>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10f      	bne.n	8000ec6 <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea6:	4b20      	ldr	r3, [pc, #128]	@ (8000f28 <HAL_TIM_Base_MspInit+0x94>)
 8000ea8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000eac:	4a1e      	ldr	r2, [pc, #120]	@ (8000f28 <HAL_TIM_Base_MspInit+0x94>)
 8000eae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000eb2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <HAL_TIM_Base_MspInit+0x94>)
 8000eb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ec4:	e028      	b.n	8000f18 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ece:	d10f      	bne.n	8000ef0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <HAL_TIM_Base_MspInit+0x94>)
 8000ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ed6:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <HAL_TIM_Base_MspInit+0x94>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <HAL_TIM_Base_MspInit+0x94>)
 8000ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
}
 8000eee:	e013      	b.n	8000f18 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f2c <HAL_TIM_Base_MspInit+0x98>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10e      	bne.n	8000f18 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000efa:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <HAL_TIM_Base_MspInit+0x94>)
 8000efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f00:	4a09      	ldr	r2, [pc, #36]	@ (8000f28 <HAL_TIM_Base_MspInit+0x94>)
 8000f02:	f043 0302 	orr.w	r3, r3, #2
 8000f06:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <HAL_TIM_Base_MspInit+0x94>)
 8000f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	371c      	adds	r7, #28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	40012c00 	.word	0x40012c00
 8000f28:	46020c00 	.word	0x46020c00
 8000f2c:	40000400 	.word	0x40000400

08000f30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	@ 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a38      	ldr	r2, [pc, #224]	@ (8001030 <HAL_TIM_MspPostInit+0x100>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d120      	bne.n	8000f94 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b38      	ldr	r3, [pc, #224]	@ (8001034 <HAL_TIM_MspPostInit+0x104>)
 8000f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f58:	4a36      	ldr	r2, [pc, #216]	@ (8001034 <HAL_TIM_MspPostInit+0x104>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f62:	4b34      	ldr	r3, [pc, #208]	@ (8001034 <HAL_TIM_MspPostInit+0x104>)
 8000f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f70:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482a      	ldr	r0, [pc, #168]	@ (8001038 <HAL_TIM_MspPostInit+0x108>)
 8000f8e:	f001 fa05 	bl	800239c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f92:	e048      	b.n	8001026 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f9c:	d11f      	bne.n	8000fde <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <HAL_TIM_MspPostInit+0x104>)
 8000fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa4:	4a23      	ldr	r2, [pc, #140]	@ (8001034 <HAL_TIM_MspPostInit+0x104>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fae:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <HAL_TIM_MspPostInit+0x104>)
 8000fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4818      	ldr	r0, [pc, #96]	@ (8001038 <HAL_TIM_MspPostInit+0x108>)
 8000fd8:	f001 f9e0 	bl	800239c <HAL_GPIO_Init>
}
 8000fdc:	e023      	b.n	8001026 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a16      	ldr	r2, [pc, #88]	@ (800103c <HAL_TIM_MspPostInit+0x10c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d11e      	bne.n	8001026 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_TIM_MspPostInit+0x104>)
 8000fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fee:	4a11      	ldr	r2, [pc, #68]	@ (8001034 <HAL_TIM_MspPostInit+0x104>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <HAL_TIM_MspPostInit+0x104>)
 8000ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001006:	2340      	movs	r3, #64	@ 0x40
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001016:	2302      	movs	r3, #2
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	@ (8001038 <HAL_TIM_MspPostInit+0x108>)
 8001022:	f001 f9bb 	bl	800239c <HAL_GPIO_Init>
}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	@ 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40012c00 	.word	0x40012c00
 8001034:	46020c00 	.word	0x46020c00
 8001038:	42020000 	.word	0x42020000
 800103c:	40000400 	.word	0x40000400

08001040 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0bc      	sub	sp, #240	@ 0xf0
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	22c0      	movs	r2, #192	@ 0xc0
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f006 fd9b 	bl	8007b9c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a38      	ldr	r2, [pc, #224]	@ (800114c <HAL_PCD_MspInit+0x10c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d169      	bne.n	8001144 <HAL_PCD_MspInit+0x104>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001070:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	4618      	mov	r0, r3
 8001088:	f003 fdf2 	bl	8004c70 <HAL_RCCEx_PeriphCLKConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001092:	f7ff fde3 	bl	8000c5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b2e      	ldr	r3, [pc, #184]	@ (8001150 <HAL_PCD_MspInit+0x110>)
 8001098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800109c:	4a2c      	ldr	r2, [pc, #176]	@ (8001150 <HAL_PCD_MspInit+0x110>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <HAL_PCD_MspInit+0x110>)
 80010a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010b4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80010ce:	230a      	movs	r3, #10
 80010d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010d8:	4619      	mov	r1, r3
 80010da:	481e      	ldr	r0, [pc, #120]	@ (8001154 <HAL_PCD_MspInit+0x114>)
 80010dc:	f001 f95e 	bl	800239c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <HAL_PCD_MspInit+0x110>)
 80010e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001150 <HAL_PCD_MspInit+0x110>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010f0:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <HAL_PCD_MspInit+0x110>)
 80010f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_PCD_MspInit+0x110>)
 8001100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b00      	cmp	r3, #0
 800110a:	d119      	bne.n	8001140 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <HAL_PCD_MspInit+0x110>)
 800110e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001112:	4a0f      	ldr	r2, [pc, #60]	@ (8001150 <HAL_PCD_MspInit+0x110>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <HAL_PCD_MspInit+0x110>)
 800111e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800112a:	f002 fb21 	bl	8003770 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_PCD_MspInit+0x110>)
 8001130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001134:	4a06      	ldr	r2, [pc, #24]	@ (8001150 <HAL_PCD_MspInit+0x110>)
 8001136:	f023 0304 	bic.w	r3, r3, #4
 800113a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800113e:	e001      	b.n	8001144 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001140:	f002 fb16 	bl	8003770 <HAL_PWREx_EnableVddUSB>
}
 8001144:	bf00      	nop
 8001146:	37f0      	adds	r7, #240	@ 0xf0
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	42040000 	.word	0x42040000
 8001150:	46020c00 	.word	0x46020c00
 8001154:	42020000 	.word	0x42020000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <NMI_Handler+0x4>

08001160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <MemManage_Handler+0x4>

08001170 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <UsageFault_Handler+0x4>

08001180 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ae:	f000 f9d3 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 80011bc:	4802      	ldr	r0, [pc, #8]	@ (80011c8 <GPDMA1_Channel4_IRQHandler+0x10>)
 80011be:	f000 fccf 	bl	8001b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000150 	.word	0x20000150

080011cc <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <GPDMA1_Channel5_IRQHandler+0x10>)
 80011d2:	f000 fcc5 	bl	8001b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000d8 	.word	0x200000d8

080011e0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80011e4:	4802      	ldr	r0, [pc, #8]	@ (80011f0 <I2C2_EV_IRQHandler+0x10>)
 80011e6:	f001 fd7b 	bl	8002ce0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000084 	.word	0x20000084

080011f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return 1;
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_kill>:

int _kill(int pid, int sig)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800120e:	f006 fd23 	bl	8007c58 <__errno>
 8001212:	4603      	mov	r3, r0
 8001214:	2216      	movs	r2, #22
 8001216:	601a      	str	r2, [r3, #0]
  return -1;
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_exit>:

void _exit (int status)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ffe7 	bl	8001204 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001236:	bf00      	nop
 8001238:	e7fd      	b.n	8001236 <_exit+0x12>

0800123a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e00a      	b.n	8001262 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800124c:	f3af 8000 	nop.w
 8001250:	4601      	mov	r1, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	60ba      	str	r2, [r7, #8]
 8001258:	b2ca      	uxtb	r2, r1
 800125a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	429a      	cmp	r2, r3
 8001268:	dbf0      	blt.n	800124c <_read+0x12>
  }

  return len;
 800126a:	687b      	ldr	r3, [r7, #4]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800129c:	605a      	str	r2, [r3, #4]
  return 0;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <_isatty>:

int _isatty(int file)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b4:	2301      	movs	r3, #1
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f006 fca4 	bl	8007c58 <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200c0000 	.word	0x200c0000
 800133c:	00000400 	.word	0x00000400
 8001340:	20000790 	.word	0x20000790
 8001344:	200008e8 	.word	0x200008e8

08001348 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800134c:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <SystemInit+0x68>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001352:	4a17      	ldr	r2, [pc, #92]	@ (80013b0 <SystemInit+0x68>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <SystemInit+0x6c>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001362:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <SystemInit+0x6c>)
 8001364:	2200      	movs	r2, #0
 8001366:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <SystemInit+0x6c>)
 800136a:	2200      	movs	r2, #0
 800136c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <SystemInit+0x6c>)
 8001370:	2200      	movs	r2, #0
 8001372:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <SystemInit+0x6c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0e      	ldr	r2, [pc, #56]	@ (80013b4 <SystemInit+0x6c>)
 800137a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800137e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001382:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <SystemInit+0x6c>)
 8001386:	2200      	movs	r2, #0
 8001388:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <SystemInit+0x6c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a09      	ldr	r2, [pc, #36]	@ (80013b4 <SystemInit+0x6c>)
 8001390:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001394:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <SystemInit+0x6c>)
 8001398:	2200      	movs	r2, #0
 800139a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <SystemInit+0x68>)
 800139e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013a2:	609a      	str	r2, [r3, #8]
  #endif
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00
 80013b4:	46020c00 	.word	0x46020c00

080013b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013f0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013bc:	f7ff ffc4 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013c2:	e003      	b.n	80013cc <LoopCopyDataInit>

080013c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013c4:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013ca:	3104      	adds	r1, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013cc:	480a      	ldr	r0, [pc, #40]	@ (80013f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80013d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013d4:	d3f6      	bcc.n	80013c4 <CopyDataInit>
	ldr	r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013d8:	e002      	b.n	80013e0 <LoopFillZerobss>

080013da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013dc:	f842 3b04 	str.w	r3, [r2], #4

080013e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <LoopForever+0x16>)
	cmp	r2, r3
 80013e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013e4:	d3f9      	bcc.n	80013da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e6:	f006 fc3d 	bl	8007c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ea:	f7ff f897 	bl	800051c <main>

080013ee <LoopForever>:

LoopForever:
    b LoopForever
 80013ee:	e7fe      	b.n	80013ee <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80013f0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80013f4:	0800884c 	.word	0x0800884c
	ldr	r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013fc:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001400:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001404:	200008e2 	.word	0x200008e2

08001408 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC1_IRQHandler>
	...

0800140c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_Init+0x50>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a11      	ldr	r2, [pc, #68]	@ (800145c <HAL_Init+0x50>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f98c 	bl	800173a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001422:	f003 fa83 	bl	800492c <HAL_RCC_GetSysClockFreq>
 8001426:	4602      	mov	r2, r0
 8001428:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <HAL_Init+0x54>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	490c      	ldr	r1, [pc, #48]	@ (8001464 <HAL_Init+0x58>)
 8001432:	5ccb      	ldrb	r3, [r1, r3]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
 8001438:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <HAL_Init+0x5c>)
 800143a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800143c:	2004      	movs	r0, #4
 800143e:	f000 f9d1 	bl	80017e4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001442:	200f      	movs	r0, #15
 8001444:	f000 f812 	bl	800146c <HAL_InitTick>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e002      	b.n	8001458 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001452:	f7ff fc09 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40022000 	.word	0x40022000
 8001460:	46020c00 	.word	0x46020c00
 8001464:	08008694 	.word	0x08008694
 8001468:	20000000 	.word	0x20000000

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001478:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <HAL_InitTick+0xdc>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e05c      	b.n	800153e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001484:	4b31      	ldr	r3, [pc, #196]	@ (800154c <HAL_InitTick+0xe0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b04      	cmp	r3, #4
 800148e:	d10c      	bne.n	80014aa <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001490:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <HAL_InitTick+0xe4>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b2c      	ldr	r3, [pc, #176]	@ (8001548 <HAL_InitTick+0xdc>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	e037      	b.n	800151a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80014aa:	f000 f9f3 	bl	8001894 <HAL_SYSTICK_GetCLKSourceConfig>
 80014ae:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d023      	beq.n	80014fe <HAL_InitTick+0x92>
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d82d      	bhi.n	8001518 <HAL_InitTick+0xac>
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_InitTick+0x5e>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d00d      	beq.n	80014e4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80014c8:	e026      	b.n	8001518 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80014ca:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <HAL_InitTick+0xe4>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <HAL_InitTick+0xdc>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4619      	mov	r1, r3
 80014d4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80014d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80014dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e0:	60fb      	str	r3, [r7, #12]
        break;
 80014e2:	e01a      	b.n	800151a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_InitTick+0xdc>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80014f2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	60fb      	str	r3, [r7, #12]
        break;
 80014fc:	e00d      	b.n	800151a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80014fe:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0xdc>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001508:	fbb3 f3f2 	udiv	r3, r3, r2
 800150c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	60fb      	str	r3, [r7, #12]
        break;
 8001516:	e000      	b.n	800151a <HAL_InitTick+0xae>
        break;
 8001518:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 f940 	bl	80017a0 <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e009      	b.n	800153e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152a:	2200      	movs	r2, #0
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	f04f 30ff 	mov.w	r0, #4294967295
 8001532:	f000 f90d 	bl	8001750 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001536:	4a07      	ldr	r2, [pc, #28]	@ (8001554 <HAL_InitTick+0xe8>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008
 800154c:	e000e010 	.word	0xe000e010
 8001550:	20000000 	.word	0x20000000
 8001554:	20000004 	.word	0x20000004

08001558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	@ (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008
 800157c:	20000794 	.word	0x20000794

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000794 	.word	0x20000794

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff ffee 	bl	8001580 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffde 	bl	8001580 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008

080015e0 <__NVIC_SetPriorityGrouping>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	@ (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	@ (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	@ (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	@ 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	@ 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff4c 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800175e:	f7ff ff63 	bl	8001628 <__NVIC_GetPriorityGrouping>
 8001762:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	68b9      	ldr	r1, [r7, #8]
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	f7ff ffb3 	bl	80016d4 <NVIC_EncodePriority>
 800176e:	4602      	mov	r2, r0
 8001770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff82 	bl	8001680 <__NVIC_SetPriority>
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff56 	bl	8001644 <__NVIC_EnableIRQ>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00d      	b.n	80017d2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <HAL_SYSTICK_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <HAL_SYSTICK_Config+0x40>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_SYSTICK_Config+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <HAL_SYSTICK_Config+0x40>)
 80017ca:	f043 0303 	orr.w	r3, r3, #3
 80017ce:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d844      	bhi.n	800187c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80017f2:	a201      	add	r2, pc, #4	@ (adr r2, 80017f8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	0800181b 	.word	0x0800181b
 80017fc:	08001839 	.word	0x08001839
 8001800:	0800185b 	.word	0x0800185b
 8001804:	0800187d 	.word	0x0800187d
 8001808:	0800180d 	.word	0x0800180d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800180c:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1e      	ldr	r2, [pc, #120]	@ (800188c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6013      	str	r3, [r2, #0]
      break;
 8001818:	e031      	b.n	800187e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800181a:	4b1c      	ldr	r3, [pc, #112]	@ (800188c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1b      	ldr	r2, [pc, #108]	@ (800188c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001820:	f023 0304 	bic.w	r3, r3, #4
 8001824:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001826:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182c:	4a18      	ldr	r2, [pc, #96]	@ (8001890 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800182e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001832:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001836:	e022      	b.n	800187e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001838:	4b14      	ldr	r3, [pc, #80]	@ (800188c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a13      	ldr	r2, [pc, #76]	@ (800188c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800183e:	f023 0304 	bic.w	r3, r3, #4
 8001842:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800184e:	4a10      	ldr	r2, [pc, #64]	@ (8001890 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001850:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001854:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001858:	e011      	b.n	800187e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a0b      	ldr	r2, [pc, #44]	@ (800188c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001870:	4a07      	ldr	r2, [pc, #28]	@ (8001890 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001872:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800187a:	e000      	b.n	800187e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800187c:	bf00      	nop
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010
 8001890:	46020c00 	.word	0x46020c00

08001894 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800189a:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80018a6:	2304      	movs	r3, #4
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e021      	b.n	80018f0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80018ac:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80018b6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80018be:	d011      	beq.n	80018e4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80018c6:	d810      	bhi.n	80018ea <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d004      	beq.n	80018d8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018d4:	d003      	beq.n	80018de <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80018d6:	e008      	b.n	80018ea <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
        break;
 80018dc:	e008      	b.n	80018f0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80018de:	2301      	movs	r3, #1
 80018e0:	607b      	str	r3, [r7, #4]
        break;
 80018e2:	e005      	b.n	80018f0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80018e4:	2302      	movs	r3, #2
 80018e6:	607b      	str	r3, [r7, #4]
        break;
 80018e8:	e002      	b.n	80018f0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
        break;
 80018ee:	bf00      	nop
    }
  }
  return systick_source;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010
 8001904:	46020c00 	.word	0x46020c00

08001908 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff fe36 	bl	8001580 <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0db      	b.n	8001ad8 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae0 <HAL_DMA_Init+0x1d8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	f000 809f 	beq.w	8001a6a <HAL_DMA_Init+0x162>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a6c      	ldr	r2, [pc, #432]	@ (8001ae4 <HAL_DMA_Init+0x1dc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	f000 8099 	beq.w	8001a6a <HAL_DMA_Init+0x162>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ae8 <HAL_DMA_Init+0x1e0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	f000 8093 	beq.w	8001a6a <HAL_DMA_Init+0x162>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a68      	ldr	r2, [pc, #416]	@ (8001aec <HAL_DMA_Init+0x1e4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	f000 808d 	beq.w	8001a6a <HAL_DMA_Init+0x162>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a66      	ldr	r2, [pc, #408]	@ (8001af0 <HAL_DMA_Init+0x1e8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	f000 8087 	beq.w	8001a6a <HAL_DMA_Init+0x162>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a64      	ldr	r2, [pc, #400]	@ (8001af4 <HAL_DMA_Init+0x1ec>)
 8001962:	4293      	cmp	r3, r2
 8001964:	f000 8081 	beq.w	8001a6a <HAL_DMA_Init+0x162>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a62      	ldr	r2, [pc, #392]	@ (8001af8 <HAL_DMA_Init+0x1f0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d07b      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a61      	ldr	r2, [pc, #388]	@ (8001afc <HAL_DMA_Init+0x1f4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d076      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a5f      	ldr	r2, [pc, #380]	@ (8001b00 <HAL_DMA_Init+0x1f8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d071      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a5e      	ldr	r2, [pc, #376]	@ (8001b04 <HAL_DMA_Init+0x1fc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d06c      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a5c      	ldr	r2, [pc, #368]	@ (8001b08 <HAL_DMA_Init+0x200>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d067      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a5b      	ldr	r2, [pc, #364]	@ (8001b0c <HAL_DMA_Init+0x204>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d062      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a59      	ldr	r2, [pc, #356]	@ (8001b10 <HAL_DMA_Init+0x208>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d05d      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a58      	ldr	r2, [pc, #352]	@ (8001b14 <HAL_DMA_Init+0x20c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d058      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a56      	ldr	r2, [pc, #344]	@ (8001b18 <HAL_DMA_Init+0x210>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d053      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a55      	ldr	r2, [pc, #340]	@ (8001b1c <HAL_DMA_Init+0x214>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d04e      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a53      	ldr	r2, [pc, #332]	@ (8001b20 <HAL_DMA_Init+0x218>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d049      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a52      	ldr	r2, [pc, #328]	@ (8001b24 <HAL_DMA_Init+0x21c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d044      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a50      	ldr	r2, [pc, #320]	@ (8001b28 <HAL_DMA_Init+0x220>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d03f      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a4f      	ldr	r2, [pc, #316]	@ (8001b2c <HAL_DMA_Init+0x224>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d03a      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001b30 <HAL_DMA_Init+0x228>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d035      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a4c      	ldr	r2, [pc, #304]	@ (8001b34 <HAL_DMA_Init+0x22c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d030      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b38 <HAL_DMA_Init+0x230>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d02b      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a49      	ldr	r2, [pc, #292]	@ (8001b3c <HAL_DMA_Init+0x234>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d026      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a47      	ldr	r2, [pc, #284]	@ (8001b40 <HAL_DMA_Init+0x238>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d021      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a46      	ldr	r2, [pc, #280]	@ (8001b44 <HAL_DMA_Init+0x23c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d01c      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a44      	ldr	r2, [pc, #272]	@ (8001b48 <HAL_DMA_Init+0x240>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d017      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a43      	ldr	r2, [pc, #268]	@ (8001b4c <HAL_DMA_Init+0x244>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d012      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a41      	ldr	r2, [pc, #260]	@ (8001b50 <HAL_DMA_Init+0x248>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a40      	ldr	r2, [pc, #256]	@ (8001b54 <HAL_DMA_Init+0x24c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d008      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8001b58 <HAL_DMA_Init+0x250>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d003      	beq.n	8001a6a <HAL_DMA_Init+0x162>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a3d      	ldr	r2, [pc, #244]	@ (8001b5c <HAL_DMA_Init+0x254>)
 8001a68:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2202      	movs	r2, #2
 8001a76:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0206 	orr.w	r2, r2, #6
 8001a88:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001a8a:	e00f      	b.n	8001aac <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001a8c:	f7ff fd78 	bl	8001580 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d908      	bls.n	8001aac <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e015      	b.n	8001ad8 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1e8      	bne.n	8001a8c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f9ee 	bl	8001e9c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40020050 	.word	0x40020050
 8001ae4:	50020050 	.word	0x50020050
 8001ae8:	400200d0 	.word	0x400200d0
 8001aec:	500200d0 	.word	0x500200d0
 8001af0:	40020150 	.word	0x40020150
 8001af4:	50020150 	.word	0x50020150
 8001af8:	400201d0 	.word	0x400201d0
 8001afc:	500201d0 	.word	0x500201d0
 8001b00:	40020250 	.word	0x40020250
 8001b04:	50020250 	.word	0x50020250
 8001b08:	400202d0 	.word	0x400202d0
 8001b0c:	500202d0 	.word	0x500202d0
 8001b10:	40020350 	.word	0x40020350
 8001b14:	50020350 	.word	0x50020350
 8001b18:	400203d0 	.word	0x400203d0
 8001b1c:	500203d0 	.word	0x500203d0
 8001b20:	40020450 	.word	0x40020450
 8001b24:	50020450 	.word	0x50020450
 8001b28:	400204d0 	.word	0x400204d0
 8001b2c:	500204d0 	.word	0x500204d0
 8001b30:	40020550 	.word	0x40020550
 8001b34:	50020550 	.word	0x50020550
 8001b38:	400205d0 	.word	0x400205d0
 8001b3c:	500205d0 	.word	0x500205d0
 8001b40:	40020650 	.word	0x40020650
 8001b44:	50020650 	.word	0x50020650
 8001b48:	400206d0 	.word	0x400206d0
 8001b4c:	500206d0 	.word	0x500206d0
 8001b50:	40020750 	.word	0x40020750
 8001b54:	50020750 	.word	0x50020750
 8001b58:	400207d0 	.word	0x400207d0
 8001b5c:	500207d0 	.word	0x500207d0

08001b60 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001b70:	f023 030f 	bic.w	r3, r3, #15
 8001b74:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7e:	3b50      	subs	r3, #80	@ 0x50
 8001b80:	09db      	lsrs	r3, r3, #7
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2201      	movs	r2, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 813b 	beq.w	8001e16 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d011      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00a      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bc4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d011      	beq.n	8001c04 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bf6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	f043 0202 	orr.w	r2, r3, #2
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d011      	beq.n	8001c36 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00a      	beq.n	8001c36 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c28:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2e:	f043 0204 	orr.w	r2, r3, #4
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d011      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c5a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c60:	f043 0208 	orr.w	r2, r3, #8
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d013      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00c      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c8c:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d04c      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d045      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc2:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d12e      	bne.n	8001d2e <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cde:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0202 	orr.w	r2, r2, #2
 8001cee:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d08:	2201      	movs	r2, #1
 8001d0a:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2200      	movs	r2, #0
 8001d12:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d07a      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
        }

        return;
 8001d2c:	e075      	b.n	8001e1a <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2205      	movs	r2, #5
 8001d32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d039      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d032      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d012      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d116      	bne.n	8001da6 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d111      	bne.n	8001da6 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d8e:	2201      	movs	r2, #1
 8001d90:	731a      	strb	r2, [r3, #12]
 8001d92:	e008      	b.n	8001da6 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d103      	bne.n	8001da6 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001dae:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d025      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0202 	orr.w	r2, r2, #2
 8001dde:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df8:	2201      	movs	r2, #1
 8001dfa:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
 8001e14:	e002      	b.n	8001e1c <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001e16:	bf00      	nop
 8001e18:	e000      	b.n	8001e1c <HAL_DMA_IRQHandler+0x2bc>
        return;
 8001e1a:	bf00      	nop
    }
  }
}
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e02b      	b.n	8001e8e <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001e3e:	f023 030f 	bic.w	r3, r3, #15
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4c:	3b50      	subs	r3, #80	@ 0x50
 8001e4e:	09db      	lsrs	r3, r3, #7
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2201      	movs	r2, #1
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d012      	beq.n	8001e8c <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f003 0311 	and.w	r3, r3, #17
 8001e6c:	2b11      	cmp	r3, #17
 8001e6e:	d106      	bne.n	8001e7e <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	e006      	b.n	8001e8c <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a53      	ldr	r2, [pc, #332]	@ (8002028 <DMA_Init+0x18c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	f000 80a0 	beq.w	8002022 <DMA_Init+0x186>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a51      	ldr	r2, [pc, #324]	@ (800202c <DMA_Init+0x190>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	f000 809a 	beq.w	8002022 <DMA_Init+0x186>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a4f      	ldr	r2, [pc, #316]	@ (8002030 <DMA_Init+0x194>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	f000 8094 	beq.w	8002022 <DMA_Init+0x186>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a4d      	ldr	r2, [pc, #308]	@ (8002034 <DMA_Init+0x198>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	f000 808e 	beq.w	8002022 <DMA_Init+0x186>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a4b      	ldr	r2, [pc, #300]	@ (8002038 <DMA_Init+0x19c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	f000 8088 	beq.w	8002022 <DMA_Init+0x186>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a49      	ldr	r2, [pc, #292]	@ (800203c <DMA_Init+0x1a0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	f000 8082 	beq.w	8002022 <DMA_Init+0x186>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a47      	ldr	r2, [pc, #284]	@ (8002040 <DMA_Init+0x1a4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d07c      	beq.n	8002022 <DMA_Init+0x186>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a45      	ldr	r2, [pc, #276]	@ (8002044 <DMA_Init+0x1a8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d077      	beq.n	8002022 <DMA_Init+0x186>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a44      	ldr	r2, [pc, #272]	@ (8002048 <DMA_Init+0x1ac>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d072      	beq.n	8002022 <DMA_Init+0x186>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a42      	ldr	r2, [pc, #264]	@ (800204c <DMA_Init+0x1b0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d06d      	beq.n	8002022 <DMA_Init+0x186>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a41      	ldr	r2, [pc, #260]	@ (8002050 <DMA_Init+0x1b4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d068      	beq.n	8002022 <DMA_Init+0x186>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a3f      	ldr	r2, [pc, #252]	@ (8002054 <DMA_Init+0x1b8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d063      	beq.n	8002022 <DMA_Init+0x186>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a3e      	ldr	r2, [pc, #248]	@ (8002058 <DMA_Init+0x1bc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d05e      	beq.n	8002022 <DMA_Init+0x186>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a3c      	ldr	r2, [pc, #240]	@ (800205c <DMA_Init+0x1c0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d059      	beq.n	8002022 <DMA_Init+0x186>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a3b      	ldr	r2, [pc, #236]	@ (8002060 <DMA_Init+0x1c4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d054      	beq.n	8002022 <DMA_Init+0x186>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a39      	ldr	r2, [pc, #228]	@ (8002064 <DMA_Init+0x1c8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d04f      	beq.n	8002022 <DMA_Init+0x186>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a38      	ldr	r2, [pc, #224]	@ (8002068 <DMA_Init+0x1cc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d04a      	beq.n	8002022 <DMA_Init+0x186>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a36      	ldr	r2, [pc, #216]	@ (800206c <DMA_Init+0x1d0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d045      	beq.n	8002022 <DMA_Init+0x186>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a35      	ldr	r2, [pc, #212]	@ (8002070 <DMA_Init+0x1d4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d040      	beq.n	8002022 <DMA_Init+0x186>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a33      	ldr	r2, [pc, #204]	@ (8002074 <DMA_Init+0x1d8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d03b      	beq.n	8002022 <DMA_Init+0x186>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a32      	ldr	r2, [pc, #200]	@ (8002078 <DMA_Init+0x1dc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d036      	beq.n	8002022 <DMA_Init+0x186>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a30      	ldr	r2, [pc, #192]	@ (800207c <DMA_Init+0x1e0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d031      	beq.n	8002022 <DMA_Init+0x186>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8002080 <DMA_Init+0x1e4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d02c      	beq.n	8002022 <DMA_Init+0x186>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002084 <DMA_Init+0x1e8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d027      	beq.n	8002022 <DMA_Init+0x186>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8002088 <DMA_Init+0x1ec>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d022      	beq.n	8002022 <DMA_Init+0x186>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800208c <DMA_Init+0x1f0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01d      	beq.n	8002022 <DMA_Init+0x186>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a29      	ldr	r2, [pc, #164]	@ (8002090 <DMA_Init+0x1f4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d018      	beq.n	8002022 <DMA_Init+0x186>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a27      	ldr	r2, [pc, #156]	@ (8002094 <DMA_Init+0x1f8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <DMA_Init+0x186>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a26      	ldr	r2, [pc, #152]	@ (8002098 <DMA_Init+0x1fc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00e      	beq.n	8002022 <DMA_Init+0x186>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a24      	ldr	r2, [pc, #144]	@ (800209c <DMA_Init+0x200>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d009      	beq.n	8002022 <DMA_Init+0x186>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a23      	ldr	r2, [pc, #140]	@ (80020a0 <DMA_Init+0x204>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d004      	beq.n	8002022 <DMA_Init+0x186>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a21      	ldr	r2, [pc, #132]	@ (80020a4 <DMA_Init+0x208>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d142      	bne.n	80020a8 <DMA_Init+0x20c>
 8002022:	2301      	movs	r3, #1
 8002024:	e041      	b.n	80020aa <DMA_Init+0x20e>
 8002026:	bf00      	nop
 8002028:	40020050 	.word	0x40020050
 800202c:	50020050 	.word	0x50020050
 8002030:	400200d0 	.word	0x400200d0
 8002034:	500200d0 	.word	0x500200d0
 8002038:	40020150 	.word	0x40020150
 800203c:	50020150 	.word	0x50020150
 8002040:	400201d0 	.word	0x400201d0
 8002044:	500201d0 	.word	0x500201d0
 8002048:	40020250 	.word	0x40020250
 800204c:	50020250 	.word	0x50020250
 8002050:	400202d0 	.word	0x400202d0
 8002054:	500202d0 	.word	0x500202d0
 8002058:	40020350 	.word	0x40020350
 800205c:	50020350 	.word	0x50020350
 8002060:	400203d0 	.word	0x400203d0
 8002064:	500203d0 	.word	0x500203d0
 8002068:	40020450 	.word	0x40020450
 800206c:	50020450 	.word	0x50020450
 8002070:	400204d0 	.word	0x400204d0
 8002074:	500204d0 	.word	0x500204d0
 8002078:	40020550 	.word	0x40020550
 800207c:	50020550 	.word	0x50020550
 8002080:	400205d0 	.word	0x400205d0
 8002084:	500205d0 	.word	0x500205d0
 8002088:	40020650 	.word	0x40020650
 800208c:	50020650 	.word	0x50020650
 8002090:	400206d0 	.word	0x400206d0
 8002094:	500206d0 	.word	0x500206d0
 8002098:	40020750 	.word	0x40020750
 800209c:	50020750 	.word	0x50020750
 80020a0:	400207d0 	.word	0x400207d0
 80020a4:	500207d0 	.word	0x500207d0
 80020a8:	2300      	movs	r3, #0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d012      	beq.n	80020d4 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b6:	3b01      	subs	r3, #1
 80020b8:	051b      	lsls	r3, r3, #20
 80020ba:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80020be:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	3b01      	subs	r3, #1
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80020cc:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002106:	f040 80b0 	bne.w	800226a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a82      	ldr	r2, [pc, #520]	@ (8002318 <DMA_Init+0x47c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	f000 80a0 	beq.w	8002256 <DMA_Init+0x3ba>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a80      	ldr	r2, [pc, #512]	@ (800231c <DMA_Init+0x480>)
 800211c:	4293      	cmp	r3, r2
 800211e:	f000 809a 	beq.w	8002256 <DMA_Init+0x3ba>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7e      	ldr	r2, [pc, #504]	@ (8002320 <DMA_Init+0x484>)
 8002128:	4293      	cmp	r3, r2
 800212a:	f000 8094 	beq.w	8002256 <DMA_Init+0x3ba>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7c      	ldr	r2, [pc, #496]	@ (8002324 <DMA_Init+0x488>)
 8002134:	4293      	cmp	r3, r2
 8002136:	f000 808e 	beq.w	8002256 <DMA_Init+0x3ba>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7a      	ldr	r2, [pc, #488]	@ (8002328 <DMA_Init+0x48c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	f000 8088 	beq.w	8002256 <DMA_Init+0x3ba>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a78      	ldr	r2, [pc, #480]	@ (800232c <DMA_Init+0x490>)
 800214c:	4293      	cmp	r3, r2
 800214e:	f000 8082 	beq.w	8002256 <DMA_Init+0x3ba>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a76      	ldr	r2, [pc, #472]	@ (8002330 <DMA_Init+0x494>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d07c      	beq.n	8002256 <DMA_Init+0x3ba>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a74      	ldr	r2, [pc, #464]	@ (8002334 <DMA_Init+0x498>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d077      	beq.n	8002256 <DMA_Init+0x3ba>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a73      	ldr	r2, [pc, #460]	@ (8002338 <DMA_Init+0x49c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d072      	beq.n	8002256 <DMA_Init+0x3ba>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a71      	ldr	r2, [pc, #452]	@ (800233c <DMA_Init+0x4a0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d06d      	beq.n	8002256 <DMA_Init+0x3ba>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a70      	ldr	r2, [pc, #448]	@ (8002340 <DMA_Init+0x4a4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d068      	beq.n	8002256 <DMA_Init+0x3ba>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a6e      	ldr	r2, [pc, #440]	@ (8002344 <DMA_Init+0x4a8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d063      	beq.n	8002256 <DMA_Init+0x3ba>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a6d      	ldr	r2, [pc, #436]	@ (8002348 <DMA_Init+0x4ac>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d05e      	beq.n	8002256 <DMA_Init+0x3ba>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a6b      	ldr	r2, [pc, #428]	@ (800234c <DMA_Init+0x4b0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d059      	beq.n	8002256 <DMA_Init+0x3ba>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6a      	ldr	r2, [pc, #424]	@ (8002350 <DMA_Init+0x4b4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d054      	beq.n	8002256 <DMA_Init+0x3ba>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a68      	ldr	r2, [pc, #416]	@ (8002354 <DMA_Init+0x4b8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d04f      	beq.n	8002256 <DMA_Init+0x3ba>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a67      	ldr	r2, [pc, #412]	@ (8002358 <DMA_Init+0x4bc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d04a      	beq.n	8002256 <DMA_Init+0x3ba>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a65      	ldr	r2, [pc, #404]	@ (800235c <DMA_Init+0x4c0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d045      	beq.n	8002256 <DMA_Init+0x3ba>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a64      	ldr	r2, [pc, #400]	@ (8002360 <DMA_Init+0x4c4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d040      	beq.n	8002256 <DMA_Init+0x3ba>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a62      	ldr	r2, [pc, #392]	@ (8002364 <DMA_Init+0x4c8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d03b      	beq.n	8002256 <DMA_Init+0x3ba>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a61      	ldr	r2, [pc, #388]	@ (8002368 <DMA_Init+0x4cc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d036      	beq.n	8002256 <DMA_Init+0x3ba>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a5f      	ldr	r2, [pc, #380]	@ (800236c <DMA_Init+0x4d0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d031      	beq.n	8002256 <DMA_Init+0x3ba>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002370 <DMA_Init+0x4d4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d02c      	beq.n	8002256 <DMA_Init+0x3ba>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a5c      	ldr	r2, [pc, #368]	@ (8002374 <DMA_Init+0x4d8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d027      	beq.n	8002256 <DMA_Init+0x3ba>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a5b      	ldr	r2, [pc, #364]	@ (8002378 <DMA_Init+0x4dc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d022      	beq.n	8002256 <DMA_Init+0x3ba>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a59      	ldr	r2, [pc, #356]	@ (800237c <DMA_Init+0x4e0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01d      	beq.n	8002256 <DMA_Init+0x3ba>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a58      	ldr	r2, [pc, #352]	@ (8002380 <DMA_Init+0x4e4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d018      	beq.n	8002256 <DMA_Init+0x3ba>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a56      	ldr	r2, [pc, #344]	@ (8002384 <DMA_Init+0x4e8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <DMA_Init+0x3ba>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a55      	ldr	r2, [pc, #340]	@ (8002388 <DMA_Init+0x4ec>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00e      	beq.n	8002256 <DMA_Init+0x3ba>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a53      	ldr	r2, [pc, #332]	@ (800238c <DMA_Init+0x4f0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d009      	beq.n	8002256 <DMA_Init+0x3ba>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a52      	ldr	r2, [pc, #328]	@ (8002390 <DMA_Init+0x4f4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <DMA_Init+0x3ba>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a50      	ldr	r2, [pc, #320]	@ (8002394 <DMA_Init+0x4f8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <DMA_Init+0x3be>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <DMA_Init+0x3c0>
 800225a:	2300      	movs	r3, #0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	e008      	b.n	800227c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002272:	d103      	bne.n	800227c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800227a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002282:	4b45      	ldr	r3, [pc, #276]	@ (8002398 <DMA_Init+0x4fc>)
 8002284:	4013      	ands	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	68f9      	ldr	r1, [r7, #12]
 800228c:	430b      	orrs	r3, r1
 800228e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a36      	ldr	r2, [pc, #216]	@ (8002378 <DMA_Init+0x4dc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d022      	beq.n	80022e8 <DMA_Init+0x44c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a35      	ldr	r2, [pc, #212]	@ (800237c <DMA_Init+0x4e0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d01d      	beq.n	80022e8 <DMA_Init+0x44c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a33      	ldr	r2, [pc, #204]	@ (8002380 <DMA_Init+0x4e4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d018      	beq.n	80022e8 <DMA_Init+0x44c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a32      	ldr	r2, [pc, #200]	@ (8002384 <DMA_Init+0x4e8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <DMA_Init+0x44c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a30      	ldr	r2, [pc, #192]	@ (8002388 <DMA_Init+0x4ec>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00e      	beq.n	80022e8 <DMA_Init+0x44c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2f      	ldr	r2, [pc, #188]	@ (800238c <DMA_Init+0x4f0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d009      	beq.n	80022e8 <DMA_Init+0x44c>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002390 <DMA_Init+0x4f4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d004      	beq.n	80022e8 <DMA_Init+0x44c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002394 <DMA_Init+0x4f8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <DMA_Init+0x450>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <DMA_Init+0x452>
 80022ec:	2300      	movs	r3, #0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2200      	movs	r2, #0
 80022f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2200      	movs	r2, #0
 8002300:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40020050 	.word	0x40020050
 800231c:	50020050 	.word	0x50020050
 8002320:	400200d0 	.word	0x400200d0
 8002324:	500200d0 	.word	0x500200d0
 8002328:	40020150 	.word	0x40020150
 800232c:	50020150 	.word	0x50020150
 8002330:	400201d0 	.word	0x400201d0
 8002334:	500201d0 	.word	0x500201d0
 8002338:	40020250 	.word	0x40020250
 800233c:	50020250 	.word	0x50020250
 8002340:	400202d0 	.word	0x400202d0
 8002344:	500202d0 	.word	0x500202d0
 8002348:	40020350 	.word	0x40020350
 800234c:	50020350 	.word	0x50020350
 8002350:	400203d0 	.word	0x400203d0
 8002354:	500203d0 	.word	0x500203d0
 8002358:	40020450 	.word	0x40020450
 800235c:	50020450 	.word	0x50020450
 8002360:	400204d0 	.word	0x400204d0
 8002364:	500204d0 	.word	0x500204d0
 8002368:	40020550 	.word	0x40020550
 800236c:	50020550 	.word	0x50020550
 8002370:	400205d0 	.word	0x400205d0
 8002374:	500205d0 	.word	0x500205d0
 8002378:	40020650 	.word	0x40020650
 800237c:	50020650 	.word	0x50020650
 8002380:	400206d0 	.word	0x400206d0
 8002384:	500206d0 	.word	0x500206d0
 8002388:	40020750 	.word	0x40020750
 800238c:	50020750 	.word	0x50020750
 8002390:	400207d0 	.word	0x400207d0
 8002394:	500207d0 	.word	0x500207d0
 8002398:	3cc03180 	.word	0x3cc03180

0800239c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	@ 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023ae:	e1ba      	b.n	8002726 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 81aa 	beq.w	8002720 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a55      	ldr	r2, [pc, #340]	@ (8002524 <HAL_GPIO_Init+0x188>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d15d      	bne.n	8002490 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80023da:	2201      	movs	r2, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0201 	and.w	r2, r3, #1
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002404:	4a48      	ldr	r2, [pc, #288]	@ (8002528 <HAL_GPIO_Init+0x18c>)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800240c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800240e:	4a46      	ldr	r2, [pc, #280]	@ (8002528 <HAL_GPIO_Init+0x18c>)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	3208      	adds	r2, #8
 8002422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002426:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	220f      	movs	r2, #15
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	4013      	ands	r3, r2
 800243c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220b      	movs	r2, #11
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	4313      	orrs	r3, r2
 8002450:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	08da      	lsrs	r2, r3, #3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	3208      	adds	r2, #8
 800245a:	69f9      	ldr	r1, [r7, #28]
 800245c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	4013      	ands	r3, r2
 8002476:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2202      	movs	r2, #2
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	4313      	orrs	r3, r2
 8002486:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e067      	b.n	8002560 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x104>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b12      	cmp	r3, #18
 800249e:	d145      	bne.n	800252c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f003 020f 	and.w	r2, r3, #15
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	69f9      	ldr	r1, [r7, #28]
 80024e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	4013      	ands	r3, r2
 8002502:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0203 	and.w	r2, r3, #3
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	4313      	orrs	r3, r2
 8002518:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e01e      	b.n	8002560 <HAL_GPIO_Init+0x1c4>
 8002522:	bf00      	nop
 8002524:	46020000 	.word	0x46020000
 8002528:	080086e4 	.word	0x080086e4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	4013      	ands	r3, r2
 8002542:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	4313      	orrs	r3, r2
 8002558:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d00b      	beq.n	8002580 <HAL_GPIO_Init+0x1e4>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d007      	beq.n	8002580 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002574:	2b11      	cmp	r3, #17
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b12      	cmp	r3, #18
 800257e:	d130      	bne.n	80025e2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	4013      	ands	r3, r2
 8002596:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80025b6:	2201      	movs	r2, #1
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f003 0201 	and.w	r2, r3, #1
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d017      	beq.n	800261a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	2203      	movs	r2, #3
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	4013      	ands	r3, r2
 8002600:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	4313      	orrs	r3, r2
 8002612:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d07c      	beq.n	8002720 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002626:	4a47      	ldr	r2, [pc, #284]	@ (8002744 <HAL_GPIO_Init+0x3a8>)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3318      	adds	r3, #24
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	4013      	ands	r3, r2
 8002648:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0a9a      	lsrs	r2, r3, #10
 800264e:	4b3e      	ldr	r3, [pc, #248]	@ (8002748 <HAL_GPIO_Init+0x3ac>)
 8002650:	4013      	ands	r3, r2
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	f002 0203 	and.w	r2, r2, #3
 8002658:	00d2      	lsls	r2, r2, #3
 800265a:	4093      	lsls	r3, r2
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	4313      	orrs	r3, r2
 8002660:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002662:	4938      	ldr	r1, [pc, #224]	@ (8002744 <HAL_GPIO_Init+0x3a8>)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3318      	adds	r3, #24
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002670:	4b34      	ldr	r3, [pc, #208]	@ (8002744 <HAL_GPIO_Init+0x3a8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43db      	mvns	r3, r3
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	4013      	ands	r3, r2
 800267e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002694:	4a2b      	ldr	r2, [pc, #172]	@ (8002744 <HAL_GPIO_Init+0x3a8>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800269a:	4b2a      	ldr	r3, [pc, #168]	@ (8002744 <HAL_GPIO_Init+0x3a8>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80026be:	4a21      	ldr	r2, [pc, #132]	@ (8002744 <HAL_GPIO_Init+0x3a8>)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80026c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002744 <HAL_GPIO_Init+0x3a8>)
 80026c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80026ea:	4a16      	ldr	r2, [pc, #88]	@ (8002744 <HAL_GPIO_Init+0x3a8>)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80026f2:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <HAL_GPIO_Init+0x3a8>)
 80026f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	4013      	ands	r3, r2
 8002702:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002718:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <HAL_GPIO_Init+0x3a8>)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3301      	adds	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	f47f ae3d 	bne.w	80023b0 <HAL_GPIO_Init+0x14>
  }
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	3724      	adds	r7, #36	@ 0x24
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	46022000 	.word	0x46022000
 8002748:	002f7f7f 	.word	0x002f7f7f

0800274c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e08d      	b.n	800287a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fa92 	bl	8000c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	@ 0x24
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800279c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d107      	bne.n	80027c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	e006      	b.n	80027d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80027d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d108      	bne.n	80027ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	e007      	b.n	80027fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800280c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002810:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002820:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69d9      	ldr	r1, [r3, #28]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1a      	ldr	r2, [r3, #32]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	4608      	mov	r0, r1
 800288e:	4611      	mov	r1, r2
 8002890:	461a      	mov	r2, r3
 8002892:	4603      	mov	r3, r0
 8002894:	817b      	strh	r3, [r7, #10]
 8002896:	460b      	mov	r3, r1
 8002898:	813b      	strh	r3, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	f040 80f9 	bne.w	8002a9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_I2C_Mem_Write+0x34>
 80028b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0ed      	b.n	8002aa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_I2C_Mem_Write+0x4e>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e0e6      	b.n	8002aa0 <HAL_I2C_Mem_Write+0x21c>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028da:	f7fe fe51 	bl	8001580 <HAL_GetTick>
 80028de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2319      	movs	r3, #25
 80028e6:	2201      	movs	r2, #1
 80028e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fae9 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0d1      	b.n	8002aa0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2221      	movs	r2, #33	@ 0x21
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2240      	movs	r2, #64	@ 0x40
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a3a      	ldr	r2, [r7, #32]
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800291c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002924:	88f8      	ldrh	r0, [r7, #6]
 8002926:	893a      	ldrh	r2, [r7, #8]
 8002928:	8979      	ldrh	r1, [r7, #10]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	4603      	mov	r3, r0
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f9f9 	bl	8002d2c <I2C_RequestMemoryWrite>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0a9      	b.n	8002aa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	2bff      	cmp	r3, #255	@ 0xff
 8002954:	d90e      	bls.n	8002974 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	22ff      	movs	r2, #255	@ 0xff
 800295a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002960:	b2da      	uxtb	r2, r3
 8002962:	8979      	ldrh	r1, [r7, #10]
 8002964:	2300      	movs	r3, #0
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fc6d 	bl	800324c <I2C_TransferConfig>
 8002972:	e00f      	b.n	8002994 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002982:	b2da      	uxtb	r2, r3
 8002984:	8979      	ldrh	r1, [r7, #10]
 8002986:	2300      	movs	r3, #0
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fc5c 	bl	800324c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 faec 	bl	8002f76 <I2C_WaitOnTXISFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e07b      	b.n	8002aa0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d034      	beq.n	8002a4c <HAL_I2C_Mem_Write+0x1c8>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d130      	bne.n	8002a4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f0:	2200      	movs	r2, #0
 80029f2:	2180      	movs	r1, #128	@ 0x80
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fa65 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e04d      	b.n	8002aa0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2bff      	cmp	r3, #255	@ 0xff
 8002a0c:	d90e      	bls.n	8002a2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	22ff      	movs	r2, #255	@ 0xff
 8002a12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	8979      	ldrh	r1, [r7, #10]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fc11 	bl	800324c <I2C_TransferConfig>
 8002a2a:	e00f      	b.n	8002a4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	8979      	ldrh	r1, [r7, #10]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fc00 	bl	800324c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d19e      	bne.n	8002994 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fad2 	bl	8003004 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e01a      	b.n	8002aa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <HAL_I2C_Mem_Write+0x224>)
 8002a7e:	400b      	ands	r3, r1
 8002a80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	fe00e800 	.word	0xfe00e800

08002aac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	4608      	mov	r0, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	817b      	strh	r3, [r7, #10]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	813b      	strh	r3, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	f040 80fd 	bne.w	8002cce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_I2C_Mem_Read+0x34>
 8002ada:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ae6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0f1      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_I2C_Mem_Read+0x4e>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e0ea      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x224>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b02:	f7fe fd3d 	bl	8001580 <HAL_GetTick>
 8002b06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2319      	movs	r3, #25
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f9d5 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0d5      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2222      	movs	r2, #34	@ 0x22
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2240      	movs	r2, #64	@ 0x40
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a3a      	ldr	r2, [r7, #32]
 8002b3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b4c:	88f8      	ldrh	r0, [r7, #6]
 8002b4e:	893a      	ldrh	r2, [r7, #8]
 8002b50:	8979      	ldrh	r1, [r7, #10]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f939 	bl	8002dd4 <I2C_RequestMemoryRead>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0ad      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2bff      	cmp	r3, #255	@ 0xff
 8002b7c:	d90e      	bls.n	8002b9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	22ff      	movs	r2, #255	@ 0xff
 8002b82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	8979      	ldrh	r1, [r7, #10]
 8002b8c:	4b52      	ldr	r3, [pc, #328]	@ (8002cd8 <HAL_I2C_Mem_Read+0x22c>)
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fb59 	bl	800324c <I2C_TransferConfig>
 8002b9a:	e00f      	b.n	8002bbc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	8979      	ldrh	r1, [r7, #10]
 8002bae:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd8 <HAL_I2C_Mem_Read+0x22c>)
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fb48 	bl	800324c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f97c 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e07c      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d034      	beq.n	8002c7c <HAL_I2C_Mem_Read+0x1d0>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d130      	bne.n	8002c7c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c20:	2200      	movs	r2, #0
 8002c22:	2180      	movs	r1, #128	@ 0x80
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f94d 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e04d      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2bff      	cmp	r3, #255	@ 0xff
 8002c3c:	d90e      	bls.n	8002c5c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	22ff      	movs	r2, #255	@ 0xff
 8002c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	8979      	ldrh	r1, [r7, #10]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 faf9 	bl	800324c <I2C_TransferConfig>
 8002c5a:	e00f      	b.n	8002c7c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	8979      	ldrh	r1, [r7, #10]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fae8 	bl	800324c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d19a      	bne.n	8002bbc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f9ba 	bl	8003004 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e01a      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <HAL_I2C_Mem_Read+0x230>)
 8002cae:	400b      	ands	r3, r1
 8002cb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e000      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
  }
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	80002400 	.word	0x80002400
 8002cdc:	fe00e800 	.word	0xfe00e800

08002ce0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4798      	blx	r3
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	817b      	strh	r3, [r7, #10]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	813b      	strh	r3, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	8979      	ldrh	r1, [r7, #10]
 8002d4c:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <I2C_RequestMemoryWrite+0xa4>)
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fa79 	bl	800324c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	69b9      	ldr	r1, [r7, #24]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f909 	bl	8002f76 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e02c      	b.n	8002dc8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d74:	893b      	ldrh	r3, [r7, #8]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d7e:	e015      	b.n	8002dac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d80:	893b      	ldrh	r3, [r7, #8]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	69b9      	ldr	r1, [r7, #24]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f8ef 	bl	8002f76 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e012      	b.n	8002dc8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002da2:	893b      	ldrh	r3, [r7, #8]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2180      	movs	r1, #128	@ 0x80
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f884 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	80002000 	.word	0x80002000

08002dd4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	817b      	strh	r3, [r7, #10]
 8002de6:	460b      	mov	r3, r1
 8002de8:	813b      	strh	r3, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	8979      	ldrh	r1, [r7, #10]
 8002df4:	4b20      	ldr	r3, [pc, #128]	@ (8002e78 <I2C_RequestMemoryRead+0xa4>)
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fa26 	bl	800324c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	69b9      	ldr	r1, [r7, #24]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f8b6 	bl	8002f76 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e02c      	b.n	8002e6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d105      	bne.n	8002e26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1a:	893b      	ldrh	r3, [r7, #8]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e24:	e015      	b.n	8002e52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e26:	893b      	ldrh	r3, [r7, #8]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f89c 	bl	8002f76 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e012      	b.n	8002e6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e48:	893b      	ldrh	r3, [r7, #8]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2140      	movs	r1, #64	@ 0x40
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f831 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	80002000 	.word	0x80002000

08002e7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d103      	bne.n	8002e9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2200      	movs	r2, #0
 8002e98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d007      	beq.n	8002eb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	619a      	str	r2, [r3, #24]
  }
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed4:	e03b      	b.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	6839      	ldr	r1, [r7, #0]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f8d6 	bl	800308c <I2C_IsErrorOccurred>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e041      	b.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d02d      	beq.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fe fb45 	bl	8001580 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d122      	bne.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d113      	bne.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00f      	b.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699a      	ldr	r2, [r3, #24]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d0b4      	beq.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f82:	e033      	b.n	8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f87f 	bl	800308c <I2C_IsErrorOccurred>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e031      	b.n	8002ffc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d025      	beq.n	8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa0:	f7fe faee 	bl	8001580 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d302      	bcc.n	8002fb6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d11a      	bne.n	8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d013      	beq.n	8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc8:	f043 0220 	orr.w	r2, r3, #32
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e007      	b.n	8002ffc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d1c4      	bne.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003010:	e02f      	b.n	8003072 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f838 	bl	800308c <I2C_IsErrorOccurred>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e02d      	b.n	8003082 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003026:	f7fe faab 	bl	8001580 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d302      	bcc.n	800303c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11a      	bne.n	8003072 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b20      	cmp	r3, #32
 8003048:	d013      	beq.n	8003072 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	f043 0220 	orr.w	r2, r3, #32
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e007      	b.n	8003082 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b20      	cmp	r3, #32
 800307e:	d1c8      	bne.n	8003012 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	@ 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d068      	beq.n	800318a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2210      	movs	r2, #16
 80030be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030c0:	e049      	b.n	8003156 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d045      	beq.n	8003156 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030ca:	f7fe fa59 	bl	8001580 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d302      	bcc.n	80030e0 <I2C_IsErrorOccurred+0x54>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d13a      	bne.n	8003156 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003102:	d121      	bne.n	8003148 <I2C_IsErrorOccurred+0xbc>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800310a:	d01d      	beq.n	8003148 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	2b20      	cmp	r3, #32
 8003110:	d01a      	beq.n	8003148 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003120:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003122:	f7fe fa2d 	bl	8001580 <HAL_GetTick>
 8003126:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003128:	e00e      	b.n	8003148 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800312a:	f7fe fa29 	bl	8001580 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b19      	cmp	r3, #25
 8003136:	d907      	bls.n	8003148 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	f043 0320 	orr.w	r3, r3, #32
 800313e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003146:	e006      	b.n	8003156 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b20      	cmp	r3, #32
 8003154:	d1e9      	bne.n	800312a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b20      	cmp	r3, #32
 8003162:	d003      	beq.n	800316c <I2C_IsErrorOccurred+0xe0>
 8003164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0aa      	beq.n	80030c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800316c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2220      	movs	r2, #32
 800317a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	f043 0308 	orr.w	r3, r3, #8
 80031c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	f043 0302 	orr.w	r3, r3, #2
 80031e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80031f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01c      	beq.n	800323a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7ff fe3b 	bl	8002e7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <I2C_IsErrorOccurred+0x1bc>)
 8003212:	400b      	ands	r3, r1
 8003214:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	431a      	orrs	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800323a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800323e:	4618      	mov	r0, r3
 8003240:	3728      	adds	r7, #40	@ 0x28
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	fe00e800 	.word	0xfe00e800

0800324c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	817b      	strh	r3, [r7, #10]
 800325a:	4613      	mov	r3, r2
 800325c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003264:	7a7b      	ldrb	r3, [r7, #9]
 8003266:	041b      	lsls	r3, r3, #16
 8003268:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800326c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	4313      	orrs	r3, r2
 8003276:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800327a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	0d5b      	lsrs	r3, r3, #21
 8003286:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800328a:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <I2C_TransferConfig+0x60>)
 800328c:	430b      	orrs	r3, r1
 800328e:	43db      	mvns	r3, r3
 8003290:	ea02 0103 	and.w	r1, r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	03ff63ff 	.word	0x03ff63ff

080032b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d138      	bne.n	8003338 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e032      	b.n	800333a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	@ 0x24
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003302:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6819      	ldr	r1, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b20      	cmp	r3, #32
 800335a:	d139      	bne.n	80033d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003366:	2302      	movs	r3, #2
 8003368:	e033      	b.n	80033d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2224      	movs	r2, #36	@ 0x24
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003398:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e108      	b.n	8003604 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7fd fe17 	bl	8001040 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2203      	movs	r2, #3
 8003416:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4a7b      	ldr	r2, [pc, #492]	@ (800360c <HAL_PCD_Init+0x22c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d102      	bne.n	8003428 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f003 fe34 	bl	800709a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	7c1a      	ldrb	r2, [r3, #16]
 800343a:	f88d 2000 	strb.w	r2, [sp]
 800343e:	3304      	adds	r3, #4
 8003440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003442:	f003 fdfd 	bl	8007040 <USB_CoreInit>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0d5      	b.n	8003604 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2100      	movs	r1, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f003 fe2c 	bl	80070bc <USB_SetCurrentMode>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2202      	movs	r2, #2
 800346e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0c6      	b.n	8003604 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]
 800347a:	e04a      	b.n	8003512 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	3315      	adds	r3, #21
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3314      	adds	r3, #20
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	b298      	uxth	r0, r3
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	332e      	adds	r3, #46	@ 0x2e
 80034b8:	4602      	mov	r2, r0
 80034ba:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	3318      	adds	r3, #24
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	331c      	adds	r3, #28
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3320      	adds	r3, #32
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034f8:	7bfa      	ldrb	r2, [r7, #15]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3324      	adds	r3, #36	@ 0x24
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	3301      	adds	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	791b      	ldrb	r3, [r3, #4]
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	429a      	cmp	r2, r3
 800351a:	d3af      	bcc.n	800347c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351c:	2300      	movs	r3, #0
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	e044      	b.n	80035ac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	3301      	adds	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	791b      	ldrb	r3, [r3, #4]
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d3b5      	bcc.n	8003522 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	7c1a      	ldrb	r2, [r3, #16]
 80035be:	f88d 2000 	strb.w	r2, [sp]
 80035c2:	3304      	adds	r3, #4
 80035c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c6:	f003 fdc5 	bl	8007154 <USB_DevInit>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e013      	b.n	8003604 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	7b1b      	ldrb	r3, [r3, #12]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d102      	bne.n	80035f8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f80c 	bl	8003610 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f003 ff6e 	bl	80074de <USB_DevDisconnect>

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	42040000 	.word	0x42040000

08003610 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003642:	f043 0303 	orr.w	r3, r3, #3
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003660:	4b39      	ldr	r3, [pc, #228]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003664:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003668:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	429a      	cmp	r2, r3
 8003670:	d10b      	bne.n	800368a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003678:	d905      	bls.n	8003686 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800367a:	4b33      	ldr	r3, [pc, #204]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	4a32      	ldr	r2, [pc, #200]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003684:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e057      	b.n	800373a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003690:	d90a      	bls.n	80036a8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003692:	4b2d      	ldr	r3, [pc, #180]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4313      	orrs	r3, r2
 800369e:	4a2a      	ldr	r2, [pc, #168]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036a4:	60d3      	str	r3, [r2, #12]
 80036a6:	e007      	b.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80036a8:	4b27      	ldr	r3, [pc, #156]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80036b0:	4925      	ldr	r1, [pc, #148]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80036b8:	4b24      	ldr	r3, [pc, #144]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a24      	ldr	r2, [pc, #144]	@ (8003750 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	2232      	movs	r2, #50	@ 0x32
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	4a21      	ldr	r2, [pc, #132]	@ (8003750 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	099b      	lsrs	r3, r3, #6
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80036d6:	e002      	b.n	80036de <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3b01      	subs	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80036de:	4b1a      	ldr	r3, [pc, #104]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f3      	bne.n	80036d8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01b      	beq.n	800372e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80036f6:	4b15      	ldr	r3, [pc, #84]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a15      	ldr	r2, [pc, #84]	@ (8003750 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	2232      	movs	r2, #50	@ 0x32
 8003704:	fb02 f303 	mul.w	r3, r2, r3
 8003708:	4a11      	ldr	r2, [pc, #68]	@ (8003750 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	099b      	lsrs	r3, r3, #6
 8003710:	3301      	adds	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003714:	e002      	b.n	800371c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3b01      	subs	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800371c:	4b0a      	ldr	r3, [pc, #40]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800371e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003720:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f3      	bne.n	8003716 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e000      	b.n	800373a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	46020800 	.word	0x46020800
 800374c:	20000000 	.word	0x20000000
 8003750:	10624dd3 	.word	0x10624dd3

08003754 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003758:	4b04      	ldr	r3, [pc, #16]	@ (800376c <HAL_PWREx_GetVoltageRange+0x18>)
 800375a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	46020800 	.word	0x46020800

08003770 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003774:	4b05      	ldr	r3, [pc, #20]	@ (800378c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	4a04      	ldr	r2, [pc, #16]	@ (800378c <HAL_PWREx_EnableVddUSB+0x1c>)
 800377a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377e:	6113      	str	r3, [r2, #16]
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	46020800 	.word	0x46020800

08003790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08e      	sub	sp, #56	@ 0x38
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003798:	2300      	movs	r3, #0
 800379a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f000 bec8 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037aa:	4b99      	ldr	r3, [pc, #612]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037b4:	4b96      	ldr	r3, [pc, #600]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 816c 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_RCC_OscConfig+0x52>
 80037d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d4:	2b0c      	cmp	r3, #12
 80037d6:	f040 80de 	bne.w	8003996 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	f040 80da 	bne.w	8003996 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d102      	bne.n	80037f0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f000 bea5 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037f4:	4b86      	ldr	r3, [pc, #536]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d004      	beq.n	800380a <HAL_RCC_OscConfig+0x7a>
 8003800:	4b83      	ldr	r3, [pc, #524]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003808:	e005      	b.n	8003816 <HAL_RCC_OscConfig+0x86>
 800380a:	4b81      	ldr	r3, [pc, #516]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 800380c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003810:	041b      	lsls	r3, r3, #16
 8003812:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003816:	4293      	cmp	r3, r2
 8003818:	d255      	bcs.n	80038c6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10a      	bne.n	8003836 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	4618      	mov	r0, r3
 8003826:	f001 f99d 	bl	8004b64 <RCC_SetFlashLatencyFromMSIRange>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f000 be82 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003836:	4b76      	ldr	r3, [pc, #472]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	4a75      	ldr	r2, [pc, #468]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 800383c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003840:	6093      	str	r3, [r2, #8]
 8003842:	4b73      	ldr	r3, [pc, #460]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	4970      	ldr	r1, [pc, #448]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 8003850:	4313      	orrs	r3, r2
 8003852:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800385c:	d309      	bcc.n	8003872 <HAL_RCC_OscConfig+0xe2>
 800385e:	4b6c      	ldr	r3, [pc, #432]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f023 021f 	bic.w	r2, r3, #31
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4969      	ldr	r1, [pc, #420]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 800386c:	4313      	orrs	r3, r2
 800386e:	60cb      	str	r3, [r1, #12]
 8003870:	e07e      	b.n	8003970 <HAL_RCC_OscConfig+0x1e0>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	da0a      	bge.n	8003890 <HAL_RCC_OscConfig+0x100>
 800387a:	4b65      	ldr	r3, [pc, #404]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	015b      	lsls	r3, r3, #5
 8003888:	4961      	ldr	r1, [pc, #388]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 800388a:	4313      	orrs	r3, r2
 800388c:	60cb      	str	r3, [r1, #12]
 800388e:	e06f      	b.n	8003970 <HAL_RCC_OscConfig+0x1e0>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003898:	d30a      	bcc.n	80038b0 <HAL_RCC_OscConfig+0x120>
 800389a:	4b5d      	ldr	r3, [pc, #372]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	029b      	lsls	r3, r3, #10
 80038a8:	4959      	ldr	r1, [pc, #356]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60cb      	str	r3, [r1, #12]
 80038ae:	e05f      	b.n	8003970 <HAL_RCC_OscConfig+0x1e0>
 80038b0:	4b57      	ldr	r3, [pc, #348]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	03db      	lsls	r3, r3, #15
 80038be:	4954      	ldr	r1, [pc, #336]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60cb      	str	r3, [r1, #12]
 80038c4:	e054      	b.n	8003970 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80038c6:	4b52      	ldr	r3, [pc, #328]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	4a51      	ldr	r2, [pc, #324]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80038cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038d0:	6093      	str	r3, [r2, #8]
 80038d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	494c      	ldr	r1, [pc, #304]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80038ec:	d309      	bcc.n	8003902 <HAL_RCC_OscConfig+0x172>
 80038ee:	4b48      	ldr	r3, [pc, #288]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f023 021f 	bic.w	r2, r3, #31
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4945      	ldr	r1, [pc, #276]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60cb      	str	r3, [r1, #12]
 8003900:	e028      	b.n	8003954 <HAL_RCC_OscConfig+0x1c4>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	da0a      	bge.n	8003920 <HAL_RCC_OscConfig+0x190>
 800390a:	4b41      	ldr	r3, [pc, #260]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	015b      	lsls	r3, r3, #5
 8003918:	493d      	ldr	r1, [pc, #244]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 800391a:	4313      	orrs	r3, r2
 800391c:	60cb      	str	r3, [r1, #12]
 800391e:	e019      	b.n	8003954 <HAL_RCC_OscConfig+0x1c4>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003928:	d30a      	bcc.n	8003940 <HAL_RCC_OscConfig+0x1b0>
 800392a:	4b39      	ldr	r3, [pc, #228]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	029b      	lsls	r3, r3, #10
 8003938:	4935      	ldr	r1, [pc, #212]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 800393a:	4313      	orrs	r3, r2
 800393c:	60cb      	str	r3, [r1, #12]
 800393e:	e009      	b.n	8003954 <HAL_RCC_OscConfig+0x1c4>
 8003940:	4b33      	ldr	r3, [pc, #204]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	03db      	lsls	r3, r3, #15
 800394e:	4930      	ldr	r1, [pc, #192]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 8003950:	4313      	orrs	r3, r2
 8003952:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	4618      	mov	r0, r3
 8003960:	f001 f900 	bl	8004b64 <RCC_SetFlashLatencyFromMSIRange>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	f000 bde5 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003970:	f001 f8de 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003974:	4b27      	ldr	r3, [pc, #156]	@ (8003a14 <HAL_RCC_OscConfig+0x284>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fd fd77 	bl	800146c <HAL_InitTick>
 800397e:	4603      	mov	r3, r0
 8003980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 808a 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800398e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003992:	f000 bdd2 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d066      	beq.n	8003a6c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800399e:	4b1c      	ldr	r3, [pc, #112]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80039aa:	f7fd fde9 	bl	8001580 <HAL_GetTick>
 80039ae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80039b0:	e009      	b.n	80039c6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039b2:	f7fd fde5 	bl	8001580 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d902      	bls.n	80039c6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	f000 bdba 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80039c6:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0ef      	beq.n	80039b2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80039d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80039d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039dc:	6093      	str	r3, [r2, #8]
 80039de:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	4909      	ldr	r1, [pc, #36]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80039f8:	d30e      	bcc.n	8003a18 <HAL_RCC_OscConfig+0x288>
 80039fa:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f023 021f 	bic.w	r2, r3, #31
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4902      	ldr	r1, [pc, #8]	@ (8003a10 <HAL_RCC_OscConfig+0x280>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60cb      	str	r3, [r1, #12]
 8003a0c:	e04a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x314>
 8003a0e:	bf00      	nop
 8003a10:	46020c00 	.word	0x46020c00
 8003a14:	20000004 	.word	0x20000004
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	da0a      	bge.n	8003a36 <HAL_RCC_OscConfig+0x2a6>
 8003a20:	4b98      	ldr	r3, [pc, #608]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	015b      	lsls	r3, r3, #5
 8003a2e:	4995      	ldr	r1, [pc, #596]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60cb      	str	r3, [r1, #12]
 8003a34:	e036      	b.n	8003aa4 <HAL_RCC_OscConfig+0x314>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3e:	d30a      	bcc.n	8003a56 <HAL_RCC_OscConfig+0x2c6>
 8003a40:	4b90      	ldr	r3, [pc, #576]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	029b      	lsls	r3, r3, #10
 8003a4e:	498d      	ldr	r1, [pc, #564]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
 8003a54:	e026      	b.n	8003aa4 <HAL_RCC_OscConfig+0x314>
 8003a56:	4b8b      	ldr	r3, [pc, #556]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	03db      	lsls	r3, r3, #15
 8003a64:	4987      	ldr	r1, [pc, #540]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60cb      	str	r3, [r1, #12]
 8003a6a:	e01b      	b.n	8003aa4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003a6c:	4b85      	ldr	r3, [pc, #532]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a84      	ldr	r2, [pc, #528]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a78:	f7fd fd82 	bl	8001580 <HAL_GetTick>
 8003a7c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a7e:	e009      	b.n	8003a94 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a80:	f7fd fd7e 	bl	8001580 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d902      	bls.n	8003a94 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	f000 bd53 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a94:	4b7b      	ldr	r3, [pc, #492]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ef      	bne.n	8003a80 <HAL_RCC_OscConfig+0x2f0>
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003aa2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 808b 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x334>
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d106      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d17d      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	f000 bd34 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ada:	d106      	bne.n	8003aea <HAL_RCC_OscConfig+0x35a>
 8003adc:	4b69      	ldr	r3, [pc, #420]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a68      	ldr	r2, [pc, #416]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	e041      	b.n	8003b6e <HAL_RCC_OscConfig+0x3de>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003af2:	d112      	bne.n	8003b1a <HAL_RCC_OscConfig+0x38a>
 8003af4:	4b63      	ldr	r3, [pc, #396]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a62      	ldr	r2, [pc, #392]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003afa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b60      	ldr	r3, [pc, #384]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a5f      	ldr	r2, [pc, #380]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b06:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b5d      	ldr	r3, [pc, #372]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a5c      	ldr	r2, [pc, #368]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	e029      	b.n	8003b6e <HAL_RCC_OscConfig+0x3de>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003b22:	d112      	bne.n	8003b4a <HAL_RCC_OscConfig+0x3ba>
 8003b24:	4b57      	ldr	r3, [pc, #348]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a56      	ldr	r2, [pc, #344]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b54      	ldr	r3, [pc, #336]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a53      	ldr	r2, [pc, #332]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b51      	ldr	r3, [pc, #324]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a50      	ldr	r2, [pc, #320]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	e011      	b.n	8003b6e <HAL_RCC_OscConfig+0x3de>
 8003b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a4d      	ldr	r2, [pc, #308]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b4b      	ldr	r3, [pc, #300]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b48      	ldr	r3, [pc, #288]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a47      	ldr	r2, [pc, #284]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b68:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d014      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003b76:	f7fd fd03 	bl	8001580 <HAL_GetTick>
 8003b7a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b7c:	e009      	b.n	8003b92 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b7e:	f7fd fcff 	bl	8001580 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	@ 0x64
 8003b8a:	d902      	bls.n	8003b92 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	f000 bcd4 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b92:	4b3c      	ldr	r3, [pc, #240]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ef      	beq.n	8003b7e <HAL_RCC_OscConfig+0x3ee>
 8003b9e:	e013      	b.n	8003bc8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003ba0:	f7fd fcee 	bl	8001580 <HAL_GetTick>
 8003ba4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ba6:	e009      	b.n	8003bbc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fd fcea 	bl	8001580 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	@ 0x64
 8003bb4:	d902      	bls.n	8003bbc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	f000 bcbf 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bbc:	4b31      	ldr	r3, [pc, #196]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ef      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05f      	beq.n	8003c94 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d005      	beq.n	8003be6 <HAL_RCC_OscConfig+0x456>
 8003bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d114      	bne.n	8003c0a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d111      	bne.n	8003c0a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d102      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f000 bca3 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003bf4:	4b23      	ldr	r3, [pc, #140]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	4920      	ldr	r1, [pc, #128]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003c08:	e044      	b.n	8003c94 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d024      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003c12:	4b1c      	ldr	r3, [pc, #112]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1b      	ldr	r2, [pc, #108]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c1e:	f7fd fcaf 	bl	8001580 <HAL_GetTick>
 8003c22:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c24:	e009      	b.n	8003c3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c26:	f7fd fcab 	bl	8001580 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d902      	bls.n	8003c3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	f000 bc80 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c3a:	4b12      	ldr	r3, [pc, #72]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0ef      	beq.n	8003c26 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003c46:	4b0f      	ldr	r3, [pc, #60]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	490b      	ldr	r1, [pc, #44]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	610b      	str	r3, [r1, #16]
 8003c5a:	e01b      	b.n	8003c94 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003c5c:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a08      	ldr	r2, [pc, #32]	@ (8003c84 <HAL_RCC_OscConfig+0x4f4>)
 8003c62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c66:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c68:	f7fd fc8a 	bl	8001580 <HAL_GetTick>
 8003c6c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c70:	f7fd fc86 	bl	8001580 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d904      	bls.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	f000 bc5b 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
 8003c84:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c88:	4baf      	ldr	r3, [pc, #700]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ed      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80c8 	beq.w	8003e32 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca8:	4ba7      	ldr	r3, [pc, #668]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d111      	bne.n	8003cda <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb6:	4ba4      	ldr	r3, [pc, #656]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cbc:	4aa2      	ldr	r2, [pc, #648]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003cbe:	f043 0304 	orr.w	r3, r3, #4
 8003cc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003cc6:	4ba0      	ldr	r3, [pc, #640]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cda:	4b9c      	ldr	r3, [pc, #624]	@ (8003f4c <HAL_RCC_OscConfig+0x7bc>)
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d119      	bne.n	8003d1a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003ce6:	4b99      	ldr	r3, [pc, #612]	@ (8003f4c <HAL_RCC_OscConfig+0x7bc>)
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cea:	4a98      	ldr	r2, [pc, #608]	@ (8003f4c <HAL_RCC_OscConfig+0x7bc>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf2:	f7fd fc45 	bl	8001580 <HAL_GetTick>
 8003cf6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cf8:	e009      	b.n	8003d0e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfa:	f7fd fc41 	bl	8001580 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d902      	bls.n	8003d0e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	f000 bc16 	b.w	800453a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d0e:	4b8f      	ldr	r3, [pc, #572]	@ (8003f4c <HAL_RCC_OscConfig+0x7bc>)
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0ef      	beq.n	8003cfa <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d05f      	beq.n	8003de2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003d22:	4b89      	ldr	r3, [pc, #548]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d28:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d037      	beq.n	8003da8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d006      	beq.n	8003d50 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e3f4      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01b      	beq.n	8003d92 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d60:	4a79      	ldr	r2, [pc, #484]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003d62:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003d66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003d6a:	f7fd fc09 	bl	8001580 <HAL_GetTick>
 8003d6e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d72:	f7fd fc05 	bl	8001580 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b05      	cmp	r3, #5
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e3da      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d84:	4b70      	ldr	r3, [pc, #448]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003d86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1ef      	bne.n	8003d72 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003d92:	4b6d      	ldr	r3, [pc, #436]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d98:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	4969      	ldr	r1, [pc, #420]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003da8:	4b67      	ldr	r3, [pc, #412]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dae:	4a66      	ldr	r2, [pc, #408]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003db0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003db4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003db8:	f7fd fbe2 	bl	8001580 <HAL_GetTick>
 8003dbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc0:	f7fd fbde 	bl	8001580 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e3b3      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0ef      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x630>
 8003de0:	e01b      	b.n	8003e1a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003de2:	4b59      	ldr	r3, [pc, #356]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003de8:	4a57      	ldr	r2, [pc, #348]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003dea:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003dee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003df2:	f7fd fbc5 	bl	8001580 <HAL_GetTick>
 8003df6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfa:	f7fd fbc1 	bl	8001580 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e396      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ef      	bne.n	8003dfa <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e1a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4b49      	ldr	r3, [pc, #292]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e28:	4a47      	ldr	r2, [pc, #284]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003e2a:	f023 0304 	bic.w	r3, r3, #4
 8003e2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 8111 	beq.w	8004062 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e46:	4b40      	ldr	r3, [pc, #256]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d111      	bne.n	8003e78 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e54:	4b3c      	ldr	r3, [pc, #240]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e5a:	4a3b      	ldr	r2, [pc, #236]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003e5c:	f043 0304 	orr.w	r3, r3, #4
 8003e60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e64:	4b38      	ldr	r3, [pc, #224]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e78:	4b34      	ldr	r3, [pc, #208]	@ (8003f4c <HAL_RCC_OscConfig+0x7bc>)
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d118      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e84:	4b31      	ldr	r3, [pc, #196]	@ (8003f4c <HAL_RCC_OscConfig+0x7bc>)
 8003e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e88:	4a30      	ldr	r2, [pc, #192]	@ (8003f4c <HAL_RCC_OscConfig+0x7bc>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e90:	f7fd fb76 	bl	8001580 <HAL_GetTick>
 8003e94:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7fd fb72 	bl	8001580 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e347      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003eaa:	4b28      	ldr	r3, [pc, #160]	@ (8003f4c <HAL_RCC_OscConfig+0x7bc>)
 8003eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01f      	beq.n	8003f02 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d010      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ece:	4b1e      	ldr	r3, [pc, #120]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003ed6:	f043 0304 	orr.w	r3, r3, #4
 8003eda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ede:	4b1a      	ldr	r3, [pc, #104]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ee4:	4a18      	ldr	r2, [pc, #96]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003eee:	e018      	b.n	8003f22 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ef0:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ef6:	4a14      	ldr	r2, [pc, #80]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f00:	e00f      	b.n	8003f22 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f02:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f08:	4a0f      	ldr	r2, [pc, #60]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f12:	4b0d      	ldr	r3, [pc, #52]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f18:	4a0b      	ldr	r2, [pc, #44]	@ (8003f48 <HAL_RCC_OscConfig+0x7b8>)
 8003f1a:	f023 0304 	bic.w	r3, r3, #4
 8003f1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d057      	beq.n	8003fda <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003f2a:	f7fd fb29 	bl	8001580 <HAL_GetTick>
 8003f2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f30:	e00e      	b.n	8003f50 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f32:	f7fd fb25 	bl	8001580 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d905      	bls.n	8003f50 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e2f8      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
 8003f48:	46020c00 	.word	0x46020c00
 8003f4c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f50:	4b9c      	ldr	r3, [pc, #624]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8003f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0e9      	beq.n	8003f32 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01b      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f6a:	4b96      	ldr	r3, [pc, #600]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8003f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f70:	4a94      	ldr	r2, [pc, #592]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8003f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7c:	f7fd fb00 	bl	8001580 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e2d3      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f92:	4b8c      	ldr	r3, [pc, #560]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8003f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0ed      	beq.n	8003f7c <HAL_RCC_OscConfig+0x7ec>
 8003fa0:	e053      	b.n	800404a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003fa2:	4b88      	ldr	r3, [pc, #544]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8003fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa8:	4a86      	ldr	r2, [pc, #536]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8003faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb4:	f7fd fae4 	bl	8001580 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e2b7      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fca:	4b7e      	ldr	r3, [pc, #504]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8003fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1ed      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x824>
 8003fd8:	e037      	b.n	800404a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003fda:	f7fd fad1 	bl	8001580 <HAL_GetTick>
 8003fde:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fd facd 	bl	8001580 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e2a0      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff8:	4b72      	ldr	r3, [pc, #456]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8003ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ed      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004006:	4b6f      	ldr	r3, [pc, #444]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8004008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800400c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01a      	beq.n	800404a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004014:	4b6b      	ldr	r3, [pc, #428]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8004016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800401a:	4a6a      	ldr	r2, [pc, #424]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 800401c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004020:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004024:	e00a      	b.n	800403c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004026:	f7fd faab 	bl	8001580 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004034:	4293      	cmp	r3, r2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e27e      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800403c:	4b61      	ldr	r3, [pc, #388]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 800403e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1ed      	bne.n	8004026 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800404a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004052:	4b5c      	ldr	r3, [pc, #368]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8004054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004058:	4a5a      	ldr	r2, [pc, #360]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 800405a:	f023 0304 	bic.w	r3, r3, #4
 800405e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d036      	beq.n	80040dc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d019      	beq.n	80040aa <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004076:	4b53      	ldr	r3, [pc, #332]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a52      	ldr	r2, [pc, #328]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 800407c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004080:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004082:	f7fd fa7d 	bl	8001580 <HAL_GetTick>
 8004086:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800408a:	f7fd fa79 	bl	8001580 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e24e      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800409c:	4b49      	ldr	r3, [pc, #292]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x8fa>
 80040a8:	e018      	b.n	80040dc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80040aa:	4b46      	ldr	r3, [pc, #280]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a45      	ldr	r2, [pc, #276]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 80040b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040b6:	f7fd fa63 	bl	8001580 <HAL_GetTick>
 80040ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040be:	f7fd fa5f 	bl	8001580 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e234      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80040d0:	4b3c      	ldr	r3, [pc, #240]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f0      	bne.n	80040be <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d036      	beq.n	8004156 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d019      	beq.n	8004124 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80040f0:	4b34      	ldr	r3, [pc, #208]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a33      	ldr	r2, [pc, #204]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 80040f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040fc:	f7fd fa40 	bl	8001580 <HAL_GetTick>
 8004100:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004104:	f7fd fa3c 	bl	8001580 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e211      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004116:	4b2b      	ldr	r3, [pc, #172]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x974>
 8004122:	e018      	b.n	8004156 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004124:	4b27      	ldr	r3, [pc, #156]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a26      	ldr	r2, [pc, #152]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 800412a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800412e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004130:	f7fd fa26 	bl	8001580 <HAL_GetTick>
 8004134:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004138:	f7fd fa22 	bl	8001580 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e1f7      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800414a:	4b1e      	ldr	r3, [pc, #120]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d07f      	beq.n	8004262 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004166:	2b00      	cmp	r3, #0
 8004168:	d062      	beq.n	8004230 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800416a:	4b16      	ldr	r3, [pc, #88]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4a15      	ldr	r2, [pc, #84]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8004170:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004174:	6093      	str	r3, [r2, #8]
 8004176:	4b13      	ldr	r3, [pc, #76]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	4910      	ldr	r1, [pc, #64]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8004184:	4313      	orrs	r3, r2
 8004186:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004190:	d309      	bcc.n	80041a6 <HAL_RCC_OscConfig+0xa16>
 8004192:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f023 021f 	bic.w	r2, r3, #31
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	4909      	ldr	r1, [pc, #36]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60cb      	str	r3, [r1, #12]
 80041a4:	e02a      	b.n	80041fc <HAL_RCC_OscConfig+0xa6c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	da0c      	bge.n	80041c8 <HAL_RCC_OscConfig+0xa38>
 80041ae:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	015b      	lsls	r3, r3, #5
 80041bc:	4901      	ldr	r1, [pc, #4]	@ (80041c4 <HAL_RCC_OscConfig+0xa34>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	60cb      	str	r3, [r1, #12]
 80041c2:	e01b      	b.n	80041fc <HAL_RCC_OscConfig+0xa6c>
 80041c4:	46020c00 	.word	0x46020c00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d0:	d30a      	bcc.n	80041e8 <HAL_RCC_OscConfig+0xa58>
 80041d2:	4ba1      	ldr	r3, [pc, #644]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	029b      	lsls	r3, r3, #10
 80041e0:	499d      	ldr	r1, [pc, #628]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60cb      	str	r3, [r1, #12]
 80041e6:	e009      	b.n	80041fc <HAL_RCC_OscConfig+0xa6c>
 80041e8:	4b9b      	ldr	r3, [pc, #620]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	03db      	lsls	r3, r3, #15
 80041f6:	4998      	ldr	r1, [pc, #608]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80041fc:	4b96      	ldr	r3, [pc, #600]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a95      	ldr	r2, [pc, #596]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004202:	f043 0310 	orr.w	r3, r3, #16
 8004206:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004208:	f7fd f9ba 	bl	8001580 <HAL_GetTick>
 800420c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004210:	f7fd f9b6 	bl	8001580 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e18b      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004222:	4b8d      	ldr	r3, [pc, #564]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0xa80>
 800422e:	e018      	b.n	8004262 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004230:	4b89      	ldr	r3, [pc, #548]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a88      	ldr	r2, [pc, #544]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004236:	f023 0310 	bic.w	r3, r3, #16
 800423a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800423c:	f7fd f9a0 	bl	8001580 <HAL_GetTick>
 8004240:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004244:	f7fd f99c 	bl	8001580 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e171      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004256:	4b80      	ldr	r3, [pc, #512]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 8166 	beq.w	8004538 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800426c:	2300      	movs	r3, #0
 800426e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004272:	4b79      	ldr	r3, [pc, #484]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b0c      	cmp	r3, #12
 800427c:	f000 80f2 	beq.w	8004464 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	2b02      	cmp	r3, #2
 8004286:	f040 80c5 	bne.w	8004414 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800428a:	4b73      	ldr	r3, [pc, #460]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a72      	ldr	r2, [pc, #456]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004290:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004294:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004296:	f7fd f973 	bl	8001580 <HAL_GetTick>
 800429a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429e:	f7fd f96f 	bl	8001580 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e144      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042b0:	4b69      	ldr	r3, [pc, #420]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f0      	bne.n	800429e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042bc:	4b66      	ldr	r3, [pc, #408]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80042be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d111      	bne.n	80042ee <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80042ca:	4b63      	ldr	r3, [pc, #396]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80042cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d0:	4a61      	ldr	r2, [pc, #388]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80042da:	4b5f      	ldr	r3, [pc, #380]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80042dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80042ee:	4b5b      	ldr	r3, [pc, #364]	@ (800445c <HAL_RCC_OscConfig+0xccc>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042fa:	d102      	bne.n	8004302 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004302:	4b56      	ldr	r3, [pc, #344]	@ (800445c <HAL_RCC_OscConfig+0xccc>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	4a55      	ldr	r2, [pc, #340]	@ (800445c <HAL_RCC_OscConfig+0xccc>)
 8004308:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800430c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800430e:	4b52      	ldr	r3, [pc, #328]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004316:	f023 0303 	bic.w	r3, r3, #3
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004322:	3a01      	subs	r2, #1
 8004324:	0212      	lsls	r2, r2, #8
 8004326:	4311      	orrs	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800432c:	430a      	orrs	r2, r1
 800432e:	494a      	ldr	r1, [pc, #296]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004330:	4313      	orrs	r3, r2
 8004332:	628b      	str	r3, [r1, #40]	@ 0x28
 8004334:	4b48      	ldr	r3, [pc, #288]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004338:	4b49      	ldr	r3, [pc, #292]	@ (8004460 <HAL_RCC_OscConfig+0xcd0>)
 800433a:	4013      	ands	r3, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004340:	3a01      	subs	r2, #1
 8004342:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800434a:	3a01      	subs	r2, #1
 800434c:	0252      	lsls	r2, r2, #9
 800434e:	b292      	uxth	r2, r2
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004356:	3a01      	subs	r2, #1
 8004358:	0412      	lsls	r2, r2, #16
 800435a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800435e:	4311      	orrs	r1, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004364:	3a01      	subs	r2, #1
 8004366:	0612      	lsls	r2, r2, #24
 8004368:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800436c:	430a      	orrs	r2, r1
 800436e:	493a      	ldr	r1, [pc, #232]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004370:	4313      	orrs	r3, r2
 8004372:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004374:	4b38      	ldr	r3, [pc, #224]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004378:	4a37      	ldr	r2, [pc, #220]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 800437a:	f023 0310 	bic.w	r3, r3, #16
 800437e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004384:	4a34      	ldr	r2, [pc, #208]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800438a:	4b33      	ldr	r3, [pc, #204]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	4a32      	ldr	r2, [pc, #200]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004390:	f043 0310 	orr.w	r3, r3, #16
 8004394:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004396:	4b30      	ldr	r3, [pc, #192]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439a:	f023 020c 	bic.w	r2, r3, #12
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	492d      	ldr	r1, [pc, #180]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80043a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d105      	bne.n	80043bc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80043b0:	4b2a      	ldr	r3, [pc, #168]	@ (800445c <HAL_RCC_OscConfig+0xccc>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a29      	ldr	r2, [pc, #164]	@ (800445c <HAL_RCC_OscConfig+0xccc>)
 80043b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ba:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80043bc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d107      	bne.n	80043d4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80043c4:	4b24      	ldr	r3, [pc, #144]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80043c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ca:	4a23      	ldr	r2, [pc, #140]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80043d4:	4b20      	ldr	r3, [pc, #128]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80043da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043e0:	f7fd f8ce 	bl	8001580 <HAL_GetTick>
 80043e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fd f8ca 	bl	8001580 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e09f      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043fa:	4b17      	ldr	r3, [pc, #92]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004406:	4b14      	ldr	r3, [pc, #80]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440a:	4a13      	ldr	r2, [pc, #76]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 800440c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004410:	6293      	str	r3, [r2, #40]	@ 0x28
 8004412:	e091      	b.n	8004538 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004414:	4b10      	ldr	r3, [pc, #64]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a0f      	ldr	r2, [pc, #60]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 800441a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800441e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004420:	f7fd f8ae 	bl	8001580 <HAL_GetTick>
 8004424:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7fd f8aa 	bl	8001580 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e07f      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800443a:	4b07      	ldr	r3, [pc, #28]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004446:	4b04      	ldr	r3, [pc, #16]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	4a03      	ldr	r2, [pc, #12]	@ (8004458 <HAL_RCC_OscConfig+0xcc8>)
 800444c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004450:	f023 0303 	bic.w	r3, r3, #3
 8004454:	6293      	str	r3, [r2, #40]	@ 0x28
 8004456:	e06f      	b.n	8004538 <HAL_RCC_OscConfig+0xda8>
 8004458:	46020c00 	.word	0x46020c00
 800445c:	46020800 	.word	0x46020800
 8004460:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004464:	4b37      	ldr	r3, [pc, #220]	@ (8004544 <HAL_RCC_OscConfig+0xdb4>)
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800446a:	4b36      	ldr	r3, [pc, #216]	@ (8004544 <HAL_RCC_OscConfig+0xdb4>)
 800446c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004474:	2b01      	cmp	r3, #1
 8004476:	d039      	beq.n	80044ec <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 0203 	and.w	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d132      	bne.n	80044ec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d129      	bne.n	80044ec <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d122      	bne.n	80044ec <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d11a      	bne.n	80044ec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	0a5b      	lsrs	r3, r3, #9
 80044ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d111      	bne.n	80044ec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d108      	bne.n	80044ec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	0e1b      	lsrs	r3, r3, #24
 80044de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e024      	b.n	800453a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80044f0:	4b14      	ldr	r3, [pc, #80]	@ (8004544 <HAL_RCC_OscConfig+0xdb4>)
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	08db      	lsrs	r3, r3, #3
 80044f6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80044fe:	429a      	cmp	r2, r3
 8004500:	d01a      	beq.n	8004538 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004502:	4b10      	ldr	r3, [pc, #64]	@ (8004544 <HAL_RCC_OscConfig+0xdb4>)
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	4a0f      	ldr	r2, [pc, #60]	@ (8004544 <HAL_RCC_OscConfig+0xdb4>)
 8004508:	f023 0310 	bic.w	r3, r3, #16
 800450c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fd f837 	bl	8001580 <HAL_GetTick>
 8004512:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004514:	bf00      	nop
 8004516:	f7fd f833 	bl	8001580 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451e:	4293      	cmp	r3, r2
 8004520:	d0f9      	beq.n	8004516 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004526:	4a07      	ldr	r2, [pc, #28]	@ (8004544 <HAL_RCC_OscConfig+0xdb4>)
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_RCC_OscConfig+0xdb4>)
 800452e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004530:	4a04      	ldr	r2, [pc, #16]	@ (8004544 <HAL_RCC_OscConfig+0xdb4>)
 8004532:	f043 0310 	orr.w	r3, r3, #16
 8004536:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3738      	adds	r7, #56	@ 0x38
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	46020c00 	.word	0x46020c00

08004548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e1d9      	b.n	8004910 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800455c:	4b9b      	ldr	r3, [pc, #620]	@ (80047cc <HAL_RCC_ClockConfig+0x284>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d910      	bls.n	800458c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b98      	ldr	r3, [pc, #608]	@ (80047cc <HAL_RCC_ClockConfig+0x284>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 020f 	bic.w	r2, r3, #15
 8004572:	4996      	ldr	r1, [pc, #600]	@ (80047cc <HAL_RCC_ClockConfig+0x284>)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b94      	ldr	r3, [pc, #592]	@ (80047cc <HAL_RCC_ClockConfig+0x284>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e1c1      	b.n	8004910 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	d010      	beq.n	80045ba <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	4b8c      	ldr	r3, [pc, #560]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d908      	bls.n	80045ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80045a8:	4b89      	ldr	r3, [pc, #548]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	4986      	ldr	r1, [pc, #536]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d012      	beq.n	80045ec <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	4b81      	ldr	r3, [pc, #516]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d909      	bls.n	80045ec <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80045d8:	4b7d      	ldr	r3, [pc, #500]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	497a      	ldr	r1, [pc, #488]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d010      	beq.n	800461a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	4b74      	ldr	r3, [pc, #464]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004604:	429a      	cmp	r2, r3
 8004606:	d908      	bls.n	800461a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004608:	4b71      	ldr	r3, [pc, #452]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	496e      	ldr	r1, [pc, #440]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 8004616:	4313      	orrs	r3, r2
 8004618:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d010      	beq.n	8004648 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	4b69      	ldr	r3, [pc, #420]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	429a      	cmp	r2, r3
 8004634:	d908      	bls.n	8004648 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004636:	4b66      	ldr	r3, [pc, #408]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f023 020f 	bic.w	r2, r3, #15
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	4963      	ldr	r1, [pc, #396]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 8004644:	4313      	orrs	r3, r2
 8004646:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80d2 	beq.w	80047fa <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b03      	cmp	r3, #3
 8004660:	d143      	bne.n	80046ea <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004662:	4b5b      	ldr	r3, [pc, #364]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 8004664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d110      	bne.n	8004692 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004670:	4b57      	ldr	r3, [pc, #348]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 8004672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004676:	4a56      	ldr	r2, [pc, #344]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004680:	4b53      	ldr	r3, [pc, #332]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 8004682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800468e:	2301      	movs	r3, #1
 8004690:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004692:	f7fc ff75 	bl	8001580 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004698:	4b4e      	ldr	r3, [pc, #312]	@ (80047d4 <HAL_RCC_ClockConfig+0x28c>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00f      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80046a6:	f7fc ff6b 	bl	8001580 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e12b      	b.n	8004910 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80046b8:	4b46      	ldr	r3, [pc, #280]	@ (80047d4 <HAL_RCC_ClockConfig+0x28c>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80046ca:	4b41      	ldr	r3, [pc, #260]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 80046cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d0:	4a3f      	ldr	r2, [pc, #252]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 80046d2:	f023 0304 	bic.w	r3, r3, #4
 80046d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80046da:	4b3d      	ldr	r3, [pc, #244]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d121      	bne.n	800472a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e112      	b.n	8004910 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f2:	4b37      	ldr	r3, [pc, #220]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d115      	bne.n	800472a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e106      	b.n	8004910 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d107      	bne.n	800471a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800470a:	4b31      	ldr	r3, [pc, #196]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e0fa      	b.n	8004910 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800471a:	4b2d      	ldr	r3, [pc, #180]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e0f2      	b.n	8004910 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800472a:	4b29      	ldr	r3, [pc, #164]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f023 0203 	bic.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4926      	ldr	r1, [pc, #152]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 8004738:	4313      	orrs	r3, r2
 800473a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800473c:	f7fc ff20 	bl	8001580 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b03      	cmp	r3, #3
 8004748:	d112      	bne.n	8004770 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800474a:	e00a      	b.n	8004762 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474c:	f7fc ff18 	bl	8001580 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e0d6      	b.n	8004910 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004762:	4b1b      	ldr	r3, [pc, #108]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d1ee      	bne.n	800474c <HAL_RCC_ClockConfig+0x204>
 800476e:	e044      	b.n	80047fa <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d112      	bne.n	800479e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004778:	e00a      	b.n	8004790 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800477a:	f7fc ff01 	bl	8001580 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004788:	4293      	cmp	r3, r2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e0bf      	b.n	8004910 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004790:	4b0f      	ldr	r3, [pc, #60]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	2b08      	cmp	r3, #8
 800479a:	d1ee      	bne.n	800477a <HAL_RCC_ClockConfig+0x232>
 800479c:	e02d      	b.n	80047fa <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d123      	bne.n	80047ee <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80047a6:	e00a      	b.n	80047be <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a8:	f7fc feea 	bl	8001580 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e0a8      	b.n	8004910 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80047be:	4b04      	ldr	r3, [pc, #16]	@ (80047d0 <HAL_RCC_ClockConfig+0x288>)
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ee      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x260>
 80047ca:	e016      	b.n	80047fa <HAL_RCC_ClockConfig+0x2b2>
 80047cc:	40022000 	.word	0x40022000
 80047d0:	46020c00 	.word	0x46020c00
 80047d4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d8:	f7fc fed2 	bl	8001580 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e090      	b.n	8004910 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d1ee      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d010      	beq.n	8004828 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	4b43      	ldr	r3, [pc, #268]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	429a      	cmp	r2, r3
 8004814:	d208      	bcs.n	8004828 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004816:	4b40      	ldr	r3, [pc, #256]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f023 020f 	bic.w	r2, r3, #15
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	493d      	ldr	r1, [pc, #244]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 8004824:	4313      	orrs	r3, r2
 8004826:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004828:	4b3c      	ldr	r3, [pc, #240]	@ (800491c <HAL_RCC_ClockConfig+0x3d4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d210      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b39      	ldr	r3, [pc, #228]	@ (800491c <HAL_RCC_ClockConfig+0x3d4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f023 020f 	bic.w	r2, r3, #15
 800483e:	4937      	ldr	r1, [pc, #220]	@ (800491c <HAL_RCC_ClockConfig+0x3d4>)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	4313      	orrs	r3, r2
 8004844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b35      	ldr	r3, [pc, #212]	@ (800491c <HAL_RCC_ClockConfig+0x3d4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e05b      	b.n	8004910 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d010      	beq.n	8004886 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	4b2b      	ldr	r3, [pc, #172]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004870:	429a      	cmp	r2, r3
 8004872:	d208      	bcs.n	8004886 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004874:	4b28      	ldr	r3, [pc, #160]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4925      	ldr	r1, [pc, #148]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 8004882:	4313      	orrs	r3, r2
 8004884:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d012      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	4b20      	ldr	r3, [pc, #128]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d209      	bcs.n	80048b8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80048a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	4919      	ldr	r1, [pc, #100]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d010      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695a      	ldr	r2, [r3, #20]
 80048c8:	4b13      	ldr	r3, [pc, #76]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d208      	bcs.n	80048e6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80048d4:	4b10      	ldr	r3, [pc, #64]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	490d      	ldr	r1, [pc, #52]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80048e6:	f000 f821 	bl	800492c <HAL_RCC_GetSysClockFreq>
 80048ea:	4602      	mov	r2, r0
 80048ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <HAL_RCC_ClockConfig+0x3d0>)
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	490a      	ldr	r1, [pc, #40]	@ (8004920 <HAL_RCC_ClockConfig+0x3d8>)
 80048f6:	5ccb      	ldrb	r3, [r1, r3]
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
 80048fc:	4a09      	ldr	r2, [pc, #36]	@ (8004924 <HAL_RCC_ClockConfig+0x3dc>)
 80048fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004900:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <HAL_RCC_ClockConfig+0x3e0>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f7fc fdb1 	bl	800146c <HAL_InitTick>
 800490a:	4603      	mov	r3, r0
 800490c:	73fb      	strb	r3, [r7, #15]

  return status;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	46020c00 	.word	0x46020c00
 800491c:	40022000 	.word	0x40022000
 8004920:	08008694 	.word	0x08008694
 8004924:	20000000 	.word	0x20000000
 8004928:	20000004 	.word	0x20000004

0800492c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800492c:	b480      	push	{r7}
 800492e:	b08b      	sub	sp, #44	@ 0x2c
 8004930:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800493a:	4b78      	ldr	r3, [pc, #480]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f003 030c 	and.w	r3, r3, #12
 8004942:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004944:	4b75      	ldr	r3, [pc, #468]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x34>
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d121      	bne.n	800499e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d11e      	bne.n	800499e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004960:	4b6e      	ldr	r3, [pc, #440]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d107      	bne.n	800497c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800496c:	4b6b      	ldr	r3, [pc, #428]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800496e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004972:	0b1b      	lsrs	r3, r3, #12
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
 800497a:	e005      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800497c:	4b67      	ldr	r3, [pc, #412]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	0f1b      	lsrs	r3, r3, #28
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004988:	4a65      	ldr	r2, [pc, #404]	@ (8004b20 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d110      	bne.n	80049ba <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800499c:	e00d      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800499e:	4b5f      	ldr	r3, [pc, #380]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f003 030c 	and.w	r3, r3, #12
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d102      	bne.n	80049b0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049aa:	4b5e      	ldr	r3, [pc, #376]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80049ac:	623b      	str	r3, [r7, #32]
 80049ae:	e004      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80049b8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	2b0c      	cmp	r3, #12
 80049be:	f040 80a5 	bne.w	8004b0c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80049c2:	4b56      	ldr	r3, [pc, #344]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80049cc:	4b53      	ldr	r3, [pc, #332]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	3301      	adds	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80049da:	4b50      	ldr	r3, [pc, #320]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80049e6:	4b4d      	ldr	r3, [pc, #308]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ea:	08db      	lsrs	r3, r3, #3
 80049ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	fb02 f303 	mul.w	r3, r2, r3
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d003      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0xe4>
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d022      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x128>
 8004a0e:	e043      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004b28 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a22:	4b3e      	ldr	r3, [pc, #248]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a32:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a36:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004b2c <HAL_RCC_GetSysClockFreq+0x200>
 8004a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a52:	e046      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004b28 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	4b2d      	ldr	r3, [pc, #180]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a76:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a7a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004b2c <HAL_RCC_GetSysClockFreq+0x200>
 8004a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a96:	e024      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	ee07 3a90 	vmov	s15, r3
 8004aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004ac0:	ed97 6a01 	vldr	s12, [r7, #4]
 8004ac4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004b2c <HAL_RCC_GetSysClockFreq+0x200>
 8004ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004acc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004ad0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004adc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae6:	0e1b      	lsrs	r3, r3, #24
 8004ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aec:	3301      	adds	r3, #1
 8004aee:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b06:	ee17 3a90 	vmov	r3, s15
 8004b0a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	372c      	adds	r7, #44	@ 0x2c
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	46020c00 	.word	0x46020c00
 8004b20:	080086a4 	.word	0x080086a4
 8004b24:	00f42400 	.word	0x00f42400
 8004b28:	4b742400 	.word	0x4b742400
 8004b2c:	46000000 	.word	0x46000000

08004b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004b34:	f7ff fefa 	bl	800492c <HAL_RCC_GetSysClockFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b07      	ldr	r3, [pc, #28]	@ (8004b58 <HAL_RCC_GetHCLKFreq+0x28>)
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	4906      	ldr	r1, [pc, #24]	@ (8004b5c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004b44:	5ccb      	ldrb	r3, [r1, r3]
 8004b46:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4a:	4a05      	ldr	r2, [pc, #20]	@ (8004b60 <HAL_RCC_GetHCLKFreq+0x30>)
 8004b4c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004b4e:	4b04      	ldr	r3, [pc, #16]	@ (8004b60 <HAL_RCC_GetHCLKFreq+0x30>)
 8004b50:	681b      	ldr	r3, [r3, #0]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	46020c00 	.word	0x46020c00
 8004b5c:	08008694 	.word	0x08008694
 8004b60:	20000000 	.word	0x20000000

08004b64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c68 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b7a:	f7fe fdeb 	bl	8003754 <HAL_PWREx_GetVoltageRange>
 8004b7e:	6178      	str	r0, [r7, #20]
 8004b80:	e019      	b.n	8004bb6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b82:	4b39      	ldr	r3, [pc, #228]	@ (8004c68 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b88:	4a37      	ldr	r2, [pc, #220]	@ (8004c68 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b8a:	f043 0304 	orr.w	r3, r3, #4
 8004b8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b92:	4b35      	ldr	r3, [pc, #212]	@ (8004c68 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ba0:	f7fe fdd8 	bl	8003754 <HAL_PWREx_GetVoltageRange>
 8004ba4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ba6:	4b30      	ldr	r3, [pc, #192]	@ (8004c68 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bac:	4a2e      	ldr	r2, [pc, #184]	@ (8004c68 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bae:	f023 0304 	bic.w	r3, r3, #4
 8004bb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bbc:	d003      	beq.n	8004bc6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bc4:	d109      	bne.n	8004bda <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bcc:	d202      	bcs.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004bce:	2301      	movs	r3, #1
 8004bd0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004bd2:	e033      	b.n	8004c3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004bd8:	e030      	b.n	8004c3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004be0:	d208      	bcs.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be8:	d102      	bne.n	8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004bea:	2303      	movs	r3, #3
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	e025      	b.n	8004c3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e035      	b.n	8004c60 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bfa:	d90f      	bls.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c08:	d902      	bls.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	e015      	b.n	8004c3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004c10:	2301      	movs	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	e012      	b.n	8004c3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	e00f      	b.n	8004c3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c22:	d109      	bne.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c2a:	d102      	bne.n	8004c32 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	e004      	b.n	8004c3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004c32:	2302      	movs	r3, #2
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	e001      	b.n	8004c3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004c38:	2301      	movs	r3, #1
 8004c3a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f023 020f 	bic.w	r2, r3, #15
 8004c44:	4909      	ldr	r1, [pc, #36]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004c4c:	4b07      	ldr	r3, [pc, #28]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d001      	beq.n	8004c5e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	46020c00 	.word	0x46020c00
 8004c6c:	40022000 	.word	0x40022000

08004c70 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c74:	b0b8      	sub	sp, #224	@ 0xe0
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c82:	2300      	movs	r3, #0
 8004c84:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	f002 0401 	and.w	r4, r2, #1
 8004c94:	2500      	movs	r5, #0
 8004c96:	ea54 0305 	orrs.w	r3, r4, r5
 8004c9a:	d00b      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004c9c:	4bca      	ldr	r3, [pc, #808]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ca2:	f023 0103 	bic.w	r1, r3, #3
 8004ca6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cac:	4ac6      	ldr	r2, [pc, #792]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f002 0802 	and.w	r8, r2, #2
 8004cc0:	f04f 0900 	mov.w	r9, #0
 8004cc4:	ea58 0309 	orrs.w	r3, r8, r9
 8004cc8:	d00b      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004cca:	4bbf      	ldr	r3, [pc, #764]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cd0:	f023 010c 	bic.w	r1, r3, #12
 8004cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cda:	4abb      	ldr	r2, [pc, #748]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ce2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f002 0a04 	and.w	sl, r2, #4
 8004cee:	f04f 0b00 	mov.w	fp, #0
 8004cf2:	ea5a 030b 	orrs.w	r3, sl, fp
 8004cf6:	d00b      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004cf8:	4bb3      	ldr	r3, [pc, #716]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cfe:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d08:	4aaf      	ldr	r2, [pc, #700]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f002 0308 	and.w	r3, r2, #8
 8004d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d20:	2300      	movs	r3, #0
 8004d22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004d30:	4ba5      	ldr	r3, [pc, #660]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d40:	4aa1      	ldr	r2, [pc, #644]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d42:	430b      	orrs	r3, r1
 8004d44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f002 0310 	and.w	r3, r2, #16
 8004d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004d5e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d62:	460b      	mov	r3, r1
 8004d64:	4313      	orrs	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004d68:	4b97      	ldr	r3, [pc, #604]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d78:	4a93      	ldr	r2, [pc, #588]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f002 0320 	and.w	r3, r2, #32
 8004d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d90:	2300      	movs	r3, #0
 8004d92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	d00b      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004da0:	4b89      	ldr	r3, [pc, #548]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004da6:	f023 0107 	bic.w	r1, r3, #7
 8004daa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004db0:	4a85      	ldr	r2, [pc, #532]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004db2:	430b      	orrs	r3, r1
 8004db4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004db8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004dd8:	4b7b      	ldr	r3, [pc, #492]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dde:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004de2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004de8:	4a77      	ldr	r2, [pc, #476]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dea:	430b      	orrs	r3, r1
 8004dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004df0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e00:	2300      	movs	r3, #0
 8004e02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e06:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	d00b      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004e10:	4b6d      	ldr	r3, [pc, #436]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e20:	4a69      	ldr	r2, [pc, #420]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e22:	430b      	orrs	r3, r1
 8004e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004e34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004e42:	460b      	mov	r3, r1
 8004e44:	4313      	orrs	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004e48:	4b5f      	ldr	r3, [pc, #380]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e58:	4a5b      	ldr	r2, [pc, #364]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004e6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e70:	2300      	movs	r3, #0
 8004e72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	d00b      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004e80:	4b51      	ldr	r3, [pc, #324]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e86:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e90:	4a4d      	ldr	r2, [pc, #308]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e92:	430b      	orrs	r3, r1
 8004e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004eae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	d00b      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004eb8:	4b43      	ldr	r3, [pc, #268]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004eba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ebe:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004ec2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ec6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ec8:	4a3f      	ldr	r2, [pc, #252]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ee6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	d00b      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004ef0:	4b35      	ldr	r3, [pc, #212]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ef6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004efa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004efe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f00:	4a31      	ldr	r2, [pc, #196]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f02:	430b      	orrs	r3, r1
 8004f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004f14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f16:	2300      	movs	r3, #0
 8004f18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4313      	orrs	r3, r2
 8004f22:	d00c      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004f24:	4b28      	ldr	r3, [pc, #160]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f36:	4a24      	ldr	r2, [pc, #144]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f50:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004f54:	460b      	mov	r3, r1
 8004f56:	4313      	orrs	r3, r2
 8004f58:	d04f      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004f5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f62:	2b80      	cmp	r3, #128	@ 0x80
 8004f64:	d02d      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004f66:	2b80      	cmp	r3, #128	@ 0x80
 8004f68:	d827      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f6a:	2b60      	cmp	r3, #96	@ 0x60
 8004f6c:	d02e      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004f6e:	2b60      	cmp	r3, #96	@ 0x60
 8004f70:	d823      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f72:	2b40      	cmp	r3, #64	@ 0x40
 8004f74:	d006      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004f76:	2b40      	cmp	r3, #64	@ 0x40
 8004f78:	d81f      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d009      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d011      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004f82:	e01a      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f84:	4b10      	ldr	r3, [pc, #64]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	4a0f      	ldr	r2, [pc, #60]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f8e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f90:	e01d      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f96:	3308      	adds	r3, #8
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fc0d 	bl	80057b8 <RCCEx_PLL2_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fa4:	e013      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004faa:	332c      	adds	r3, #44	@ 0x2c
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fc9b 	bl	80058e8 <RCCEx_PLL3_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fb8:	e009      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004fc0:	e005      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004fc2:	bf00      	nop
 8004fc4:	e003      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004fc6:	bf00      	nop
 8004fc8:	46020c00 	.word	0x46020c00
        break;
 8004fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10d      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004fd6:	4bb6      	ldr	r3, [pc, #728]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fdc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe8:	4ab1      	ldr	r2, [pc, #708]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fea:	430b      	orrs	r3, r1
 8004fec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004ff0:	e003      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004ff6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ffa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005006:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005008:	2300      	movs	r3, #0
 800500a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800500c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005010:	460b      	mov	r3, r1
 8005012:	4313      	orrs	r3, r2
 8005014:	d053      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005016:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800501a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800501e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005022:	d033      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005028:	d82c      	bhi.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800502a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800502e:	d02f      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005030:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005034:	d826      	bhi.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800503a:	d008      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800503c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005040:	d820      	bhi.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800504a:	d011      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800504c:	e01a      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800504e:	4b98      	ldr	r3, [pc, #608]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005052:	4a97      	ldr	r2, [pc, #604]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005058:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800505a:	e01a      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800505c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005060:	3308      	adds	r3, #8
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fba8 	bl	80057b8 <RCCEx_PLL2_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800506e:	e010      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005070:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005074:	332c      	adds	r3, #44	@ 0x2c
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fc36 	bl	80058e8 <RCCEx_PLL3_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005082:	e006      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800508a:	e002      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800508c:	bf00      	nop
 800508e:	e000      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005092:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10d      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800509a:	4b85      	ldr	r3, [pc, #532]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800509c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050a0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80050a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ac:	4a80      	ldr	r2, [pc, #512]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050ae:	430b      	orrs	r3, r1
 80050b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050b4:	e003      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050ba:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80050be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80050ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80050cc:	2300      	movs	r3, #0
 80050ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80050d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80050d4:	460b      	mov	r3, r1
 80050d6:	4313      	orrs	r3, r2
 80050d8:	d046      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80050da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050e2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050e6:	d028      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050e8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050ec:	d821      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80050ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050f2:	d022      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050f8:	d81b      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80050fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050fe:	d01c      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005100:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005104:	d815      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800510a:	d008      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800510c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005110:	d80f      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d011      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800511a:	d00e      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800511c:	e009      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800511e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005122:	3308      	adds	r3, #8
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fb47 	bl	80057b8 <RCCEx_PLL2_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005130:	e004      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005138:	e000      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800513a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10d      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005144:	4b5a      	ldr	r3, [pc, #360]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800514a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800514e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005152:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005156:	4a56      	ldr	r2, [pc, #344]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005158:	430b      	orrs	r3, r1
 800515a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800515e:	e003      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005160:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005164:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005168:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005174:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005176:	2300      	movs	r3, #0
 8005178:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800517a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800517e:	460b      	mov	r3, r1
 8005180:	4313      	orrs	r3, r2
 8005182:	d03f      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518c:	2b04      	cmp	r3, #4
 800518e:	d81e      	bhi.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8005190:	a201      	add	r2, pc, #4	@ (adr r2, 8005198 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8005192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005196:	bf00      	nop
 8005198:	080051d7 	.word	0x080051d7
 800519c:	080051ad 	.word	0x080051ad
 80051a0:	080051bb 	.word	0x080051bb
 80051a4:	080051d7 	.word	0x080051d7
 80051a8:	080051d7 	.word	0x080051d7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051ac:	4b40      	ldr	r3, [pc, #256]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	4a3f      	ldr	r2, [pc, #252]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051b6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80051b8:	e00e      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051be:	332c      	adds	r3, #44	@ 0x2c
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fb91 	bl	80058e8 <RCCEx_PLL3_Config>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80051cc:	e004      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80051d4:	e000      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80051d6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80051d8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10d      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80051e0:	4b33      	ldr	r3, [pc, #204]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051e6:	f023 0107 	bic.w	r1, r3, #7
 80051ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f2:	4a2f      	ldr	r2, [pc, #188]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051f4:	430b      	orrs	r3, r1
 80051f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051fa:	e003      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005200:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005204:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005210:	653b      	str	r3, [r7, #80]	@ 0x50
 8005212:	2300      	movs	r3, #0
 8005214:	657b      	str	r3, [r7, #84]	@ 0x54
 8005216:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800521a:	460b      	mov	r3, r1
 800521c:	4313      	orrs	r3, r2
 800521e:	d04d      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005220:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005228:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800522c:	d028      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800522e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005232:	d821      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005234:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005238:	d024      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800523a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800523e:	d81b      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005244:	d00e      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005246:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800524a:	d815      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01b      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005254:	d110      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005256:	4b16      	ldr	r3, [pc, #88]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	4a15      	ldr	r2, [pc, #84]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800525c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005260:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005262:	e012      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005268:	332c      	adds	r3, #44	@ 0x2c
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fb3c 	bl	80058e8 <RCCEx_PLL3_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005276:	e008      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800527e:	e004      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005280:	bf00      	nop
 8005282:	e002      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005284:	bf00      	nop
 8005286:	e000      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005288:	bf00      	nop
    }
    if (ret == HAL_OK)
 800528a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800528e:	2b00      	cmp	r3, #0
 8005290:	d110      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005292:	4b07      	ldr	r3, [pc, #28]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005298:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800529c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052a4:	4a02      	ldr	r2, [pc, #8]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052a6:	430b      	orrs	r3, r1
 80052a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80052ac:	e006      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80052ae:	bf00      	nop
 80052b0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052b8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80052c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052ca:	2300      	movs	r3, #0
 80052cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80052d2:	460b      	mov	r3, r1
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f000 80b5 	beq.w	8005444 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e0:	4b9d      	ldr	r3, [pc, #628]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d113      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ee:	4b9a      	ldr	r3, [pc, #616]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052f4:	4a98      	ldr	r2, [pc, #608]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052f6:	f043 0304 	orr.w	r3, r3, #4
 80052fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80052fe:	4b96      	ldr	r3, [pc, #600]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800530c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005316:	4b91      	ldr	r3, [pc, #580]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531a:	4a90      	ldr	r2, [pc, #576]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005322:	f7fc f92d 	bl	8001580 <HAL_GetTick>
 8005326:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800532a:	e00b      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532c:	f7fc f928 	bl	8001580 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d903      	bls.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005342:	e005      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005344:	4b85      	ldr	r3, [pc, #532]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0ed      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005350:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005354:	2b00      	cmp	r3, #0
 8005356:	d165      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005358:	4b7f      	ldr	r3, [pc, #508]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800535a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800535e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800536a:	2b00      	cmp	r3, #0
 800536c:	d023      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800536e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005372:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800537a:	4293      	cmp	r3, r2
 800537c:	d01b      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800537e:	4b76      	ldr	r3, [pc, #472]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005388:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800538c:	4b72      	ldr	r3, [pc, #456]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800538e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005392:	4a71      	ldr	r2, [pc, #452]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005398:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800539c:	4b6e      	ldr	r3, [pc, #440]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800539e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053a2:	4a6d      	ldr	r2, [pc, #436]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053ac:	4a6a      	ldr	r2, [pc, #424]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d019      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c2:	f7fc f8dd 	bl	8001580 <HAL_GetTick>
 80053c6:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ca:	e00d      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053cc:	f7fc f8d8 	bl	8001580 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d6:	1ad2      	subs	r2, r2, r3
 80053d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80053dc:	429a      	cmp	r2, r3
 80053de:	d903      	bls.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80053e6:	e006      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e8:	4b5b      	ldr	r3, [pc, #364]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0ea      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80053f6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10d      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80053fe:	4b56      	ldr	r3, [pc, #344]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005404:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800540c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005410:	4a51      	ldr	r2, [pc, #324]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005412:	430b      	orrs	r3, r1
 8005414:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005418:	e008      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800541a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800541e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8005422:	e003      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005428:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800542c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8005430:	2b01      	cmp	r3, #1
 8005432:	d107      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005434:	4b48      	ldr	r3, [pc, #288]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800543a:	4a47      	ldr	r2, [pc, #284]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800543c:	f023 0304 	bic.w	r3, r3, #4
 8005440:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005444:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005450:	643b      	str	r3, [r7, #64]	@ 0x40
 8005452:	2300      	movs	r3, #0
 8005454:	647b      	str	r3, [r7, #68]	@ 0x44
 8005456:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800545a:	460b      	mov	r3, r1
 800545c:	4313      	orrs	r3, r2
 800545e:	d042      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005464:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005468:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800546c:	d022      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800546e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005472:	d81b      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005474:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005478:	d011      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800547a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800547e:	d815      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d019      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005484:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005488:	d110      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800548a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800548e:	3308      	adds	r3, #8
 8005490:	4618      	mov	r0, r3
 8005492:	f000 f991 	bl	80057b8 <RCCEx_PLL2_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800549c:	e00d      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800549e:	4b2e      	ldr	r3, [pc, #184]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054a8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80054aa:	e006      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80054b2:	e002      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80054b4:	bf00      	nop
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80054b8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054ba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10d      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80054c2:	4b25      	ldr	r3, [pc, #148]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054c8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80054cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054d4:	4a20      	ldr	r2, [pc, #128]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054d6:	430b      	orrs	r3, r1
 80054d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80054dc:	e003      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054de:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054e2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80054f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054f4:	2300      	movs	r3, #0
 80054f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80054fc:	460b      	mov	r3, r1
 80054fe:	4313      	orrs	r3, r2
 8005500:	d032      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005506:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800550a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800550e:	d00b      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005514:	d804      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d008      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551e:	d007      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005526:	e004      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005528:	bf00      	nop
 800552a:	e002      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800552c:	bf00      	nop
 800552e:	e000      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005530:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005532:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005536:	2b00      	cmp	r3, #0
 8005538:	d112      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800553a:	4b07      	ldr	r3, [pc, #28]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800553c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005540:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005544:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005548:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800554c:	4a02      	ldr	r2, [pc, #8]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800554e:	430b      	orrs	r3, r1
 8005550:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005554:	e008      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005556:	bf00      	nop
 8005558:	46020c00 	.word	0x46020c00
 800555c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005560:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005564:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005568:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005570:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005574:	633b      	str	r3, [r7, #48]	@ 0x30
 8005576:	2300      	movs	r3, #0
 8005578:	637b      	str	r3, [r7, #52]	@ 0x34
 800557a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800557e:	460b      	mov	r3, r1
 8005580:	4313      	orrs	r3, r2
 8005582:	d019      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005588:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800558c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005590:	d105      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005592:	4b88      	ldr	r3, [pc, #544]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005596:	4a87      	ldr	r2, [pc, #540]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800559c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800559e:	4b85      	ldr	r3, [pc, #532]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80055a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055b0:	4a80      	ldr	r2, [pc, #512]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055b2:	430b      	orrs	r3, r1
 80055b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80055b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80055c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055c6:	2300      	movs	r3, #0
 80055c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80055ce:	460b      	mov	r3, r1
 80055d0:	4313      	orrs	r3, r2
 80055d2:	d00c      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80055d4:	4b77      	ldr	r3, [pc, #476]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055e6:	4973      	ldr	r1, [pc, #460]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80055ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80055fa:	623b      	str	r3, [r7, #32]
 80055fc:	2300      	movs	r3, #0
 80055fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005600:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005604:	460b      	mov	r3, r1
 8005606:	4313      	orrs	r3, r2
 8005608:	d00c      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800560a:	4b6a      	ldr	r3, [pc, #424]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800560c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005610:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005614:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005618:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800561c:	4965      	ldr	r1, [pc, #404]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	2300      	movs	r3, #0
 8005634:	61fb      	str	r3, [r7, #28]
 8005636:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800563a:	460b      	mov	r3, r1
 800563c:	4313      	orrs	r3, r2
 800563e:	d00c      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005640:	4b5c      	ldr	r3, [pc, #368]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005642:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005646:	f023 0218 	bic.w	r2, r3, #24
 800564a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800564e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005652:	4958      	ldr	r1, [pc, #352]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800565a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005670:	460b      	mov	r3, r1
 8005672:	4313      	orrs	r3, r2
 8005674:	d032      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005676:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800567a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800567e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005682:	d105      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005684:	4b4b      	ldr	r3, [pc, #300]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005688:	4a4a      	ldr	r2, [pc, #296]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800568a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800568e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005694:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005698:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800569c:	d108      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800569e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056a2:	3308      	adds	r3, #8
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 f887 	bl	80057b8 <RCCEx_PLL2_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80056b0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10d      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80056b8:	4b3e      	ldr	r3, [pc, #248]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056ca:	493a      	ldr	r1, [pc, #232]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80056d2:	e003      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056d8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80056dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056f2:	460b      	mov	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	d03a      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80056f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005700:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005704:	d00e      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005706:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800570a:	d815      	bhi.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d017      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8005710:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005714:	d110      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005716:	4b27      	ldr	r3, [pc, #156]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571a:	4a26      	ldr	r2, [pc, #152]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800571c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005720:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005722:	e00e      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005728:	3308      	adds	r3, #8
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f844 	bl	80057b8 <RCCEx_PLL2_Config>
 8005730:	4603      	mov	r3, r0
 8005732:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005736:	e004      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800573e:	e000      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8005740:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005742:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10d      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800574a:	4b1a      	ldr	r3, [pc, #104]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800574c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005750:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800575c:	4915      	ldr	r1, [pc, #84]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005764:	e003      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005766:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800576a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800576e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	2300      	movs	r3, #0
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005784:	460b      	mov	r3, r1
 8005786:	4313      	orrs	r3, r2
 8005788:	d00c      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800578a:	4b0a      	ldr	r3, [pc, #40]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800578c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005790:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005794:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005798:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800579c:	4905      	ldr	r1, [pc, #20]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80057a4:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	37e0      	adds	r7, #224	@ 0xe0
 80057ac:	46bd      	mov	sp, r7
 80057ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057b2:	bf00      	nop
 80057b4:	46020c00 	.word	0x46020c00

080057b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80057c0:	4b47      	ldr	r3, [pc, #284]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a46      	ldr	r2, [pc, #280]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 80057c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057cc:	f7fb fed8 	bl	8001580 <HAL_GetTick>
 80057d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80057d2:	e008      	b.n	80057e6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057d4:	f7fb fed4 	bl	8001580 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e077      	b.n	80058d6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80057e6:	4b3e      	ldr	r3, [pc, #248]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80057f2:	4b3b      	ldr	r3, [pc, #236]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80057fa:	f023 0303 	bic.w	r3, r3, #3
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6811      	ldr	r1, [r2, #0]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6852      	ldr	r2, [r2, #4]
 8005806:	3a01      	subs	r2, #1
 8005808:	0212      	lsls	r2, r2, #8
 800580a:	430a      	orrs	r2, r1
 800580c:	4934      	ldr	r1, [pc, #208]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 800580e:	4313      	orrs	r3, r2
 8005810:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005812:	4b33      	ldr	r3, [pc, #204]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 8005814:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005816:	4b33      	ldr	r3, [pc, #204]	@ (80058e4 <RCCEx_PLL2_Config+0x12c>)
 8005818:	4013      	ands	r3, r2
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6892      	ldr	r2, [r2, #8]
 800581e:	3a01      	subs	r2, #1
 8005820:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	68d2      	ldr	r2, [r2, #12]
 8005828:	3a01      	subs	r2, #1
 800582a:	0252      	lsls	r2, r2, #9
 800582c:	b292      	uxth	r2, r2
 800582e:	4311      	orrs	r1, r2
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6912      	ldr	r2, [r2, #16]
 8005834:	3a01      	subs	r2, #1
 8005836:	0412      	lsls	r2, r2, #16
 8005838:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800583c:	4311      	orrs	r1, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6952      	ldr	r2, [r2, #20]
 8005842:	3a01      	subs	r2, #1
 8005844:	0612      	lsls	r2, r2, #24
 8005846:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800584a:	430a      	orrs	r2, r1
 800584c:	4924      	ldr	r1, [pc, #144]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 800584e:	4313      	orrs	r3, r2
 8005850:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005852:	4b23      	ldr	r3, [pc, #140]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 8005854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005856:	f023 020c 	bic.w	r2, r3, #12
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	4920      	ldr	r1, [pc, #128]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 8005860:	4313      	orrs	r3, r2
 8005862:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005864:	4b1e      	ldr	r3, [pc, #120]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 8005866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	491c      	ldr	r1, [pc, #112]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 800586e:	4313      	orrs	r3, r2
 8005870:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005872:	4b1b      	ldr	r3, [pc, #108]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 8005874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005876:	4a1a      	ldr	r2, [pc, #104]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 8005878:	f023 0310 	bic.w	r3, r3, #16
 800587c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800587e:	4b18      	ldr	r3, [pc, #96]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005886:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	69d2      	ldr	r2, [r2, #28]
 800588e:	00d2      	lsls	r2, r2, #3
 8005890:	4913      	ldr	r1, [pc, #76]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 8005892:	4313      	orrs	r3, r2
 8005894:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005896:	4b12      	ldr	r3, [pc, #72]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	4a11      	ldr	r2, [pc, #68]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 800589c:	f043 0310 	orr.w	r3, r3, #16
 80058a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80058a2:	4b0f      	ldr	r3, [pc, #60]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a0e      	ldr	r2, [pc, #56]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 80058a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058ae:	f7fb fe67 	bl	8001580 <HAL_GetTick>
 80058b2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80058b4:	e008      	b.n	80058c8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80058b6:	f7fb fe63 	bl	8001580 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e006      	b.n	80058d6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80058c8:	4b05      	ldr	r3, [pc, #20]	@ (80058e0 <RCCEx_PLL2_Config+0x128>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0f0      	beq.n	80058b6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0

}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	46020c00 	.word	0x46020c00
 80058e4:	80800000 	.word	0x80800000

080058e8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80058f0:	4b47      	ldr	r3, [pc, #284]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a46      	ldr	r2, [pc, #280]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 80058f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058fc:	f7fb fe40 	bl	8001580 <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005902:	e008      	b.n	8005916 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005904:	f7fb fe3c 	bl	8001580 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e077      	b.n	8005a06 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005916:	4b3e      	ldr	r3, [pc, #248]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005922:	4b3b      	ldr	r3, [pc, #236]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 8005924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005926:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800592a:	f023 0303 	bic.w	r3, r3, #3
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6811      	ldr	r1, [r2, #0]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6852      	ldr	r2, [r2, #4]
 8005936:	3a01      	subs	r2, #1
 8005938:	0212      	lsls	r2, r2, #8
 800593a:	430a      	orrs	r2, r1
 800593c:	4934      	ldr	r1, [pc, #208]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 800593e:	4313      	orrs	r3, r2
 8005940:	630b      	str	r3, [r1, #48]	@ 0x30
 8005942:	4b33      	ldr	r3, [pc, #204]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 8005944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005946:	4b33      	ldr	r3, [pc, #204]	@ (8005a14 <RCCEx_PLL3_Config+0x12c>)
 8005948:	4013      	ands	r3, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6892      	ldr	r2, [r2, #8]
 800594e:	3a01      	subs	r2, #1
 8005950:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	68d2      	ldr	r2, [r2, #12]
 8005958:	3a01      	subs	r2, #1
 800595a:	0252      	lsls	r2, r2, #9
 800595c:	b292      	uxth	r2, r2
 800595e:	4311      	orrs	r1, r2
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6912      	ldr	r2, [r2, #16]
 8005964:	3a01      	subs	r2, #1
 8005966:	0412      	lsls	r2, r2, #16
 8005968:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800596c:	4311      	orrs	r1, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6952      	ldr	r2, [r2, #20]
 8005972:	3a01      	subs	r2, #1
 8005974:	0612      	lsls	r2, r2, #24
 8005976:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800597a:	430a      	orrs	r2, r1
 800597c:	4924      	ldr	r1, [pc, #144]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 800597e:	4313      	orrs	r3, r2
 8005980:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005982:	4b23      	ldr	r3, [pc, #140]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005986:	f023 020c 	bic.w	r2, r3, #12
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	4920      	ldr	r1, [pc, #128]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 8005990:	4313      	orrs	r3, r2
 8005992:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005994:	4b1e      	ldr	r3, [pc, #120]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 8005996:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	491c      	ldr	r1, [pc, #112]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80059a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 80059a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 80059a8:	f023 0310 	bic.w	r3, r3, #16
 80059ac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80059ae:	4b18      	ldr	r3, [pc, #96]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 80059b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	69d2      	ldr	r2, [r2, #28]
 80059be:	00d2      	lsls	r2, r2, #3
 80059c0:	4913      	ldr	r1, [pc, #76]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80059c6:	4b12      	ldr	r3, [pc, #72]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ca:	4a11      	ldr	r2, [pc, #68]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 80059cc:	f043 0310 	orr.w	r3, r3, #16
 80059d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80059d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 80059d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059dc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059de:	f7fb fdcf 	bl	8001580 <HAL_GetTick>
 80059e2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059e4:	e008      	b.n	80059f8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059e6:	f7fb fdcb 	bl	8001580 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e006      	b.n	8005a06 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059f8:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <RCCEx_PLL3_Config+0x128>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0f0      	beq.n	80059e6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	46020c00 	.word	0x46020c00
 8005a14:	80800000 	.word	0x80800000

08005a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e049      	b.n	8005abe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fb fa28 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f000 fbfe 	bl	8006258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e049      	b.n	8005b6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f841 	bl	8005b74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f000 fba7 	bl	8006258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <HAL_TIM_PWM_Start+0x24>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	bf14      	ite	ne
 8005ba4:	2301      	movne	r3, #1
 8005ba6:	2300      	moveq	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	e03c      	b.n	8005c26 <HAL_TIM_PWM_Start+0x9e>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d109      	bne.n	8005bc6 <HAL_TIM_PWM_Start+0x3e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	bf14      	ite	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	2300      	moveq	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	e02f      	b.n	8005c26 <HAL_TIM_PWM_Start+0x9e>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d109      	bne.n	8005be0 <HAL_TIM_PWM_Start+0x58>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	bf14      	ite	ne
 8005bd8:	2301      	movne	r3, #1
 8005bda:	2300      	moveq	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	e022      	b.n	8005c26 <HAL_TIM_PWM_Start+0x9e>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b0c      	cmp	r3, #12
 8005be4:	d109      	bne.n	8005bfa <HAL_TIM_PWM_Start+0x72>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	bf14      	ite	ne
 8005bf2:	2301      	movne	r3, #1
 8005bf4:	2300      	moveq	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	e015      	b.n	8005c26 <HAL_TIM_PWM_Start+0x9e>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d109      	bne.n	8005c14 <HAL_TIM_PWM_Start+0x8c>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	bf14      	ite	ne
 8005c0c:	2301      	movne	r3, #1
 8005c0e:	2300      	moveq	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	e008      	b.n	8005c26 <HAL_TIM_PWM_Start+0x9e>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	bf14      	ite	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	2300      	moveq	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e0d8      	b.n	8005de0 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <HAL_TIM_PWM_Start+0xb6>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c3c:	e023      	b.n	8005c86 <HAL_TIM_PWM_Start+0xfe>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d104      	bne.n	8005c4e <HAL_TIM_PWM_Start+0xc6>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c4c:	e01b      	b.n	8005c86 <HAL_TIM_PWM_Start+0xfe>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_PWM_Start+0xd6>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c5c:	e013      	b.n	8005c86 <HAL_TIM_PWM_Start+0xfe>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b0c      	cmp	r3, #12
 8005c62:	d104      	bne.n	8005c6e <HAL_TIM_PWM_Start+0xe6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c6c:	e00b      	b.n	8005c86 <HAL_TIM_PWM_Start+0xfe>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_PWM_Start+0xf6>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c7c:	e003      	b.n	8005c86 <HAL_TIM_PWM_Start+0xfe>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2202      	movs	r2, #2
 8005c82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 f854 	bl	8006d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a53      	ldr	r2, [pc, #332]	@ (8005de8 <HAL_TIM_PWM_Start+0x260>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d02c      	beq.n	8005cf8 <HAL_TIM_PWM_Start+0x170>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a52      	ldr	r2, [pc, #328]	@ (8005dec <HAL_TIM_PWM_Start+0x264>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d027      	beq.n	8005cf8 <HAL_TIM_PWM_Start+0x170>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a50      	ldr	r2, [pc, #320]	@ (8005df0 <HAL_TIM_PWM_Start+0x268>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d022      	beq.n	8005cf8 <HAL_TIM_PWM_Start+0x170>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a4f      	ldr	r2, [pc, #316]	@ (8005df4 <HAL_TIM_PWM_Start+0x26c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d01d      	beq.n	8005cf8 <HAL_TIM_PWM_Start+0x170>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8005df8 <HAL_TIM_PWM_Start+0x270>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d018      	beq.n	8005cf8 <HAL_TIM_PWM_Start+0x170>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a4c      	ldr	r2, [pc, #304]	@ (8005dfc <HAL_TIM_PWM_Start+0x274>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <HAL_TIM_PWM_Start+0x170>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8005e00 <HAL_TIM_PWM_Start+0x278>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00e      	beq.n	8005cf8 <HAL_TIM_PWM_Start+0x170>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a49      	ldr	r2, [pc, #292]	@ (8005e04 <HAL_TIM_PWM_Start+0x27c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_TIM_PWM_Start+0x170>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a47      	ldr	r2, [pc, #284]	@ (8005e08 <HAL_TIM_PWM_Start+0x280>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIM_PWM_Start+0x170>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a46      	ldr	r2, [pc, #280]	@ (8005e0c <HAL_TIM_PWM_Start+0x284>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d101      	bne.n	8005cfc <HAL_TIM_PWM_Start+0x174>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e000      	b.n	8005cfe <HAL_TIM_PWM_Start+0x176>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a34      	ldr	r2, [pc, #208]	@ (8005de8 <HAL_TIM_PWM_Start+0x260>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d040      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a32      	ldr	r2, [pc, #200]	@ (8005dec <HAL_TIM_PWM_Start+0x264>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d03b      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2e:	d036      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d38:	d031      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a34      	ldr	r2, [pc, #208]	@ (8005e10 <HAL_TIM_PWM_Start+0x288>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d02c      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a32      	ldr	r2, [pc, #200]	@ (8005e14 <HAL_TIM_PWM_Start+0x28c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d027      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a31      	ldr	r2, [pc, #196]	@ (8005e18 <HAL_TIM_PWM_Start+0x290>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d022      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2f      	ldr	r2, [pc, #188]	@ (8005e1c <HAL_TIM_PWM_Start+0x294>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d01d      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a2e      	ldr	r2, [pc, #184]	@ (8005e20 <HAL_TIM_PWM_Start+0x298>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d018      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a2c      	ldr	r2, [pc, #176]	@ (8005e24 <HAL_TIM_PWM_Start+0x29c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d013      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005df0 <HAL_TIM_PWM_Start+0x268>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00e      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1b      	ldr	r2, [pc, #108]	@ (8005df4 <HAL_TIM_PWM_Start+0x26c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d009      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8005df8 <HAL_TIM_PWM_Start+0x270>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d004      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x216>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a18      	ldr	r2, [pc, #96]	@ (8005dfc <HAL_TIM_PWM_Start+0x274>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d115      	bne.n	8005dca <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	4b20      	ldr	r3, [pc, #128]	@ (8005e28 <HAL_TIM_PWM_Start+0x2a0>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b06      	cmp	r3, #6
 8005dae:	d015      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x254>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db6:	d011      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc8:	e008      	b.n	8005ddc <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0201 	orr.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e000      	b.n	8005dde <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ddc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	50012c00 	.word	0x50012c00
 8005df0:	40013400 	.word	0x40013400
 8005df4:	50013400 	.word	0x50013400
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	50014000 	.word	0x50014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	50014400 	.word	0x50014400
 8005e08:	40014800 	.word	0x40014800
 8005e0c:	50014800 	.word	0x50014800
 8005e10:	40000400 	.word	0x40000400
 8005e14:	50000400 	.word	0x50000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	50000800 	.word	0x50000800
 8005e20:	40000c00 	.word	0x40000c00
 8005e24:	50000c00 	.word	0x50000c00
 8005e28:	00010007 	.word	0x00010007

08005e2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e0ff      	b.n	800604a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b14      	cmp	r3, #20
 8005e56:	f200 80f0 	bhi.w	800603a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005eb5 	.word	0x08005eb5
 8005e64:	0800603b 	.word	0x0800603b
 8005e68:	0800603b 	.word	0x0800603b
 8005e6c:	0800603b 	.word	0x0800603b
 8005e70:	08005ef5 	.word	0x08005ef5
 8005e74:	0800603b 	.word	0x0800603b
 8005e78:	0800603b 	.word	0x0800603b
 8005e7c:	0800603b 	.word	0x0800603b
 8005e80:	08005f37 	.word	0x08005f37
 8005e84:	0800603b 	.word	0x0800603b
 8005e88:	0800603b 	.word	0x0800603b
 8005e8c:	0800603b 	.word	0x0800603b
 8005e90:	08005f77 	.word	0x08005f77
 8005e94:	0800603b 	.word	0x0800603b
 8005e98:	0800603b 	.word	0x0800603b
 8005e9c:	0800603b 	.word	0x0800603b
 8005ea0:	08005fb9 	.word	0x08005fb9
 8005ea4:	0800603b 	.word	0x0800603b
 8005ea8:	0800603b 	.word	0x0800603b
 8005eac:	0800603b 	.word	0x0800603b
 8005eb0:	08005ff9 	.word	0x08005ff9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 facc 	bl	8006458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0208 	orr.w	r2, r2, #8
 8005ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0204 	bic.w	r2, r2, #4
 8005ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6999      	ldr	r1, [r3, #24]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	619a      	str	r2, [r3, #24]
      break;
 8005ef2:	e0a5      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fb6e 	bl	80065dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699a      	ldr	r2, [r3, #24]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6999      	ldr	r1, [r3, #24]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	021a      	lsls	r2, r3, #8
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	619a      	str	r2, [r3, #24]
      break;
 8005f34:	e084      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fbfd 	bl	800673c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0208 	orr.w	r2, r2, #8
 8005f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69da      	ldr	r2, [r3, #28]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0204 	bic.w	r2, r2, #4
 8005f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69d9      	ldr	r1, [r3, #28]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	61da      	str	r2, [r3, #28]
      break;
 8005f74:	e064      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fc8b 	bl	8006898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69da      	ldr	r2, [r3, #28]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69d9      	ldr	r1, [r3, #28]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	021a      	lsls	r2, r3, #8
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	61da      	str	r2, [r3, #28]
      break;
 8005fb6:	e043      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fd1a 	bl	80069f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0208 	orr.w	r2, r2, #8
 8005fd2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0204 	bic.w	r2, r2, #4
 8005fe2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005ff6:	e023      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fd7c 	bl	8006afc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006012:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006022:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	021a      	lsls	r2, r3, #8
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006038:	e002      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	75fb      	strb	r3, [r7, #23]
      break;
 800603e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop

08006054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_TIM_ConfigClockSource+0x1c>
 800606c:	2302      	movs	r3, #2
 800606e:	e0e6      	b.n	800623e <HAL_TIM_ConfigClockSource+0x1ea>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800608e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800609a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a67      	ldr	r2, [pc, #412]	@ (8006248 <HAL_TIM_ConfigClockSource+0x1f4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	f000 80b1 	beq.w	8006212 <HAL_TIM_ConfigClockSource+0x1be>
 80060b0:	4a65      	ldr	r2, [pc, #404]	@ (8006248 <HAL_TIM_ConfigClockSource+0x1f4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	f200 80b6 	bhi.w	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 80060b8:	4a64      	ldr	r2, [pc, #400]	@ (800624c <HAL_TIM_ConfigClockSource+0x1f8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	f000 80a9 	beq.w	8006212 <HAL_TIM_ConfigClockSource+0x1be>
 80060c0:	4a62      	ldr	r2, [pc, #392]	@ (800624c <HAL_TIM_ConfigClockSource+0x1f8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	f200 80ae 	bhi.w	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 80060c8:	4a61      	ldr	r2, [pc, #388]	@ (8006250 <HAL_TIM_ConfigClockSource+0x1fc>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	f000 80a1 	beq.w	8006212 <HAL_TIM_ConfigClockSource+0x1be>
 80060d0:	4a5f      	ldr	r2, [pc, #380]	@ (8006250 <HAL_TIM_ConfigClockSource+0x1fc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	f200 80a6 	bhi.w	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 80060d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006254 <HAL_TIM_ConfigClockSource+0x200>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	f000 8099 	beq.w	8006212 <HAL_TIM_ConfigClockSource+0x1be>
 80060e0:	4a5c      	ldr	r2, [pc, #368]	@ (8006254 <HAL_TIM_ConfigClockSource+0x200>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	f200 809e 	bhi.w	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 80060e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060ec:	f000 8091 	beq.w	8006212 <HAL_TIM_ConfigClockSource+0x1be>
 80060f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060f4:	f200 8096 	bhi.w	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 80060f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060fc:	f000 8089 	beq.w	8006212 <HAL_TIM_ConfigClockSource+0x1be>
 8006100:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006104:	f200 808e 	bhi.w	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 8006108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800610c:	d03e      	beq.n	800618c <HAL_TIM_ConfigClockSource+0x138>
 800610e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006112:	f200 8087 	bhi.w	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 8006116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800611a:	f000 8086 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1d6>
 800611e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006122:	d87f      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 8006124:	2b70      	cmp	r3, #112	@ 0x70
 8006126:	d01a      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x10a>
 8006128:	2b70      	cmp	r3, #112	@ 0x70
 800612a:	d87b      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 800612c:	2b60      	cmp	r3, #96	@ 0x60
 800612e:	d050      	beq.n	80061d2 <HAL_TIM_ConfigClockSource+0x17e>
 8006130:	2b60      	cmp	r3, #96	@ 0x60
 8006132:	d877      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 8006134:	2b50      	cmp	r3, #80	@ 0x50
 8006136:	d03c      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0x15e>
 8006138:	2b50      	cmp	r3, #80	@ 0x50
 800613a:	d873      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 800613c:	2b40      	cmp	r3, #64	@ 0x40
 800613e:	d058      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x19e>
 8006140:	2b40      	cmp	r3, #64	@ 0x40
 8006142:	d86f      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 8006144:	2b30      	cmp	r3, #48	@ 0x30
 8006146:	d064      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x1be>
 8006148:	2b30      	cmp	r3, #48	@ 0x30
 800614a:	d86b      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 800614c:	2b20      	cmp	r3, #32
 800614e:	d060      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x1be>
 8006150:	2b20      	cmp	r3, #32
 8006152:	d867      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d05c      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x1be>
 8006158:	2b10      	cmp	r3, #16
 800615a:	d05a      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x1be>
 800615c:	e062      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800616e:	f000 fdc5 	bl	8006cfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	609a      	str	r2, [r3, #8]
      break;
 800618a:	e04f      	b.n	800622c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800619c:	f000 fdae 	bl	8006cfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061ae:	609a      	str	r2, [r3, #8]
      break;
 80061b0:	e03c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061be:	461a      	mov	r2, r3
 80061c0:	f000 fd20 	bl	8006c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2150      	movs	r1, #80	@ 0x50
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fd79 	bl	8006cc2 <TIM_ITRx_SetConfig>
      break;
 80061d0:	e02c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061de:	461a      	mov	r2, r3
 80061e0:	f000 fd3f 	bl	8006c62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2160      	movs	r1, #96	@ 0x60
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fd69 	bl	8006cc2 <TIM_ITRx_SetConfig>
      break;
 80061f0:	e01c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fe:	461a      	mov	r2, r3
 8006200:	f000 fd00 	bl	8006c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2140      	movs	r1, #64	@ 0x40
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fd59 	bl	8006cc2 <TIM_ITRx_SetConfig>
      break;
 8006210:	e00c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f000 fd50 	bl	8006cc2 <TIM_ITRx_SetConfig>
      break;
 8006222:	e003      	b.n	800622c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
      break;
 8006228:	e000      	b.n	800622c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800622a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	00100070 	.word	0x00100070
 800624c:	00100040 	.word	0x00100040
 8006250:	00100030 	.word	0x00100030
 8006254:	00100020 	.word	0x00100020

08006258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a6b      	ldr	r2, [pc, #428]	@ (8006418 <TIM_Base_SetConfig+0x1c0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d02b      	beq.n	80062c8 <TIM_Base_SetConfig+0x70>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a6a      	ldr	r2, [pc, #424]	@ (800641c <TIM_Base_SetConfig+0x1c4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d027      	beq.n	80062c8 <TIM_Base_SetConfig+0x70>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800627e:	d023      	beq.n	80062c8 <TIM_Base_SetConfig+0x70>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006286:	d01f      	beq.n	80062c8 <TIM_Base_SetConfig+0x70>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a65      	ldr	r2, [pc, #404]	@ (8006420 <TIM_Base_SetConfig+0x1c8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d01b      	beq.n	80062c8 <TIM_Base_SetConfig+0x70>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a64      	ldr	r2, [pc, #400]	@ (8006424 <TIM_Base_SetConfig+0x1cc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d017      	beq.n	80062c8 <TIM_Base_SetConfig+0x70>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a63      	ldr	r2, [pc, #396]	@ (8006428 <TIM_Base_SetConfig+0x1d0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d013      	beq.n	80062c8 <TIM_Base_SetConfig+0x70>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a62      	ldr	r2, [pc, #392]	@ (800642c <TIM_Base_SetConfig+0x1d4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00f      	beq.n	80062c8 <TIM_Base_SetConfig+0x70>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a61      	ldr	r2, [pc, #388]	@ (8006430 <TIM_Base_SetConfig+0x1d8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00b      	beq.n	80062c8 <TIM_Base_SetConfig+0x70>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a60      	ldr	r2, [pc, #384]	@ (8006434 <TIM_Base_SetConfig+0x1dc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d007      	beq.n	80062c8 <TIM_Base_SetConfig+0x70>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a5f      	ldr	r2, [pc, #380]	@ (8006438 <TIM_Base_SetConfig+0x1e0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_Base_SetConfig+0x70>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a5e      	ldr	r2, [pc, #376]	@ (800643c <TIM_Base_SetConfig+0x1e4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d108      	bne.n	80062da <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a4e      	ldr	r2, [pc, #312]	@ (8006418 <TIM_Base_SetConfig+0x1c0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d043      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a4d      	ldr	r2, [pc, #308]	@ (800641c <TIM_Base_SetConfig+0x1c4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d03f      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f0:	d03b      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062f8:	d037      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a48      	ldr	r2, [pc, #288]	@ (8006420 <TIM_Base_SetConfig+0x1c8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d033      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a47      	ldr	r2, [pc, #284]	@ (8006424 <TIM_Base_SetConfig+0x1cc>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d02f      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a46      	ldr	r2, [pc, #280]	@ (8006428 <TIM_Base_SetConfig+0x1d0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d02b      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a45      	ldr	r2, [pc, #276]	@ (800642c <TIM_Base_SetConfig+0x1d4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d027      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a44      	ldr	r2, [pc, #272]	@ (8006430 <TIM_Base_SetConfig+0x1d8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d023      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a43      	ldr	r2, [pc, #268]	@ (8006434 <TIM_Base_SetConfig+0x1dc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d01f      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a42      	ldr	r2, [pc, #264]	@ (8006438 <TIM_Base_SetConfig+0x1e0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d01b      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a41      	ldr	r2, [pc, #260]	@ (800643c <TIM_Base_SetConfig+0x1e4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d017      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a40      	ldr	r2, [pc, #256]	@ (8006440 <TIM_Base_SetConfig+0x1e8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d013      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a3f      	ldr	r2, [pc, #252]	@ (8006444 <TIM_Base_SetConfig+0x1ec>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d00f      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a3e      	ldr	r2, [pc, #248]	@ (8006448 <TIM_Base_SetConfig+0x1f0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00b      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a3d      	ldr	r2, [pc, #244]	@ (800644c <TIM_Base_SetConfig+0x1f4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d007      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a3c      	ldr	r2, [pc, #240]	@ (8006450 <TIM_Base_SetConfig+0x1f8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d003      	beq.n	800636a <TIM_Base_SetConfig+0x112>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a3b      	ldr	r2, [pc, #236]	@ (8006454 <TIM_Base_SetConfig+0x1fc>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d108      	bne.n	800637c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a1e      	ldr	r2, [pc, #120]	@ (8006418 <TIM_Base_SetConfig+0x1c0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d023      	beq.n	80063ea <TIM_Base_SetConfig+0x192>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a1d      	ldr	r2, [pc, #116]	@ (800641c <TIM_Base_SetConfig+0x1c4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01f      	beq.n	80063ea <TIM_Base_SetConfig+0x192>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a22      	ldr	r2, [pc, #136]	@ (8006438 <TIM_Base_SetConfig+0x1e0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d01b      	beq.n	80063ea <TIM_Base_SetConfig+0x192>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a21      	ldr	r2, [pc, #132]	@ (800643c <TIM_Base_SetConfig+0x1e4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d017      	beq.n	80063ea <TIM_Base_SetConfig+0x192>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a20      	ldr	r2, [pc, #128]	@ (8006440 <TIM_Base_SetConfig+0x1e8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <TIM_Base_SetConfig+0x192>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006444 <TIM_Base_SetConfig+0x1ec>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00f      	beq.n	80063ea <TIM_Base_SetConfig+0x192>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006448 <TIM_Base_SetConfig+0x1f0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00b      	beq.n	80063ea <TIM_Base_SetConfig+0x192>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a1d      	ldr	r2, [pc, #116]	@ (800644c <TIM_Base_SetConfig+0x1f4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d007      	beq.n	80063ea <TIM_Base_SetConfig+0x192>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006450 <TIM_Base_SetConfig+0x1f8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_Base_SetConfig+0x192>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006454 <TIM_Base_SetConfig+0x1fc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d103      	bne.n	80063f2 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f043 0204 	orr.w	r2, r3, #4
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	601a      	str	r2, [r3, #0]
}
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40012c00 	.word	0x40012c00
 800641c:	50012c00 	.word	0x50012c00
 8006420:	40000400 	.word	0x40000400
 8006424:	50000400 	.word	0x50000400
 8006428:	40000800 	.word	0x40000800
 800642c:	50000800 	.word	0x50000800
 8006430:	40000c00 	.word	0x40000c00
 8006434:	50000c00 	.word	0x50000c00
 8006438:	40013400 	.word	0x40013400
 800643c:	50013400 	.word	0x50013400
 8006440:	40014000 	.word	0x40014000
 8006444:	50014000 	.word	0x50014000
 8006448:	40014400 	.word	0x40014400
 800644c:	50014400 	.word	0x50014400
 8006450:	40014800 	.word	0x40014800
 8006454:	50014800 	.word	0x50014800

08006458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	f023 0201 	bic.w	r2, r3, #1
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0303 	bic.w	r3, r3, #3
 8006492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f023 0302 	bic.w	r3, r3, #2
 80064a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a40      	ldr	r2, [pc, #256]	@ (80065b4 <TIM_OC1_SetConfig+0x15c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d023      	beq.n	8006500 <TIM_OC1_SetConfig+0xa8>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a3f      	ldr	r2, [pc, #252]	@ (80065b8 <TIM_OC1_SetConfig+0x160>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d01f      	beq.n	8006500 <TIM_OC1_SetConfig+0xa8>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a3e      	ldr	r2, [pc, #248]	@ (80065bc <TIM_OC1_SetConfig+0x164>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d01b      	beq.n	8006500 <TIM_OC1_SetConfig+0xa8>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a3d      	ldr	r2, [pc, #244]	@ (80065c0 <TIM_OC1_SetConfig+0x168>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d017      	beq.n	8006500 <TIM_OC1_SetConfig+0xa8>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a3c      	ldr	r2, [pc, #240]	@ (80065c4 <TIM_OC1_SetConfig+0x16c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <TIM_OC1_SetConfig+0xa8>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a3b      	ldr	r2, [pc, #236]	@ (80065c8 <TIM_OC1_SetConfig+0x170>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00f      	beq.n	8006500 <TIM_OC1_SetConfig+0xa8>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a3a      	ldr	r2, [pc, #232]	@ (80065cc <TIM_OC1_SetConfig+0x174>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00b      	beq.n	8006500 <TIM_OC1_SetConfig+0xa8>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a39      	ldr	r2, [pc, #228]	@ (80065d0 <TIM_OC1_SetConfig+0x178>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d007      	beq.n	8006500 <TIM_OC1_SetConfig+0xa8>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a38      	ldr	r2, [pc, #224]	@ (80065d4 <TIM_OC1_SetConfig+0x17c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_OC1_SetConfig+0xa8>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a37      	ldr	r2, [pc, #220]	@ (80065d8 <TIM_OC1_SetConfig+0x180>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10c      	bne.n	800651a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f023 0308 	bic.w	r3, r3, #8
 8006506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 0304 	bic.w	r3, r3, #4
 8006518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a25      	ldr	r2, [pc, #148]	@ (80065b4 <TIM_OC1_SetConfig+0x15c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d023      	beq.n	800656a <TIM_OC1_SetConfig+0x112>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a24      	ldr	r2, [pc, #144]	@ (80065b8 <TIM_OC1_SetConfig+0x160>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01f      	beq.n	800656a <TIM_OC1_SetConfig+0x112>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a23      	ldr	r2, [pc, #140]	@ (80065bc <TIM_OC1_SetConfig+0x164>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d01b      	beq.n	800656a <TIM_OC1_SetConfig+0x112>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a22      	ldr	r2, [pc, #136]	@ (80065c0 <TIM_OC1_SetConfig+0x168>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d017      	beq.n	800656a <TIM_OC1_SetConfig+0x112>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a21      	ldr	r2, [pc, #132]	@ (80065c4 <TIM_OC1_SetConfig+0x16c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <TIM_OC1_SetConfig+0x112>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a20      	ldr	r2, [pc, #128]	@ (80065c8 <TIM_OC1_SetConfig+0x170>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00f      	beq.n	800656a <TIM_OC1_SetConfig+0x112>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a1f      	ldr	r2, [pc, #124]	@ (80065cc <TIM_OC1_SetConfig+0x174>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00b      	beq.n	800656a <TIM_OC1_SetConfig+0x112>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a1e      	ldr	r2, [pc, #120]	@ (80065d0 <TIM_OC1_SetConfig+0x178>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d007      	beq.n	800656a <TIM_OC1_SetConfig+0x112>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a1d      	ldr	r2, [pc, #116]	@ (80065d4 <TIM_OC1_SetConfig+0x17c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <TIM_OC1_SetConfig+0x112>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a1c      	ldr	r2, [pc, #112]	@ (80065d8 <TIM_OC1_SetConfig+0x180>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d111      	bne.n	800658e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	621a      	str	r2, [r3, #32]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	40012c00 	.word	0x40012c00
 80065b8:	50012c00 	.word	0x50012c00
 80065bc:	40013400 	.word	0x40013400
 80065c0:	50013400 	.word	0x50013400
 80065c4:	40014000 	.word	0x40014000
 80065c8:	50014000 	.word	0x50014000
 80065cc:	40014400 	.word	0x40014400
 80065d0:	50014400 	.word	0x50014400
 80065d4:	40014800 	.word	0x40014800
 80065d8:	50014800 	.word	0x50014800

080065dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f023 0210 	bic.w	r2, r3, #16
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800660a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800660e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f023 0320 	bic.w	r3, r3, #32
 800662a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a36      	ldr	r2, [pc, #216]	@ (8006714 <TIM_OC2_SetConfig+0x138>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00b      	beq.n	8006658 <TIM_OC2_SetConfig+0x7c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a35      	ldr	r2, [pc, #212]	@ (8006718 <TIM_OC2_SetConfig+0x13c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d007      	beq.n	8006658 <TIM_OC2_SetConfig+0x7c>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a34      	ldr	r2, [pc, #208]	@ (800671c <TIM_OC2_SetConfig+0x140>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d003      	beq.n	8006658 <TIM_OC2_SetConfig+0x7c>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a33      	ldr	r2, [pc, #204]	@ (8006720 <TIM_OC2_SetConfig+0x144>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d10d      	bne.n	8006674 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800665e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a27      	ldr	r2, [pc, #156]	@ (8006714 <TIM_OC2_SetConfig+0x138>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d023      	beq.n	80066c4 <TIM_OC2_SetConfig+0xe8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a26      	ldr	r2, [pc, #152]	@ (8006718 <TIM_OC2_SetConfig+0x13c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d01f      	beq.n	80066c4 <TIM_OC2_SetConfig+0xe8>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a25      	ldr	r2, [pc, #148]	@ (800671c <TIM_OC2_SetConfig+0x140>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d01b      	beq.n	80066c4 <TIM_OC2_SetConfig+0xe8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a24      	ldr	r2, [pc, #144]	@ (8006720 <TIM_OC2_SetConfig+0x144>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d017      	beq.n	80066c4 <TIM_OC2_SetConfig+0xe8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a23      	ldr	r2, [pc, #140]	@ (8006724 <TIM_OC2_SetConfig+0x148>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d013      	beq.n	80066c4 <TIM_OC2_SetConfig+0xe8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a22      	ldr	r2, [pc, #136]	@ (8006728 <TIM_OC2_SetConfig+0x14c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00f      	beq.n	80066c4 <TIM_OC2_SetConfig+0xe8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a21      	ldr	r2, [pc, #132]	@ (800672c <TIM_OC2_SetConfig+0x150>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00b      	beq.n	80066c4 <TIM_OC2_SetConfig+0xe8>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a20      	ldr	r2, [pc, #128]	@ (8006730 <TIM_OC2_SetConfig+0x154>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d007      	beq.n	80066c4 <TIM_OC2_SetConfig+0xe8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006734 <TIM_OC2_SetConfig+0x158>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_OC2_SetConfig+0xe8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a1e      	ldr	r2, [pc, #120]	@ (8006738 <TIM_OC2_SetConfig+0x15c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d113      	bne.n	80066ec <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	621a      	str	r2, [r3, #32]
}
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40012c00 	.word	0x40012c00
 8006718:	50012c00 	.word	0x50012c00
 800671c:	40013400 	.word	0x40013400
 8006720:	50013400 	.word	0x50013400
 8006724:	40014000 	.word	0x40014000
 8006728:	50014000 	.word	0x50014000
 800672c:	40014400 	.word	0x40014400
 8006730:	50014400 	.word	0x50014400
 8006734:	40014800 	.word	0x40014800
 8006738:	50014800 	.word	0x50014800

0800673c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800676a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	021b      	lsls	r3, r3, #8
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a35      	ldr	r2, [pc, #212]	@ (8006870 <TIM_OC3_SetConfig+0x134>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00b      	beq.n	80067b6 <TIM_OC3_SetConfig+0x7a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a34      	ldr	r2, [pc, #208]	@ (8006874 <TIM_OC3_SetConfig+0x138>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d007      	beq.n	80067b6 <TIM_OC3_SetConfig+0x7a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a33      	ldr	r2, [pc, #204]	@ (8006878 <TIM_OC3_SetConfig+0x13c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d003      	beq.n	80067b6 <TIM_OC3_SetConfig+0x7a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a32      	ldr	r2, [pc, #200]	@ (800687c <TIM_OC3_SetConfig+0x140>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d10d      	bne.n	80067d2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a26      	ldr	r2, [pc, #152]	@ (8006870 <TIM_OC3_SetConfig+0x134>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d023      	beq.n	8006822 <TIM_OC3_SetConfig+0xe6>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a25      	ldr	r2, [pc, #148]	@ (8006874 <TIM_OC3_SetConfig+0x138>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d01f      	beq.n	8006822 <TIM_OC3_SetConfig+0xe6>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a24      	ldr	r2, [pc, #144]	@ (8006878 <TIM_OC3_SetConfig+0x13c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01b      	beq.n	8006822 <TIM_OC3_SetConfig+0xe6>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a23      	ldr	r2, [pc, #140]	@ (800687c <TIM_OC3_SetConfig+0x140>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d017      	beq.n	8006822 <TIM_OC3_SetConfig+0xe6>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a22      	ldr	r2, [pc, #136]	@ (8006880 <TIM_OC3_SetConfig+0x144>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d013      	beq.n	8006822 <TIM_OC3_SetConfig+0xe6>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a21      	ldr	r2, [pc, #132]	@ (8006884 <TIM_OC3_SetConfig+0x148>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00f      	beq.n	8006822 <TIM_OC3_SetConfig+0xe6>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a20      	ldr	r2, [pc, #128]	@ (8006888 <TIM_OC3_SetConfig+0x14c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00b      	beq.n	8006822 <TIM_OC3_SetConfig+0xe6>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a1f      	ldr	r2, [pc, #124]	@ (800688c <TIM_OC3_SetConfig+0x150>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d007      	beq.n	8006822 <TIM_OC3_SetConfig+0xe6>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a1e      	ldr	r2, [pc, #120]	@ (8006890 <TIM_OC3_SetConfig+0x154>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d003      	beq.n	8006822 <TIM_OC3_SetConfig+0xe6>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a1d      	ldr	r2, [pc, #116]	@ (8006894 <TIM_OC3_SetConfig+0x158>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d113      	bne.n	800684a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	621a      	str	r2, [r3, #32]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	40012c00 	.word	0x40012c00
 8006874:	50012c00 	.word	0x50012c00
 8006878:	40013400 	.word	0x40013400
 800687c:	50013400 	.word	0x50013400
 8006880:	40014000 	.word	0x40014000
 8006884:	50014000 	.word	0x50014000
 8006888:	40014400 	.word	0x40014400
 800688c:	50014400 	.word	0x50014400
 8006890:	40014800 	.word	0x40014800
 8006894:	50014800 	.word	0x50014800

08006898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	021b      	lsls	r3, r3, #8
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	031b      	lsls	r3, r3, #12
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a36      	ldr	r2, [pc, #216]	@ (80069d0 <TIM_OC4_SetConfig+0x138>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00b      	beq.n	8006914 <TIM_OC4_SetConfig+0x7c>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a35      	ldr	r2, [pc, #212]	@ (80069d4 <TIM_OC4_SetConfig+0x13c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d007      	beq.n	8006914 <TIM_OC4_SetConfig+0x7c>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a34      	ldr	r2, [pc, #208]	@ (80069d8 <TIM_OC4_SetConfig+0x140>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_OC4_SetConfig+0x7c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a33      	ldr	r2, [pc, #204]	@ (80069dc <TIM_OC4_SetConfig+0x144>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d10d      	bne.n	8006930 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800691a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	031b      	lsls	r3, r3, #12
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	4313      	orrs	r3, r2
 8006926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800692e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a27      	ldr	r2, [pc, #156]	@ (80069d0 <TIM_OC4_SetConfig+0x138>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d023      	beq.n	8006980 <TIM_OC4_SetConfig+0xe8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a26      	ldr	r2, [pc, #152]	@ (80069d4 <TIM_OC4_SetConfig+0x13c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d01f      	beq.n	8006980 <TIM_OC4_SetConfig+0xe8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a25      	ldr	r2, [pc, #148]	@ (80069d8 <TIM_OC4_SetConfig+0x140>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d01b      	beq.n	8006980 <TIM_OC4_SetConfig+0xe8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a24      	ldr	r2, [pc, #144]	@ (80069dc <TIM_OC4_SetConfig+0x144>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d017      	beq.n	8006980 <TIM_OC4_SetConfig+0xe8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a23      	ldr	r2, [pc, #140]	@ (80069e0 <TIM_OC4_SetConfig+0x148>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d013      	beq.n	8006980 <TIM_OC4_SetConfig+0xe8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a22      	ldr	r2, [pc, #136]	@ (80069e4 <TIM_OC4_SetConfig+0x14c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00f      	beq.n	8006980 <TIM_OC4_SetConfig+0xe8>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a21      	ldr	r2, [pc, #132]	@ (80069e8 <TIM_OC4_SetConfig+0x150>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00b      	beq.n	8006980 <TIM_OC4_SetConfig+0xe8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a20      	ldr	r2, [pc, #128]	@ (80069ec <TIM_OC4_SetConfig+0x154>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d007      	beq.n	8006980 <TIM_OC4_SetConfig+0xe8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a1f      	ldr	r2, [pc, #124]	@ (80069f0 <TIM_OC4_SetConfig+0x158>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d003      	beq.n	8006980 <TIM_OC4_SetConfig+0xe8>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a1e      	ldr	r2, [pc, #120]	@ (80069f4 <TIM_OC4_SetConfig+0x15c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d113      	bne.n	80069a8 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006986:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800698e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	019b      	lsls	r3, r3, #6
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	019b      	lsls	r3, r3, #6
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	40012c00 	.word	0x40012c00
 80069d4:	50012c00 	.word	0x50012c00
 80069d8:	40013400 	.word	0x40013400
 80069dc:	50013400 	.word	0x50013400
 80069e0:	40014000 	.word	0x40014000
 80069e4:	50014000 	.word	0x50014000
 80069e8:	40014400 	.word	0x40014400
 80069ec:	50014400 	.word	0x50014400
 80069f0:	40014800 	.word	0x40014800
 80069f4:	50014800 	.word	0x50014800

080069f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006a3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	041b      	lsls	r3, r3, #16
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a21      	ldr	r2, [pc, #132]	@ (8006ad4 <TIM_OC5_SetConfig+0xdc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d023      	beq.n	8006a9a <TIM_OC5_SetConfig+0xa2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a20      	ldr	r2, [pc, #128]	@ (8006ad8 <TIM_OC5_SetConfig+0xe0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d01f      	beq.n	8006a9a <TIM_OC5_SetConfig+0xa2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006adc <TIM_OC5_SetConfig+0xe4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d01b      	beq.n	8006a9a <TIM_OC5_SetConfig+0xa2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a1e      	ldr	r2, [pc, #120]	@ (8006ae0 <TIM_OC5_SetConfig+0xe8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d017      	beq.n	8006a9a <TIM_OC5_SetConfig+0xa2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae4 <TIM_OC5_SetConfig+0xec>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d013      	beq.n	8006a9a <TIM_OC5_SetConfig+0xa2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae8 <TIM_OC5_SetConfig+0xf0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d00f      	beq.n	8006a9a <TIM_OC5_SetConfig+0xa2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006aec <TIM_OC5_SetConfig+0xf4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00b      	beq.n	8006a9a <TIM_OC5_SetConfig+0xa2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a1a      	ldr	r2, [pc, #104]	@ (8006af0 <TIM_OC5_SetConfig+0xf8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d007      	beq.n	8006a9a <TIM_OC5_SetConfig+0xa2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a19      	ldr	r2, [pc, #100]	@ (8006af4 <TIM_OC5_SetConfig+0xfc>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d003      	beq.n	8006a9a <TIM_OC5_SetConfig+0xa2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a18      	ldr	r2, [pc, #96]	@ (8006af8 <TIM_OC5_SetConfig+0x100>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d109      	bne.n	8006aae <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	621a      	str	r2, [r3, #32]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	40012c00 	.word	0x40012c00
 8006ad8:	50012c00 	.word	0x50012c00
 8006adc:	40013400 	.word	0x40013400
 8006ae0:	50013400 	.word	0x50013400
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	50014000 	.word	0x50014000
 8006aec:	40014400 	.word	0x40014400
 8006af0:	50014400 	.word	0x50014400
 8006af4:	40014800 	.word	0x40014800
 8006af8:	50014800 	.word	0x50014800

08006afc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	051b      	lsls	r3, r3, #20
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a22      	ldr	r2, [pc, #136]	@ (8006bdc <TIM_OC6_SetConfig+0xe0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d023      	beq.n	8006ba0 <TIM_OC6_SetConfig+0xa4>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a21      	ldr	r2, [pc, #132]	@ (8006be0 <TIM_OC6_SetConfig+0xe4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d01f      	beq.n	8006ba0 <TIM_OC6_SetConfig+0xa4>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a20      	ldr	r2, [pc, #128]	@ (8006be4 <TIM_OC6_SetConfig+0xe8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d01b      	beq.n	8006ba0 <TIM_OC6_SetConfig+0xa4>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8006be8 <TIM_OC6_SetConfig+0xec>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d017      	beq.n	8006ba0 <TIM_OC6_SetConfig+0xa4>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a1e      	ldr	r2, [pc, #120]	@ (8006bec <TIM_OC6_SetConfig+0xf0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d013      	beq.n	8006ba0 <TIM_OC6_SetConfig+0xa4>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8006bf0 <TIM_OC6_SetConfig+0xf4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00f      	beq.n	8006ba0 <TIM_OC6_SetConfig+0xa4>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a1c      	ldr	r2, [pc, #112]	@ (8006bf4 <TIM_OC6_SetConfig+0xf8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00b      	beq.n	8006ba0 <TIM_OC6_SetConfig+0xa4>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf8 <TIM_OC6_SetConfig+0xfc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d007      	beq.n	8006ba0 <TIM_OC6_SetConfig+0xa4>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a1a      	ldr	r2, [pc, #104]	@ (8006bfc <TIM_OC6_SetConfig+0x100>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d003      	beq.n	8006ba0 <TIM_OC6_SetConfig+0xa4>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a19      	ldr	r2, [pc, #100]	@ (8006c00 <TIM_OC6_SetConfig+0x104>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d109      	bne.n	8006bb4 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	029b      	lsls	r3, r3, #10
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	50012c00 	.word	0x50012c00
 8006be4:	40013400 	.word	0x40013400
 8006be8:	50013400 	.word	0x50013400
 8006bec:	40014000 	.word	0x40014000
 8006bf0:	50014000 	.word	0x50014000
 8006bf4:	40014400 	.word	0x40014400
 8006bf8:	50014400 	.word	0x50014400
 8006bfc:	40014800 	.word	0x40014800
 8006c00:	50014800 	.word	0x50014800

08006c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f023 0201 	bic.w	r2, r3, #1
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f023 030a 	bic.w	r3, r3, #10
 8006c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	621a      	str	r2, [r3, #32]
}
 8006c56:	bf00      	nop
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b087      	sub	sp, #28
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	f023 0210 	bic.w	r2, r3, #16
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	031b      	lsls	r3, r3, #12
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	011b      	lsls	r3, r3, #4
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f043 0307 	orr.w	r3, r3, #7
 8006ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	609a      	str	r2, [r3, #8]
}
 8006cf0:	bf00      	nop
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	021a      	lsls	r2, r3, #8
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	609a      	str	r2, [r3, #8]
}
 8006d30:	bf00      	nop
 8006d32:	371c      	adds	r7, #28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	2201      	movs	r2, #1
 8006d50:	fa02 f303 	lsl.w	r3, r2, r3
 8006d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a1a      	ldr	r2, [r3, #32]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	401a      	ands	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a1a      	ldr	r2, [r3, #32]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f003 031f 	and.w	r3, r3, #31
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	fa01 f303 	lsl.w	r3, r1, r3
 8006d74:	431a      	orrs	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
	...

08006d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e097      	b.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a45      	ldr	r2, [pc, #276]	@ (8006edc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00e      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a44      	ldr	r2, [pc, #272]	@ (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d009      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a42      	ldr	r2, [pc, #264]	@ (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d004      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a41      	ldr	r2, [pc, #260]	@ (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d108      	bne.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006dee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8006edc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d040      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a2e      	ldr	r2, [pc, #184]	@ (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d03b      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e34:	d036      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e3e:	d031      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a29      	ldr	r2, [pc, #164]	@ (8006eec <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d02c      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a28      	ldr	r2, [pc, #160]	@ (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d027      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a26      	ldr	r2, [pc, #152]	@ (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d022      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a25      	ldr	r2, [pc, #148]	@ (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d01d      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a23      	ldr	r2, [pc, #140]	@ (8006efc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d018      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a22      	ldr	r2, [pc, #136]	@ (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d013      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a18      	ldr	r2, [pc, #96]	@ (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00e      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a17      	ldr	r2, [pc, #92]	@ (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d009      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a1b      	ldr	r2, [pc, #108]	@ (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d004      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d10c      	bne.n	8006ebe <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006eaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	50012c00 	.word	0x50012c00
 8006ee4:	40013400 	.word	0x40013400
 8006ee8:	50013400 	.word	0x50013400
 8006eec:	40000400 	.word	0x40000400
 8006ef0:	50000400 	.word	0x50000400
 8006ef4:	40000800 	.word	0x40000800
 8006ef8:	50000800 	.word	0x50000800
 8006efc:	40000c00 	.word	0x40000c00
 8006f00:	50000c00 	.word	0x50000c00
 8006f04:	40014000 	.word	0x40014000
 8006f08:	50014000 	.word	0x50014000

08006f0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e07d      	b.n	8007024 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	041b      	lsls	r3, r3, #16
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8007030 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d00e      	beq.n	8006fd8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8007034 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d009      	beq.n	8006fd8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8007038 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d004      	beq.n	8006fd8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800703c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d11c      	bne.n	8007012 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe2:	051b      	lsls	r3, r3, #20
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	40012c00 	.word	0x40012c00
 8007034:	50012c00 	.word	0x50012c00
 8007038:	40013400 	.word	0x40013400
 800703c:	50013400 	.word	0x50013400

08007040 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007040:	b084      	sub	sp, #16
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	f107 001c 	add.w	r0, r7, #28
 800704e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa6c 	bl	800753c <USB_CoreReset>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007068:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800706c:	2b00      	cmp	r3, #0
 800706e:	d106      	bne.n	800707e <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007074:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	639a      	str	r2, [r3, #56]	@ 0x38
 800707c:	e005      	b.n	800708a <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007082:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800708a:	7bfb      	ldrb	r3, [r7, #15]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007096:	b004      	add	sp, #16
 8007098:	4770      	bx	lr

0800709a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f023 0201 	bic.w	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d115      	bne.n	800710a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80070ea:	200a      	movs	r0, #10
 80070ec:	f7fa fa54 	bl	8001598 <HAL_Delay>
      ms += 10U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	330a      	adds	r3, #10
 80070f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa12 	bl	8007520 <USB_GetMode>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d01e      	beq.n	8007140 <USB_SetCurrentMode+0x84>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2bc7      	cmp	r3, #199	@ 0xc7
 8007106:	d9f0      	bls.n	80070ea <USB_SetCurrentMode+0x2e>
 8007108:	e01a      	b.n	8007140 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d115      	bne.n	800713c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800711c:	200a      	movs	r0, #10
 800711e:	f7fa fa3b 	bl	8001598 <HAL_Delay>
      ms += 10U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	330a      	adds	r3, #10
 8007126:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f9f9 	bl	8007520 <USB_GetMode>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <USB_SetCurrentMode+0x84>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2bc7      	cmp	r3, #199	@ 0xc7
 8007138:	d9f0      	bls.n	800711c <USB_SetCurrentMode+0x60>
 800713a:	e001      	b.n	8007140 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e005      	b.n	800714c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2bc8      	cmp	r3, #200	@ 0xc8
 8007144:	d101      	bne.n	800714a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e000      	b.n	800714c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007154:	b084      	sub	sp, #16
 8007156:	b580      	push	{r7, lr}
 8007158:	b086      	sub	sp, #24
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800716e:	2300      	movs	r3, #0
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	e009      	b.n	8007188 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	3340      	adds	r3, #64	@ 0x40
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	2200      	movs	r2, #0
 8007180:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3301      	adds	r3, #1
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b0e      	cmp	r3, #14
 800718c:	d9f2      	bls.n	8007174 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800718e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007192:	2b00      	cmp	r3, #0
 8007194:	d11c      	bne.n	80071d0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071a4:	f043 0302 	orr.w	r3, r3, #2
 80071a8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	e005      	b.n	80071dc <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071e2:	461a      	mov	r2, r3
 80071e4:	2300      	movs	r3, #0
 80071e6:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071e8:	2103      	movs	r1, #3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f95e 	bl	80074ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071f0:	2110      	movs	r1, #16
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f8fa 	bl	80073ec <USB_FlushTxFifo>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f924 	bl	8007450 <USB_FlushRxFifo>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007218:	461a      	mov	r2, r3
 800721a:	2300      	movs	r3, #0
 800721c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007224:	461a      	mov	r2, r3
 8007226:	2300      	movs	r3, #0
 8007228:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007230:	461a      	mov	r2, r3
 8007232:	2300      	movs	r3, #0
 8007234:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007236:	2300      	movs	r3, #0
 8007238:	613b      	str	r3, [r7, #16]
 800723a:	e043      	b.n	80072c4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800724e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007252:	d118      	bne.n	8007286 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10a      	bne.n	8007270 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007266:	461a      	mov	r2, r3
 8007268:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	e013      	b.n	8007298 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800727c:	461a      	mov	r2, r3
 800727e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	e008      	b.n	8007298 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007292:	461a      	mov	r2, r3
 8007294:	2300      	movs	r3, #0
 8007296:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a4:	461a      	mov	r2, r3
 80072a6:	2300      	movs	r3, #0
 80072a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b6:	461a      	mov	r2, r3
 80072b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	3301      	adds	r3, #1
 80072c2:	613b      	str	r3, [r7, #16]
 80072c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80072c8:	461a      	mov	r2, r3
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d3b5      	bcc.n	800723c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072d0:	2300      	movs	r3, #0
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	e043      	b.n	800735e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072ec:	d118      	bne.n	8007320 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007300:	461a      	mov	r2, r3
 8007302:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	e013      	b.n	8007332 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007316:	461a      	mov	r2, r3
 8007318:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	e008      	b.n	8007332 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800732c:	461a      	mov	r2, r3
 800732e:	2300      	movs	r3, #0
 8007330:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733e:	461a      	mov	r2, r3
 8007340:	2300      	movs	r3, #0
 8007342:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007350:	461a      	mov	r2, r3
 8007352:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007356:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	3301      	adds	r3, #1
 800735c:	613b      	str	r3, [r7, #16]
 800735e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007362:	461a      	mov	r2, r3
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	4293      	cmp	r3, r2
 8007368:	d3b5      	bcc.n	80072d6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800737c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800738a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800738c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	f043 0210 	orr.w	r2, r3, #16
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	699a      	ldr	r2, [r3, #24]
 80073a4:	4b10      	ldr	r3, [pc, #64]	@ (80073e8 <USB_DevInit+0x294>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	f043 0208 	orr.w	r2, r3, #8
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d107      	bne.n	80073d8 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073d0:	f043 0304 	orr.w	r3, r3, #4
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073e4:	b004      	add	sp, #16
 80073e6:	4770      	bx	lr
 80073e8:	803c3800 	.word	0x803c3800

080073ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3301      	adds	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007406:	d901      	bls.n	800740c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e01b      	b.n	8007444 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	daf2      	bge.n	80073fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	019b      	lsls	r3, r3, #6
 800741c:	f043 0220 	orr.w	r2, r3, #32
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3301      	adds	r3, #1
 8007428:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007430:	d901      	bls.n	8007436 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e006      	b.n	8007444 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b20      	cmp	r3, #32
 8007440:	d0f0      	beq.n	8007424 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3301      	adds	r3, #1
 8007460:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007468:	d901      	bls.n	800746e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e018      	b.n	80074a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	daf2      	bge.n	800745c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2210      	movs	r2, #16
 800747e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3301      	adds	r3, #1
 8007484:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800748c:	d901      	bls.n	8007492 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e006      	b.n	80074a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0310 	and.w	r3, r3, #16
 800749a:	2b10      	cmp	r3, #16
 800749c:	d0f0      	beq.n	8007480 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	68f9      	ldr	r1, [r7, #12]
 80074c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074cc:	4313      	orrs	r3, r2
 80074ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80074f8:	f023 0303 	bic.w	r3, r3, #3
 80074fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800750c:	f043 0302 	orr.w	r3, r3, #2
 8007510:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	f003 0301 	and.w	r3, r3, #1
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3301      	adds	r3, #1
 800754c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007554:	d901      	bls.n	800755a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e01b      	b.n	8007592 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	daf2      	bge.n	8007548 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f043 0201 	orr.w	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3301      	adds	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800757e:	d901      	bls.n	8007584 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e006      	b.n	8007592 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b01      	cmp	r3, #1
 800758e:	d0f0      	beq.n	8007572 <USB_CoreReset+0x36>

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
	...

080075a0 <malloc>:
 80075a0:	4b02      	ldr	r3, [pc, #8]	@ (80075ac <malloc+0xc>)
 80075a2:	4601      	mov	r1, r0
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	f000 b825 	b.w	80075f4 <_malloc_r>
 80075aa:	bf00      	nop
 80075ac:	20000018 	.word	0x20000018

080075b0 <sbrk_aligned>:
 80075b0:	b570      	push	{r4, r5, r6, lr}
 80075b2:	4e0f      	ldr	r6, [pc, #60]	@ (80075f0 <sbrk_aligned+0x40>)
 80075b4:	460c      	mov	r4, r1
 80075b6:	4605      	mov	r5, r0
 80075b8:	6831      	ldr	r1, [r6, #0]
 80075ba:	b911      	cbnz	r1, 80075c2 <sbrk_aligned+0x12>
 80075bc:	f000 fb2a 	bl	8007c14 <_sbrk_r>
 80075c0:	6030      	str	r0, [r6, #0]
 80075c2:	4621      	mov	r1, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 fb25 	bl	8007c14 <_sbrk_r>
 80075ca:	1c43      	adds	r3, r0, #1
 80075cc:	d103      	bne.n	80075d6 <sbrk_aligned+0x26>
 80075ce:	f04f 34ff 	mov.w	r4, #4294967295
 80075d2:	4620      	mov	r0, r4
 80075d4:	bd70      	pop	{r4, r5, r6, pc}
 80075d6:	1cc4      	adds	r4, r0, #3
 80075d8:	f024 0403 	bic.w	r4, r4, #3
 80075dc:	42a0      	cmp	r0, r4
 80075de:	d0f8      	beq.n	80075d2 <sbrk_aligned+0x22>
 80075e0:	1a21      	subs	r1, r4, r0
 80075e2:	4628      	mov	r0, r5
 80075e4:	f000 fb16 	bl	8007c14 <_sbrk_r>
 80075e8:	3001      	adds	r0, #1
 80075ea:	d1f2      	bne.n	80075d2 <sbrk_aligned+0x22>
 80075ec:	e7ef      	b.n	80075ce <sbrk_aligned+0x1e>
 80075ee:	bf00      	nop
 80075f0:	20000798 	.word	0x20000798

080075f4 <_malloc_r>:
 80075f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f8:	1ccd      	adds	r5, r1, #3
 80075fa:	4606      	mov	r6, r0
 80075fc:	f025 0503 	bic.w	r5, r5, #3
 8007600:	3508      	adds	r5, #8
 8007602:	2d0c      	cmp	r5, #12
 8007604:	bf38      	it	cc
 8007606:	250c      	movcc	r5, #12
 8007608:	2d00      	cmp	r5, #0
 800760a:	db01      	blt.n	8007610 <_malloc_r+0x1c>
 800760c:	42a9      	cmp	r1, r5
 800760e:	d904      	bls.n	800761a <_malloc_r+0x26>
 8007610:	230c      	movs	r3, #12
 8007612:	6033      	str	r3, [r6, #0]
 8007614:	2000      	movs	r0, #0
 8007616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800761a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076f0 <_malloc_r+0xfc>
 800761e:	f000 f869 	bl	80076f4 <__malloc_lock>
 8007622:	f8d8 3000 	ldr.w	r3, [r8]
 8007626:	461c      	mov	r4, r3
 8007628:	bb44      	cbnz	r4, 800767c <_malloc_r+0x88>
 800762a:	4629      	mov	r1, r5
 800762c:	4630      	mov	r0, r6
 800762e:	f7ff ffbf 	bl	80075b0 <sbrk_aligned>
 8007632:	1c43      	adds	r3, r0, #1
 8007634:	4604      	mov	r4, r0
 8007636:	d158      	bne.n	80076ea <_malloc_r+0xf6>
 8007638:	f8d8 4000 	ldr.w	r4, [r8]
 800763c:	4627      	mov	r7, r4
 800763e:	2f00      	cmp	r7, #0
 8007640:	d143      	bne.n	80076ca <_malloc_r+0xd6>
 8007642:	2c00      	cmp	r4, #0
 8007644:	d04b      	beq.n	80076de <_malloc_r+0xea>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	4639      	mov	r1, r7
 800764a:	4630      	mov	r0, r6
 800764c:	eb04 0903 	add.w	r9, r4, r3
 8007650:	f000 fae0 	bl	8007c14 <_sbrk_r>
 8007654:	4581      	cmp	r9, r0
 8007656:	d142      	bne.n	80076de <_malloc_r+0xea>
 8007658:	6821      	ldr	r1, [r4, #0]
 800765a:	4630      	mov	r0, r6
 800765c:	1a6d      	subs	r5, r5, r1
 800765e:	4629      	mov	r1, r5
 8007660:	f7ff ffa6 	bl	80075b0 <sbrk_aligned>
 8007664:	3001      	adds	r0, #1
 8007666:	d03a      	beq.n	80076de <_malloc_r+0xea>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	442b      	add	r3, r5
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	f8d8 3000 	ldr.w	r3, [r8]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	bb62      	cbnz	r2, 80076d0 <_malloc_r+0xdc>
 8007676:	f8c8 7000 	str.w	r7, [r8]
 800767a:	e00f      	b.n	800769c <_malloc_r+0xa8>
 800767c:	6822      	ldr	r2, [r4, #0]
 800767e:	1b52      	subs	r2, r2, r5
 8007680:	d420      	bmi.n	80076c4 <_malloc_r+0xd0>
 8007682:	2a0b      	cmp	r2, #11
 8007684:	d917      	bls.n	80076b6 <_malloc_r+0xc2>
 8007686:	1961      	adds	r1, r4, r5
 8007688:	42a3      	cmp	r3, r4
 800768a:	6025      	str	r5, [r4, #0]
 800768c:	bf18      	it	ne
 800768e:	6059      	strne	r1, [r3, #4]
 8007690:	6863      	ldr	r3, [r4, #4]
 8007692:	bf08      	it	eq
 8007694:	f8c8 1000 	streq.w	r1, [r8]
 8007698:	5162      	str	r2, [r4, r5]
 800769a:	604b      	str	r3, [r1, #4]
 800769c:	4630      	mov	r0, r6
 800769e:	f000 f82f 	bl	8007700 <__malloc_unlock>
 80076a2:	f104 000b 	add.w	r0, r4, #11
 80076a6:	1d23      	adds	r3, r4, #4
 80076a8:	f020 0007 	bic.w	r0, r0, #7
 80076ac:	1ac2      	subs	r2, r0, r3
 80076ae:	bf1c      	itt	ne
 80076b0:	1a1b      	subne	r3, r3, r0
 80076b2:	50a3      	strne	r3, [r4, r2]
 80076b4:	e7af      	b.n	8007616 <_malloc_r+0x22>
 80076b6:	6862      	ldr	r2, [r4, #4]
 80076b8:	42a3      	cmp	r3, r4
 80076ba:	bf0c      	ite	eq
 80076bc:	f8c8 2000 	streq.w	r2, [r8]
 80076c0:	605a      	strne	r2, [r3, #4]
 80076c2:	e7eb      	b.n	800769c <_malloc_r+0xa8>
 80076c4:	4623      	mov	r3, r4
 80076c6:	6864      	ldr	r4, [r4, #4]
 80076c8:	e7ae      	b.n	8007628 <_malloc_r+0x34>
 80076ca:	463c      	mov	r4, r7
 80076cc:	687f      	ldr	r7, [r7, #4]
 80076ce:	e7b6      	b.n	800763e <_malloc_r+0x4a>
 80076d0:	461a      	mov	r2, r3
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	42a3      	cmp	r3, r4
 80076d6:	d1fb      	bne.n	80076d0 <_malloc_r+0xdc>
 80076d8:	2300      	movs	r3, #0
 80076da:	6053      	str	r3, [r2, #4]
 80076dc:	e7de      	b.n	800769c <_malloc_r+0xa8>
 80076de:	230c      	movs	r3, #12
 80076e0:	4630      	mov	r0, r6
 80076e2:	6033      	str	r3, [r6, #0]
 80076e4:	f000 f80c 	bl	8007700 <__malloc_unlock>
 80076e8:	e794      	b.n	8007614 <_malloc_r+0x20>
 80076ea:	6005      	str	r5, [r0, #0]
 80076ec:	e7d6      	b.n	800769c <_malloc_r+0xa8>
 80076ee:	bf00      	nop
 80076f0:	2000079c 	.word	0x2000079c

080076f4 <__malloc_lock>:
 80076f4:	4801      	ldr	r0, [pc, #4]	@ (80076fc <__malloc_lock+0x8>)
 80076f6:	f000 bada 	b.w	8007cae <__retarget_lock_acquire_recursive>
 80076fa:	bf00      	nop
 80076fc:	200008e0 	.word	0x200008e0

08007700 <__malloc_unlock>:
 8007700:	4801      	ldr	r0, [pc, #4]	@ (8007708 <__malloc_unlock+0x8>)
 8007702:	f000 bad5 	b.w	8007cb0 <__retarget_lock_release_recursive>
 8007706:	bf00      	nop
 8007708:	200008e0 	.word	0x200008e0

0800770c <rand>:
 800770c:	4b16      	ldr	r3, [pc, #88]	@ (8007768 <rand+0x5c>)
 800770e:	b510      	push	{r4, lr}
 8007710:	681c      	ldr	r4, [r3, #0]
 8007712:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007714:	b9b3      	cbnz	r3, 8007744 <rand+0x38>
 8007716:	2018      	movs	r0, #24
 8007718:	f7ff ff42 	bl	80075a0 <malloc>
 800771c:	4602      	mov	r2, r0
 800771e:	6320      	str	r0, [r4, #48]	@ 0x30
 8007720:	b920      	cbnz	r0, 800772c <rand+0x20>
 8007722:	4b12      	ldr	r3, [pc, #72]	@ (800776c <rand+0x60>)
 8007724:	2152      	movs	r1, #82	@ 0x52
 8007726:	4812      	ldr	r0, [pc, #72]	@ (8007770 <rand+0x64>)
 8007728:	f000 fac4 	bl	8007cb4 <__assert_func>
 800772c:	4911      	ldr	r1, [pc, #68]	@ (8007774 <rand+0x68>)
 800772e:	4b12      	ldr	r3, [pc, #72]	@ (8007778 <rand+0x6c>)
 8007730:	e9c0 1300 	strd	r1, r3, [r0]
 8007734:	4b11      	ldr	r3, [pc, #68]	@ (800777c <rand+0x70>)
 8007736:	2100      	movs	r1, #0
 8007738:	6083      	str	r3, [r0, #8]
 800773a:	230b      	movs	r3, #11
 800773c:	8183      	strh	r3, [r0, #12]
 800773e:	2001      	movs	r0, #1
 8007740:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007744:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007746:	480e      	ldr	r0, [pc, #56]	@ (8007780 <rand+0x74>)
 8007748:	690b      	ldr	r3, [r1, #16]
 800774a:	694c      	ldr	r4, [r1, #20]
 800774c:	4a0d      	ldr	r2, [pc, #52]	@ (8007784 <rand+0x78>)
 800774e:	4358      	muls	r0, r3
 8007750:	fb02 0004 	mla	r0, r2, r4, r0
 8007754:	fba3 3202 	umull	r3, r2, r3, r2
 8007758:	3301      	adds	r3, #1
 800775a:	eb40 0002 	adc.w	r0, r0, r2
 800775e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007762:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007766:	bd10      	pop	{r4, pc}
 8007768:	20000018 	.word	0x20000018
 800776c:	08008764 	.word	0x08008764
 8007770:	0800877b 	.word	0x0800877b
 8007774:	abcd330e 	.word	0xabcd330e
 8007778:	e66d1234 	.word	0xe66d1234
 800777c:	0005deec 	.word	0x0005deec
 8007780:	5851f42d 	.word	0x5851f42d
 8007784:	4c957f2d 	.word	0x4c957f2d

08007788 <std>:
 8007788:	2300      	movs	r3, #0
 800778a:	b510      	push	{r4, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	6083      	str	r3, [r0, #8]
 8007790:	8181      	strh	r1, [r0, #12]
 8007792:	4619      	mov	r1, r3
 8007794:	6643      	str	r3, [r0, #100]	@ 0x64
 8007796:	81c2      	strh	r2, [r0, #14]
 8007798:	2208      	movs	r2, #8
 800779a:	6183      	str	r3, [r0, #24]
 800779c:	e9c0 3300 	strd	r3, r3, [r0]
 80077a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077a4:	305c      	adds	r0, #92	@ 0x5c
 80077a6:	f000 f9f9 	bl	8007b9c <memset>
 80077aa:	4b0d      	ldr	r3, [pc, #52]	@ (80077e0 <std+0x58>)
 80077ac:	6224      	str	r4, [r4, #32]
 80077ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80077b0:	4b0c      	ldr	r3, [pc, #48]	@ (80077e4 <std+0x5c>)
 80077b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077b4:	4b0c      	ldr	r3, [pc, #48]	@ (80077e8 <std+0x60>)
 80077b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80077b8:	4b0c      	ldr	r3, [pc, #48]	@ (80077ec <std+0x64>)
 80077ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80077bc:	4b0c      	ldr	r3, [pc, #48]	@ (80077f0 <std+0x68>)
 80077be:	429c      	cmp	r4, r3
 80077c0:	d006      	beq.n	80077d0 <std+0x48>
 80077c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077c6:	4294      	cmp	r4, r2
 80077c8:	d002      	beq.n	80077d0 <std+0x48>
 80077ca:	33d0      	adds	r3, #208	@ 0xd0
 80077cc:	429c      	cmp	r4, r3
 80077ce:	d105      	bne.n	80077dc <std+0x54>
 80077d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d8:	f000 ba68 	b.w	8007cac <__retarget_lock_init_recursive>
 80077dc:	bd10      	pop	{r4, pc}
 80077de:	bf00      	nop
 80077e0:	080079ed 	.word	0x080079ed
 80077e4:	08007a0f 	.word	0x08007a0f
 80077e8:	08007a47 	.word	0x08007a47
 80077ec:	08007a6b 	.word	0x08007a6b
 80077f0:	200007a0 	.word	0x200007a0

080077f4 <stdio_exit_handler>:
 80077f4:	4a02      	ldr	r2, [pc, #8]	@ (8007800 <stdio_exit_handler+0xc>)
 80077f6:	4903      	ldr	r1, [pc, #12]	@ (8007804 <stdio_exit_handler+0x10>)
 80077f8:	4803      	ldr	r0, [pc, #12]	@ (8007808 <stdio_exit_handler+0x14>)
 80077fa:	f000 b869 	b.w	80078d0 <_fwalk_sglue>
 80077fe:	bf00      	nop
 8007800:	2000000c 	.word	0x2000000c
 8007804:	08008431 	.word	0x08008431
 8007808:	2000001c 	.word	0x2000001c

0800780c <cleanup_stdio>:
 800780c:	6841      	ldr	r1, [r0, #4]
 800780e:	4b0c      	ldr	r3, [pc, #48]	@ (8007840 <cleanup_stdio+0x34>)
 8007810:	4299      	cmp	r1, r3
 8007812:	b510      	push	{r4, lr}
 8007814:	4604      	mov	r4, r0
 8007816:	d001      	beq.n	800781c <cleanup_stdio+0x10>
 8007818:	f000 fe0a 	bl	8008430 <_fflush_r>
 800781c:	68a1      	ldr	r1, [r4, #8]
 800781e:	4b09      	ldr	r3, [pc, #36]	@ (8007844 <cleanup_stdio+0x38>)
 8007820:	4299      	cmp	r1, r3
 8007822:	d002      	beq.n	800782a <cleanup_stdio+0x1e>
 8007824:	4620      	mov	r0, r4
 8007826:	f000 fe03 	bl	8008430 <_fflush_r>
 800782a:	68e1      	ldr	r1, [r4, #12]
 800782c:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <cleanup_stdio+0x3c>)
 800782e:	4299      	cmp	r1, r3
 8007830:	d004      	beq.n	800783c <cleanup_stdio+0x30>
 8007832:	4620      	mov	r0, r4
 8007834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007838:	f000 bdfa 	b.w	8008430 <_fflush_r>
 800783c:	bd10      	pop	{r4, pc}
 800783e:	bf00      	nop
 8007840:	200007a0 	.word	0x200007a0
 8007844:	20000808 	.word	0x20000808
 8007848:	20000870 	.word	0x20000870

0800784c <global_stdio_init.part.0>:
 800784c:	b510      	push	{r4, lr}
 800784e:	4b0b      	ldr	r3, [pc, #44]	@ (800787c <global_stdio_init.part.0+0x30>)
 8007850:	2104      	movs	r1, #4
 8007852:	4c0b      	ldr	r4, [pc, #44]	@ (8007880 <global_stdio_init.part.0+0x34>)
 8007854:	4a0b      	ldr	r2, [pc, #44]	@ (8007884 <global_stdio_init.part.0+0x38>)
 8007856:	4620      	mov	r0, r4
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	2200      	movs	r2, #0
 800785c:	f7ff ff94 	bl	8007788 <std>
 8007860:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007864:	2201      	movs	r2, #1
 8007866:	2109      	movs	r1, #9
 8007868:	f7ff ff8e 	bl	8007788 <std>
 800786c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007870:	2202      	movs	r2, #2
 8007872:	2112      	movs	r1, #18
 8007874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007878:	f7ff bf86 	b.w	8007788 <std>
 800787c:	200008d8 	.word	0x200008d8
 8007880:	200007a0 	.word	0x200007a0
 8007884:	080077f5 	.word	0x080077f5

08007888 <__sfp_lock_acquire>:
 8007888:	4801      	ldr	r0, [pc, #4]	@ (8007890 <__sfp_lock_acquire+0x8>)
 800788a:	f000 ba10 	b.w	8007cae <__retarget_lock_acquire_recursive>
 800788e:	bf00      	nop
 8007890:	200008e1 	.word	0x200008e1

08007894 <__sfp_lock_release>:
 8007894:	4801      	ldr	r0, [pc, #4]	@ (800789c <__sfp_lock_release+0x8>)
 8007896:	f000 ba0b 	b.w	8007cb0 <__retarget_lock_release_recursive>
 800789a:	bf00      	nop
 800789c:	200008e1 	.word	0x200008e1

080078a0 <__sinit>:
 80078a0:	b510      	push	{r4, lr}
 80078a2:	4604      	mov	r4, r0
 80078a4:	f7ff fff0 	bl	8007888 <__sfp_lock_acquire>
 80078a8:	6a23      	ldr	r3, [r4, #32]
 80078aa:	b11b      	cbz	r3, 80078b4 <__sinit+0x14>
 80078ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b0:	f7ff bff0 	b.w	8007894 <__sfp_lock_release>
 80078b4:	4b04      	ldr	r3, [pc, #16]	@ (80078c8 <__sinit+0x28>)
 80078b6:	6223      	str	r3, [r4, #32]
 80078b8:	4b04      	ldr	r3, [pc, #16]	@ (80078cc <__sinit+0x2c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1f5      	bne.n	80078ac <__sinit+0xc>
 80078c0:	f7ff ffc4 	bl	800784c <global_stdio_init.part.0>
 80078c4:	e7f2      	b.n	80078ac <__sinit+0xc>
 80078c6:	bf00      	nop
 80078c8:	0800780d 	.word	0x0800780d
 80078cc:	200008d8 	.word	0x200008d8

080078d0 <_fwalk_sglue>:
 80078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	4607      	mov	r7, r0
 80078d6:	4688      	mov	r8, r1
 80078d8:	4614      	mov	r4, r2
 80078da:	2600      	movs	r6, #0
 80078dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078e0:	f1b9 0901 	subs.w	r9, r9, #1
 80078e4:	d505      	bpl.n	80078f2 <_fwalk_sglue+0x22>
 80078e6:	6824      	ldr	r4, [r4, #0]
 80078e8:	2c00      	cmp	r4, #0
 80078ea:	d1f7      	bne.n	80078dc <_fwalk_sglue+0xc>
 80078ec:	4630      	mov	r0, r6
 80078ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f2:	89ab      	ldrh	r3, [r5, #12]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d907      	bls.n	8007908 <_fwalk_sglue+0x38>
 80078f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078fc:	3301      	adds	r3, #1
 80078fe:	d003      	beq.n	8007908 <_fwalk_sglue+0x38>
 8007900:	4629      	mov	r1, r5
 8007902:	4638      	mov	r0, r7
 8007904:	47c0      	blx	r8
 8007906:	4306      	orrs	r6, r0
 8007908:	3568      	adds	r5, #104	@ 0x68
 800790a:	e7e9      	b.n	80078e0 <_fwalk_sglue+0x10>

0800790c <iprintf>:
 800790c:	b40f      	push	{r0, r1, r2, r3}
 800790e:	b507      	push	{r0, r1, r2, lr}
 8007910:	4906      	ldr	r1, [pc, #24]	@ (800792c <iprintf+0x20>)
 8007912:	ab04      	add	r3, sp, #16
 8007914:	6808      	ldr	r0, [r1, #0]
 8007916:	f853 2b04 	ldr.w	r2, [r3], #4
 800791a:	6881      	ldr	r1, [r0, #8]
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	f000 fa5b 	bl	8007dd8 <_vfiprintf_r>
 8007922:	b003      	add	sp, #12
 8007924:	f85d eb04 	ldr.w	lr, [sp], #4
 8007928:	b004      	add	sp, #16
 800792a:	4770      	bx	lr
 800792c:	20000018 	.word	0x20000018

08007930 <_puts_r>:
 8007930:	6a03      	ldr	r3, [r0, #32]
 8007932:	b570      	push	{r4, r5, r6, lr}
 8007934:	4605      	mov	r5, r0
 8007936:	460e      	mov	r6, r1
 8007938:	6884      	ldr	r4, [r0, #8]
 800793a:	b90b      	cbnz	r3, 8007940 <_puts_r+0x10>
 800793c:	f7ff ffb0 	bl	80078a0 <__sinit>
 8007940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007942:	07db      	lsls	r3, r3, #31
 8007944:	d405      	bmi.n	8007952 <_puts_r+0x22>
 8007946:	89a3      	ldrh	r3, [r4, #12]
 8007948:	0598      	lsls	r0, r3, #22
 800794a:	d402      	bmi.n	8007952 <_puts_r+0x22>
 800794c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800794e:	f000 f9ae 	bl	8007cae <__retarget_lock_acquire_recursive>
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	0719      	lsls	r1, r3, #28
 8007956:	d502      	bpl.n	800795e <_puts_r+0x2e>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d135      	bne.n	80079ca <_puts_r+0x9a>
 800795e:	4621      	mov	r1, r4
 8007960:	4628      	mov	r0, r5
 8007962:	f000 f8c5 	bl	8007af0 <__swsetup_r>
 8007966:	b380      	cbz	r0, 80079ca <_puts_r+0x9a>
 8007968:	f04f 35ff 	mov.w	r5, #4294967295
 800796c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800796e:	07da      	lsls	r2, r3, #31
 8007970:	d405      	bmi.n	800797e <_puts_r+0x4e>
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	059b      	lsls	r3, r3, #22
 8007976:	d402      	bmi.n	800797e <_puts_r+0x4e>
 8007978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800797a:	f000 f999 	bl	8007cb0 <__retarget_lock_release_recursive>
 800797e:	4628      	mov	r0, r5
 8007980:	bd70      	pop	{r4, r5, r6, pc}
 8007982:	2b00      	cmp	r3, #0
 8007984:	da04      	bge.n	8007990 <_puts_r+0x60>
 8007986:	69a2      	ldr	r2, [r4, #24]
 8007988:	429a      	cmp	r2, r3
 800798a:	dc17      	bgt.n	80079bc <_puts_r+0x8c>
 800798c:	290a      	cmp	r1, #10
 800798e:	d015      	beq.n	80079bc <_puts_r+0x8c>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	6022      	str	r2, [r4, #0]
 8007996:	7019      	strb	r1, [r3, #0]
 8007998:	68a3      	ldr	r3, [r4, #8]
 800799a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800799e:	3b01      	subs	r3, #1
 80079a0:	60a3      	str	r3, [r4, #8]
 80079a2:	2900      	cmp	r1, #0
 80079a4:	d1ed      	bne.n	8007982 <_puts_r+0x52>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	da11      	bge.n	80079ce <_puts_r+0x9e>
 80079aa:	4622      	mov	r2, r4
 80079ac:	210a      	movs	r1, #10
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 f85f 	bl	8007a72 <__swbuf_r>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d0d7      	beq.n	8007968 <_puts_r+0x38>
 80079b8:	250a      	movs	r5, #10
 80079ba:	e7d7      	b.n	800796c <_puts_r+0x3c>
 80079bc:	4622      	mov	r2, r4
 80079be:	4628      	mov	r0, r5
 80079c0:	f000 f857 	bl	8007a72 <__swbuf_r>
 80079c4:	3001      	adds	r0, #1
 80079c6:	d1e7      	bne.n	8007998 <_puts_r+0x68>
 80079c8:	e7ce      	b.n	8007968 <_puts_r+0x38>
 80079ca:	3e01      	subs	r6, #1
 80079cc:	e7e4      	b.n	8007998 <_puts_r+0x68>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	6022      	str	r2, [r4, #0]
 80079d4:	220a      	movs	r2, #10
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	e7ee      	b.n	80079b8 <_puts_r+0x88>
	...

080079dc <puts>:
 80079dc:	4b02      	ldr	r3, [pc, #8]	@ (80079e8 <puts+0xc>)
 80079de:	4601      	mov	r1, r0
 80079e0:	6818      	ldr	r0, [r3, #0]
 80079e2:	f7ff bfa5 	b.w	8007930 <_puts_r>
 80079e6:	bf00      	nop
 80079e8:	20000018 	.word	0x20000018

080079ec <__sread>:
 80079ec:	b510      	push	{r4, lr}
 80079ee:	460c      	mov	r4, r1
 80079f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f4:	f000 f8fc 	bl	8007bf0 <_read_r>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	bfab      	itete	ge
 80079fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079fe:	89a3      	ldrhlt	r3, [r4, #12]
 8007a00:	181b      	addge	r3, r3, r0
 8007a02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a06:	bfac      	ite	ge
 8007a08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a0a:	81a3      	strhlt	r3, [r4, #12]
 8007a0c:	bd10      	pop	{r4, pc}

08007a0e <__swrite>:
 8007a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a12:	461f      	mov	r7, r3
 8007a14:	898b      	ldrh	r3, [r1, #12]
 8007a16:	4605      	mov	r5, r0
 8007a18:	460c      	mov	r4, r1
 8007a1a:	05db      	lsls	r3, r3, #23
 8007a1c:	4616      	mov	r6, r2
 8007a1e:	d505      	bpl.n	8007a2c <__swrite+0x1e>
 8007a20:	2302      	movs	r3, #2
 8007a22:	2200      	movs	r2, #0
 8007a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a28:	f000 f8d0 	bl	8007bcc <_lseek_r>
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	4632      	mov	r2, r6
 8007a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a34:	4628      	mov	r0, r5
 8007a36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	463b      	mov	r3, r7
 8007a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a42:	f000 b8f7 	b.w	8007c34 <_write_r>

08007a46 <__sseek>:
 8007a46:	b510      	push	{r4, lr}
 8007a48:	460c      	mov	r4, r1
 8007a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a4e:	f000 f8bd 	bl	8007bcc <_lseek_r>
 8007a52:	1c43      	adds	r3, r0, #1
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	bf15      	itete	ne
 8007a58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a62:	81a3      	strheq	r3, [r4, #12]
 8007a64:	bf18      	it	ne
 8007a66:	81a3      	strhne	r3, [r4, #12]
 8007a68:	bd10      	pop	{r4, pc}

08007a6a <__sclose>:
 8007a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a6e:	f000 b89d 	b.w	8007bac <_close_r>

08007a72 <__swbuf_r>:
 8007a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a74:	460e      	mov	r6, r1
 8007a76:	4614      	mov	r4, r2
 8007a78:	4605      	mov	r5, r0
 8007a7a:	b118      	cbz	r0, 8007a84 <__swbuf_r+0x12>
 8007a7c:	6a03      	ldr	r3, [r0, #32]
 8007a7e:	b90b      	cbnz	r3, 8007a84 <__swbuf_r+0x12>
 8007a80:	f7ff ff0e 	bl	80078a0 <__sinit>
 8007a84:	69a3      	ldr	r3, [r4, #24]
 8007a86:	60a3      	str	r3, [r4, #8]
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	071a      	lsls	r2, r3, #28
 8007a8c:	d501      	bpl.n	8007a92 <__swbuf_r+0x20>
 8007a8e:	6923      	ldr	r3, [r4, #16]
 8007a90:	b943      	cbnz	r3, 8007aa4 <__swbuf_r+0x32>
 8007a92:	4621      	mov	r1, r4
 8007a94:	4628      	mov	r0, r5
 8007a96:	f000 f82b 	bl	8007af0 <__swsetup_r>
 8007a9a:	b118      	cbz	r0, 8007aa4 <__swbuf_r+0x32>
 8007a9c:	f04f 37ff 	mov.w	r7, #4294967295
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	b2f6      	uxtb	r6, r6
 8007aa8:	6922      	ldr	r2, [r4, #16]
 8007aaa:	4637      	mov	r7, r6
 8007aac:	1a98      	subs	r0, r3, r2
 8007aae:	6963      	ldr	r3, [r4, #20]
 8007ab0:	4283      	cmp	r3, r0
 8007ab2:	dc05      	bgt.n	8007ac0 <__swbuf_r+0x4e>
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f000 fcba 	bl	8008430 <_fflush_r>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d1ed      	bne.n	8007a9c <__swbuf_r+0x2a>
 8007ac0:	68a3      	ldr	r3, [r4, #8]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	60a3      	str	r3, [r4, #8]
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	6022      	str	r2, [r4, #0]
 8007acc:	701e      	strb	r6, [r3, #0]
 8007ace:	1c43      	adds	r3, r0, #1
 8007ad0:	6962      	ldr	r2, [r4, #20]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d004      	beq.n	8007ae0 <__swbuf_r+0x6e>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	07db      	lsls	r3, r3, #31
 8007ada:	d5e1      	bpl.n	8007aa0 <__swbuf_r+0x2e>
 8007adc:	2e0a      	cmp	r6, #10
 8007ade:	d1df      	bne.n	8007aa0 <__swbuf_r+0x2e>
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f000 fca4 	bl	8008430 <_fflush_r>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d0d9      	beq.n	8007aa0 <__swbuf_r+0x2e>
 8007aec:	e7d6      	b.n	8007a9c <__swbuf_r+0x2a>
	...

08007af0 <__swsetup_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4b29      	ldr	r3, [pc, #164]	@ (8007b98 <__swsetup_r+0xa8>)
 8007af4:	4605      	mov	r5, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	b118      	cbz	r0, 8007b04 <__swsetup_r+0x14>
 8007afc:	6a03      	ldr	r3, [r0, #32]
 8007afe:	b90b      	cbnz	r3, 8007b04 <__swsetup_r+0x14>
 8007b00:	f7ff fece 	bl	80078a0 <__sinit>
 8007b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b08:	0719      	lsls	r1, r3, #28
 8007b0a:	d422      	bmi.n	8007b52 <__swsetup_r+0x62>
 8007b0c:	06da      	lsls	r2, r3, #27
 8007b0e:	d407      	bmi.n	8007b20 <__swsetup_r+0x30>
 8007b10:	2209      	movs	r2, #9
 8007b12:	602a      	str	r2, [r5, #0]
 8007b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	e033      	b.n	8007b88 <__swsetup_r+0x98>
 8007b20:	0758      	lsls	r0, r3, #29
 8007b22:	d512      	bpl.n	8007b4a <__swsetup_r+0x5a>
 8007b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b26:	b141      	cbz	r1, 8007b3a <__swsetup_r+0x4a>
 8007b28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b2c:	4299      	cmp	r1, r3
 8007b2e:	d002      	beq.n	8007b36 <__swsetup_r+0x46>
 8007b30:	4628      	mov	r0, r5
 8007b32:	f000 f8dd 	bl	8007cf0 <_free_r>
 8007b36:	2300      	movs	r3, #0
 8007b38:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	2300      	movs	r3, #0
 8007b44:	6063      	str	r3, [r4, #4]
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	f043 0308 	orr.w	r3, r3, #8
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	b94b      	cbnz	r3, 8007b6a <__swsetup_r+0x7a>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b60:	d003      	beq.n	8007b6a <__swsetup_r+0x7a>
 8007b62:	4621      	mov	r1, r4
 8007b64:	4628      	mov	r0, r5
 8007b66:	f000 fcc2 	bl	80084ee <__smakebuf_r>
 8007b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b6e:	f013 0201 	ands.w	r2, r3, #1
 8007b72:	d00a      	beq.n	8007b8a <__swsetup_r+0x9a>
 8007b74:	2200      	movs	r2, #0
 8007b76:	60a2      	str	r2, [r4, #8]
 8007b78:	6962      	ldr	r2, [r4, #20]
 8007b7a:	4252      	negs	r2, r2
 8007b7c:	61a2      	str	r2, [r4, #24]
 8007b7e:	6922      	ldr	r2, [r4, #16]
 8007b80:	b942      	cbnz	r2, 8007b94 <__swsetup_r+0xa4>
 8007b82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b86:	d1c5      	bne.n	8007b14 <__swsetup_r+0x24>
 8007b88:	bd38      	pop	{r3, r4, r5, pc}
 8007b8a:	0799      	lsls	r1, r3, #30
 8007b8c:	bf58      	it	pl
 8007b8e:	6962      	ldrpl	r2, [r4, #20]
 8007b90:	60a2      	str	r2, [r4, #8]
 8007b92:	e7f4      	b.n	8007b7e <__swsetup_r+0x8e>
 8007b94:	2000      	movs	r0, #0
 8007b96:	e7f7      	b.n	8007b88 <__swsetup_r+0x98>
 8007b98:	20000018 	.word	0x20000018

08007b9c <memset>:
 8007b9c:	4402      	add	r2, r0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d100      	bne.n	8007ba6 <memset+0xa>
 8007ba4:	4770      	bx	lr
 8007ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8007baa:	e7f9      	b.n	8007ba0 <memset+0x4>

08007bac <_close_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	2300      	movs	r3, #0
 8007bb0:	4d05      	ldr	r5, [pc, #20]	@ (8007bc8 <_close_r+0x1c>)
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	602b      	str	r3, [r5, #0]
 8007bb8:	f7f9 fb5c 	bl	8001274 <_close>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d102      	bne.n	8007bc6 <_close_r+0x1a>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	b103      	cbz	r3, 8007bc6 <_close_r+0x1a>
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	200008dc 	.word	0x200008dc

08007bcc <_lseek_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4d06      	ldr	r5, [pc, #24]	@ (8007bec <_lseek_r+0x20>)
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	602a      	str	r2, [r5, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f7f9 fb71 	bl	80012c2 <_lseek>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_lseek_r+0x1e>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_lseek_r+0x1e>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	200008dc 	.word	0x200008dc

08007bf0 <_read_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	4d06      	ldr	r5, [pc, #24]	@ (8007c10 <_read_r+0x20>)
 8007bf6:	4608      	mov	r0, r1
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	602a      	str	r2, [r5, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f7f9 fb1b 	bl	800123a <_read>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d102      	bne.n	8007c0e <_read_r+0x1e>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b103      	cbz	r3, 8007c0e <_read_r+0x1e>
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	200008dc 	.word	0x200008dc

08007c14 <_sbrk_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	2300      	movs	r3, #0
 8007c18:	4d05      	ldr	r5, [pc, #20]	@ (8007c30 <_sbrk_r+0x1c>)
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	4608      	mov	r0, r1
 8007c1e:	602b      	str	r3, [r5, #0]
 8007c20:	f7f9 fb5c 	bl	80012dc <_sbrk>
 8007c24:	1c43      	adds	r3, r0, #1
 8007c26:	d102      	bne.n	8007c2e <_sbrk_r+0x1a>
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	b103      	cbz	r3, 8007c2e <_sbrk_r+0x1a>
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	bd38      	pop	{r3, r4, r5, pc}
 8007c30:	200008dc 	.word	0x200008dc

08007c34 <_write_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4604      	mov	r4, r0
 8007c38:	4d06      	ldr	r5, [pc, #24]	@ (8007c54 <_write_r+0x20>)
 8007c3a:	4608      	mov	r0, r1
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	2200      	movs	r2, #0
 8007c40:	602a      	str	r2, [r5, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f7f8 ffee 	bl	8000c24 <_write>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d102      	bne.n	8007c52 <_write_r+0x1e>
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	b103      	cbz	r3, 8007c52 <_write_r+0x1e>
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	200008dc 	.word	0x200008dc

08007c58 <__errno>:
 8007c58:	4b01      	ldr	r3, [pc, #4]	@ (8007c60 <__errno+0x8>)
 8007c5a:	6818      	ldr	r0, [r3, #0]
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	20000018 	.word	0x20000018

08007c64 <__libc_init_array>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	4d0d      	ldr	r5, [pc, #52]	@ (8007c9c <__libc_init_array+0x38>)
 8007c68:	2600      	movs	r6, #0
 8007c6a:	4c0d      	ldr	r4, [pc, #52]	@ (8007ca0 <__libc_init_array+0x3c>)
 8007c6c:	1b64      	subs	r4, r4, r5
 8007c6e:	10a4      	asrs	r4, r4, #2
 8007c70:	42a6      	cmp	r6, r4
 8007c72:	d109      	bne.n	8007c88 <__libc_init_array+0x24>
 8007c74:	4d0b      	ldr	r5, [pc, #44]	@ (8007ca4 <__libc_init_array+0x40>)
 8007c76:	2600      	movs	r6, #0
 8007c78:	4c0b      	ldr	r4, [pc, #44]	@ (8007ca8 <__libc_init_array+0x44>)
 8007c7a:	f000 fcf1 	bl	8008660 <_init>
 8007c7e:	1b64      	subs	r4, r4, r5
 8007c80:	10a4      	asrs	r4, r4, #2
 8007c82:	42a6      	cmp	r6, r4
 8007c84:	d105      	bne.n	8007c92 <__libc_init_array+0x2e>
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	4798      	blx	r3
 8007c90:	e7ee      	b.n	8007c70 <__libc_init_array+0xc>
 8007c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c96:	3601      	adds	r6, #1
 8007c98:	4798      	blx	r3
 8007c9a:	e7f2      	b.n	8007c82 <__libc_init_array+0x1e>
 8007c9c:	08008842 	.word	0x08008842
 8007ca0:	08008842 	.word	0x08008842
 8007ca4:	08008844 	.word	0x08008844
 8007ca8:	08008848 	.word	0x08008848

08007cac <__retarget_lock_init_recursive>:
 8007cac:	4770      	bx	lr

08007cae <__retarget_lock_acquire_recursive>:
 8007cae:	4770      	bx	lr

08007cb0 <__retarget_lock_release_recursive>:
 8007cb0:	4770      	bx	lr
	...

08007cb4 <__assert_func>:
 8007cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cb6:	4614      	mov	r4, r2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4b09      	ldr	r3, [pc, #36]	@ (8007ce0 <__assert_func+0x2c>)
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68d8      	ldr	r0, [r3, #12]
 8007cc2:	b14c      	cbz	r4, 8007cd8 <__assert_func+0x24>
 8007cc4:	4b07      	ldr	r3, [pc, #28]	@ (8007ce4 <__assert_func+0x30>)
 8007cc6:	9100      	str	r1, [sp, #0]
 8007cc8:	4907      	ldr	r1, [pc, #28]	@ (8007ce8 <__assert_func+0x34>)
 8007cca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cce:	462b      	mov	r3, r5
 8007cd0:	f000 fbd6 	bl	8008480 <fiprintf>
 8007cd4:	f000 fc78 	bl	80085c8 <abort>
 8007cd8:	4b04      	ldr	r3, [pc, #16]	@ (8007cec <__assert_func+0x38>)
 8007cda:	461c      	mov	r4, r3
 8007cdc:	e7f3      	b.n	8007cc6 <__assert_func+0x12>
 8007cde:	bf00      	nop
 8007ce0:	20000018 	.word	0x20000018
 8007ce4:	080087d3 	.word	0x080087d3
 8007ce8:	080087e0 	.word	0x080087e0
 8007cec:	0800880e 	.word	0x0800880e

08007cf0 <_free_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	d041      	beq.n	8007d7c <_free_r+0x8c>
 8007cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cfc:	1f0c      	subs	r4, r1, #4
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	bfb8      	it	lt
 8007d02:	18e4      	addlt	r4, r4, r3
 8007d04:	f7ff fcf6 	bl	80076f4 <__malloc_lock>
 8007d08:	4a1d      	ldr	r2, [pc, #116]	@ (8007d80 <_free_r+0x90>)
 8007d0a:	6813      	ldr	r3, [r2, #0]
 8007d0c:	b933      	cbnz	r3, 8007d1c <_free_r+0x2c>
 8007d0e:	6063      	str	r3, [r4, #4]
 8007d10:	6014      	str	r4, [r2, #0]
 8007d12:	4628      	mov	r0, r5
 8007d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d18:	f7ff bcf2 	b.w	8007700 <__malloc_unlock>
 8007d1c:	42a3      	cmp	r3, r4
 8007d1e:	d908      	bls.n	8007d32 <_free_r+0x42>
 8007d20:	6820      	ldr	r0, [r4, #0]
 8007d22:	1821      	adds	r1, r4, r0
 8007d24:	428b      	cmp	r3, r1
 8007d26:	bf01      	itttt	eq
 8007d28:	6819      	ldreq	r1, [r3, #0]
 8007d2a:	685b      	ldreq	r3, [r3, #4]
 8007d2c:	1809      	addeq	r1, r1, r0
 8007d2e:	6021      	streq	r1, [r4, #0]
 8007d30:	e7ed      	b.n	8007d0e <_free_r+0x1e>
 8007d32:	461a      	mov	r2, r3
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	b10b      	cbz	r3, 8007d3c <_free_r+0x4c>
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d9fa      	bls.n	8007d32 <_free_r+0x42>
 8007d3c:	6811      	ldr	r1, [r2, #0]
 8007d3e:	1850      	adds	r0, r2, r1
 8007d40:	42a0      	cmp	r0, r4
 8007d42:	d10b      	bne.n	8007d5c <_free_r+0x6c>
 8007d44:	6820      	ldr	r0, [r4, #0]
 8007d46:	4401      	add	r1, r0
 8007d48:	1850      	adds	r0, r2, r1
 8007d4a:	6011      	str	r1, [r2, #0]
 8007d4c:	4283      	cmp	r3, r0
 8007d4e:	d1e0      	bne.n	8007d12 <_free_r+0x22>
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	4408      	add	r0, r1
 8007d56:	6053      	str	r3, [r2, #4]
 8007d58:	6010      	str	r0, [r2, #0]
 8007d5a:	e7da      	b.n	8007d12 <_free_r+0x22>
 8007d5c:	d902      	bls.n	8007d64 <_free_r+0x74>
 8007d5e:	230c      	movs	r3, #12
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	e7d6      	b.n	8007d12 <_free_r+0x22>
 8007d64:	6820      	ldr	r0, [r4, #0]
 8007d66:	1821      	adds	r1, r4, r0
 8007d68:	428b      	cmp	r3, r1
 8007d6a:	bf02      	ittt	eq
 8007d6c:	6819      	ldreq	r1, [r3, #0]
 8007d6e:	685b      	ldreq	r3, [r3, #4]
 8007d70:	1809      	addeq	r1, r1, r0
 8007d72:	6063      	str	r3, [r4, #4]
 8007d74:	bf08      	it	eq
 8007d76:	6021      	streq	r1, [r4, #0]
 8007d78:	6054      	str	r4, [r2, #4]
 8007d7a:	e7ca      	b.n	8007d12 <_free_r+0x22>
 8007d7c:	bd38      	pop	{r3, r4, r5, pc}
 8007d7e:	bf00      	nop
 8007d80:	2000079c 	.word	0x2000079c

08007d84 <__sfputc_r>:
 8007d84:	6893      	ldr	r3, [r2, #8]
 8007d86:	3b01      	subs	r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	b410      	push	{r4}
 8007d8c:	6093      	str	r3, [r2, #8]
 8007d8e:	da08      	bge.n	8007da2 <__sfputc_r+0x1e>
 8007d90:	6994      	ldr	r4, [r2, #24]
 8007d92:	42a3      	cmp	r3, r4
 8007d94:	db01      	blt.n	8007d9a <__sfputc_r+0x16>
 8007d96:	290a      	cmp	r1, #10
 8007d98:	d103      	bne.n	8007da2 <__sfputc_r+0x1e>
 8007d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d9e:	f7ff be68 	b.w	8007a72 <__swbuf_r>
 8007da2:	6813      	ldr	r3, [r2, #0]
 8007da4:	1c58      	adds	r0, r3, #1
 8007da6:	6010      	str	r0, [r2, #0]
 8007da8:	4608      	mov	r0, r1
 8007daa:	7019      	strb	r1, [r3, #0]
 8007dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <__sfputs_r>:
 8007db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db4:	4606      	mov	r6, r0
 8007db6:	460f      	mov	r7, r1
 8007db8:	4614      	mov	r4, r2
 8007dba:	18d5      	adds	r5, r2, r3
 8007dbc:	42ac      	cmp	r4, r5
 8007dbe:	d101      	bne.n	8007dc4 <__sfputs_r+0x12>
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	e007      	b.n	8007dd4 <__sfputs_r+0x22>
 8007dc4:	463a      	mov	r2, r7
 8007dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f7ff ffda 	bl	8007d84 <__sfputc_r>
 8007dd0:	1c43      	adds	r3, r0, #1
 8007dd2:	d1f3      	bne.n	8007dbc <__sfputs_r+0xa>
 8007dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dd8 <_vfiprintf_r>:
 8007dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	460d      	mov	r5, r1
 8007dde:	b09d      	sub	sp, #116	@ 0x74
 8007de0:	4614      	mov	r4, r2
 8007de2:	4698      	mov	r8, r3
 8007de4:	4606      	mov	r6, r0
 8007de6:	b118      	cbz	r0, 8007df0 <_vfiprintf_r+0x18>
 8007de8:	6a03      	ldr	r3, [r0, #32]
 8007dea:	b90b      	cbnz	r3, 8007df0 <_vfiprintf_r+0x18>
 8007dec:	f7ff fd58 	bl	80078a0 <__sinit>
 8007df0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007df2:	07d9      	lsls	r1, r3, #31
 8007df4:	d405      	bmi.n	8007e02 <_vfiprintf_r+0x2a>
 8007df6:	89ab      	ldrh	r3, [r5, #12]
 8007df8:	059a      	lsls	r2, r3, #22
 8007dfa:	d402      	bmi.n	8007e02 <_vfiprintf_r+0x2a>
 8007dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dfe:	f7ff ff56 	bl	8007cae <__retarget_lock_acquire_recursive>
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	071b      	lsls	r3, r3, #28
 8007e06:	d501      	bpl.n	8007e0c <_vfiprintf_r+0x34>
 8007e08:	692b      	ldr	r3, [r5, #16]
 8007e0a:	b99b      	cbnz	r3, 8007e34 <_vfiprintf_r+0x5c>
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7ff fe6e 	bl	8007af0 <__swsetup_r>
 8007e14:	b170      	cbz	r0, 8007e34 <_vfiprintf_r+0x5c>
 8007e16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e18:	07dc      	lsls	r4, r3, #31
 8007e1a:	d504      	bpl.n	8007e26 <_vfiprintf_r+0x4e>
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e20:	b01d      	add	sp, #116	@ 0x74
 8007e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e26:	89ab      	ldrh	r3, [r5, #12]
 8007e28:	0598      	lsls	r0, r3, #22
 8007e2a:	d4f7      	bmi.n	8007e1c <_vfiprintf_r+0x44>
 8007e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e2e:	f7ff ff3f 	bl	8007cb0 <__retarget_lock_release_recursive>
 8007e32:	e7f3      	b.n	8007e1c <_vfiprintf_r+0x44>
 8007e34:	2300      	movs	r3, #0
 8007e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e3a:	f04f 0901 	mov.w	r9, #1
 8007e3e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8007ff4 <_vfiprintf_r+0x21c>
 8007e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e44:	2320      	movs	r3, #32
 8007e46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e4a:	2330      	movs	r3, #48	@ 0x30
 8007e4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e50:	4623      	mov	r3, r4
 8007e52:	469a      	mov	sl, r3
 8007e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e58:	b10a      	cbz	r2, 8007e5e <_vfiprintf_r+0x86>
 8007e5a:	2a25      	cmp	r2, #37	@ 0x25
 8007e5c:	d1f9      	bne.n	8007e52 <_vfiprintf_r+0x7a>
 8007e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e62:	d00b      	beq.n	8007e7c <_vfiprintf_r+0xa4>
 8007e64:	465b      	mov	r3, fp
 8007e66:	4622      	mov	r2, r4
 8007e68:	4629      	mov	r1, r5
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7ff ffa1 	bl	8007db2 <__sfputs_r>
 8007e70:	3001      	adds	r0, #1
 8007e72:	f000 80a7 	beq.w	8007fc4 <_vfiprintf_r+0x1ec>
 8007e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e78:	445a      	add	r2, fp
 8007e7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 809f 	beq.w	8007fc4 <_vfiprintf_r+0x1ec>
 8007e86:	2300      	movs	r3, #0
 8007e88:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8c:	f10a 0a01 	add.w	sl, sl, #1
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	9307      	str	r3, [sp, #28]
 8007e94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e98:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e9e:	4654      	mov	r4, sl
 8007ea0:	2205      	movs	r2, #5
 8007ea2:	4854      	ldr	r0, [pc, #336]	@ (8007ff4 <_vfiprintf_r+0x21c>)
 8007ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea8:	f000 fb80 	bl	80085ac <memchr>
 8007eac:	9a04      	ldr	r2, [sp, #16]
 8007eae:	b9d8      	cbnz	r0, 8007ee8 <_vfiprintf_r+0x110>
 8007eb0:	06d1      	lsls	r1, r2, #27
 8007eb2:	bf44      	itt	mi
 8007eb4:	2320      	movmi	r3, #32
 8007eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eba:	0713      	lsls	r3, r2, #28
 8007ebc:	bf44      	itt	mi
 8007ebe:	232b      	movmi	r3, #43	@ 0x2b
 8007ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eca:	d015      	beq.n	8007ef8 <_vfiprintf_r+0x120>
 8007ecc:	9a07      	ldr	r2, [sp, #28]
 8007ece:	4654      	mov	r4, sl
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	f04f 0c0a 	mov.w	ip, #10
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007edc:	3b30      	subs	r3, #48	@ 0x30
 8007ede:	2b09      	cmp	r3, #9
 8007ee0:	d94b      	bls.n	8007f7a <_vfiprintf_r+0x1a2>
 8007ee2:	b1b0      	cbz	r0, 8007f12 <_vfiprintf_r+0x13a>
 8007ee4:	9207      	str	r2, [sp, #28]
 8007ee6:	e014      	b.n	8007f12 <_vfiprintf_r+0x13a>
 8007ee8:	eba0 0308 	sub.w	r3, r0, r8
 8007eec:	46a2      	mov	sl, r4
 8007eee:	fa09 f303 	lsl.w	r3, r9, r3
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	e7d2      	b.n	8007e9e <_vfiprintf_r+0xc6>
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	1d19      	adds	r1, r3, #4
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	9103      	str	r1, [sp, #12]
 8007f02:	bfbb      	ittet	lt
 8007f04:	425b      	neglt	r3, r3
 8007f06:	f042 0202 	orrlt.w	r2, r2, #2
 8007f0a:	9307      	strge	r3, [sp, #28]
 8007f0c:	9307      	strlt	r3, [sp, #28]
 8007f0e:	bfb8      	it	lt
 8007f10:	9204      	strlt	r2, [sp, #16]
 8007f12:	7823      	ldrb	r3, [r4, #0]
 8007f14:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f16:	d10a      	bne.n	8007f2e <_vfiprintf_r+0x156>
 8007f18:	7863      	ldrb	r3, [r4, #1]
 8007f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f1c:	d132      	bne.n	8007f84 <_vfiprintf_r+0x1ac>
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	3402      	adds	r4, #2
 8007f22:	1d1a      	adds	r2, r3, #4
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f2a:	9203      	str	r2, [sp, #12]
 8007f2c:	9305      	str	r3, [sp, #20]
 8007f2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008004 <_vfiprintf_r+0x22c>
 8007f32:	2203      	movs	r2, #3
 8007f34:	7821      	ldrb	r1, [r4, #0]
 8007f36:	4650      	mov	r0, sl
 8007f38:	f000 fb38 	bl	80085ac <memchr>
 8007f3c:	b138      	cbz	r0, 8007f4e <_vfiprintf_r+0x176>
 8007f3e:	eba0 000a 	sub.w	r0, r0, sl
 8007f42:	2240      	movs	r2, #64	@ 0x40
 8007f44:	9b04      	ldr	r3, [sp, #16]
 8007f46:	3401      	adds	r4, #1
 8007f48:	4082      	lsls	r2, r0
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	9304      	str	r3, [sp, #16]
 8007f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f52:	2206      	movs	r2, #6
 8007f54:	4828      	ldr	r0, [pc, #160]	@ (8007ff8 <_vfiprintf_r+0x220>)
 8007f56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f5a:	f000 fb27 	bl	80085ac <memchr>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d03f      	beq.n	8007fe2 <_vfiprintf_r+0x20a>
 8007f62:	4b26      	ldr	r3, [pc, #152]	@ (8007ffc <_vfiprintf_r+0x224>)
 8007f64:	bb1b      	cbnz	r3, 8007fae <_vfiprintf_r+0x1d6>
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	3307      	adds	r3, #7
 8007f6a:	f023 0307 	bic.w	r3, r3, #7
 8007f6e:	3308      	adds	r3, #8
 8007f70:	9303      	str	r3, [sp, #12]
 8007f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f74:	443b      	add	r3, r7
 8007f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f78:	e76a      	b.n	8007e50 <_vfiprintf_r+0x78>
 8007f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f7e:	460c      	mov	r4, r1
 8007f80:	2001      	movs	r0, #1
 8007f82:	e7a8      	b.n	8007ed6 <_vfiprintf_r+0xfe>
 8007f84:	2300      	movs	r3, #0
 8007f86:	3401      	adds	r4, #1
 8007f88:	f04f 0c0a 	mov.w	ip, #10
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	9305      	str	r3, [sp, #20]
 8007f90:	4620      	mov	r0, r4
 8007f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f96:	3a30      	subs	r2, #48	@ 0x30
 8007f98:	2a09      	cmp	r2, #9
 8007f9a:	d903      	bls.n	8007fa4 <_vfiprintf_r+0x1cc>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d0c6      	beq.n	8007f2e <_vfiprintf_r+0x156>
 8007fa0:	9105      	str	r1, [sp, #20]
 8007fa2:	e7c4      	b.n	8007f2e <_vfiprintf_r+0x156>
 8007fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fa8:	4604      	mov	r4, r0
 8007faa:	2301      	movs	r3, #1
 8007fac:	e7f0      	b.n	8007f90 <_vfiprintf_r+0x1b8>
 8007fae:	ab03      	add	r3, sp, #12
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	a904      	add	r1, sp, #16
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	4b11      	ldr	r3, [pc, #68]	@ (8008000 <_vfiprintf_r+0x228>)
 8007fba:	f3af 8000 	nop.w
 8007fbe:	4607      	mov	r7, r0
 8007fc0:	1c78      	adds	r0, r7, #1
 8007fc2:	d1d6      	bne.n	8007f72 <_vfiprintf_r+0x19a>
 8007fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fc6:	07d9      	lsls	r1, r3, #31
 8007fc8:	d405      	bmi.n	8007fd6 <_vfiprintf_r+0x1fe>
 8007fca:	89ab      	ldrh	r3, [r5, #12]
 8007fcc:	059a      	lsls	r2, r3, #22
 8007fce:	d402      	bmi.n	8007fd6 <_vfiprintf_r+0x1fe>
 8007fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fd2:	f7ff fe6d 	bl	8007cb0 <__retarget_lock_release_recursive>
 8007fd6:	89ab      	ldrh	r3, [r5, #12]
 8007fd8:	065b      	lsls	r3, r3, #25
 8007fda:	f53f af1f 	bmi.w	8007e1c <_vfiprintf_r+0x44>
 8007fde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fe0:	e71e      	b.n	8007e20 <_vfiprintf_r+0x48>
 8007fe2:	ab03      	add	r3, sp, #12
 8007fe4:	462a      	mov	r2, r5
 8007fe6:	a904      	add	r1, sp, #16
 8007fe8:	4630      	mov	r0, r6
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	4b04      	ldr	r3, [pc, #16]	@ (8008000 <_vfiprintf_r+0x228>)
 8007fee:	f000 f87d 	bl	80080ec <_printf_i>
 8007ff2:	e7e4      	b.n	8007fbe <_vfiprintf_r+0x1e6>
 8007ff4:	0800880f 	.word	0x0800880f
 8007ff8:	08008819 	.word	0x08008819
 8007ffc:	00000000 	.word	0x00000000
 8008000:	08007db3 	.word	0x08007db3
 8008004:	08008815 	.word	0x08008815

08008008 <_printf_common>:
 8008008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800800c:	4616      	mov	r6, r2
 800800e:	4698      	mov	r8, r3
 8008010:	688a      	ldr	r2, [r1, #8]
 8008012:	4607      	mov	r7, r0
 8008014:	690b      	ldr	r3, [r1, #16]
 8008016:	460c      	mov	r4, r1
 8008018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800801c:	4293      	cmp	r3, r2
 800801e:	bfb8      	it	lt
 8008020:	4613      	movlt	r3, r2
 8008022:	6033      	str	r3, [r6, #0]
 8008024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008028:	b10a      	cbz	r2, 800802e <_printf_common+0x26>
 800802a:	3301      	adds	r3, #1
 800802c:	6033      	str	r3, [r6, #0]
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	0699      	lsls	r1, r3, #26
 8008032:	bf42      	ittt	mi
 8008034:	6833      	ldrmi	r3, [r6, #0]
 8008036:	3302      	addmi	r3, #2
 8008038:	6033      	strmi	r3, [r6, #0]
 800803a:	6825      	ldr	r5, [r4, #0]
 800803c:	f015 0506 	ands.w	r5, r5, #6
 8008040:	d106      	bne.n	8008050 <_printf_common+0x48>
 8008042:	f104 0a19 	add.w	sl, r4, #25
 8008046:	68e3      	ldr	r3, [r4, #12]
 8008048:	6832      	ldr	r2, [r6, #0]
 800804a:	1a9b      	subs	r3, r3, r2
 800804c:	42ab      	cmp	r3, r5
 800804e:	dc2b      	bgt.n	80080a8 <_printf_common+0xa0>
 8008050:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008054:	6822      	ldr	r2, [r4, #0]
 8008056:	3b00      	subs	r3, #0
 8008058:	bf18      	it	ne
 800805a:	2301      	movne	r3, #1
 800805c:	0692      	lsls	r2, r2, #26
 800805e:	d430      	bmi.n	80080c2 <_printf_common+0xba>
 8008060:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008064:	4641      	mov	r1, r8
 8008066:	4638      	mov	r0, r7
 8008068:	47c8      	blx	r9
 800806a:	3001      	adds	r0, #1
 800806c:	d023      	beq.n	80080b6 <_printf_common+0xae>
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	341a      	adds	r4, #26
 8008072:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008076:	f003 0306 	and.w	r3, r3, #6
 800807a:	2b04      	cmp	r3, #4
 800807c:	bf0a      	itet	eq
 800807e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008082:	2500      	movne	r5, #0
 8008084:	6833      	ldreq	r3, [r6, #0]
 8008086:	f04f 0600 	mov.w	r6, #0
 800808a:	bf08      	it	eq
 800808c:	1aed      	subeq	r5, r5, r3
 800808e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008092:	bf08      	it	eq
 8008094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008098:	4293      	cmp	r3, r2
 800809a:	bfc4      	itt	gt
 800809c:	1a9b      	subgt	r3, r3, r2
 800809e:	18ed      	addgt	r5, r5, r3
 80080a0:	42b5      	cmp	r5, r6
 80080a2:	d11a      	bne.n	80080da <_printf_common+0xd2>
 80080a4:	2000      	movs	r0, #0
 80080a6:	e008      	b.n	80080ba <_printf_common+0xb2>
 80080a8:	2301      	movs	r3, #1
 80080aa:	4652      	mov	r2, sl
 80080ac:	4641      	mov	r1, r8
 80080ae:	4638      	mov	r0, r7
 80080b0:	47c8      	blx	r9
 80080b2:	3001      	adds	r0, #1
 80080b4:	d103      	bne.n	80080be <_printf_common+0xb6>
 80080b6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080be:	3501      	adds	r5, #1
 80080c0:	e7c1      	b.n	8008046 <_printf_common+0x3e>
 80080c2:	18e1      	adds	r1, r4, r3
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	2030      	movs	r0, #48	@ 0x30
 80080c8:	3302      	adds	r3, #2
 80080ca:	4422      	add	r2, r4
 80080cc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080d8:	e7c2      	b.n	8008060 <_printf_common+0x58>
 80080da:	2301      	movs	r3, #1
 80080dc:	4622      	mov	r2, r4
 80080de:	4641      	mov	r1, r8
 80080e0:	4638      	mov	r0, r7
 80080e2:	47c8      	blx	r9
 80080e4:	3001      	adds	r0, #1
 80080e6:	d0e6      	beq.n	80080b6 <_printf_common+0xae>
 80080e8:	3601      	adds	r6, #1
 80080ea:	e7d9      	b.n	80080a0 <_printf_common+0x98>

080080ec <_printf_i>:
 80080ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080f0:	7e0f      	ldrb	r7, [r1, #24]
 80080f2:	4691      	mov	r9, r2
 80080f4:	4680      	mov	r8, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	2f78      	cmp	r7, #120	@ 0x78
 80080fa:	469a      	mov	sl, r3
 80080fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008102:	d807      	bhi.n	8008114 <_printf_i+0x28>
 8008104:	2f62      	cmp	r7, #98	@ 0x62
 8008106:	d80a      	bhi.n	800811e <_printf_i+0x32>
 8008108:	2f00      	cmp	r7, #0
 800810a:	f000 80d1 	beq.w	80082b0 <_printf_i+0x1c4>
 800810e:	2f58      	cmp	r7, #88	@ 0x58
 8008110:	f000 80b8 	beq.w	8008284 <_printf_i+0x198>
 8008114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800811c:	e03a      	b.n	8008194 <_printf_i+0xa8>
 800811e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008122:	2b15      	cmp	r3, #21
 8008124:	d8f6      	bhi.n	8008114 <_printf_i+0x28>
 8008126:	a101      	add	r1, pc, #4	@ (adr r1, 800812c <_printf_i+0x40>)
 8008128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800812c:	08008185 	.word	0x08008185
 8008130:	08008199 	.word	0x08008199
 8008134:	08008115 	.word	0x08008115
 8008138:	08008115 	.word	0x08008115
 800813c:	08008115 	.word	0x08008115
 8008140:	08008115 	.word	0x08008115
 8008144:	08008199 	.word	0x08008199
 8008148:	08008115 	.word	0x08008115
 800814c:	08008115 	.word	0x08008115
 8008150:	08008115 	.word	0x08008115
 8008154:	08008115 	.word	0x08008115
 8008158:	08008297 	.word	0x08008297
 800815c:	080081c3 	.word	0x080081c3
 8008160:	08008251 	.word	0x08008251
 8008164:	08008115 	.word	0x08008115
 8008168:	08008115 	.word	0x08008115
 800816c:	080082b9 	.word	0x080082b9
 8008170:	08008115 	.word	0x08008115
 8008174:	080081c3 	.word	0x080081c3
 8008178:	08008115 	.word	0x08008115
 800817c:	08008115 	.word	0x08008115
 8008180:	08008259 	.word	0x08008259
 8008184:	6833      	ldr	r3, [r6, #0]
 8008186:	1d1a      	adds	r2, r3, #4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6032      	str	r2, [r6, #0]
 800818c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008194:	2301      	movs	r3, #1
 8008196:	e09c      	b.n	80082d2 <_printf_i+0x1e6>
 8008198:	6833      	ldr	r3, [r6, #0]
 800819a:	6820      	ldr	r0, [r4, #0]
 800819c:	1d19      	adds	r1, r3, #4
 800819e:	6031      	str	r1, [r6, #0]
 80081a0:	0606      	lsls	r6, r0, #24
 80081a2:	d501      	bpl.n	80081a8 <_printf_i+0xbc>
 80081a4:	681d      	ldr	r5, [r3, #0]
 80081a6:	e003      	b.n	80081b0 <_printf_i+0xc4>
 80081a8:	0645      	lsls	r5, r0, #25
 80081aa:	d5fb      	bpl.n	80081a4 <_printf_i+0xb8>
 80081ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081b0:	2d00      	cmp	r5, #0
 80081b2:	da03      	bge.n	80081bc <_printf_i+0xd0>
 80081b4:	232d      	movs	r3, #45	@ 0x2d
 80081b6:	426d      	negs	r5, r5
 80081b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081bc:	4858      	ldr	r0, [pc, #352]	@ (8008320 <_printf_i+0x234>)
 80081be:	230a      	movs	r3, #10
 80081c0:	e011      	b.n	80081e6 <_printf_i+0xfa>
 80081c2:	6821      	ldr	r1, [r4, #0]
 80081c4:	6833      	ldr	r3, [r6, #0]
 80081c6:	0608      	lsls	r0, r1, #24
 80081c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80081cc:	d402      	bmi.n	80081d4 <_printf_i+0xe8>
 80081ce:	0649      	lsls	r1, r1, #25
 80081d0:	bf48      	it	mi
 80081d2:	b2ad      	uxthmi	r5, r5
 80081d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80081d6:	6033      	str	r3, [r6, #0]
 80081d8:	4851      	ldr	r0, [pc, #324]	@ (8008320 <_printf_i+0x234>)
 80081da:	bf14      	ite	ne
 80081dc:	230a      	movne	r3, #10
 80081de:	2308      	moveq	r3, #8
 80081e0:	2100      	movs	r1, #0
 80081e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081e6:	6866      	ldr	r6, [r4, #4]
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	60a6      	str	r6, [r4, #8]
 80081ec:	db05      	blt.n	80081fa <_printf_i+0x10e>
 80081ee:	6821      	ldr	r1, [r4, #0]
 80081f0:	432e      	orrs	r6, r5
 80081f2:	f021 0104 	bic.w	r1, r1, #4
 80081f6:	6021      	str	r1, [r4, #0]
 80081f8:	d04b      	beq.n	8008292 <_printf_i+0x1a6>
 80081fa:	4616      	mov	r6, r2
 80081fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008200:	fb03 5711 	mls	r7, r3, r1, r5
 8008204:	5dc7      	ldrb	r7, [r0, r7]
 8008206:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800820a:	462f      	mov	r7, r5
 800820c:	460d      	mov	r5, r1
 800820e:	42bb      	cmp	r3, r7
 8008210:	d9f4      	bls.n	80081fc <_printf_i+0x110>
 8008212:	2b08      	cmp	r3, #8
 8008214:	d10b      	bne.n	800822e <_printf_i+0x142>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	07df      	lsls	r7, r3, #31
 800821a:	d508      	bpl.n	800822e <_printf_i+0x142>
 800821c:	6923      	ldr	r3, [r4, #16]
 800821e:	6861      	ldr	r1, [r4, #4]
 8008220:	4299      	cmp	r1, r3
 8008222:	bfde      	ittt	le
 8008224:	2330      	movle	r3, #48	@ 0x30
 8008226:	f806 3c01 	strble.w	r3, [r6, #-1]
 800822a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800822e:	1b92      	subs	r2, r2, r6
 8008230:	6122      	str	r2, [r4, #16]
 8008232:	464b      	mov	r3, r9
 8008234:	aa03      	add	r2, sp, #12
 8008236:	4621      	mov	r1, r4
 8008238:	4640      	mov	r0, r8
 800823a:	f8cd a000 	str.w	sl, [sp]
 800823e:	f7ff fee3 	bl	8008008 <_printf_common>
 8008242:	3001      	adds	r0, #1
 8008244:	d14a      	bne.n	80082dc <_printf_i+0x1f0>
 8008246:	f04f 30ff 	mov.w	r0, #4294967295
 800824a:	b004      	add	sp, #16
 800824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	f043 0320 	orr.w	r3, r3, #32
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	2778      	movs	r7, #120	@ 0x78
 800825a:	4832      	ldr	r0, [pc, #200]	@ (8008324 <_printf_i+0x238>)
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008262:	061f      	lsls	r7, r3, #24
 8008264:	6831      	ldr	r1, [r6, #0]
 8008266:	f851 5b04 	ldr.w	r5, [r1], #4
 800826a:	d402      	bmi.n	8008272 <_printf_i+0x186>
 800826c:	065f      	lsls	r7, r3, #25
 800826e:	bf48      	it	mi
 8008270:	b2ad      	uxthmi	r5, r5
 8008272:	6031      	str	r1, [r6, #0]
 8008274:	07d9      	lsls	r1, r3, #31
 8008276:	bf44      	itt	mi
 8008278:	f043 0320 	orrmi.w	r3, r3, #32
 800827c:	6023      	strmi	r3, [r4, #0]
 800827e:	b11d      	cbz	r5, 8008288 <_printf_i+0x19c>
 8008280:	2310      	movs	r3, #16
 8008282:	e7ad      	b.n	80081e0 <_printf_i+0xf4>
 8008284:	4826      	ldr	r0, [pc, #152]	@ (8008320 <_printf_i+0x234>)
 8008286:	e7e9      	b.n	800825c <_printf_i+0x170>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	f023 0320 	bic.w	r3, r3, #32
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	e7f6      	b.n	8008280 <_printf_i+0x194>
 8008292:	4616      	mov	r6, r2
 8008294:	e7bd      	b.n	8008212 <_printf_i+0x126>
 8008296:	6833      	ldr	r3, [r6, #0]
 8008298:	6825      	ldr	r5, [r4, #0]
 800829a:	1d18      	adds	r0, r3, #4
 800829c:	6961      	ldr	r1, [r4, #20]
 800829e:	6030      	str	r0, [r6, #0]
 80082a0:	062e      	lsls	r6, r5, #24
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	d501      	bpl.n	80082aa <_printf_i+0x1be>
 80082a6:	6019      	str	r1, [r3, #0]
 80082a8:	e002      	b.n	80082b0 <_printf_i+0x1c4>
 80082aa:	0668      	lsls	r0, r5, #25
 80082ac:	d5fb      	bpl.n	80082a6 <_printf_i+0x1ba>
 80082ae:	8019      	strh	r1, [r3, #0]
 80082b0:	2300      	movs	r3, #0
 80082b2:	4616      	mov	r6, r2
 80082b4:	6123      	str	r3, [r4, #16]
 80082b6:	e7bc      	b.n	8008232 <_printf_i+0x146>
 80082b8:	6833      	ldr	r3, [r6, #0]
 80082ba:	2100      	movs	r1, #0
 80082bc:	1d1a      	adds	r2, r3, #4
 80082be:	6032      	str	r2, [r6, #0]
 80082c0:	681e      	ldr	r6, [r3, #0]
 80082c2:	6862      	ldr	r2, [r4, #4]
 80082c4:	4630      	mov	r0, r6
 80082c6:	f000 f971 	bl	80085ac <memchr>
 80082ca:	b108      	cbz	r0, 80082d0 <_printf_i+0x1e4>
 80082cc:	1b80      	subs	r0, r0, r6
 80082ce:	6060      	str	r0, [r4, #4]
 80082d0:	6863      	ldr	r3, [r4, #4]
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	2300      	movs	r3, #0
 80082d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082da:	e7aa      	b.n	8008232 <_printf_i+0x146>
 80082dc:	6923      	ldr	r3, [r4, #16]
 80082de:	4632      	mov	r2, r6
 80082e0:	4649      	mov	r1, r9
 80082e2:	4640      	mov	r0, r8
 80082e4:	47d0      	blx	sl
 80082e6:	3001      	adds	r0, #1
 80082e8:	d0ad      	beq.n	8008246 <_printf_i+0x15a>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	079b      	lsls	r3, r3, #30
 80082ee:	d413      	bmi.n	8008318 <_printf_i+0x22c>
 80082f0:	68e0      	ldr	r0, [r4, #12]
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	4298      	cmp	r0, r3
 80082f6:	bfb8      	it	lt
 80082f8:	4618      	movlt	r0, r3
 80082fa:	e7a6      	b.n	800824a <_printf_i+0x15e>
 80082fc:	2301      	movs	r3, #1
 80082fe:	4632      	mov	r2, r6
 8008300:	4649      	mov	r1, r9
 8008302:	4640      	mov	r0, r8
 8008304:	47d0      	blx	sl
 8008306:	3001      	adds	r0, #1
 8008308:	d09d      	beq.n	8008246 <_printf_i+0x15a>
 800830a:	3501      	adds	r5, #1
 800830c:	68e3      	ldr	r3, [r4, #12]
 800830e:	9903      	ldr	r1, [sp, #12]
 8008310:	1a5b      	subs	r3, r3, r1
 8008312:	42ab      	cmp	r3, r5
 8008314:	dcf2      	bgt.n	80082fc <_printf_i+0x210>
 8008316:	e7eb      	b.n	80082f0 <_printf_i+0x204>
 8008318:	2500      	movs	r5, #0
 800831a:	f104 0619 	add.w	r6, r4, #25
 800831e:	e7f5      	b.n	800830c <_printf_i+0x220>
 8008320:	08008820 	.word	0x08008820
 8008324:	08008831 	.word	0x08008831

08008328 <__sflush_r>:
 8008328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008330:	0716      	lsls	r6, r2, #28
 8008332:	4605      	mov	r5, r0
 8008334:	460c      	mov	r4, r1
 8008336:	d454      	bmi.n	80083e2 <__sflush_r+0xba>
 8008338:	684b      	ldr	r3, [r1, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	dc02      	bgt.n	8008344 <__sflush_r+0x1c>
 800833e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	dd48      	ble.n	80083d6 <__sflush_r+0xae>
 8008344:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008346:	2e00      	cmp	r6, #0
 8008348:	d045      	beq.n	80083d6 <__sflush_r+0xae>
 800834a:	2300      	movs	r3, #0
 800834c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008350:	682f      	ldr	r7, [r5, #0]
 8008352:	6a21      	ldr	r1, [r4, #32]
 8008354:	602b      	str	r3, [r5, #0]
 8008356:	d030      	beq.n	80083ba <__sflush_r+0x92>
 8008358:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	0759      	lsls	r1, r3, #29
 800835e:	d505      	bpl.n	800836c <__sflush_r+0x44>
 8008360:	6863      	ldr	r3, [r4, #4]
 8008362:	1ad2      	subs	r2, r2, r3
 8008364:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008366:	b10b      	cbz	r3, 800836c <__sflush_r+0x44>
 8008368:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800836a:	1ad2      	subs	r2, r2, r3
 800836c:	2300      	movs	r3, #0
 800836e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008370:	6a21      	ldr	r1, [r4, #32]
 8008372:	4628      	mov	r0, r5
 8008374:	47b0      	blx	r6
 8008376:	1c43      	adds	r3, r0, #1
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	d106      	bne.n	800838a <__sflush_r+0x62>
 800837c:	6829      	ldr	r1, [r5, #0]
 800837e:	291d      	cmp	r1, #29
 8008380:	d82b      	bhi.n	80083da <__sflush_r+0xb2>
 8008382:	4a2a      	ldr	r2, [pc, #168]	@ (800842c <__sflush_r+0x104>)
 8008384:	40ca      	lsrs	r2, r1
 8008386:	07d6      	lsls	r6, r2, #31
 8008388:	d527      	bpl.n	80083da <__sflush_r+0xb2>
 800838a:	2200      	movs	r2, #0
 800838c:	04d9      	lsls	r1, r3, #19
 800838e:	6062      	str	r2, [r4, #4]
 8008390:	6922      	ldr	r2, [r4, #16]
 8008392:	6022      	str	r2, [r4, #0]
 8008394:	d504      	bpl.n	80083a0 <__sflush_r+0x78>
 8008396:	1c42      	adds	r2, r0, #1
 8008398:	d101      	bne.n	800839e <__sflush_r+0x76>
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	b903      	cbnz	r3, 80083a0 <__sflush_r+0x78>
 800839e:	6560      	str	r0, [r4, #84]	@ 0x54
 80083a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083a2:	602f      	str	r7, [r5, #0]
 80083a4:	b1b9      	cbz	r1, 80083d6 <__sflush_r+0xae>
 80083a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083aa:	4299      	cmp	r1, r3
 80083ac:	d002      	beq.n	80083b4 <__sflush_r+0x8c>
 80083ae:	4628      	mov	r0, r5
 80083b0:	f7ff fc9e 	bl	8007cf0 <_free_r>
 80083b4:	2300      	movs	r3, #0
 80083b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80083b8:	e00d      	b.n	80083d6 <__sflush_r+0xae>
 80083ba:	2301      	movs	r3, #1
 80083bc:	4628      	mov	r0, r5
 80083be:	47b0      	blx	r6
 80083c0:	4602      	mov	r2, r0
 80083c2:	1c50      	adds	r0, r2, #1
 80083c4:	d1c9      	bne.n	800835a <__sflush_r+0x32>
 80083c6:	682b      	ldr	r3, [r5, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0c6      	beq.n	800835a <__sflush_r+0x32>
 80083cc:	2b1d      	cmp	r3, #29
 80083ce:	d001      	beq.n	80083d4 <__sflush_r+0xac>
 80083d0:	2b16      	cmp	r3, #22
 80083d2:	d11d      	bne.n	8008410 <__sflush_r+0xe8>
 80083d4:	602f      	str	r7, [r5, #0]
 80083d6:	2000      	movs	r0, #0
 80083d8:	e021      	b.n	800841e <__sflush_r+0xf6>
 80083da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083de:	b21b      	sxth	r3, r3
 80083e0:	e01a      	b.n	8008418 <__sflush_r+0xf0>
 80083e2:	690f      	ldr	r7, [r1, #16]
 80083e4:	2f00      	cmp	r7, #0
 80083e6:	d0f6      	beq.n	80083d6 <__sflush_r+0xae>
 80083e8:	0793      	lsls	r3, r2, #30
 80083ea:	680e      	ldr	r6, [r1, #0]
 80083ec:	600f      	str	r7, [r1, #0]
 80083ee:	bf0c      	ite	eq
 80083f0:	694b      	ldreq	r3, [r1, #20]
 80083f2:	2300      	movne	r3, #0
 80083f4:	eba6 0807 	sub.w	r8, r6, r7
 80083f8:	608b      	str	r3, [r1, #8]
 80083fa:	f1b8 0f00 	cmp.w	r8, #0
 80083fe:	ddea      	ble.n	80083d6 <__sflush_r+0xae>
 8008400:	4643      	mov	r3, r8
 8008402:	463a      	mov	r2, r7
 8008404:	6a21      	ldr	r1, [r4, #32]
 8008406:	4628      	mov	r0, r5
 8008408:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800840a:	47b0      	blx	r6
 800840c:	2800      	cmp	r0, #0
 800840e:	dc08      	bgt.n	8008422 <__sflush_r+0xfa>
 8008410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008422:	4407      	add	r7, r0
 8008424:	eba8 0800 	sub.w	r8, r8, r0
 8008428:	e7e7      	b.n	80083fa <__sflush_r+0xd2>
 800842a:	bf00      	nop
 800842c:	20400001 	.word	0x20400001

08008430 <_fflush_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	690b      	ldr	r3, [r1, #16]
 8008434:	4605      	mov	r5, r0
 8008436:	460c      	mov	r4, r1
 8008438:	b913      	cbnz	r3, 8008440 <_fflush_r+0x10>
 800843a:	2500      	movs	r5, #0
 800843c:	4628      	mov	r0, r5
 800843e:	bd38      	pop	{r3, r4, r5, pc}
 8008440:	b118      	cbz	r0, 800844a <_fflush_r+0x1a>
 8008442:	6a03      	ldr	r3, [r0, #32]
 8008444:	b90b      	cbnz	r3, 800844a <_fflush_r+0x1a>
 8008446:	f7ff fa2b 	bl	80078a0 <__sinit>
 800844a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0f3      	beq.n	800843a <_fflush_r+0xa>
 8008452:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008454:	07d0      	lsls	r0, r2, #31
 8008456:	d404      	bmi.n	8008462 <_fflush_r+0x32>
 8008458:	0599      	lsls	r1, r3, #22
 800845a:	d402      	bmi.n	8008462 <_fflush_r+0x32>
 800845c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800845e:	f7ff fc26 	bl	8007cae <__retarget_lock_acquire_recursive>
 8008462:	4628      	mov	r0, r5
 8008464:	4621      	mov	r1, r4
 8008466:	f7ff ff5f 	bl	8008328 <__sflush_r>
 800846a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800846c:	4605      	mov	r5, r0
 800846e:	07da      	lsls	r2, r3, #31
 8008470:	d4e4      	bmi.n	800843c <_fflush_r+0xc>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	059b      	lsls	r3, r3, #22
 8008476:	d4e1      	bmi.n	800843c <_fflush_r+0xc>
 8008478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800847a:	f7ff fc19 	bl	8007cb0 <__retarget_lock_release_recursive>
 800847e:	e7dd      	b.n	800843c <_fflush_r+0xc>

08008480 <fiprintf>:
 8008480:	b40e      	push	{r1, r2, r3}
 8008482:	b503      	push	{r0, r1, lr}
 8008484:	ab03      	add	r3, sp, #12
 8008486:	4601      	mov	r1, r0
 8008488:	4805      	ldr	r0, [pc, #20]	@ (80084a0 <fiprintf+0x20>)
 800848a:	f853 2b04 	ldr.w	r2, [r3], #4
 800848e:	6800      	ldr	r0, [r0, #0]
 8008490:	9301      	str	r3, [sp, #4]
 8008492:	f7ff fca1 	bl	8007dd8 <_vfiprintf_r>
 8008496:	b002      	add	sp, #8
 8008498:	f85d eb04 	ldr.w	lr, [sp], #4
 800849c:	b003      	add	sp, #12
 800849e:	4770      	bx	lr
 80084a0:	20000018 	.word	0x20000018

080084a4 <__swhatbuf_r>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	460c      	mov	r4, r1
 80084a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ac:	b096      	sub	sp, #88	@ 0x58
 80084ae:	4615      	mov	r5, r2
 80084b0:	2900      	cmp	r1, #0
 80084b2:	461e      	mov	r6, r3
 80084b4:	da0c      	bge.n	80084d0 <__swhatbuf_r+0x2c>
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	2100      	movs	r1, #0
 80084ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084be:	bf14      	ite	ne
 80084c0:	2340      	movne	r3, #64	@ 0x40
 80084c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80084c6:	2000      	movs	r0, #0
 80084c8:	6031      	str	r1, [r6, #0]
 80084ca:	602b      	str	r3, [r5, #0]
 80084cc:	b016      	add	sp, #88	@ 0x58
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	466a      	mov	r2, sp
 80084d2:	f000 f849 	bl	8008568 <_fstat_r>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	dbed      	blt.n	80084b6 <__swhatbuf_r+0x12>
 80084da:	9901      	ldr	r1, [sp, #4]
 80084dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80084e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80084e4:	4259      	negs	r1, r3
 80084e6:	4159      	adcs	r1, r3
 80084e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084ec:	e7eb      	b.n	80084c6 <__swhatbuf_r+0x22>

080084ee <__smakebuf_r>:
 80084ee:	898b      	ldrh	r3, [r1, #12]
 80084f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084f2:	079d      	lsls	r5, r3, #30
 80084f4:	4606      	mov	r6, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	d507      	bpl.n	800850a <__smakebuf_r+0x1c>
 80084fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	6123      	str	r3, [r4, #16]
 8008502:	2301      	movs	r3, #1
 8008504:	6163      	str	r3, [r4, #20]
 8008506:	b003      	add	sp, #12
 8008508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800850a:	ab01      	add	r3, sp, #4
 800850c:	466a      	mov	r2, sp
 800850e:	f7ff ffc9 	bl	80084a4 <__swhatbuf_r>
 8008512:	9f00      	ldr	r7, [sp, #0]
 8008514:	4605      	mov	r5, r0
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7ff f86b 	bl	80075f4 <_malloc_r>
 800851e:	b948      	cbnz	r0, 8008534 <__smakebuf_r+0x46>
 8008520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008524:	059a      	lsls	r2, r3, #22
 8008526:	d4ee      	bmi.n	8008506 <__smakebuf_r+0x18>
 8008528:	f023 0303 	bic.w	r3, r3, #3
 800852c:	f043 0302 	orr.w	r3, r3, #2
 8008530:	81a3      	strh	r3, [r4, #12]
 8008532:	e7e2      	b.n	80084fa <__smakebuf_r+0xc>
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	6020      	str	r0, [r4, #0]
 8008538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800853c:	81a3      	strh	r3, [r4, #12]
 800853e:	9b01      	ldr	r3, [sp, #4]
 8008540:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008544:	b15b      	cbz	r3, 800855e <__smakebuf_r+0x70>
 8008546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800854a:	4630      	mov	r0, r6
 800854c:	f000 f81e 	bl	800858c <_isatty_r>
 8008550:	b128      	cbz	r0, 800855e <__smakebuf_r+0x70>
 8008552:	89a3      	ldrh	r3, [r4, #12]
 8008554:	f023 0303 	bic.w	r3, r3, #3
 8008558:	f043 0301 	orr.w	r3, r3, #1
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	431d      	orrs	r5, r3
 8008562:	81a5      	strh	r5, [r4, #12]
 8008564:	e7cf      	b.n	8008506 <__smakebuf_r+0x18>
	...

08008568 <_fstat_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	2300      	movs	r3, #0
 800856c:	4d06      	ldr	r5, [pc, #24]	@ (8008588 <_fstat_r+0x20>)
 800856e:	4604      	mov	r4, r0
 8008570:	4608      	mov	r0, r1
 8008572:	4611      	mov	r1, r2
 8008574:	602b      	str	r3, [r5, #0]
 8008576:	f7f8 fe89 	bl	800128c <_fstat>
 800857a:	1c43      	adds	r3, r0, #1
 800857c:	d102      	bne.n	8008584 <_fstat_r+0x1c>
 800857e:	682b      	ldr	r3, [r5, #0]
 8008580:	b103      	cbz	r3, 8008584 <_fstat_r+0x1c>
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	bd38      	pop	{r3, r4, r5, pc}
 8008586:	bf00      	nop
 8008588:	200008dc 	.word	0x200008dc

0800858c <_isatty_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	2300      	movs	r3, #0
 8008590:	4d05      	ldr	r5, [pc, #20]	@ (80085a8 <_isatty_r+0x1c>)
 8008592:	4604      	mov	r4, r0
 8008594:	4608      	mov	r0, r1
 8008596:	602b      	str	r3, [r5, #0]
 8008598:	f7f8 fe88 	bl	80012ac <_isatty>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d102      	bne.n	80085a6 <_isatty_r+0x1a>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	b103      	cbz	r3, 80085a6 <_isatty_r+0x1a>
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	200008dc 	.word	0x200008dc

080085ac <memchr>:
 80085ac:	b2c9      	uxtb	r1, r1
 80085ae:	4603      	mov	r3, r0
 80085b0:	4402      	add	r2, r0
 80085b2:	b510      	push	{r4, lr}
 80085b4:	4293      	cmp	r3, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	d101      	bne.n	80085be <memchr+0x12>
 80085ba:	2000      	movs	r0, #0
 80085bc:	e003      	b.n	80085c6 <memchr+0x1a>
 80085be:	7804      	ldrb	r4, [r0, #0]
 80085c0:	3301      	adds	r3, #1
 80085c2:	428c      	cmp	r4, r1
 80085c4:	d1f6      	bne.n	80085b4 <memchr+0x8>
 80085c6:	bd10      	pop	{r4, pc}

080085c8 <abort>:
 80085c8:	2006      	movs	r0, #6
 80085ca:	b508      	push	{r3, lr}
 80085cc:	f000 f82c 	bl	8008628 <raise>
 80085d0:	2001      	movs	r0, #1
 80085d2:	f7f8 fe27 	bl	8001224 <_exit>

080085d6 <_raise_r>:
 80085d6:	291f      	cmp	r1, #31
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4605      	mov	r5, r0
 80085dc:	460c      	mov	r4, r1
 80085de:	d904      	bls.n	80085ea <_raise_r+0x14>
 80085e0:	2316      	movs	r3, #22
 80085e2:	6003      	str	r3, [r0, #0]
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295
 80085e8:	bd38      	pop	{r3, r4, r5, pc}
 80085ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80085ec:	b112      	cbz	r2, 80085f4 <_raise_r+0x1e>
 80085ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085f2:	b94b      	cbnz	r3, 8008608 <_raise_r+0x32>
 80085f4:	4628      	mov	r0, r5
 80085f6:	f000 f831 	bl	800865c <_getpid_r>
 80085fa:	4622      	mov	r2, r4
 80085fc:	4601      	mov	r1, r0
 80085fe:	4628      	mov	r0, r5
 8008600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008604:	f000 b818 	b.w	8008638 <_kill_r>
 8008608:	2b01      	cmp	r3, #1
 800860a:	d00a      	beq.n	8008622 <_raise_r+0x4c>
 800860c:	1c59      	adds	r1, r3, #1
 800860e:	d103      	bne.n	8008618 <_raise_r+0x42>
 8008610:	2316      	movs	r3, #22
 8008612:	6003      	str	r3, [r0, #0]
 8008614:	2001      	movs	r0, #1
 8008616:	e7e7      	b.n	80085e8 <_raise_r+0x12>
 8008618:	2100      	movs	r1, #0
 800861a:	4620      	mov	r0, r4
 800861c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008620:	4798      	blx	r3
 8008622:	2000      	movs	r0, #0
 8008624:	e7e0      	b.n	80085e8 <_raise_r+0x12>
	...

08008628 <raise>:
 8008628:	4b02      	ldr	r3, [pc, #8]	@ (8008634 <raise+0xc>)
 800862a:	4601      	mov	r1, r0
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	f7ff bfd2 	b.w	80085d6 <_raise_r>
 8008632:	bf00      	nop
 8008634:	20000018 	.word	0x20000018

08008638 <_kill_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	2300      	movs	r3, #0
 800863c:	4d06      	ldr	r5, [pc, #24]	@ (8008658 <_kill_r+0x20>)
 800863e:	4604      	mov	r4, r0
 8008640:	4608      	mov	r0, r1
 8008642:	4611      	mov	r1, r2
 8008644:	602b      	str	r3, [r5, #0]
 8008646:	f7f8 fddd 	bl	8001204 <_kill>
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	d102      	bne.n	8008654 <_kill_r+0x1c>
 800864e:	682b      	ldr	r3, [r5, #0]
 8008650:	b103      	cbz	r3, 8008654 <_kill_r+0x1c>
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	bd38      	pop	{r3, r4, r5, pc}
 8008656:	bf00      	nop
 8008658:	200008dc 	.word	0x200008dc

0800865c <_getpid_r>:
 800865c:	f7f8 bdca 	b.w	80011f4 <_getpid>

08008660 <_init>:
 8008660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008662:	bf00      	nop
 8008664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008666:	bc08      	pop	{r3}
 8008668:	469e      	mov	lr, r3
 800866a:	4770      	bx	lr

0800866c <_fini>:
 800866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866e:	bf00      	nop
 8008670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008672:	bc08      	pop	{r3}
 8008674:	469e      	mov	lr, r3
 8008676:	4770      	bx	lr
