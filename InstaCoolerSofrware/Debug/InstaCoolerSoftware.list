
InstaCoolerSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007798  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012f  080079d0  080079d0  000089d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007b00  08007b00  00008b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08007b04  08007b04  00008b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000068  20000000  08007b08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000078a  20000068  08007b70  00009068  2**2
                  ALLOC
  7 ._user_heap_stack 00000606  200007f2  08007b70  000097f2  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017535  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d90  00000000  00000000  000205d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001650  00000000  00000000  00023368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001151  00000000  00000000  000249b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033bd9  00000000  00000000  00025b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001ae7d  00000000  00000000  000596e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00144b10  00000000  00000000  0007455f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b906f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006824  00000000  00000000  001b90b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  001bf8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	080079b8 	.word	0x080079b8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	080079b8 	.word	0x080079b8

08000278 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000280:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000284:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000288:	f003 0301 	and.w	r3, r3, #1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d013      	beq.n	80002b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000290:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000294:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000298:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800029c:	2b00      	cmp	r3, #0
 800029e:	d00b      	beq.n	80002b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002a0:	e000      	b.n	80002a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80002a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f9      	beq.n	80002a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002ae:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	b2d2      	uxtb	r2, r2
 80002b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b8:	687b      	ldr	r3, [r7, #4]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
	...

080002c8 <setPWM>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setPWM(TIM_HandleTypeDef *timer_handle, uint32_t timer_channel, uint8_t duty) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	4613      	mov	r3, r2
 80002d4:	71fb      	strb	r3, [r7, #7]
    uint32_t counter_period = __HAL_TIM_GET_AUTORELOAD(timer_handle); // Get the ARR value (number of ticks per period)
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002dc:	617b      	str	r3, [r7, #20]
    uint32_t new_duty = duty / 255.0f * counter_period; // Calculate new duty value
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	ee07 3a90 	vmov	s15, r3
 80002e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002e8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000370 <setPWM+0xa8>
 80002ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	ee07 3a90 	vmov	s15, r3
 80002f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000302:	ee17 3a90 	vmov	r3, s15
 8000306:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, new_duty); // Set compare value to new duty
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d104      	bne.n	8000318 <setPWM+0x50>
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	693a      	ldr	r2, [r7, #16]
 8000314:	635a      	str	r2, [r3, #52]	@ 0x34
 8000316:	e023      	b.n	8000360 <setPWM+0x98>
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	2b04      	cmp	r3, #4
 800031c:	d104      	bne.n	8000328 <setPWM+0x60>
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	6393      	str	r3, [r2, #56]	@ 0x38
 8000326:	e01b      	b.n	8000360 <setPWM+0x98>
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	2b08      	cmp	r3, #8
 800032c:	d104      	bne.n	8000338 <setPWM+0x70>
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000336:	e013      	b.n	8000360 <setPWM+0x98>
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	2b0c      	cmp	r3, #12
 800033c:	d104      	bne.n	8000348 <setPWM+0x80>
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	6413      	str	r3, [r2, #64]	@ 0x40
 8000346:	e00b      	b.n	8000360 <setPWM+0x98>
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	2b10      	cmp	r3, #16
 800034c:	d104      	bne.n	8000358 <setPWM+0x90>
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	6493      	str	r3, [r2, #72]	@ 0x48
 8000356:	e003      	b.n	8000360 <setPWM+0x98>
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	693b      	ldr	r3, [r7, #16]
 800035e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    HAL_TIM_PWM_Start(timer_handle, timer_channel); // Start PWM
 8000360:	68b9      	ldr	r1, [r7, #8]
 8000362:	68f8      	ldr	r0, [r7, #12]
 8000364:	f004 fe7e 	bl	8005064 <HAL_TIM_PWM_Start>
}
 8000368:	bf00      	nop
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	437f0000 	.word	0x437f0000

08000374 <setRGB>:
    __HAL_TIM_SET_AUTORELOAD(timer, counter_period);		// Set the ARR value (the counter period)

    setPWM(timer, channel, 128);
}

void setRGB(uint8_t r, uint8_t g, uint8_t b) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
 800037e:	460b      	mov	r3, r1
 8000380:	71bb      	strb	r3, [r7, #6]
 8000382:	4613      	mov	r3, r2
 8000384:	717b      	strb	r3, [r7, #5]
    TIM_HandleTypeDef *htim = &LED_TIMER_HANDLE;
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <setRGB+0x44>)
 8000388:	60fb      	str	r3, [r7, #12]
    setPWM(htim, LED_R_CHANNEL, r);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	461a      	mov	r2, r3
 800038e:	2104      	movs	r1, #4
 8000390:	68f8      	ldr	r0, [r7, #12]
 8000392:	f7ff ff99 	bl	80002c8 <setPWM>
    setPWM(htim, LED_G_CHANNEL, g);
 8000396:	79bb      	ldrb	r3, [r7, #6]
 8000398:	461a      	mov	r2, r3
 800039a:	2108      	movs	r1, #8
 800039c:	68f8      	ldr	r0, [r7, #12]
 800039e:	f7ff ff93 	bl	80002c8 <setPWM>
    setPWM(htim, LED_B_CHANNEL, b);
 80003a2:	797b      	ldrb	r3, [r7, #5]
 80003a4:	461a      	mov	r2, r3
 80003a6:	2100      	movs	r1, #0
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f7ff ff8d 	bl	80002c8 <setPWM>
}
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200000d8 	.word	0x200000d8

080003bc <write_i2c>:
	TIM_HandleTypeDef *htim = &MOTOR_TIMER_HANDLE;
	uint8_t duty = (throttle / 100.0f + 0.01f) * 255;
	setPWM(htim, MOTOR_TIMER_CHANNEL, duty);
}

bool write_i2c(uint16_t addr, uint8_t reg, void const* buf, size_t len, void* context) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08a      	sub	sp, #40	@ 0x28
 80003c0:	af04      	add	r7, sp, #16
 80003c2:	60ba      	str	r2, [r7, #8]
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	4603      	mov	r3, r0
 80003c8:	81fb      	strh	r3, [r7, #14]
 80003ca:	460b      	mov	r3, r1
 80003cc:	737b      	strb	r3, [r7, #13]
	HAL_Delay(100);
 80003ce:	2064      	movs	r0, #100	@ 0x64
 80003d0:	f001 f8ec 	bl	80015ac <HAL_Delay>
	printf("Write\n");
 80003d4:	4819      	ldr	r0, [pc, #100]	@ (800043c <write_i2c+0x80>)
 80003d6:	f006 fd29 	bl	8006e2c <puts>
	uint8_t status = HAL_I2C_Mem_Write(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, context);
 80003da:	7b7b      	ldrb	r3, [r7, #13]
 80003dc:	b298      	uxth	r0, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	6a3a      	ldr	r2, [r7, #32]
 80003e4:	89f9      	ldrh	r1, [r7, #14]
 80003e6:	9202      	str	r2, [sp, #8]
 80003e8:	9301      	str	r3, [sp, #4]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2301      	movs	r3, #1
 80003f0:	4602      	mov	r2, r0
 80003f2:	4813      	ldr	r0, [pc, #76]	@ (8000440 <write_i2c+0x84>)
 80003f4:	f001 fcda 	bl	8001dac <HAL_I2C_Mem_Write>
 80003f8:	4603      	mov	r3, r0
 80003fa:	75fb      	strb	r3, [r7, #23]
	  if (status == HAL_OK) {
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d106      	bne.n	8000410 <write_i2c+0x54>
		  setRGB(0, 255, 255);
 8000402:	22ff      	movs	r2, #255	@ 0xff
 8000404:	21ff      	movs	r1, #255	@ 0xff
 8000406:	2000      	movs	r0, #0
 8000408:	f7ff ffb4 	bl	8000374 <setRGB>
		  return true;
 800040c:	2301      	movs	r3, #1
 800040e:	e011      	b.n	8000434 <write_i2c+0x78>
	  } else if (status == HAL_ERROR) {
 8000410:	7dfb      	ldrb	r3, [r7, #23]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d105      	bne.n	8000422 <write_i2c+0x66>
		  setRGB(255, 255, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	21ff      	movs	r1, #255	@ 0xff
 800041a:	20ff      	movs	r0, #255	@ 0xff
 800041c:	f7ff ffaa 	bl	8000374 <setRGB>
 8000420:	e007      	b.n	8000432 <write_i2c+0x76>
	  } else if (status == HAL_TIMEOUT) {
 8000422:	7dfb      	ldrb	r3, [r7, #23]
 8000424:	2b03      	cmp	r3, #3
 8000426:	d104      	bne.n	8000432 <write_i2c+0x76>
		  setRGB(20, 255, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	21ff      	movs	r1, #255	@ 0xff
 800042c:	2014      	movs	r0, #20
 800042e:	f7ff ffa1 	bl	8000374 <setRGB>
	  }
	  return false;
 8000432:	2300      	movs	r3, #0
}
 8000434:	4618      	mov	r0, r3
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	080079d0 	.word	0x080079d0
 8000440:	20000084 	.word	0x20000084

08000444 <read_i2c>:

bool read_i2c(uint16_t addr, uint8_t reg, void* buf, size_t len, void* context) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	@ 0x28
 8000448:	af04      	add	r7, sp, #16
 800044a:	60ba      	str	r2, [r7, #8]
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	4603      	mov	r3, r0
 8000450:	81fb      	strh	r3, [r7, #14]
 8000452:	460b      	mov	r3, r1
 8000454:	737b      	strb	r3, [r7, #13]
	HAL_Delay(100);
 8000456:	2064      	movs	r0, #100	@ 0x64
 8000458:	f001 f8a8 	bl	80015ac <HAL_Delay>
	printf("Read\n");
 800045c:	4819      	ldr	r0, [pc, #100]	@ (80004c4 <read_i2c+0x80>)
 800045e:	f006 fce5 	bl	8006e2c <puts>
	uint8_t status = HAL_I2C_Mem_Read(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, context);
 8000462:	7b7b      	ldrb	r3, [r7, #13]
 8000464:	b298      	uxth	r0, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	b29b      	uxth	r3, r3
 800046a:	6a3a      	ldr	r2, [r7, #32]
 800046c:	89f9      	ldrh	r1, [r7, #14]
 800046e:	9202      	str	r2, [sp, #8]
 8000470:	9301      	str	r3, [sp, #4]
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	2301      	movs	r3, #1
 8000478:	4602      	mov	r2, r0
 800047a:	4813      	ldr	r0, [pc, #76]	@ (80004c8 <read_i2c+0x84>)
 800047c:	f001 fdaa 	bl	8001fd4 <HAL_I2C_Mem_Read>
 8000480:	4603      	mov	r3, r0
 8000482:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d106      	bne.n	8000498 <read_i2c+0x54>
		setRGB(0, 255, 255);
 800048a:	22ff      	movs	r2, #255	@ 0xff
 800048c:	21ff      	movs	r1, #255	@ 0xff
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff70 	bl	8000374 <setRGB>
		return true;
 8000494:	2301      	movs	r3, #1
 8000496:	e011      	b.n	80004bc <read_i2c+0x78>
	} else if (status == HAL_ERROR) {
 8000498:	7dfb      	ldrb	r3, [r7, #23]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d105      	bne.n	80004aa <read_i2c+0x66>
		setRGB(255, 255, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	21ff      	movs	r1, #255	@ 0xff
 80004a2:	20ff      	movs	r0, #255	@ 0xff
 80004a4:	f7ff ff66 	bl	8000374 <setRGB>
 80004a8:	e007      	b.n	80004ba <read_i2c+0x76>
	} else if (status == HAL_TIMEOUT) {
 80004aa:	7dfb      	ldrb	r3, [r7, #23]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d104      	bne.n	80004ba <read_i2c+0x76>
		setRGB(20, 255, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	21ff      	movs	r1, #255	@ 0xff
 80004b4:	2014      	movs	r0, #20
 80004b6:	f7ff ff5d 	bl	8000374 <setRGB>
	}
	return false;
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	080079d8 	.word	0x080079d8
 80004c8:	20000084 	.word	0x20000084

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 ffa5 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f869 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fad9 	bl	8000a90 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004de:	f000 f8ef 	bl	80006c0 <MX_TIM1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e2:	f000 faa3 	bl	8000a2c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80004e6:	f000 f9b3 	bl	8000850 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004ea:	f000 fa27 	bl	800093c <MX_TIM3_Init>
  MX_I2C2_Init();
 80004ee:	f000 f8a7 	bl	8000640 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  stusb4500_t device;
  device.addr = 0x28;
 80004f2:	2328      	movs	r3, #40	@ 0x28
 80004f4:	82bb      	strh	r3, [r7, #20]
  device.write = &write_i2c;
 80004f6:	4b27      	ldr	r3, [pc, #156]	@ (8000594 <main+0xc8>)
 80004f8:	61bb      	str	r3, [r7, #24]
  device.read = &read_i2c;
 80004fa:	4b27      	ldr	r3, [pc, #156]	@ (8000598 <main+0xcc>)
 80004fc:	61fb      	str	r3, [r7, #28]
  device.context = 1000;
 80004fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000502:	623b      	str	r3, [r7, #32]
  stusb4500_gpio_cfg_t gpio_cfg;
  gpio_cfg = STUSB4500_GPIO_CFG_SINK_POWER;
 8000504:	2303      	movs	r3, #3
 8000506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  stusb4500_nvm_config_t config;
  config.pdo1_current_ma = 500;
 800050a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800050e:	80bb      	strh	r3, [r7, #4]
  config.pdo2_voltage_mv = 1500;
 8000510:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000514:	80fb      	strh	r3, [r7, #6]
  config.pdo2_current_ma = 3000;
 8000516:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800051a:	813b      	strh	r3, [r7, #8]
  config.pdo3_voltage_mv = 12000;
 800051c:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000520:	817b      	strh	r3, [r7, #10]
  config.pdo3_current_ma = 3000;
 8000522:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000526:	81bb      	strh	r3, [r7, #12]
  config.num_valid_pdos = 3;
 8000528:	2303      	movs	r3, #3
 800052a:	743b      	strb	r3, [r7, #16]
  config.pdo_current_fallback = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	81fb      	strh	r3, [r7, #14]
  config.use_src_current = false;
 8000530:	2300      	movs	r3, #0
 8000532:	747b      	strb	r3, [r7, #17]
  config.only_above_5v = false;
 8000534:	2300      	movs	r3, #0
 8000536:	74bb      	strb	r3, [r7, #18]
  config.gpio_cfg = gpio_cfg;
 8000538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800053c:	74fb      	strb	r3, [r7, #19]
  setRGB(0, 0, 255);
 800053e:	22ff      	movs	r2, #255	@ 0xff
 8000540:	2100      	movs	r1, #0
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ff16 	bl	8000374 <setRGB>

  //bool success = stusb4500_nvm_flash(&device, &config);
  printf("Begin\n");
 8000548:	4814      	ldr	r0, [pc, #80]	@ (800059c <main+0xd0>)
 800054a:	f006 fc6f 	bl	8006e2c <puts>
  uint8_t nvm_buf = 10;
 800054e:	230a      	movs	r3, #10
 8000550:	70fb      	strb	r3, [r7, #3]
  bool success = stusb4500_nvm_read(&device, &nvm_buf);
 8000552:	1cfa      	adds	r2, r7, #3
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fe36 	bl	80011cc <stusb4500_nvm_read>
 8000560:	4603      	mov	r3, r0
 8000562:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (success){
 8000566:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800056a:	2b00      	cmp	r3, #0
 800056c:	d008      	beq.n	8000580 <main+0xb4>
	  printf("True\n");
 800056e:	480c      	ldr	r0, [pc, #48]	@ (80005a0 <main+0xd4>)
 8000570:	f006 fc5c 	bl	8006e2c <puts>
	  setRGB(0, 255, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	21ff      	movs	r1, #255	@ 0xff
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff fefb 	bl	8000374 <setRGB>
 800057e:	e002      	b.n	8000586 <main+0xba>
  } else {
	  printf("False\n");
 8000580:	4808      	ldr	r0, [pc, #32]	@ (80005a4 <main+0xd8>)
 8000582:	f006 fc53 	bl	8006e2c <puts>
	  //setRGB(0, 0, 0);
  }
  printf("%i", nvm_buf);
 8000586:	78fb      	ldrb	r3, [r7, #3]
 8000588:	4619      	mov	r1, r3
 800058a:	4807      	ldr	r0, [pc, #28]	@ (80005a8 <main+0xdc>)
 800058c:	f006 fbe6 	bl	8006d5c <iprintf>
  }*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <main+0xc4>
 8000594:	080003bd 	.word	0x080003bd
 8000598:	08000445 	.word	0x08000445
 800059c:	080079e0 	.word	0x080079e0
 80005a0:	080079e8 	.word	0x080079e8
 80005a4:	080079f0 	.word	0x080079f0
 80005a8:	080079f8 	.word	0x080079f8

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b09e      	sub	sp, #120	@ 0x78
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	2260      	movs	r2, #96	@ 0x60
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f006 fd16 	bl	8006fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]
 80005ce:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 80005d0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80005d4:	f002 faae 	bl	8002b34 <HAL_PWREx_ControlVoltageScaling>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80005de:	f000 faab 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005e2:	2321      	movs	r3, #33	@ 0x21
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fb36 	bl	8002c6c <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000606:	f000 fa97 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	231f      	movs	r3, #31
 800060c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800060e:	2302      	movs	r3, #2
 8000610:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 f9fc 	bl	8003a24 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000632:	f000 fa81 	bl	8000b38 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3778      	adds	r7, #120	@ 0x78
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000644:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <MX_I2C2_Init+0x74>)
 8000646:	4a1c      	ldr	r2, [pc, #112]	@ (80006b8 <MX_I2C2_Init+0x78>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <MX_I2C2_Init+0x74>)
 800064c:	4a1b      	ldr	r2, [pc, #108]	@ (80006bc <MX_I2C2_Init+0x7c>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 80;
 8000650:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <MX_I2C2_Init+0x74>)
 8000652:	2250      	movs	r2, #80	@ 0x50
 8000654:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <MX_I2C2_Init+0x74>)
 8000658:	2201      	movs	r2, #1
 800065a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <MX_I2C2_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <MX_I2C2_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <MX_I2C2_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_I2C2_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_I2C2_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800067a:	480e      	ldr	r0, [pc, #56]	@ (80006b4 <MX_I2C2_Init+0x74>)
 800067c:	f001 fafa 	bl	8001c74 <HAL_I2C_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000686:	f000 fa57 	bl	8000b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4809      	ldr	r0, [pc, #36]	@ (80006b4 <MX_I2C2_Init+0x74>)
 800068e:	f002 f87d 	bl	800278c <HAL_I2CEx_ConfigAnalogFilter>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000698:	f000 fa4e 	bl	8000b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800069c:	2100      	movs	r1, #0
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_I2C2_Init+0x74>)
 80006a0:	f002 f8bf 	bl	8002822 <HAL_I2CEx_ConfigDigitalFilter>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f000 fa45 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000084 	.word	0x20000084
 80006b8:	40005800 	.word	0x40005800
 80006bc:	00303d5b 	.word	0x00303d5b

080006c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b09c      	sub	sp, #112	@ 0x70
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	615a      	str	r2, [r3, #20]
 80006f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2234      	movs	r2, #52	@ 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f006 fc76 	bl	8006fec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000700:	4b51      	ldr	r3, [pc, #324]	@ (8000848 <MX_TIM1_Init+0x188>)
 8000702:	4a52      	ldr	r2, [pc, #328]	@ (800084c <MX_TIM1_Init+0x18c>)
 8000704:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000706:	4b50      	ldr	r3, [pc, #320]	@ (8000848 <MX_TIM1_Init+0x188>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b4e      	ldr	r3, [pc, #312]	@ (8000848 <MX_TIM1_Init+0x188>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000712:	4b4d      	ldr	r3, [pc, #308]	@ (8000848 <MX_TIM1_Init+0x188>)
 8000714:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000718:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	4b4b      	ldr	r3, [pc, #300]	@ (8000848 <MX_TIM1_Init+0x188>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000720:	4b49      	ldr	r3, [pc, #292]	@ (8000848 <MX_TIM1_Init+0x188>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b48      	ldr	r3, [pc, #288]	@ (8000848 <MX_TIM1_Init+0x188>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800072c:	4846      	ldr	r0, [pc, #280]	@ (8000848 <MX_TIM1_Init+0x188>)
 800072e:	f004 fbe1 	bl	8004ef4 <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000738:	f000 f9fe 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000742:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000746:	4619      	mov	r1, r3
 8000748:	483f      	ldr	r0, [pc, #252]	@ (8000848 <MX_TIM1_Init+0x188>)
 800074a:	f004 fef1 	bl	8005530 <HAL_TIM_ConfigClockSource>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000754:	f000 f9f0 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000758:	483b      	ldr	r0, [pc, #236]	@ (8000848 <MX_TIM1_Init+0x188>)
 800075a:	f004 fc22 	bl	8004fa2 <HAL_TIM_PWM_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000764:	f000 f9e8 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000774:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000778:	4619      	mov	r1, r3
 800077a:	4833      	ldr	r0, [pc, #204]	@ (8000848 <MX_TIM1_Init+0x188>)
 800077c:	f005 fd72 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000786:	f000 f9d7 	bl	8000b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078a:	2360      	movs	r3, #96	@ 0x60
 800078c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000792:	2300      	movs	r3, #0
 8000794:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000796:	2300      	movs	r3, #0
 8000798:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	4826      	ldr	r0, [pc, #152]	@ (8000848 <MX_TIM1_Init+0x188>)
 80007b0:	f004 fdaa 	bl	8005308 <HAL_TIM_PWM_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007ba:	f000 f9bd 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007c2:	2204      	movs	r2, #4
 80007c4:	4619      	mov	r1, r3
 80007c6:	4820      	ldr	r0, [pc, #128]	@ (8000848 <MX_TIM1_Init+0x188>)
 80007c8:	f004 fd9e 	bl	8005308 <HAL_TIM_PWM_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007d2:	f000 f9b1 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007da:	2208      	movs	r2, #8
 80007dc:	4619      	mov	r1, r3
 80007de:	481a      	ldr	r0, [pc, #104]	@ (8000848 <MX_TIM1_Init+0x188>)
 80007e0:	f004 fd92 	bl	8005308 <HAL_TIM_PWM_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007ea:	f000 f9a5 	bl	8000b38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000806:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000814:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4619      	mov	r1, r3
 800082a:	4807      	ldr	r0, [pc, #28]	@ (8000848 <MX_TIM1_Init+0x188>)
 800082c:	f005 fddc 	bl	80063e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000836:	f000 f97f 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800083a:	4803      	ldr	r0, [pc, #12]	@ (8000848 <MX_TIM1_Init+0x188>)
 800083c:	f000 fa52 	bl	8000ce4 <HAL_TIM_MspPostInit>

}
 8000840:	bf00      	nop
 8000842:	3770      	adds	r7, #112	@ 0x70
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000d8 	.word	0x200000d8
 800084c:	40012c00 	.word	0x40012c00

08000850 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	@ 0x38
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000882:	4b2d      	ldr	r3, [pc, #180]	@ (8000938 <MX_TIM2_Init+0xe8>)
 8000884:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000888:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800088a:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <MX_TIM2_Init+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <MX_TIM2_Init+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000896:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <MX_TIM2_Init+0xe8>)
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <MX_TIM2_Init+0xe8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <MX_TIM2_Init+0xe8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008aa:	4823      	ldr	r0, [pc, #140]	@ (8000938 <MX_TIM2_Init+0xe8>)
 80008ac:	f004 fb22 	bl	8004ef4 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008b6:	f000 f93f 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008c4:	4619      	mov	r1, r3
 80008c6:	481c      	ldr	r0, [pc, #112]	@ (8000938 <MX_TIM2_Init+0xe8>)
 80008c8:	f004 fe32 	bl	8005530 <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008d2:	f000 f931 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008d6:	4818      	ldr	r0, [pc, #96]	@ (8000938 <MX_TIM2_Init+0xe8>)
 80008d8:	f004 fb63 	bl	8004fa2 <HAL_TIM_PWM_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008e2:	f000 f929 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4810      	ldr	r0, [pc, #64]	@ (8000938 <MX_TIM2_Init+0xe8>)
 80008f6:	f005 fcb5 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000900:	f000 f91a 	bl	8000b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000904:	2360      	movs	r3, #96	@ 0x60
 8000906:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	4807      	ldr	r0, [pc, #28]	@ (8000938 <MX_TIM2_Init+0xe8>)
 800091c:	f004 fcf4 	bl	8005308 <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000926:	f000 f907 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800092a:	4803      	ldr	r0, [pc, #12]	@ (8000938 <MX_TIM2_Init+0xe8>)
 800092c:	f000 f9da 	bl	8000ce4 <HAL_TIM_MspPostInit>

}
 8000930:	bf00      	nop
 8000932:	3738      	adds	r7, #56	@ 0x38
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000124 	.word	0x20000124

0800093c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	@ 0x38
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095c:	463b      	mov	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
 800096a:	615a      	str	r2, [r3, #20]
 800096c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800096e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <MX_TIM3_Init+0xe8>)
 8000970:	4a2d      	ldr	r2, [pc, #180]	@ (8000a28 <MX_TIM3_Init+0xec>)
 8000972:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000974:	4b2b      	ldr	r3, [pc, #172]	@ (8000a24 <MX_TIM3_Init+0xe8>)
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <MX_TIM3_Init+0xe8>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4294967295;
 8000980:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <MX_TIM3_Init+0xe8>)
 8000982:	f04f 32ff 	mov.w	r2, #4294967295
 8000986:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <MX_TIM3_Init+0xe8>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <MX_TIM3_Init+0xe8>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000994:	4823      	ldr	r0, [pc, #140]	@ (8000a24 <MX_TIM3_Init+0xe8>)
 8000996:	f004 faad 	bl	8004ef4 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009a0:	f000 f8ca 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481c      	ldr	r0, [pc, #112]	@ (8000a24 <MX_TIM3_Init+0xe8>)
 80009b2:	f004 fdbd 	bl	8005530 <HAL_TIM_ConfigClockSource>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80009bc:	f000 f8bc 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009c0:	4818      	ldr	r0, [pc, #96]	@ (8000a24 <MX_TIM3_Init+0xe8>)
 80009c2:	f004 faee 	bl	8004fa2 <HAL_TIM_PWM_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009cc:	f000 f8b4 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4811      	ldr	r0, [pc, #68]	@ (8000a24 <MX_TIM3_Init+0xe8>)
 80009e0:	f005 fc40 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009ea:	f000 f8a5 	bl	8000b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ee:	2360      	movs	r3, #96	@ 0x60
 80009f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fe:	463b      	mov	r3, r7
 8000a00:	2200      	movs	r2, #0
 8000a02:	4619      	mov	r1, r3
 8000a04:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <MX_TIM3_Init+0xe8>)
 8000a06:	f004 fc7f 	bl	8005308 <HAL_TIM_PWM_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a10:	f000 f892 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a14:	4803      	ldr	r0, [pc, #12]	@ (8000a24 <MX_TIM3_Init+0xe8>)
 8000a16:	f000 f965 	bl	8000ce4 <HAL_TIM_MspPostInit>

}
 8000a1a:	bf00      	nop
 8000a1c:	3738      	adds	r7, #56	@ 0x38
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000170 	.word	0x20000170
 8000a28:	40000400 	.word	0x40000400

08000a2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a32:	4a16      	ldr	r2, [pc, #88]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a38:	2206      	movs	r2, #6
 8000a3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3e:	2202      	movs	r2, #2
 8000a40:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a74:	f001 ff22 	bl	80028bc <HAL_PCD_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a7e:	f000 f85b 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200001bc 	.word	0x200001bc
 8000a8c:	42040000 	.word	0x42040000

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_GPIO_Init+0x6c>)
 8000a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a9c:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <MX_GPIO_Init+0x6c>)
 8000a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_GPIO_Init+0x6c>)
 8000aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_GPIO_Init+0x6c>)
 8000ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aba:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <MX_GPIO_Init+0x6c>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <MX_GPIO_Init+0x6c>)
 8000ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <MX_GPIO_Init+0x6c>)
 8000ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad8:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <MX_GPIO_Init+0x6c>)
 8000ada:	f043 0302 	orr.w	r3, r3, #2
 8000ade:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_GPIO_Init+0x6c>)
 8000ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	46020c00 	.word	0x46020c00

08000b00 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e009      	b.n	8000b26 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fbac 	bl	8000278 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	dbf1      	blt.n	8000b12 <_write+0x12>
  }
  return len;
 8000b2e:	687b      	ldr	r3, [r7, #4]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <Error_Handler+0x8>

08000b44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <HAL_MspInit+0x30>)
 8000b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b50:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_MspInit+0x30>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_MspInit+0x30>)
 8000b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000b68:	f002 f870 	bl	8002c4c <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	46020c00 	.word	0x46020c00

08000b78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0ba      	sub	sp, #232	@ 0xe8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	22c0      	movs	r2, #192	@ 0xc0
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f006 fa27 	bl	8006fec <memset>
  if(hi2c->Instance==I2C2)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a26      	ldr	r2, [pc, #152]	@ (8000c3c <HAL_I2C_MspInit+0xc4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d145      	bne.n	8000c34 <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ba8:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 fac5 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000bc8:	f7ff ffb6 	bl	8000b38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <HAL_I2C_MspInit+0xc8>)
 8000bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c40 <HAL_I2C_MspInit+0xc8>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bdc:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <HAL_I2C_MspInit+0xc8>)
 8000bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000bea:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf2:	2312      	movs	r3, #18
 8000bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c04:	2304      	movs	r3, #4
 8000c06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <HAL_I2C_MspInit+0xcc>)
 8000c12:	f000 fe57 	bl	80018c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <HAL_I2C_MspInit+0xc8>)
 8000c18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c1c:	4a08      	ldr	r2, [pc, #32]	@ (8000c40 <HAL_I2C_MspInit+0xc8>)
 8000c1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c22:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_I2C_MspInit+0xc8>)
 8000c28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000c34:	bf00      	nop
 8000c36:	37e8      	adds	r7, #232	@ 0xe8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40005800 	.word	0x40005800
 8000c40:	46020c00 	.word	0x46020c00
 8000c44:	42020400 	.word	0x42020400

08000c48 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a20      	ldr	r2, [pc, #128]	@ (8000cd8 <HAL_TIM_Base_MspInit+0x90>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10f      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <HAL_TIM_Base_MspInit+0x94>)
 8000c5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c60:	4a1e      	ldr	r2, [pc, #120]	@ (8000cdc <HAL_TIM_Base_MspInit+0x94>)
 8000c62:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c66:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_TIM_Base_MspInit+0x94>)
 8000c6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c78:	e028      	b.n	8000ccc <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c82:	d10f      	bne.n	8000ca4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_TIM_Base_MspInit+0x94>)
 8000c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c8a:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <HAL_TIM_Base_MspInit+0x94>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_TIM_Base_MspInit+0x94>)
 8000c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
}
 8000ca2:	e013      	b.n	8000ccc <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x98>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10e      	bne.n	8000ccc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cae:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <HAL_TIM_Base_MspInit+0x94>)
 8000cb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cb4:	4a09      	ldr	r2, [pc, #36]	@ (8000cdc <HAL_TIM_Base_MspInit+0x94>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <HAL_TIM_Base_MspInit+0x94>)
 8000cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	371c      	adds	r7, #28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	46020c00 	.word	0x46020c00
 8000ce0:	40000400 	.word	0x40000400

08000ce4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a38      	ldr	r2, [pc, #224]	@ (8000de4 <HAL_TIM_MspPostInit+0x100>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d120      	bne.n	8000d48 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b38      	ldr	r3, [pc, #224]	@ (8000de8 <HAL_TIM_MspPostInit+0x104>)
 8000d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d0c:	4a36      	ldr	r2, [pc, #216]	@ (8000de8 <HAL_TIM_MspPostInit+0x104>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d16:	4b34      	ldr	r3, [pc, #208]	@ (8000de8 <HAL_TIM_MspPostInit+0x104>)
 8000d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d24:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	482a      	ldr	r0, [pc, #168]	@ (8000dec <HAL_TIM_MspPostInit+0x108>)
 8000d42:	f000 fdbf 	bl	80018c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d46:	e048      	b.n	8000dda <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d50:	d11f      	bne.n	8000d92 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b25      	ldr	r3, [pc, #148]	@ (8000de8 <HAL_TIM_MspPostInit+0x104>)
 8000d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d58:	4a23      	ldr	r2, [pc, #140]	@ (8000de8 <HAL_TIM_MspPostInit+0x104>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d62:	4b21      	ldr	r3, [pc, #132]	@ (8000de8 <HAL_TIM_MspPostInit+0x104>)
 8000d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d70:	2301      	movs	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d80:	2301      	movs	r3, #1
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4818      	ldr	r0, [pc, #96]	@ (8000dec <HAL_TIM_MspPostInit+0x108>)
 8000d8c:	f000 fd9a 	bl	80018c4 <HAL_GPIO_Init>
}
 8000d90:	e023      	b.n	8000dda <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a16      	ldr	r2, [pc, #88]	@ (8000df0 <HAL_TIM_MspPostInit+0x10c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d11e      	bne.n	8000dda <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_TIM_MspPostInit+0x104>)
 8000d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da2:	4a11      	ldr	r2, [pc, #68]	@ (8000de8 <HAL_TIM_MspPostInit+0x104>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_TIM_MspPostInit+0x104>)
 8000dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dba:	2340      	movs	r3, #64	@ 0x40
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	@ (8000dec <HAL_TIM_MspPostInit+0x108>)
 8000dd6:	f000 fd75 	bl	80018c4 <HAL_GPIO_Init>
}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	@ 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40012c00 	.word	0x40012c00
 8000de8:	46020c00 	.word	0x46020c00
 8000dec:	42020000 	.word	0x42020000
 8000df0:	40000400 	.word	0x40000400

08000df4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0bc      	sub	sp, #240	@ 0xf0
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	22c0      	movs	r2, #192	@ 0xc0
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f006 f8e9 	bl	8006fec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a38      	ldr	r2, [pc, #224]	@ (8000f00 <HAL_PCD_MspInit+0x10c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d169      	bne.n	8000ef8 <HAL_PCD_MspInit+0x104>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e24:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 f986 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000e46:	f7ff fe77 	bl	8000b38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <HAL_PCD_MspInit+0x110>)
 8000e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e50:	4a2c      	ldr	r2, [pc, #176]	@ (8000f04 <HAL_PCD_MspInit+0x110>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <HAL_PCD_MspInit+0x110>)
 8000e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e68:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e82:	230a      	movs	r3, #10
 8000e84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481e      	ldr	r0, [pc, #120]	@ (8000f08 <HAL_PCD_MspInit+0x114>)
 8000e90:	f000 fd18 	bl	80018c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <HAL_PCD_MspInit+0x110>)
 8000e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8000f04 <HAL_PCD_MspInit+0x110>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <HAL_PCD_MspInit+0x110>)
 8000ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <HAL_PCD_MspInit+0x110>)
 8000eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d119      	bne.n	8000ef4 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec0:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <HAL_PCD_MspInit+0x110>)
 8000ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f04 <HAL_PCD_MspInit+0x110>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_PCD_MspInit+0x110>)
 8000ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000ede:	f001 feb5 	bl	8002c4c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HAL_PCD_MspInit+0x110>)
 8000ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ee8:	4a06      	ldr	r2, [pc, #24]	@ (8000f04 <HAL_PCD_MspInit+0x110>)
 8000eea:	f023 0304 	bic.w	r3, r3, #4
 8000eee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ef2:	e001      	b.n	8000ef8 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8000ef4:	f001 feaa 	bl	8002c4c <HAL_PWREx_EnableVddUSB>
}
 8000ef8:	bf00      	nop
 8000efa:	37f0      	adds	r7, #240	@ 0xf0
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	42040000 	.word	0x42040000
 8000f04:	46020c00 	.word	0x46020c00
 8000f08:	42020000 	.word	0x42020000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <NMI_Handler+0x4>

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <MemManage_Handler+0x4>

08000f24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f62:	f000 fb03 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <enter_read_mode>:
    /* End sectors erase */

    return true;
}

static bool enter_read_mode(stusb4500_t const* dev) {
 8000f6a:	b590      	push	{r4, r7, lr}
 8000f6c:	b087      	sub	sp, #28
 8000f6e:	af02      	add	r7, sp, #8
 8000f70:	6078      	str	r0, [r7, #4]
    uint8_t buffer;

    // Write FTP_CUST_PASSWORD to FTP_CUST_PASSWORD_REG
    buffer = FTP_CUST_PASSWORD;
 8000f72:	2347      	movs	r3, #71	@ 0x47
 8000f74:	73fb      	strb	r3, [r7, #15]
    if (!dev->write(dev->addr, FTP_CUST_PASSWORD_REG, &buffer, 1, dev->context)) return false;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685c      	ldr	r4, [r3, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	8818      	ldrh	r0, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	f107 020f 	add.w	r2, r7, #15
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2195      	movs	r1, #149	@ 0x95
 8000f8c:	47a0      	blx	r4
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f083 0301 	eor.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <enter_read_mode+0x34>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e02c      	b.n	8000ff8 <enter_read_mode+0x8e>

    /* Begin NVM power on sequence */
    // Reset internal controller
    buffer = 0x00;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
    if (!dev->write(dev->addr, FTP_CTRL_0, &buffer, 1, dev->context)) return false;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685c      	ldr	r4, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	8818      	ldrh	r0, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	f107 020f 	add.w	r2, r7, #15
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	2196      	movs	r1, #150	@ 0x96
 8000fb8:	47a0      	blx	r4
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f083 0301 	eor.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <enter_read_mode+0x60>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e016      	b.n	8000ff8 <enter_read_mode+0x8e>

    // Set PWR and RST_N bits in FTP_CTRL_0
    buffer = FTP_CUST_PWR | FTP_CUST_RST_N;
 8000fca:	23c0      	movs	r3, #192	@ 0xc0
 8000fcc:	73fb      	strb	r3, [r7, #15]
    if (!dev->write(dev->addr, FTP_CTRL_0, &buffer, 1, dev->context)) return false;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685c      	ldr	r4, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	8818      	ldrh	r0, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	f107 020f 	add.w	r2, r7, #15
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2196      	movs	r1, #150	@ 0x96
 8000fe4:	47a0      	blx	r4
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f083 0301 	eor.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <enter_read_mode+0x8c>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <enter_read_mode+0x8e>
    /* End NVM power on sequence */

    return true;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}

08001000 <read_sector>:

static bool read_sector(stusb4500_t const* dev, uint8_t sector, uint8_t* sector_data) {
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b089      	sub	sp, #36	@ 0x24
 8001004:	af02      	add	r7, sp, #8
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	460b      	mov	r3, r1
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	72fb      	strb	r3, [r7, #11]
    if (!sector_data) return false;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <read_sector+0x18>
 8001014:	2300      	movs	r3, #0
 8001016:	e08a      	b.n	800112e <read_sector+0x12e>

    uint8_t buffer;

    // Set PWR and RST_N bits in FTP_CTRL_0
    buffer = FTP_CUST_PWR | FTP_CUST_RST_N;
 8001018:	23c0      	movs	r3, #192	@ 0xc0
 800101a:	75fb      	strb	r3, [r7, #23]
    if (!dev->write(dev->addr, FTP_CTRL_0, &buffer, 1, dev->context)) return false;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	685c      	ldr	r4, [r3, #4]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	8818      	ldrh	r0, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	f107 0217 	add.w	r2, r7, #23
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2301      	movs	r3, #1
 8001030:	2196      	movs	r1, #150	@ 0x96
 8001032:	47a0      	blx	r4
 8001034:	4603      	mov	r3, r0
 8001036:	f083 0301 	eor.w	r3, r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <read_sector+0x44>
 8001040:	2300      	movs	r3, #0
 8001042:	e074      	b.n	800112e <read_sector+0x12e>

    // Write sector read opcode
    buffer = (READ & FTP_CUST_OPCODE);
 8001044:	2300      	movs	r3, #0
 8001046:	75fb      	strb	r3, [r7, #23]
    if (!dev->write(dev->addr, FTP_CTRL_1, &buffer, 1, dev->context)) return false;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	685c      	ldr	r4, [r3, #4]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	8818      	ldrh	r0, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	f107 0217 	add.w	r2, r7, #23
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	2197      	movs	r1, #151	@ 0x97
 800105e:	47a0      	blx	r4
 8001060:	4603      	mov	r3, r0
 8001062:	f083 0301 	eor.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <read_sector+0x70>
 800106c:	2300      	movs	r3, #0
 800106e:	e05e      	b.n	800112e <read_sector+0x12e>

    // Select sector to read and load sector read command
    buffer = (sector & FTP_CUST_SECT) | FTP_CUST_PWR | FTP_CUST_RST_N | FTP_CUST_REQ;
 8001070:	7afb      	ldrb	r3, [r7, #11]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 800107c:	b2db      	uxtb	r3, r3
 800107e:	75fb      	strb	r3, [r7, #23]
    if (!dev->write(dev->addr, FTP_CTRL_0, &buffer, 1, dev->context)) return false;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	685c      	ldr	r4, [r3, #4]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	8818      	ldrh	r0, [r3, #0]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f107 0217 	add.w	r2, r7, #23
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	2196      	movs	r1, #150	@ 0x96
 8001096:	47a0      	blx	r4
 8001098:	4603      	mov	r3, r0
 800109a:	f083 0301 	eor.w	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <read_sector+0xa8>
 80010a4:	2300      	movs	r3, #0
 80010a6:	e042      	b.n	800112e <read_sector+0x12e>

    // Wait for execution
    do {
        if (!dev->read(dev->addr, FTP_CTRL_0, &buffer, 1, dev->context)) return false;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	689c      	ldr	r4, [r3, #8]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8818      	ldrh	r0, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	f107 0217 	add.w	r2, r7, #23
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	2196      	movs	r1, #150	@ 0x96
 80010be:	47a0      	blx	r4
 80010c0:	4603      	mov	r3, r0
 80010c2:	f083 0301 	eor.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <read_sector+0xd0>
 80010cc:	2300      	movs	r3, #0
 80010ce:	e02e      	b.n	800112e <read_sector+0x12e>
    } while (buffer & FTP_CUST_REQ);
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1e6      	bne.n	80010a8 <read_sector+0xa8>

    // Read sector data bytes from RW_BUFFER register
    if (!dev->read(dev->addr, RW_BUFFER, sector_data, 8, dev->context)) return false;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	689c      	ldr	r4, [r3, #8]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8818      	ldrh	r0, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2308      	movs	r3, #8
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	2153      	movs	r1, #83	@ 0x53
 80010ee:	47a0      	blx	r4
 80010f0:	4603      	mov	r3, r0
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <read_sector+0x100>
 80010fc:	2300      	movs	r3, #0
 80010fe:	e016      	b.n	800112e <read_sector+0x12e>

    // Reset internal controller
    buffer = 0x00;
 8001100:	2300      	movs	r3, #0
 8001102:	75fb      	strb	r3, [r7, #23]
    if (!dev->write(dev->addr, FTP_CTRL_0, &buffer, 1, dev->context)) return false;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	685c      	ldr	r4, [r3, #4]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8818      	ldrh	r0, [r3, #0]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	f107 0217 	add.w	r2, r7, #23
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	2196      	movs	r1, #150	@ 0x96
 800111a:	47a0      	blx	r4
 800111c:	4603      	mov	r3, r0
 800111e:	f083 0301 	eor.w	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <read_sector+0x12c>
 8001128:	2300      	movs	r3, #0
 800112a:	e000      	b.n	800112e <read_sector+0x12e>

    return true;
 800112c:	2301      	movs	r3, #1
}
 800112e:	4618      	mov	r0, r3
 8001130:	371c      	adds	r7, #28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd90      	pop	{r4, r7, pc}

08001136 <exit_rw_mode>:
    } while (buffer & FTP_CUST_REQ);

    return true;
}

static bool exit_rw_mode(stusb4500_t const* dev) {
 8001136:	b590      	push	{r4, r7, lr}
 8001138:	b087      	sub	sp, #28
 800113a:	af02      	add	r7, sp, #8
 800113c:	6078      	str	r0, [r7, #4]
    uint8_t buffer;

    // Clear FTP_CTRL registers
    buffer = FTP_CUST_RST_N;
 800113e:	2340      	movs	r3, #64	@ 0x40
 8001140:	73fb      	strb	r3, [r7, #15]
    if (!dev->write(dev->addr, FTP_CTRL_0, &buffer, 1, dev->context)) return false;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685c      	ldr	r4, [r3, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	8818      	ldrh	r0, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	f107 020f 	add.w	r2, r7, #15
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	2196      	movs	r1, #150	@ 0x96
 8001158:	47a0      	blx	r4
 800115a:	4603      	mov	r3, r0
 800115c:	f083 0301 	eor.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <exit_rw_mode+0x34>
 8001166:	2300      	movs	r3, #0
 8001168:	e02c      	b.n	80011c4 <exit_rw_mode+0x8e>
    buffer = 0x00;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
    if (!dev->write(dev->addr, FTP_CTRL_1, &buffer, 1, dev->context)) return false;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685c      	ldr	r4, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	8818      	ldrh	r0, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f107 020f 	add.w	r2, r7, #15
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	2197      	movs	r1, #151	@ 0x97
 8001184:	47a0      	blx	r4
 8001186:	4603      	mov	r3, r0
 8001188:	f083 0301 	eor.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <exit_rw_mode+0x60>
 8001192:	2300      	movs	r3, #0
 8001194:	e016      	b.n	80011c4 <exit_rw_mode+0x8e>

    // Clear password
    buffer = 0x00;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
    if (!dev->write(dev->addr, FTP_CUST_PASSWORD_REG, &buffer, 1, dev->context)) return false;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685c      	ldr	r4, [r3, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	8818      	ldrh	r0, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f107 020f 	add.w	r2, r7, #15
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	2195      	movs	r1, #149	@ 0x95
 80011b0:	47a0      	blx	r4
 80011b2:	4603      	mov	r3, r0
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <exit_rw_mode+0x8c>
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <exit_rw_mode+0x8e>

    return true;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd90      	pop	{r4, r7, pc}

080011cc <stusb4500_nvm_read>:
      p_nvm[GPIO_CFG_SECTOR][GPIO_CFG_OFFSET],
      (config->gpio_cfg << GPIO_CFG_POS) & GPIO_CFG_MSK,
      GPIO_CFG_MSK);
}

bool stusb4500_nvm_read(stusb4500_t const* dev, uint8_t* nvm) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
    if (!nvm) return false;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <stusb4500_nvm_read+0x14>
 80011dc:	2300      	movs	r3, #0
 80011de:	e032      	b.n	8001246 <stusb4500_nvm_read+0x7a>

    if (!enter_read_mode(dev)) return false;
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fec2 	bl	8000f6a <enter_read_mode>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f083 0301 	eor.w	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <stusb4500_nvm_read+0x2a>
 80011f2:	2300      	movs	r3, #0
 80011f4:	e027      	b.n	8001246 <stusb4500_nvm_read+0x7a>

    uint8_t* p_nvm = nvm;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
    for (uint8_t sector = 0; sector < NUM_SECTORS; sector++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	72fb      	strb	r3, [r7, #11]
 80011fe:	e013      	b.n	8001228 <stusb4500_nvm_read+0x5c>
        if (!read_sector(dev, sector, p_nvm)) return false;
 8001200:	7afb      	ldrb	r3, [r7, #11]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fefa 	bl	8001000 <read_sector>
 800120c:	4603      	mov	r3, r0
 800120e:	f083 0301 	eor.w	r3, r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <stusb4500_nvm_read+0x50>
 8001218:	2300      	movs	r3, #0
 800121a:	e014      	b.n	8001246 <stusb4500_nvm_read+0x7a>
        p_nvm += SECTOR_SIZE;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3308      	adds	r3, #8
 8001220:	60fb      	str	r3, [r7, #12]
    for (uint8_t sector = 0; sector < NUM_SECTORS; sector++) {
 8001222:	7afb      	ldrb	r3, [r7, #11]
 8001224:	3301      	adds	r3, #1
 8001226:	72fb      	strb	r3, [r7, #11]
 8001228:	7afb      	ldrb	r3, [r7, #11]
 800122a:	2b04      	cmp	r3, #4
 800122c:	d9e8      	bls.n	8001200 <stusb4500_nvm_read+0x34>
    }

    if (!exit_rw_mode(dev)) return false;
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff81 	bl	8001136 <exit_rw_mode>
 8001234:	4603      	mov	r3, r0
 8001236:	f083 0301 	eor.w	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <stusb4500_nvm_read+0x78>
 8001240:	2300      	movs	r3, #0
 8001242:	e000      	b.n	8001246 <stusb4500_nvm_read+0x7a>

    return true;
 8001244:	2301      	movs	r3, #1
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e00a      	b.n	8001276 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001260:	f3af 8000 	nop.w
 8001264:	4601      	mov	r1, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	60ba      	str	r2, [r7, #8]
 800126c:	b2ca      	uxtb	r2, r1
 800126e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3301      	adds	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	429a      	cmp	r2, r3
 800127c:	dbf0      	blt.n	8001260 <_read+0x12>
  }

  return len;
 800127e:	687b      	ldr	r3, [r7, #4]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012b0:	605a      	str	r2, [r3, #4]
  return 0;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_isatty>:

int _isatty(int file)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012c8:	2301      	movs	r3, #1
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f8:	4a14      	ldr	r2, [pc, #80]	@ (800134c <_sbrk+0x5c>)
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <_sbrk+0x60>)
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001304:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <_sbrk+0x64>)
 800130e:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <_sbrk+0x68>)
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	429a      	cmp	r2, r3
 800131e:	d207      	bcs.n	8001330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001320:	f005 fec2 	bl	80070a8 <__errno>
 8001324:	4603      	mov	r3, r0
 8001326:	220c      	movs	r2, #12
 8001328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e009      	b.n	8001344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <_sbrk+0x64>)
 8001340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200c0000 	.word	0x200c0000
 8001350:	00000400 	.word	0x00000400
 8001354:	200006a0 	.word	0x200006a0
 8001358:	200007f8 	.word	0x200007f8

0800135c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <SystemInit+0x68>)
 8001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001366:	4a17      	ldr	r2, [pc, #92]	@ (80013c4 <SystemInit+0x68>)
 8001368:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800136c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001370:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <SystemInit+0x6c>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <SystemInit+0x6c>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <SystemInit+0x6c>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <SystemInit+0x6c>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001388:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <SystemInit+0x6c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <SystemInit+0x6c>)
 800138e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001392:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001396:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <SystemInit+0x6c>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <SystemInit+0x6c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a09      	ldr	r2, [pc, #36]	@ (80013c8 <SystemInit+0x6c>)
 80013a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <SystemInit+0x6c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013b0:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <SystemInit+0x68>)
 80013b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013b6:	609a      	str	r2, [r3, #8]
  #endif
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	46020c00 	.word	0x46020c00

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001404 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d0:	f7ff ffc4 	bl	800135c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013d6:	e003      	b.n	80013e0 <LoopCopyDataInit>

080013d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013de:	3104      	adds	r1, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013e0:	480a      	ldr	r0, [pc, #40]	@ (800140c <LoopForever+0xa>)
	ldr	r3, =_edata
 80013e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013e8:	d3f6      	bcc.n	80013d8 <CopyDataInit>
	ldr	r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013ec:	e002      	b.n	80013f4 <LoopFillZerobss>

080013ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013f0:	f842 3b04 	str.w	r3, [r2], #4

080013f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <LoopForever+0x16>)
	cmp	r2, r3
 80013f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013f8:	d3f9      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f005 fe5b 	bl	80070b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fe:	f7ff f865 	bl	80004cc <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001404:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001408:	08007b08 	.word	0x08007b08
	ldr	r0, =_sdata
 800140c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001410:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001414:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001418:	200007f2 	.word	0x200007f2

0800141c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_IRQHandler>
	...

08001420 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_Init+0x50>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a11      	ldr	r2, [pc, #68]	@ (8001470 <HAL_Init+0x50>)
 800142a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f96e 	bl	8001712 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001436:	f002 fce7 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 800143a:	4602      	mov	r2, r0
 800143c:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <HAL_Init+0x54>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f003 030f 	and.w	r3, r3, #15
 8001444:	490c      	ldr	r1, [pc, #48]	@ (8001478 <HAL_Init+0x58>)
 8001446:	5ccb      	ldrb	r3, [r1, r3]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	4a0b      	ldr	r2, [pc, #44]	@ (800147c <HAL_Init+0x5c>)
 800144e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001450:	2004      	movs	r0, #4
 8001452:	f000 f9a5 	bl	80017a0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f812 	bl	8001480 <HAL_InitTick>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e002      	b.n	800146c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001466:	f7ff fb6d 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40022000 	.word	0x40022000
 8001474:	46020c00 	.word	0x46020c00
 8001478:	080079fc 	.word	0x080079fc
 800147c:	20000000 	.word	0x20000000

08001480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800148c:	4b33      	ldr	r3, [pc, #204]	@ (800155c <HAL_InitTick+0xdc>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e05c      	b.n	8001552 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001498:	4b31      	ldr	r3, [pc, #196]	@ (8001560 <HAL_InitTick+0xe0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d10c      	bne.n	80014be <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80014a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001564 <HAL_InitTick+0xe4>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b2c      	ldr	r3, [pc, #176]	@ (800155c <HAL_InitTick+0xdc>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e037      	b.n	800152e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80014be:	f000 f9c7 	bl	8001850 <HAL_SYSTICK_GetCLKSourceConfig>
 80014c2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d023      	beq.n	8001512 <HAL_InitTick+0x92>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d82d      	bhi.n	800152c <HAL_InitTick+0xac>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_InitTick+0x5e>
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d00d      	beq.n	80014f8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80014dc:	e026      	b.n	800152c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80014de:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <HAL_InitTick+0xe4>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <HAL_InitTick+0xdc>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80014ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f4:	60fb      	str	r3, [r7, #12]
        break;
 80014f6:	e01a      	b.n	800152e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80014f8:	4b18      	ldr	r3, [pc, #96]	@ (800155c <HAL_InitTick+0xdc>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001502:	fbb3 f3f2 	udiv	r3, r3, r2
 8001506:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	60fb      	str	r3, [r7, #12]
        break;
 8001510:	e00d      	b.n	800152e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001512:	4b12      	ldr	r3, [pc, #72]	@ (800155c <HAL_InitTick+0xdc>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800151c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001520:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	60fb      	str	r3, [r7, #12]
        break;
 800152a:	e000      	b.n	800152e <HAL_InitTick+0xae>
        break;
 800152c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 f914 	bl	800175c <HAL_SYSTICK_Config>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e009      	b.n	8001552 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153e:	2200      	movs	r2, #0
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	f04f 30ff 	mov.w	r0, #4294967295
 8001546:	f000 f8ef 	bl	8001728 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800154a:	4a07      	ldr	r2, [pc, #28]	@ (8001568 <HAL_InitTick+0xe8>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008
 8001560:	e000e010 	.word	0xe000e010
 8001564:	20000000 	.word	0x20000000
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008
 8001590:	200006a4 	.word	0x200006a4

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200006a4 	.word	0x200006a4

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <HAL_Delay+0x44>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffde 	bl	8001594 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008

080015f4 <__NVIC_SetPriorityGrouping>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_SetPriority>:
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	@ (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	@ (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	@ 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	@ 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ff6a 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001736:	f7ff ff81 	bl	800163c <__NVIC_GetPriorityGrouping>
 800173a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	6978      	ldr	r0, [r7, #20]
 8001742:	f7ff ffb3 	bl	80016ac <NVIC_EncodePriority>
 8001746:	4602      	mov	r2, r0
 8001748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ff82 	bl	8001658 <__NVIC_SetPriority>
}
 8001754:	bf00      	nop
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800176c:	d301      	bcc.n	8001772 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800176e:	2301      	movs	r3, #1
 8001770:	e00d      	b.n	800178e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_SYSTICK_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_SYSTICK_Config+0x40>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_SYSTICK_Config+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a05      	ldr	r2, [pc, #20]	@ (800179c <HAL_SYSTICK_Config+0x40>)
 8001786:	f043 0303 	orr.w	r3, r3, #3
 800178a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d844      	bhi.n	8001838 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80017ae:	a201      	add	r2, pc, #4	@ (adr r2, 80017b4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80017b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b4:	080017d7 	.word	0x080017d7
 80017b8:	080017f5 	.word	0x080017f5
 80017bc:	08001817 	.word	0x08001817
 80017c0:	08001839 	.word	0x08001839
 80017c4:	080017c9 	.word	0x080017c9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80017c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001848 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6013      	str	r3, [r2, #0]
      break;
 80017d4:	e031      	b.n	800183a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80017d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1b      	ldr	r2, [pc, #108]	@ (8001848 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80017e2:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e8:	4a18      	ldr	r2, [pc, #96]	@ (800184c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017ea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80017f2:	e022      	b.n	800183a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80017f4:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a13      	ldr	r2, [pc, #76]	@ (8001848 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017fa:	f023 0304 	bic.w	r3, r3, #4
 80017fe:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001806:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800180a:	4a10      	ldr	r2, [pc, #64]	@ (800184c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800180c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001814:	e011      	b.n	800183a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001816:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a0b      	ldr	r2, [pc, #44]	@ (8001848 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001822:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001828:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800182c:	4a07      	ldr	r2, [pc, #28]	@ (800184c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800182e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001832:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001836:	e000      	b.n	800183a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001838:	bf00      	nop
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010
 800184c:	46020c00 	.word	0x46020c00

08001850 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001856:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001862:	2304      	movs	r3, #4
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	e021      	b.n	80018ac <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001868:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800186a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001872:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800187a:	d011      	beq.n	80018a0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001882:	d810      	bhi.n	80018a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001890:	d003      	beq.n	800189a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001892:	e008      	b.n	80018a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
        break;
 8001898:	e008      	b.n	80018ac <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800189a:	2301      	movs	r3, #1
 800189c:	607b      	str	r3, [r7, #4]
        break;
 800189e:	e005      	b.n	80018ac <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80018a0:	2302      	movs	r3, #2
 80018a2:	607b      	str	r3, [r7, #4]
        break;
 80018a4:	e002      	b.n	80018ac <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
        break;
 80018aa:	bf00      	nop
    }
  }
  return systick_source;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e010 	.word	0xe000e010
 80018c0:	46020c00 	.word	0x46020c00

080018c4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	@ 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80018d6:	e1ba      	b.n	8001c4e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 81aa 	beq.w	8001c48 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a55      	ldr	r2, [pc, #340]	@ (8001a4c <HAL_GPIO_Init+0x188>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d15d      	bne.n	80019b8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001902:	2201      	movs	r2, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	4013      	ands	r3, r2
 8001910:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0201 	and.w	r2, r3, #1
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	4313      	orrs	r3, r2
 8001924:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800192c:	4a48      	ldr	r2, [pc, #288]	@ (8001a50 <HAL_GPIO_Init+0x18c>)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001934:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001936:	4a46      	ldr	r2, [pc, #280]	@ (8001a50 <HAL_GPIO_Init+0x18c>)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	3208      	adds	r2, #8
 800194a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	220f      	movs	r2, #15
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	4013      	ands	r3, r2
 8001964:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220b      	movs	r2, #11
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	4313      	orrs	r3, r2
 8001978:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	3208      	adds	r2, #8
 8001982:	69f9      	ldr	r1, [r7, #28]
 8001984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	4013      	ands	r3, r2
 800199e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2202      	movs	r2, #2
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e067      	b.n	8001a88 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x104>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b12      	cmp	r3, #18
 80019c6:	d145      	bne.n	8001a54 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	08da      	lsrs	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3208      	adds	r2, #8
 80019d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	220f      	movs	r2, #15
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	f003 020f 	and.w	r2, r3, #15
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	08da      	lsrs	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3208      	adds	r2, #8
 8001a0e:	69f9      	ldr	r1, [r7, #28]
 8001a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0203 	and.w	r2, r3, #3
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e01e      	b.n	8001a88 <HAL_GPIO_Init+0x1c4>
 8001a4a:	bf00      	nop
 8001a4c:	46020000 	.word	0x46020000
 8001a50:	08007a4c 	.word	0x08007a4c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d00b      	beq.n	8001aa8 <HAL_GPIO_Init+0x1e4>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d007      	beq.n	8001aa8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a9c:	2b11      	cmp	r3, #17
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b12      	cmp	r3, #18
 8001aa6:	d130      	bne.n	8001b0a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	f003 0201 	and.w	r2, r3, #1
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d017      	beq.n	8001b42 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d07c      	beq.n	8001c48 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001b4e:	4a47      	ldr	r2, [pc, #284]	@ (8001c6c <HAL_GPIO_Init+0x3a8>)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3318      	adds	r3, #24
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	0a9a      	lsrs	r2, r3, #10
 8001b76:	4b3e      	ldr	r3, [pc, #248]	@ (8001c70 <HAL_GPIO_Init+0x3ac>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	f002 0203 	and.w	r2, r2, #3
 8001b80:	00d2      	lsls	r2, r2, #3
 8001b82:	4093      	lsls	r3, r2
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001b8a:	4938      	ldr	r1, [pc, #224]	@ (8001c6c <HAL_GPIO_Init+0x3a8>)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3318      	adds	r3, #24
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001b98:	4b34      	ldr	r3, [pc, #208]	@ (8001c6c <HAL_GPIO_Init+0x3a8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8001c6c <HAL_GPIO_Init+0x3a8>)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c6c <HAL_GPIO_Init+0x3a8>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001be6:	4a21      	ldr	r2, [pc, #132]	@ (8001c6c <HAL_GPIO_Init+0x3a8>)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001bec:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <HAL_GPIO_Init+0x3a8>)
 8001bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bf2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001c12:	4a16      	ldr	r2, [pc, #88]	@ (8001c6c <HAL_GPIO_Init+0x3a8>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001c1a:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <HAL_GPIO_Init+0x3a8>)
 8001c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c20:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001c40:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <HAL_GPIO_Init+0x3a8>)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f47f ae3d 	bne.w	80018d8 <HAL_GPIO_Init+0x14>
  }
}
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
 8001c62:	3724      	adds	r7, #36	@ 0x24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	46022000 	.word	0x46022000
 8001c70:	002f7f7f 	.word	0x002f7f7f

08001c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e08d      	b.n	8001da2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d106      	bne.n	8001ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7fe ff6c 	bl	8000b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2224      	movs	r2, #36	@ 0x24
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0201 	bic.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d107      	bne.n	8001cee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	e006      	b.n	8001cfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001cfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d108      	bne.n	8001d16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	e007      	b.n	8001d26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69d9      	ldr	r1, [r3, #28]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1a      	ldr	r2, [r3, #32]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	817b      	strh	r3, [r7, #10]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	813b      	strh	r3, [r7, #8]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b20      	cmp	r3, #32
 8001dd0:	f040 80f9 	bne.w	8001fc6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <HAL_I2C_Mem_Write+0x34>
 8001dda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0ed      	b.n	8001fc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_I2C_Mem_Write+0x4e>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e0e6      	b.n	8001fc8 <HAL_I2C_Mem_Write+0x21c>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e02:	f7ff fbc7 	bl	8001594 <HAL_GetTick>
 8001e06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2319      	movs	r3, #25
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fac3 	bl	80023a0 <I2C_WaitOnFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0d1      	b.n	8001fc8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2221      	movs	r2, #33	@ 0x21
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2240      	movs	r2, #64	@ 0x40
 8001e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a3a      	ldr	r2, [r7, #32]
 8001e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e4c:	88f8      	ldrh	r0, [r7, #6]
 8001e4e:	893a      	ldrh	r2, [r7, #8]
 8001e50:	8979      	ldrh	r1, [r7, #10]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f9d3 	bl	8002208 <I2C_RequestMemoryWrite>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0a9      	b.n	8001fc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2bff      	cmp	r3, #255	@ 0xff
 8001e7c:	d90e      	bls.n	8001e9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	22ff      	movs	r2, #255	@ 0xff
 8001e82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	8979      	ldrh	r1, [r7, #10]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 fc47 	bl	8002728 <I2C_TransferConfig>
 8001e9a:	e00f      	b.n	8001ebc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	8979      	ldrh	r1, [r7, #10]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 fc36 	bl	8002728 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fac6 	bl	8002452 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e07b      	b.n	8001fc8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d034      	beq.n	8001f74 <HAL_I2C_Mem_Write+0x1c8>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d130      	bne.n	8001f74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2180      	movs	r1, #128	@ 0x80
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 fa3f 	bl	80023a0 <I2C_WaitOnFlagUntilTimeout>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e04d      	b.n	8001fc8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2bff      	cmp	r3, #255	@ 0xff
 8001f34:	d90e      	bls.n	8001f54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	22ff      	movs	r2, #255	@ 0xff
 8001f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	8979      	ldrh	r1, [r7, #10]
 8001f44:	2300      	movs	r3, #0
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 fbeb 	bl	8002728 <I2C_TransferConfig>
 8001f52:	e00f      	b.n	8001f74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	8979      	ldrh	r1, [r7, #10]
 8001f66:	2300      	movs	r3, #0
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fbda 	bl	8002728 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d19e      	bne.n	8001ebc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 faac 	bl	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e01a      	b.n	8001fc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2220      	movs	r2, #32
 8001f98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_I2C_Mem_Write+0x224>)
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
  }
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	fe00e800 	.word	0xfe00e800

08001fd4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	817b      	strh	r3, [r7, #10]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	813b      	strh	r3, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	f040 80fd 	bne.w	80021f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_I2C_Mem_Read+0x34>
 8002002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800200e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0f1      	b.n	80021f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_I2C_Mem_Read+0x4e>
 800201e:	2302      	movs	r3, #2
 8002020:	e0ea      	b.n	80021f8 <HAL_I2C_Mem_Read+0x224>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800202a:	f7ff fab3 	bl	8001594 <HAL_GetTick>
 800202e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2319      	movs	r3, #25
 8002036:	2201      	movs	r2, #1
 8002038:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f9af 	bl	80023a0 <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0d5      	b.n	80021f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2222      	movs	r2, #34	@ 0x22
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2240      	movs	r2, #64	@ 0x40
 8002058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a3a      	ldr	r2, [r7, #32]
 8002066:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800206c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002074:	88f8      	ldrh	r0, [r7, #6]
 8002076:	893a      	ldrh	r2, [r7, #8]
 8002078:	8979      	ldrh	r1, [r7, #10]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	4603      	mov	r3, r0
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f913 	bl	80022b0 <I2C_RequestMemoryRead>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0ad      	b.n	80021f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2bff      	cmp	r3, #255	@ 0xff
 80020a4:	d90e      	bls.n	80020c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	22ff      	movs	r2, #255	@ 0xff
 80020aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	8979      	ldrh	r1, [r7, #10]
 80020b4:	4b52      	ldr	r3, [pc, #328]	@ (8002200 <HAL_I2C_Mem_Read+0x22c>)
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fb33 	bl	8002728 <I2C_TransferConfig>
 80020c2:	e00f      	b.n	80020e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	8979      	ldrh	r1, [r7, #10]
 80020d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002200 <HAL_I2C_Mem_Read+0x22c>)
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fb22 	bl	8002728 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ea:	2200      	movs	r2, #0
 80020ec:	2104      	movs	r1, #4
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f956 	bl	80023a0 <I2C_WaitOnFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e07c      	b.n	80021f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d034      	beq.n	80021a4 <HAL_I2C_Mem_Read+0x1d0>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213e:	2b00      	cmp	r3, #0
 8002140:	d130      	bne.n	80021a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002148:	2200      	movs	r2, #0
 800214a:	2180      	movs	r1, #128	@ 0x80
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f927 	bl	80023a0 <I2C_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e04d      	b.n	80021f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	2bff      	cmp	r3, #255	@ 0xff
 8002164:	d90e      	bls.n	8002184 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	22ff      	movs	r2, #255	@ 0xff
 800216a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002170:	b2da      	uxtb	r2, r3
 8002172:	8979      	ldrh	r1, [r7, #10]
 8002174:	2300      	movs	r3, #0
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fad3 	bl	8002728 <I2C_TransferConfig>
 8002182:	e00f      	b.n	80021a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002192:	b2da      	uxtb	r2, r3
 8002194:	8979      	ldrh	r1, [r7, #10]
 8002196:	2300      	movs	r3, #0
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fac2 	bl	8002728 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d19a      	bne.n	80020e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f994 	bl	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e01a      	b.n	80021f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2220      	movs	r2, #32
 80021c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_I2C_Mem_Read+0x230>)
 80021d6:	400b      	ands	r3, r1
 80021d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e000      	b.n	80021f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80021f6:	2302      	movs	r3, #2
  }
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	80002400 	.word	0x80002400
 8002204:	fe00e800 	.word	0xfe00e800

08002208 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	4608      	mov	r0, r1
 8002212:	4611      	mov	r1, r2
 8002214:	461a      	mov	r2, r3
 8002216:	4603      	mov	r3, r0
 8002218:	817b      	strh	r3, [r7, #10]
 800221a:	460b      	mov	r3, r1
 800221c:	813b      	strh	r3, [r7, #8]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	8979      	ldrh	r1, [r7, #10]
 8002228:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <I2C_RequestMemoryWrite+0xa4>)
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fa79 	bl	8002728 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	69b9      	ldr	r1, [r7, #24]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f909 	bl	8002452 <I2C_WaitOnTXISFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e02c      	b.n	80022a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002250:	893b      	ldrh	r3, [r7, #8]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	629a      	str	r2, [r3, #40]	@ 0x28
 800225a:	e015      	b.n	8002288 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800225c:	893b      	ldrh	r3, [r7, #8]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b29b      	uxth	r3, r3
 8002262:	b2da      	uxtb	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	69b9      	ldr	r1, [r7, #24]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f8ef 	bl	8002452 <I2C_WaitOnTXISFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e012      	b.n	80022a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800227e:	893b      	ldrh	r3, [r7, #8]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2200      	movs	r2, #0
 8002290:	2180      	movs	r1, #128	@ 0x80
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f884 	bl	80023a0 <I2C_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	80002000 	.word	0x80002000

080022b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4603      	mov	r3, r0
 80022c0:	817b      	strh	r3, [r7, #10]
 80022c2:	460b      	mov	r3, r1
 80022c4:	813b      	strh	r3, [r7, #8]
 80022c6:	4613      	mov	r3, r2
 80022c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	8979      	ldrh	r1, [r7, #10]
 80022d0:	4b20      	ldr	r3, [pc, #128]	@ (8002354 <I2C_RequestMemoryRead+0xa4>)
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2300      	movs	r3, #0
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fa26 	bl	8002728 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f8b6 	bl	8002452 <I2C_WaitOnTXISFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e02c      	b.n	800234a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d105      	bne.n	8002302 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022f6:	893b      	ldrh	r3, [r7, #8]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8002300:	e015      	b.n	800232e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002302:	893b      	ldrh	r3, [r7, #8]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	b29b      	uxth	r3, r3
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f89c 	bl	8002452 <I2C_WaitOnTXISFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e012      	b.n	800234a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002324:	893b      	ldrh	r3, [r7, #8]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2200      	movs	r2, #0
 8002336:	2140      	movs	r1, #64	@ 0x40
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f831 	bl	80023a0 <I2C_WaitOnFlagUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	80002000 	.word	0x80002000

08002358 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d103      	bne.n	8002376 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2200      	movs	r2, #0
 8002374:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d007      	beq.n	8002394 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	619a      	str	r2, [r3, #24]
  }
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023b0:	e03b      	b.n	800242a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f8d6 	bl	8002568 <I2C_IsErrorOccurred>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e041      	b.n	800244a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d02d      	beq.n	800242a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ce:	f7ff f8e1 	bl	8001594 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d302      	bcc.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d122      	bne.n	800242a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d113      	bne.n	800242a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002406:	f043 0220 	orr.w	r2, r3, #32
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e00f      	b.n	800244a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	bf0c      	ite	eq
 800243a:	2301      	moveq	r3, #1
 800243c:	2300      	movne	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	429a      	cmp	r2, r3
 8002446:	d0b4      	beq.n	80023b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800245e:	e033      	b.n	80024c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f87f 	bl	8002568 <I2C_IsErrorOccurred>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e031      	b.n	80024d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d025      	beq.n	80024c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247c:	f7ff f88a 	bl	8001594 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	429a      	cmp	r2, r3
 800248a:	d302      	bcc.n	8002492 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11a      	bne.n	80024c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b02      	cmp	r3, #2
 800249e:	d013      	beq.n	80024c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e007      	b.n	80024d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d1c4      	bne.n	8002460 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024ec:	e02f      	b.n	800254e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f838 	bl	8002568 <I2C_IsErrorOccurred>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e02d      	b.n	800255e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002502:	f7ff f847 	bl	8001594 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	429a      	cmp	r2, r3
 8002510:	d302      	bcc.n	8002518 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d11a      	bne.n	800254e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b20      	cmp	r3, #32
 8002524:	d013      	beq.n	800254e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	f043 0220 	orr.w	r2, r3, #32
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e007      	b.n	800255e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b20      	cmp	r3, #32
 800255a:	d1c8      	bne.n	80024ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	d068      	beq.n	8002666 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2210      	movs	r2, #16
 800259a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800259c:	e049      	b.n	8002632 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d045      	beq.n	8002632 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025a6:	f7fe fff5 	bl	8001594 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d302      	bcc.n	80025bc <I2C_IsErrorOccurred+0x54>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d13a      	bne.n	8002632 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025de:	d121      	bne.n	8002624 <I2C_IsErrorOccurred+0xbc>
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025e6:	d01d      	beq.n	8002624 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	d01a      	beq.n	8002624 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025fe:	f7fe ffc9 	bl	8001594 <HAL_GetTick>
 8002602:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002604:	e00e      	b.n	8002624 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002606:	f7fe ffc5 	bl	8001594 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b19      	cmp	r3, #25
 8002612:	d907      	bls.n	8002624 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	f043 0320 	orr.w	r3, r3, #32
 800261a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002622:	e006      	b.n	8002632 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b20      	cmp	r3, #32
 8002630:	d1e9      	bne.n	8002606 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b20      	cmp	r3, #32
 800263e:	d003      	beq.n	8002648 <I2C_IsErrorOccurred+0xe0>
 8002640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0aa      	beq.n	800259e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800264c:	2b00      	cmp	r3, #0
 800264e:	d103      	bne.n	8002658 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2220      	movs	r2, #32
 8002656:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002688:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80026d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01c      	beq.n	8002716 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff fe3b 	bl	8002358 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <I2C_IsErrorOccurred+0x1bc>)
 80026ee:	400b      	ands	r3, r1
 80026f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002716:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800271a:	4618      	mov	r0, r3
 800271c:	3728      	adds	r7, #40	@ 0x28
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	fe00e800 	.word	0xfe00e800

08002728 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	817b      	strh	r3, [r7, #10]
 8002736:	4613      	mov	r3, r2
 8002738:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800273a:	897b      	ldrh	r3, [r7, #10]
 800273c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002740:	7a7b      	ldrb	r3, [r7, #9]
 8002742:	041b      	lsls	r3, r3, #16
 8002744:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002748:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	4313      	orrs	r3, r2
 8002752:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002756:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	0d5b      	lsrs	r3, r3, #21
 8002762:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002766:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <I2C_TransferConfig+0x60>)
 8002768:	430b      	orrs	r3, r1
 800276a:	43db      	mvns	r3, r3
 800276c:	ea02 0103 	and.w	r1, r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	03ff63ff 	.word	0x03ff63ff

0800278c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d138      	bne.n	8002814 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e032      	b.n	8002816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2224      	movs	r2, #36	@ 0x24
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002822:	b480      	push	{r7}
 8002824:	b085      	sub	sp, #20
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b20      	cmp	r3, #32
 8002836:	d139      	bne.n	80028ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002842:	2302      	movs	r3, #2
 8002844:	e033      	b.n	80028ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2224      	movs	r2, #36	@ 0x24
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002874:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e108      	b.n	8002ae0 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7fe fa83 	bl	8000df4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2203      	movs	r2, #3
 80028f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4a7b      	ldr	r2, [pc, #492]	@ (8002ae8 <HAL_PCD_Init+0x22c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d102      	bne.n	8002904 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f003 fe34 	bl	8006576 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7c1a      	ldrb	r2, [r3, #16]
 8002916:	f88d 2000 	strb.w	r2, [sp]
 800291a:	3304      	adds	r3, #4
 800291c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291e:	f003 fdfd 	bl	800651c <USB_CoreInit>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0d5      	b.n	8002ae0 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f003 fe2c 	bl	8006598 <USB_SetCurrentMode>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2202      	movs	r2, #2
 800294a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0c6      	b.n	8002ae0 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
 8002956:	e04a      	b.n	80029ee <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	3315      	adds	r3, #21
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	3314      	adds	r3, #20
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	b298      	uxth	r0, r3
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	332e      	adds	r3, #46	@ 0x2e
 8002994:	4602      	mov	r2, r0
 8002996:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3318      	adds	r3, #24
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	331c      	adds	r3, #28
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	3320      	adds	r3, #32
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3324      	adds	r3, #36	@ 0x24
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	3301      	adds	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	791b      	ldrb	r3, [r3, #4]
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d3af      	bcc.n	8002958 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e044      	b.n	8002a88 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a2a:	7bfa      	ldrb	r2, [r7, #15]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a40:	7bfa      	ldrb	r2, [r7, #15]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	3301      	adds	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	791b      	ldrb	r3, [r3, #4]
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d3b5      	bcc.n	80029fe <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	7c1a      	ldrb	r2, [r3, #16]
 8002a9a:	f88d 2000 	strb.w	r2, [sp]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa2:	f003 fdc5 	bl	8006630 <USB_DevInit>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e013      	b.n	8002ae0 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	7b1b      	ldrb	r3, [r3, #12]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d102      	bne.n	8002ad4 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f80c 	bl	8002aec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 ff6e 	bl	80069ba <USB_DevDisconnect>

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	42040000 	.word	0x42040000

08002aec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b1e:	f043 0303 	orr.w	r3, r3, #3
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002b3c:	4b39      	ldr	r3, [pc, #228]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b44:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d10b      	bne.n	8002b66 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b54:	d905      	bls.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002b56:	4b33      	ldr	r3, [pc, #204]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a32      	ldr	r2, [pc, #200]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b60:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e057      	b.n	8002c16 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b6c:	d90a      	bls.n	8002b84 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b80:	60d3      	str	r3, [r2, #12]
 8002b82:	e007      	b.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002b84:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002b8c:	4925      	ldr	r1, [pc, #148]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002b94:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a24      	ldr	r2, [pc, #144]	@ (8002c2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	2232      	movs	r2, #50	@ 0x32
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	4a21      	ldr	r2, [pc, #132]	@ (8002c2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	3301      	adds	r3, #1
 8002bb0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002bb2:	e002      	b.n	8002bba <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002bba:	4b1a      	ldr	r3, [pc, #104]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x98>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f3      	bne.n	8002bb4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01b      	beq.n	8002c0a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002bd2:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a15      	ldr	r2, [pc, #84]	@ (8002c2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	2232      	movs	r2, #50	@ 0x32
 8002be0:	fb02 f303 	mul.w	r3, r2, r3
 8002be4:	4a11      	ldr	r2, [pc, #68]	@ (8002c2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	099b      	lsrs	r3, r3, #6
 8002bec:	3301      	adds	r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002bf0:	e002      	b.n	8002bf8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f3      	bne.n	8002bf2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e000      	b.n	8002c16 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	46020800 	.word	0x46020800
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	10624dd3 	.word	0x10624dd3

08002c30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002c34:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	46020800 	.word	0x46020800

08002c4c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002c50:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	4a04      	ldr	r2, [pc, #16]	@ (8002c68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	6113      	str	r3, [r2, #16]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	46020800 	.word	0x46020800

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08e      	sub	sp, #56	@ 0x38
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f000 bec8 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c86:	4b99      	ldr	r3, [pc, #612]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c90:	4b96      	ldr	r3, [pc, #600]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 816c 	beq.w	8002f80 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_RCC_OscConfig+0x52>
 8002cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	f040 80de 	bne.w	8002e72 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	f040 80da 	bne.w	8002e72 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f000 bea5 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cd0:	4b86      	ldr	r3, [pc, #536]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x7a>
 8002cdc:	4b83      	ldr	r3, [pc, #524]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002ce4:	e005      	b.n	8002cf2 <HAL_RCC_OscConfig+0x86>
 8002ce6:	4b81      	ldr	r3, [pc, #516]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cec:	041b      	lsls	r3, r3, #16
 8002cee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d255      	bcs.n	8002da2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 f99d 	bl	8004040 <RCC_SetFlashLatencyFromMSIRange>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f000 be82 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002d12:	4b76      	ldr	r3, [pc, #472]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	4a75      	ldr	r2, [pc, #468]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d1c:	6093      	str	r3, [r2, #8]
 8002d1e:	4b73      	ldr	r3, [pc, #460]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	4970      	ldr	r1, [pc, #448]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002d38:	d309      	bcc.n	8002d4e <HAL_RCC_OscConfig+0xe2>
 8002d3a:	4b6c      	ldr	r3, [pc, #432]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f023 021f 	bic.w	r2, r3, #31
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4969      	ldr	r1, [pc, #420]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60cb      	str	r3, [r1, #12]
 8002d4c:	e07e      	b.n	8002e4c <HAL_RCC_OscConfig+0x1e0>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	da0a      	bge.n	8002d6c <HAL_RCC_OscConfig+0x100>
 8002d56:	4b65      	ldr	r3, [pc, #404]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	015b      	lsls	r3, r3, #5
 8002d64:	4961      	ldr	r1, [pc, #388]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60cb      	str	r3, [r1, #12]
 8002d6a:	e06f      	b.n	8002e4c <HAL_RCC_OscConfig+0x1e0>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d74:	d30a      	bcc.n	8002d8c <HAL_RCC_OscConfig+0x120>
 8002d76:	4b5d      	ldr	r3, [pc, #372]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	029b      	lsls	r3, r3, #10
 8002d84:	4959      	ldr	r1, [pc, #356]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60cb      	str	r3, [r1, #12]
 8002d8a:	e05f      	b.n	8002e4c <HAL_RCC_OscConfig+0x1e0>
 8002d8c:	4b57      	ldr	r3, [pc, #348]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	03db      	lsls	r3, r3, #15
 8002d9a:	4954      	ldr	r1, [pc, #336]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60cb      	str	r3, [r1, #12]
 8002da0:	e054      	b.n	8002e4c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002da2:	4b52      	ldr	r3, [pc, #328]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4a51      	ldr	r2, [pc, #324]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002da8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dac:	6093      	str	r3, [r2, #8]
 8002dae:	4b4f      	ldr	r3, [pc, #316]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	494c      	ldr	r1, [pc, #304]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002dc8:	d309      	bcc.n	8002dde <HAL_RCC_OscConfig+0x172>
 8002dca:	4b48      	ldr	r3, [pc, #288]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f023 021f 	bic.w	r2, r3, #31
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4945      	ldr	r1, [pc, #276]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60cb      	str	r3, [r1, #12]
 8002ddc:	e028      	b.n	8002e30 <HAL_RCC_OscConfig+0x1c4>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	da0a      	bge.n	8002dfc <HAL_RCC_OscConfig+0x190>
 8002de6:	4b41      	ldr	r3, [pc, #260]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	015b      	lsls	r3, r3, #5
 8002df4:	493d      	ldr	r1, [pc, #244]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60cb      	str	r3, [r1, #12]
 8002dfa:	e019      	b.n	8002e30 <HAL_RCC_OscConfig+0x1c4>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e04:	d30a      	bcc.n	8002e1c <HAL_RCC_OscConfig+0x1b0>
 8002e06:	4b39      	ldr	r3, [pc, #228]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	029b      	lsls	r3, r3, #10
 8002e14:	4935      	ldr	r1, [pc, #212]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60cb      	str	r3, [r1, #12]
 8002e1a:	e009      	b.n	8002e30 <HAL_RCC_OscConfig+0x1c4>
 8002e1c:	4b33      	ldr	r3, [pc, #204]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	03db      	lsls	r3, r3, #15
 8002e2a:	4930      	ldr	r1, [pc, #192]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 f900 	bl	8004040 <RCC_SetFlashLatencyFromMSIRange>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f000 bde5 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002e4c:	f001 f8de 	bl	800400c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e50:	4b27      	ldr	r3, [pc, #156]	@ (8002ef0 <HAL_RCC_OscConfig+0x284>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fe fb13 	bl	8001480 <HAL_InitTick>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8002e60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 808a 	beq.w	8002f7e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e6e:	f000 bdd2 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d066      	beq.n	8002f48 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e86:	f7fe fb85 	bl	8001594 <HAL_GetTick>
 8002e8a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002e8c:	e009      	b.n	8002ea2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e8e:	f7fe fb81 	bl	8001594 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d902      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	f000 bdba 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002ea2:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0ef      	beq.n	8002e8e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002eae:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002eb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002eb8:	6093      	str	r3, [r2, #8]
 8002eba:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	4909      	ldr	r1, [pc, #36]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002ed4:	d30e      	bcc.n	8002ef4 <HAL_RCC_OscConfig+0x288>
 8002ed6:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f023 021f 	bic.w	r2, r3, #31
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4902      	ldr	r1, [pc, #8]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60cb      	str	r3, [r1, #12]
 8002ee8:	e04a      	b.n	8002f80 <HAL_RCC_OscConfig+0x314>
 8002eea:	bf00      	nop
 8002eec:	46020c00 	.word	0x46020c00
 8002ef0:	20000004 	.word	0x20000004
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	da0a      	bge.n	8002f12 <HAL_RCC_OscConfig+0x2a6>
 8002efc:	4b98      	ldr	r3, [pc, #608]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	015b      	lsls	r3, r3, #5
 8002f0a:	4995      	ldr	r1, [pc, #596]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60cb      	str	r3, [r1, #12]
 8002f10:	e036      	b.n	8002f80 <HAL_RCC_OscConfig+0x314>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f1a:	d30a      	bcc.n	8002f32 <HAL_RCC_OscConfig+0x2c6>
 8002f1c:	4b90      	ldr	r3, [pc, #576]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	029b      	lsls	r3, r3, #10
 8002f2a:	498d      	ldr	r1, [pc, #564]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60cb      	str	r3, [r1, #12]
 8002f30:	e026      	b.n	8002f80 <HAL_RCC_OscConfig+0x314>
 8002f32:	4b8b      	ldr	r3, [pc, #556]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	03db      	lsls	r3, r3, #15
 8002f40:	4987      	ldr	r1, [pc, #540]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60cb      	str	r3, [r1, #12]
 8002f46:	e01b      	b.n	8002f80 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002f48:	4b85      	ldr	r3, [pc, #532]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a84      	ldr	r2, [pc, #528]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f54:	f7fe fb1e 	bl	8001594 <HAL_GetTick>
 8002f58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002f5a:	e009      	b.n	8002f70 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f5c:	f7fe fb1a 	bl	8001594 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d902      	bls.n	8002f70 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	f000 bd53 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002f70:	4b7b      	ldr	r3, [pc, #492]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ef      	bne.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
 8002f7c:	e000      	b.n	8002f80 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 808b 	beq.w	80030a4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x334>
 8002f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d17d      	bne.n	80030a4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f000 bd34 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x35a>
 8002fb8:	4b69      	ldr	r3, [pc, #420]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a68      	ldr	r2, [pc, #416]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	e041      	b.n	800304a <HAL_RCC_OscConfig+0x3de>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fce:	d112      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x38a>
 8002fd0:	4b63      	ldr	r3, [pc, #396]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a62      	ldr	r2, [pc, #392]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b60      	ldr	r3, [pc, #384]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a5f      	ldr	r2, [pc, #380]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fe2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b5d      	ldr	r3, [pc, #372]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a5c      	ldr	r2, [pc, #368]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	e029      	b.n	800304a <HAL_RCC_OscConfig+0x3de>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002ffe:	d112      	bne.n	8003026 <HAL_RCC_OscConfig+0x3ba>
 8003000:	4b57      	ldr	r3, [pc, #348]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a56      	ldr	r2, [pc, #344]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003006:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b54      	ldr	r3, [pc, #336]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a53      	ldr	r2, [pc, #332]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b51      	ldr	r3, [pc, #324]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a50      	ldr	r2, [pc, #320]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 800301e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	e011      	b.n	800304a <HAL_RCC_OscConfig+0x3de>
 8003026:	4b4e      	ldr	r3, [pc, #312]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a4d      	ldr	r2, [pc, #308]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b4b      	ldr	r3, [pc, #300]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a4a      	ldr	r2, [pc, #296]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003038:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b48      	ldr	r3, [pc, #288]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a47      	ldr	r2, [pc, #284]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003044:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003048:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d014      	beq.n	800307c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003052:	f7fe fa9f 	bl	8001594 <HAL_GetTick>
 8003056:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003058:	e009      	b.n	800306e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800305a:	f7fe fa9b 	bl	8001594 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b64      	cmp	r3, #100	@ 0x64
 8003066:	d902      	bls.n	800306e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	f000 bcd4 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800306e:	4b3c      	ldr	r3, [pc, #240]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ef      	beq.n	800305a <HAL_RCC_OscConfig+0x3ee>
 800307a:	e013      	b.n	80030a4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800307c:	f7fe fa8a 	bl	8001594 <HAL_GetTick>
 8003080:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003082:	e009      	b.n	8003098 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7fe fa86 	bl	8001594 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	@ 0x64
 8003090:	d902      	bls.n	8003098 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	f000 bcbf 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003098:	4b31      	ldr	r3, [pc, #196]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1ef      	bne.n	8003084 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d05f      	beq.n	8003170 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d005      	beq.n	80030c2 <HAL_RCC_OscConfig+0x456>
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d114      	bne.n	80030e6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d111      	bne.n	80030e6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f000 bca3 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b23      	ldr	r3, [pc, #140]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	4920      	ldr	r1, [pc, #128]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030e4:	e044      	b.n	8003170 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d024      	beq.n	8003138 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80030ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 80030f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80030fa:	f7fe fa4b 	bl	8001594 <HAL_GetTick>
 80030fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003100:	e009      	b.n	8003116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003102:	f7fe fa47 	bl	8001594 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d902      	bls.n	8003116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	f000 bc80 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003116:	4b12      	ldr	r3, [pc, #72]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0ef      	beq.n	8003102 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003122:	4b0f      	ldr	r3, [pc, #60]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	041b      	lsls	r3, r3, #16
 8003130:	490b      	ldr	r1, [pc, #44]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	610b      	str	r3, [r1, #16]
 8003136:	e01b      	b.n	8003170 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003138:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a08      	ldr	r2, [pc, #32]	@ (8003160 <HAL_RCC_OscConfig+0x4f4>)
 800313e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003142:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003144:	f7fe fa26 	bl	8001594 <HAL_GetTick>
 8003148:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314c:	f7fe fa22 	bl	8001594 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d904      	bls.n	8003164 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	f000 bc5b 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
 8003160:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003164:	4baf      	ldr	r3, [pc, #700]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ed      	bne.n	800314c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80c8 	beq.w	800330e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003184:	4ba7      	ldr	r3, [pc, #668]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003186:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d111      	bne.n	80031b6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	4ba4      	ldr	r3, [pc, #656]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003198:	4aa2      	ldr	r2, [pc, #648]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80031a2:	4ba0      	ldr	r3, [pc, #640]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80031b6:	4b9c      	ldr	r3, [pc, #624]	@ (8003428 <HAL_RCC_OscConfig+0x7bc>)
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d119      	bne.n	80031f6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80031c2:	4b99      	ldr	r3, [pc, #612]	@ (8003428 <HAL_RCC_OscConfig+0x7bc>)
 80031c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c6:	4a98      	ldr	r2, [pc, #608]	@ (8003428 <HAL_RCC_OscConfig+0x7bc>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ce:	f7fe f9e1 	bl	8001594 <HAL_GetTick>
 80031d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80031d4:	e009      	b.n	80031ea <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d6:	f7fe f9dd 	bl	8001594 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d902      	bls.n	80031ea <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	f000 bc16 	b.w	8003a16 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80031ea:	4b8f      	ldr	r3, [pc, #572]	@ (8003428 <HAL_RCC_OscConfig+0x7bc>)
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ef      	beq.n	80031d6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d05f      	beq.n	80032be <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80031fe:	4b89      	ldr	r3, [pc, #548]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003204:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003210:	429a      	cmp	r2, r3
 8003212:	d037      	beq.n	8003284 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e3f4      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01b      	beq.n	800326e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003236:	4b7b      	ldr	r3, [pc, #492]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800323c:	4a79      	ldr	r2, [pc, #484]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 800323e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003242:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003246:	f7fe f9a5 	bl	8001594 <HAL_GetTick>
 800324a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800324e:	f7fe f9a1 	bl	8001594 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b05      	cmp	r3, #5
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e3da      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003260:	4b70      	ldr	r3, [pc, #448]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1ef      	bne.n	800324e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800326e:	4b6d      	ldr	r3, [pc, #436]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003274:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	4969      	ldr	r1, [pc, #420]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003284:	4b67      	ldr	r3, [pc, #412]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800328a:	4a66      	ldr	r2, [pc, #408]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 800328c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003290:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003294:	f7fe f97e 	bl	8001594 <HAL_GetTick>
 8003298:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329c:	f7fe f97a 	bl	8001594 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b05      	cmp	r3, #5
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e3b3      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80032ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80032b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ef      	beq.n	800329c <HAL_RCC_OscConfig+0x630>
 80032bc:	e01b      	b.n	80032f6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80032be:	4b59      	ldr	r3, [pc, #356]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80032c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032c4:	4a57      	ldr	r2, [pc, #348]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80032c6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80032ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80032ce:	f7fe f961 	bl	8001594 <HAL_GetTick>
 80032d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d6:	f7fe f95d 	bl	8001594 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e396      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80032e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80032ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1ef      	bne.n	80032d6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032f6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fe:	4b49      	ldr	r3, [pc, #292]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003304:	4a47      	ldr	r2, [pc, #284]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003306:	f023 0304 	bic.w	r3, r3, #4
 800330a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8111 	beq.w	800353e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800331c:	2300      	movs	r3, #0
 800331e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003322:	4b40      	ldr	r3, [pc, #256]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d111      	bne.n	8003354 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b3c      	ldr	r3, [pc, #240]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003336:	4a3b      	ldr	r2, [pc, #236]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003340:	4b38      	ldr	r3, [pc, #224]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 8003342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003354:	4b34      	ldr	r3, [pc, #208]	@ (8003428 <HAL_RCC_OscConfig+0x7bc>)
 8003356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d118      	bne.n	8003392 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003360:	4b31      	ldr	r3, [pc, #196]	@ (8003428 <HAL_RCC_OscConfig+0x7bc>)
 8003362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003364:	4a30      	ldr	r2, [pc, #192]	@ (8003428 <HAL_RCC_OscConfig+0x7bc>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336c:	f7fe f912 	bl	8001594 <HAL_GetTick>
 8003370:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003374:	f7fe f90e 	bl	8001594 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e347      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003386:	4b28      	ldr	r3, [pc, #160]	@ (8003428 <HAL_RCC_OscConfig+0x7bc>)
 8003388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01f      	beq.n	80033de <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d010      	beq.n	80033cc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80033aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80033ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80033b2:	f043 0304 	orr.w	r3, r3, #4
 80033b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80033bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033c0:	4a18      	ldr	r2, [pc, #96]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033ca:	e018      	b.n	80033fe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033cc:	4b15      	ldr	r3, [pc, #84]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80033ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033d2:	4a14      	ldr	r2, [pc, #80]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033dc:	e00f      	b.n	80033fe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033de:	4b11      	ldr	r3, [pc, #68]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80033e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80033ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80033f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003424 <HAL_RCC_OscConfig+0x7b8>)
 80033f6:	f023 0304 	bic.w	r3, r3, #4
 80033fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d057      	beq.n	80034b6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003406:	f7fe f8c5 	bl	8001594 <HAL_GetTick>
 800340a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340c:	e00e      	b.n	800342c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe f8c1 	bl	8001594 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d905      	bls.n	800342c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e2f8      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
 8003424:	46020c00 	.word	0x46020c00
 8003428:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342c:	4b9c      	ldr	r3, [pc, #624]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 800342e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0e9      	beq.n	800340e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01b      	beq.n	800347e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003446:	4b96      	ldr	r3, [pc, #600]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800344c:	4a94      	ldr	r2, [pc, #592]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 800344e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003452:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003456:	e00a      	b.n	800346e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003458:	f7fe f89c 	bl	8001594 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e2d3      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800346e:	4b8c      	ldr	r3, [pc, #560]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ed      	beq.n	8003458 <HAL_RCC_OscConfig+0x7ec>
 800347c:	e053      	b.n	8003526 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800347e:	4b88      	ldr	r3, [pc, #544]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003484:	4a86      	ldr	r2, [pc, #536]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800348a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003490:	f7fe f880 	bl	8001594 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e2b7      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034a6:	4b7e      	ldr	r3, [pc, #504]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 80034a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ed      	bne.n	8003490 <HAL_RCC_OscConfig+0x824>
 80034b4:	e037      	b.n	8003526 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80034b6:	f7fe f86d 	bl	8001594 <HAL_GetTick>
 80034ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034bc:	e00a      	b.n	80034d4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f7fe f869 	bl	8001594 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e2a0      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d4:	4b72      	ldr	r3, [pc, #456]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 80034d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1ed      	bne.n	80034be <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80034e2:	4b6f      	ldr	r3, [pc, #444]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 80034e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01a      	beq.n	8003526 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034f0:	4b6b      	ldr	r3, [pc, #428]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 80034f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034f6:	4a6a      	ldr	r2, [pc, #424]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 80034f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003500:	e00a      	b.n	8003518 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7fe f847 	bl	8001594 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e27e      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003518:	4b61      	ldr	r3, [pc, #388]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 800351a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800351e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1ed      	bne.n	8003502 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003526:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352e:	4b5c      	ldr	r3, [pc, #368]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003534:	4a5a      	ldr	r2, [pc, #360]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003536:	f023 0304 	bic.w	r3, r3, #4
 800353a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b00      	cmp	r3, #0
 8003548:	d036      	beq.n	80035b8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d019      	beq.n	8003586 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003552:	4b53      	ldr	r3, [pc, #332]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a52      	ldr	r2, [pc, #328]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003558:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800355c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800355e:	f7fe f819 	bl	8001594 <HAL_GetTick>
 8003562:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003566:	f7fe f815 	bl	8001594 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e24e      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003578:	4b49      	ldr	r3, [pc, #292]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x8fa>
 8003584:	e018      	b.n	80035b8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003586:	4b46      	ldr	r3, [pc, #280]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a45      	ldr	r2, [pc, #276]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 800358c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003590:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003592:	f7fd ffff 	bl	8001594 <HAL_GetTick>
 8003596:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800359a:	f7fd fffb 	bl	8001594 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e234      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80035ac:	4b3c      	ldr	r3, [pc, #240]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f0      	bne.n	800359a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d036      	beq.n	8003632 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d019      	beq.n	8003600 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80035cc:	4b34      	ldr	r3, [pc, #208]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a33      	ldr	r2, [pc, #204]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 80035d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80035d8:	f7fd ffdc 	bl	8001594 <HAL_GetTick>
 80035dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80035e0:	f7fd ffd8 	bl	8001594 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e211      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80035f2:	4b2b      	ldr	r3, [pc, #172]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x974>
 80035fe:	e018      	b.n	8003632 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003600:	4b27      	ldr	r3, [pc, #156]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a26      	ldr	r2, [pc, #152]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003606:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800360a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800360c:	f7fd ffc2 	bl	8001594 <HAL_GetTick>
 8003610:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003614:	f7fd ffbe 	bl	8001594 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1f7      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003626:	4b1e      	ldr	r3, [pc, #120]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d07f      	beq.n	800373e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003642:	2b00      	cmp	r3, #0
 8003644:	d062      	beq.n	800370c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003646:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	4a15      	ldr	r2, [pc, #84]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 800364c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003650:	6093      	str	r3, [r2, #8]
 8003652:	4b13      	ldr	r3, [pc, #76]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	4910      	ldr	r1, [pc, #64]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003660:	4313      	orrs	r3, r2
 8003662:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800366c:	d309      	bcc.n	8003682 <HAL_RCC_OscConfig+0xa16>
 800366e:	4b0c      	ldr	r3, [pc, #48]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 021f 	bic.w	r2, r3, #31
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4909      	ldr	r1, [pc, #36]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 800367c:	4313      	orrs	r3, r2
 800367e:	60cb      	str	r3, [r1, #12]
 8003680:	e02a      	b.n	80036d8 <HAL_RCC_OscConfig+0xa6c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	da0c      	bge.n	80036a4 <HAL_RCC_OscConfig+0xa38>
 800368a:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	015b      	lsls	r3, r3, #5
 8003698:	4901      	ldr	r1, [pc, #4]	@ (80036a0 <HAL_RCC_OscConfig+0xa34>)
 800369a:	4313      	orrs	r3, r2
 800369c:	60cb      	str	r3, [r1, #12]
 800369e:	e01b      	b.n	80036d8 <HAL_RCC_OscConfig+0xa6c>
 80036a0:	46020c00 	.word	0x46020c00
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ac:	d30a      	bcc.n	80036c4 <HAL_RCC_OscConfig+0xa58>
 80036ae:	4ba1      	ldr	r3, [pc, #644]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	499d      	ldr	r1, [pc, #628]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	60cb      	str	r3, [r1, #12]
 80036c2:	e009      	b.n	80036d8 <HAL_RCC_OscConfig+0xa6c>
 80036c4:	4b9b      	ldr	r3, [pc, #620]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	03db      	lsls	r3, r3, #15
 80036d2:	4998      	ldr	r1, [pc, #608]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80036d8:	4b96      	ldr	r3, [pc, #600]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a95      	ldr	r2, [pc, #596]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80036de:	f043 0310 	orr.w	r3, r3, #16
 80036e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80036e4:	f7fd ff56 	bl	8001594 <HAL_GetTick>
 80036e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80036ec:	f7fd ff52 	bl	8001594 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e18b      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80036fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0xa80>
 800370a:	e018      	b.n	800373e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800370c:	4b89      	ldr	r3, [pc, #548]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a88      	ldr	r2, [pc, #544]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003712:	f023 0310 	bic.w	r3, r3, #16
 8003716:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003718:	f7fd ff3c 	bl	8001594 <HAL_GetTick>
 800371c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003720:	f7fd ff38 	bl	8001594 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e171      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003732:	4b80      	ldr	r3, [pc, #512]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8166 	beq.w	8003a14 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003748:	2300      	movs	r3, #0
 800374a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800374e:	4b79      	ldr	r3, [pc, #484]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b0c      	cmp	r3, #12
 8003758:	f000 80f2 	beq.w	8003940 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003760:	2b02      	cmp	r3, #2
 8003762:	f040 80c5 	bne.w	80038f0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003766:	4b73      	ldr	r3, [pc, #460]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a72      	ldr	r2, [pc, #456]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 800376c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003770:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003772:	f7fd ff0f 	bl	8001594 <HAL_GetTick>
 8003776:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377a:	f7fd ff0b 	bl	8001594 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e144      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800378c:	4b69      	ldr	r3, [pc, #420]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f0      	bne.n	800377a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003798:	4b66      	ldr	r3, [pc, #408]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 800379a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d111      	bne.n	80037ca <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	4b63      	ldr	r3, [pc, #396]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80037a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ac:	4a61      	ldr	r2, [pc, #388]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80037b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80037b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80037ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003938 <HAL_RCC_OscConfig+0xccc>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037d6:	d102      	bne.n	80037de <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80037de:	4b56      	ldr	r3, [pc, #344]	@ (8003938 <HAL_RCC_OscConfig+0xccc>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4a55      	ldr	r2, [pc, #340]	@ (8003938 <HAL_RCC_OscConfig+0xccc>)
 80037e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037e8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80037ea:	4b52      	ldr	r3, [pc, #328]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80037ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037fe:	3a01      	subs	r2, #1
 8003800:	0212      	lsls	r2, r2, #8
 8003802:	4311      	orrs	r1, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003808:	430a      	orrs	r2, r1
 800380a:	494a      	ldr	r1, [pc, #296]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 800380c:	4313      	orrs	r3, r2
 800380e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003810:	4b48      	ldr	r3, [pc, #288]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003814:	4b49      	ldr	r3, [pc, #292]	@ (800393c <HAL_RCC_OscConfig+0xcd0>)
 8003816:	4013      	ands	r3, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800381c:	3a01      	subs	r2, #1
 800381e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003826:	3a01      	subs	r2, #1
 8003828:	0252      	lsls	r2, r2, #9
 800382a:	b292      	uxth	r2, r2
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003832:	3a01      	subs	r2, #1
 8003834:	0412      	lsls	r2, r2, #16
 8003836:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800383a:	4311      	orrs	r1, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003840:	3a01      	subs	r2, #1
 8003842:	0612      	lsls	r2, r2, #24
 8003844:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003848:	430a      	orrs	r2, r1
 800384a:	493a      	ldr	r1, [pc, #232]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 800384c:	4313      	orrs	r3, r2
 800384e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003850:	4b38      	ldr	r3, [pc, #224]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003854:	4a37      	ldr	r2, [pc, #220]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003856:	f023 0310 	bic.w	r3, r3, #16
 800385a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003860:	4a34      	ldr	r2, [pc, #208]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003866:	4b33      	ldr	r3, [pc, #204]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	4a32      	ldr	r2, [pc, #200]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 800386c:	f043 0310 	orr.w	r3, r3, #16
 8003870:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003872:	4b30      	ldr	r3, [pc, #192]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	f023 020c 	bic.w	r2, r3, #12
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387e:	492d      	ldr	r1, [pc, #180]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003880:	4313      	orrs	r3, r2
 8003882:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003884:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003888:	2b01      	cmp	r3, #1
 800388a:	d105      	bne.n	8003898 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800388c:	4b2a      	ldr	r3, [pc, #168]	@ (8003938 <HAL_RCC_OscConfig+0xccc>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4a29      	ldr	r2, [pc, #164]	@ (8003938 <HAL_RCC_OscConfig+0xccc>)
 8003892:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003896:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003898:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800389c:	2b01      	cmp	r3, #1
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80038a0:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80038a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a6:	4a23      	ldr	r2, [pc, #140]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80038b0:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80038b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038bc:	f7fd fe6a 	bl	8001594 <HAL_GetTick>
 80038c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fd fe66 	bl	8001594 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e09f      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80038d6:	4b17      	ldr	r3, [pc, #92]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038e2:	4b14      	ldr	r3, [pc, #80]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80038e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e6:	4a13      	ldr	r2, [pc, #76]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80038e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80038ee:	e091      	b.n	8003a14 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80038f0:	4b10      	ldr	r3, [pc, #64]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 80038f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038fc:	f7fd fe4a 	bl	8001594 <HAL_GetTick>
 8003900:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd fe46 	bl	8001594 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003916:	4b07      	ldr	r3, [pc, #28]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003922:	4b04      	ldr	r3, [pc, #16]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003926:	4a03      	ldr	r2, [pc, #12]	@ (8003934 <HAL_RCC_OscConfig+0xcc8>)
 8003928:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800392c:	f023 0303 	bic.w	r3, r3, #3
 8003930:	6293      	str	r3, [r2, #40]	@ 0x28
 8003932:	e06f      	b.n	8003a14 <HAL_RCC_OscConfig+0xda8>
 8003934:	46020c00 	.word	0x46020c00
 8003938:	46020800 	.word	0x46020800
 800393c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003940:	4b37      	ldr	r3, [pc, #220]	@ (8003a20 <HAL_RCC_OscConfig+0xdb4>)
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003946:	4b36      	ldr	r3, [pc, #216]	@ (8003a20 <HAL_RCC_OscConfig+0xdb4>)
 8003948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003950:	2b01      	cmp	r3, #1
 8003952:	d039      	beq.n	80039c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0203 	and.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d132      	bne.n	80039c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d129      	bne.n	80039c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d122      	bne.n	80039c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d11a      	bne.n	80039c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	0a5b      	lsrs	r3, r3, #9
 8003996:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d111      	bne.n	80039c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d108      	bne.n	80039c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	0e1b      	lsrs	r3, r3, #24
 80039ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e024      	b.n	8003a16 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80039cc:	4b14      	ldr	r3, [pc, #80]	@ (8003a20 <HAL_RCC_OscConfig+0xdb4>)
 80039ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d0:	08db      	lsrs	r3, r3, #3
 80039d2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80039da:	429a      	cmp	r2, r3
 80039dc:	d01a      	beq.n	8003a14 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80039de:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <HAL_RCC_OscConfig+0xdb4>)
 80039e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003a20 <HAL_RCC_OscConfig+0xdb4>)
 80039e4:	f023 0310 	bic.w	r3, r3, #16
 80039e8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fd fdd3 	bl	8001594 <HAL_GetTick>
 80039ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80039f0:	bf00      	nop
 80039f2:	f7fd fdcf 	bl	8001594 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d0f9      	beq.n	80039f2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a02:	4a07      	ldr	r2, [pc, #28]	@ (8003a20 <HAL_RCC_OscConfig+0xdb4>)
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003a08:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_RCC_OscConfig+0xdb4>)
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0c:	4a04      	ldr	r2, [pc, #16]	@ (8003a20 <HAL_RCC_OscConfig+0xdb4>)
 8003a0e:	f043 0310 	orr.w	r3, r3, #16
 8003a12:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3738      	adds	r7, #56	@ 0x38
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	46020c00 	.word	0x46020c00

08003a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e1d9      	b.n	8003dec <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a38:	4b9b      	ldr	r3, [pc, #620]	@ (8003ca8 <HAL_RCC_ClockConfig+0x284>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d910      	bls.n	8003a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b98      	ldr	r3, [pc, #608]	@ (8003ca8 <HAL_RCC_ClockConfig+0x284>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 020f 	bic.w	r2, r3, #15
 8003a4e:	4996      	ldr	r1, [pc, #600]	@ (8003ca8 <HAL_RCC_ClockConfig+0x284>)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a56:	4b94      	ldr	r3, [pc, #592]	@ (8003ca8 <HAL_RCC_ClockConfig+0x284>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e1c1      	b.n	8003dec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d010      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	4b8c      	ldr	r3, [pc, #560]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d908      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003a84:	4b89      	ldr	r3, [pc, #548]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	4986      	ldr	r1, [pc, #536]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d012      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	4b81      	ldr	r3, [pc, #516]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d909      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003ab4:	4b7d      	ldr	r3, [pc, #500]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	497a      	ldr	r1, [pc, #488]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d010      	beq.n	8003af6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	4b74      	ldr	r3, [pc, #464]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d908      	bls.n	8003af6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003ae4:	4b71      	ldr	r3, [pc, #452]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	496e      	ldr	r1, [pc, #440]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d010      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	4b69      	ldr	r3, [pc, #420]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d908      	bls.n	8003b24 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003b12:	4b66      	ldr	r3, [pc, #408]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 020f 	bic.w	r2, r3, #15
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	4963      	ldr	r1, [pc, #396]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80d2 	beq.w	8003cd6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d143      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d110      	bne.n	8003b6e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	4b57      	ldr	r3, [pc, #348]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b52:	4a56      	ldr	r2, [pc, #344]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003b54:	f043 0304 	orr.w	r3, r3, #4
 8003b58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003b5c:	4b53      	ldr	r3, [pc, #332]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003b6e:	f7fd fd11 	bl	8001594 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003b74:	4b4e      	ldr	r3, [pc, #312]	@ (8003cb0 <HAL_RCC_ClockConfig+0x28c>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00f      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003b82:	f7fd fd07 	bl	8001594 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e12b      	b.n	8003dec <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003b94:	4b46      	ldr	r3, [pc, #280]	@ (8003cb0 <HAL_RCC_ClockConfig+0x28c>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d107      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ba6:	4b41      	ldr	r3, [pc, #260]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bac:	4a3f      	ldr	r2, [pc, #252]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003bae:	f023 0304 	bic.w	r3, r3, #4
 8003bb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d121      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e112      	b.n	8003dec <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bce:	4b37      	ldr	r3, [pc, #220]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d115      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e106      	b.n	8003dec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003be6:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0fa      	b.n	8003dec <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0f2      	b.n	8003dec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003c06:	4b29      	ldr	r3, [pc, #164]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f023 0203 	bic.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4926      	ldr	r1, [pc, #152]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003c18:	f7fd fcbc 	bl	8001594 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d112      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7fd fcb4 	bl	8001594 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0d6      	b.n	8003dec <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d1ee      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x204>
 8003c4a:	e044      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d112      	bne.n	8003c7a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c54:	e00a      	b.n	8003c6c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c56:	f7fd fc9d 	bl	8001594 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e0bf      	b.n	8003dec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d1ee      	bne.n	8003c56 <HAL_RCC_ClockConfig+0x232>
 8003c78:	e02d      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d123      	bne.n	8003cca <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c84:	f7fd fc86 	bl	8001594 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e0a8      	b.n	8003dec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c9a:	4b04      	ldr	r3, [pc, #16]	@ (8003cac <HAL_RCC_ClockConfig+0x288>)
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1ee      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x260>
 8003ca6:	e016      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x2b2>
 8003ca8:	40022000 	.word	0x40022000
 8003cac:	46020c00 	.word	0x46020c00
 8003cb0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7fd fc6e 	bl	8001594 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e090      	b.n	8003dec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cca:	4b4a      	ldr	r3, [pc, #296]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d1ee      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d010      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	4b43      	ldr	r3, [pc, #268]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d208      	bcs.n	8003d04 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003cf2:	4b40      	ldr	r3, [pc, #256]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 020f 	bic.w	r2, r3, #15
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	493d      	ldr	r1, [pc, #244]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d04:	4b3c      	ldr	r3, [pc, #240]	@ (8003df8 <HAL_RCC_ClockConfig+0x3d4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d210      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b39      	ldr	r3, [pc, #228]	@ (8003df8 <HAL_RCC_ClockConfig+0x3d4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 020f 	bic.w	r2, r3, #15
 8003d1a:	4937      	ldr	r1, [pc, #220]	@ (8003df8 <HAL_RCC_ClockConfig+0x3d4>)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b35      	ldr	r3, [pc, #212]	@ (8003df8 <HAL_RCC_ClockConfig+0x3d4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e05b      	b.n	8003dec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d010      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	4b2b      	ldr	r3, [pc, #172]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d208      	bcs.n	8003d62 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003d50:	4b28      	ldr	r3, [pc, #160]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4925      	ldr	r1, [pc, #148]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d012      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	4b20      	ldr	r3, [pc, #128]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d209      	bcs.n	8003d94 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003d80:	4b1c      	ldr	r3, [pc, #112]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	4919      	ldr	r1, [pc, #100]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d010      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d208      	bcs.n	8003dc2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003db0:	4b10      	ldr	r3, [pc, #64]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	490d      	ldr	r1, [pc, #52]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003dc2:	f000 f821 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003df4 <HAL_RCC_ClockConfig+0x3d0>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	490a      	ldr	r1, [pc, #40]	@ (8003dfc <HAL_RCC_ClockConfig+0x3d8>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd8:	4a09      	ldr	r2, [pc, #36]	@ (8003e00 <HAL_RCC_ClockConfig+0x3dc>)
 8003dda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ddc:	4b09      	ldr	r3, [pc, #36]	@ (8003e04 <HAL_RCC_ClockConfig+0x3e0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fd fb4d 	bl	8001480 <HAL_InitTick>
 8003de6:	4603      	mov	r3, r0
 8003de8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	46020c00 	.word	0x46020c00
 8003df8:	40022000 	.word	0x40022000
 8003dfc:	080079fc 	.word	0x080079fc
 8003e00:	20000000 	.word	0x20000000
 8003e04:	20000004 	.word	0x20000004

08003e08 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b08b      	sub	sp, #44	@ 0x2c
 8003e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e16:	4b78      	ldr	r3, [pc, #480]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e20:	4b75      	ldr	r3, [pc, #468]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x34>
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d121      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d11e      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003e3c:	4b6e      	ldr	r3, [pc, #440]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003e48:	4b6b      	ldr	r3, [pc, #428]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e4e:	0b1b      	lsrs	r3, r3, #12
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e56:	e005      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003e58:	4b67      	ldr	r3, [pc, #412]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	0f1b      	lsrs	r3, r3, #28
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e64:	4a65      	ldr	r2, [pc, #404]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d110      	bne.n	8003e96 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e78:	e00d      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d102      	bne.n	8003e8c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e86:	4b5e      	ldr	r3, [pc, #376]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003e88:	623b      	str	r3, [r7, #32]
 8003e8a:	e004      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e92:	4b5b      	ldr	r3, [pc, #364]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003e94:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	f040 80a5 	bne.w	8003fe8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003e9e:	4b56      	ldr	r3, [pc, #344]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003ea8:	4b53      	ldr	r3, [pc, #332]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003eb6:	4b50      	ldr	r3, [pc, #320]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003ec2:	4b4d      	ldr	r3, [pc, #308]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec6:	08db      	lsrs	r3, r3, #3
 8003ec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d003      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0xe4>
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d022      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x128>
 8003eea:	e043      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004004 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efe:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f0e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003f12:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004008 <HAL_RCC_GetSysClockFreq+0x200>
 8003f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f2e:	e046      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004004 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f42:	4b2d      	ldr	r3, [pc, #180]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f52:	ed97 6a01 	vldr	s12, [r7, #4]
 8003f56:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004008 <HAL_RCC_GetSysClockFreq+0x200>
 8003f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f72:	e024      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	ee07 3a90 	vmov	s15, r3
 8003f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f94:	ee07 3a90 	vmov	s15, r3
 8003f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f9c:	ed97 6a01 	vldr	s12, [r7, #4]
 8003fa0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004008 <HAL_RCC_GetSysClockFreq+0x200>
 8003fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003fac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fbc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc2:	0e1b      	lsrs	r3, r3, #24
 8003fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fc8:	3301      	adds	r3, #1
 8003fca:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe2:	ee17 3a90 	vmov	r3, s15
 8003fe6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	372c      	adds	r7, #44	@ 0x2c
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	46020c00 	.word	0x46020c00
 8003ffc:	08007a0c 	.word	0x08007a0c
 8004000:	00f42400 	.word	0x00f42400
 8004004:	4b742400 	.word	0x4b742400
 8004008:	46000000 	.word	0x46000000

0800400c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004010:	f7ff fefa 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8004014:	4602      	mov	r2, r0
 8004016:	4b07      	ldr	r3, [pc, #28]	@ (8004034 <HAL_RCC_GetHCLKFreq+0x28>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	4906      	ldr	r1, [pc, #24]	@ (8004038 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004020:	5ccb      	ldrb	r3, [r1, r3]
 8004022:	fa22 f303 	lsr.w	r3, r2, r3
 8004026:	4a05      	ldr	r2, [pc, #20]	@ (800403c <HAL_RCC_GetHCLKFreq+0x30>)
 8004028:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800402a:	4b04      	ldr	r3, [pc, #16]	@ (800403c <HAL_RCC_GetHCLKFreq+0x30>)
 800402c:	681b      	ldr	r3, [r3, #0]
}
 800402e:	4618      	mov	r0, r3
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	46020c00 	.word	0x46020c00
 8004038:	080079fc 	.word	0x080079fc
 800403c:	20000000 	.word	0x20000000

08004040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004048:	4b3e      	ldr	r3, [pc, #248]	@ (8004144 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800404a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004056:	f7fe fdeb 	bl	8002c30 <HAL_PWREx_GetVoltageRange>
 800405a:	6178      	str	r0, [r7, #20]
 800405c:	e019      	b.n	8004092 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	4b39      	ldr	r3, [pc, #228]	@ (8004144 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004064:	4a37      	ldr	r2, [pc, #220]	@ (8004144 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004066:	f043 0304 	orr.w	r3, r3, #4
 800406a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800406e:	4b35      	ldr	r3, [pc, #212]	@ (8004144 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800407c:	f7fe fdd8 	bl	8002c30 <HAL_PWREx_GetVoltageRange>
 8004080:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004082:	4b30      	ldr	r3, [pc, #192]	@ (8004144 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004088:	4a2e      	ldr	r2, [pc, #184]	@ (8004144 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800408a:	f023 0304 	bic.w	r3, r3, #4
 800408e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004098:	d003      	beq.n	80040a2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040a0:	d109      	bne.n	80040b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040a8:	d202      	bcs.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80040aa:	2301      	movs	r3, #1
 80040ac:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80040ae:	e033      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80040b4:	e030      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040bc:	d208      	bcs.n	80040d0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040c4:	d102      	bne.n	80040cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80040c6:	2303      	movs	r3, #3
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	e025      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e035      	b.n	800413c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d6:	d90f      	bls.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040e4:	d902      	bls.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	e015      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80040ec:	2301      	movs	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e012      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80040f2:	2300      	movs	r3, #0
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	e00f      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040fe:	d109      	bne.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004106:	d102      	bne.n	800410e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004108:	2301      	movs	r3, #1
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	e004      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800410e:	2302      	movs	r3, #2
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	e001      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004114:	2301      	movs	r3, #1
 8004116:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004118:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f023 020f 	bic.w	r2, r3, #15
 8004120:	4909      	ldr	r1, [pc, #36]	@ (8004148 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004128:	4b07      	ldr	r3, [pc, #28]	@ (8004148 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	429a      	cmp	r2, r3
 8004134:	d001      	beq.n	800413a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	46020c00 	.word	0x46020c00
 8004148:	40022000 	.word	0x40022000

0800414c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800414c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004150:	b0b8      	sub	sp, #224	@ 0xe0
 8004152:	af00      	add	r7, sp, #0
 8004154:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004158:	2300      	movs	r3, #0
 800415a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800415e:	2300      	movs	r3, #0
 8004160:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004164:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	f002 0401 	and.w	r4, r2, #1
 8004170:	2500      	movs	r5, #0
 8004172:	ea54 0305 	orrs.w	r3, r4, r5
 8004176:	d00b      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004178:	4bca      	ldr	r3, [pc, #808]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800417a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800417e:	f023 0103 	bic.w	r1, r3, #3
 8004182:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004188:	4ac6      	ldr	r2, [pc, #792]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800418a:	430b      	orrs	r3, r1
 800418c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f002 0802 	and.w	r8, r2, #2
 800419c:	f04f 0900 	mov.w	r9, #0
 80041a0:	ea58 0309 	orrs.w	r3, r8, r9
 80041a4:	d00b      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80041a6:	4bbf      	ldr	r3, [pc, #764]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041ac:	f023 010c 	bic.w	r1, r3, #12
 80041b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	4abb      	ldr	r2, [pc, #748]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041b8:	430b      	orrs	r3, r1
 80041ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f002 0a04 	and.w	sl, r2, #4
 80041ca:	f04f 0b00 	mov.w	fp, #0
 80041ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80041d2:	d00b      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80041d4:	4bb3      	ldr	r3, [pc, #716]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041da:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80041de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e4:	4aaf      	ldr	r2, [pc, #700]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041e6:	430b      	orrs	r3, r1
 80041e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f002 0308 	and.w	r3, r2, #8
 80041f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041fc:	2300      	movs	r3, #0
 80041fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004202:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004206:	460b      	mov	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	d00b      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800420c:	4ba5      	ldr	r3, [pc, #660]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800420e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004212:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004216:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800421a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421c:	4aa1      	ldr	r2, [pc, #644]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800421e:	430b      	orrs	r3, r1
 8004220:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004224:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f002 0310 	and.w	r3, r2, #16
 8004230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004234:	2300      	movs	r3, #0
 8004236:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800423a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800423e:	460b      	mov	r3, r1
 8004240:	4313      	orrs	r3, r2
 8004242:	d00b      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004244:	4b97      	ldr	r3, [pc, #604]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800424a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800424e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004254:	4a93      	ldr	r2, [pc, #588]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004256:	430b      	orrs	r3, r1
 8004258:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800425c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f002 0320 	and.w	r3, r2, #32
 8004268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004272:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004276:	460b      	mov	r3, r1
 8004278:	4313      	orrs	r3, r2
 800427a:	d00b      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800427c:	4b89      	ldr	r3, [pc, #548]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800427e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004282:	f023 0107 	bic.w	r1, r3, #7
 8004286:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800428a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800428c:	4a85      	ldr	r2, [pc, #532]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800428e:	430b      	orrs	r3, r1
 8004290:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004294:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80042a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042a4:	2300      	movs	r3, #0
 80042a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042ae:	460b      	mov	r3, r1
 80042b0:	4313      	orrs	r3, r2
 80042b2:	d00b      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80042b4:	4b7b      	ldr	r3, [pc, #492]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80042b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042ba:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80042be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042c4:	4a77      	ldr	r2, [pc, #476]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80042c6:	430b      	orrs	r3, r1
 80042c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80042d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042dc:	2300      	movs	r3, #0
 80042de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80042e2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4313      	orrs	r3, r2
 80042ea:	d00b      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80042ec:	4b6d      	ldr	r3, [pc, #436]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80042ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042fc:	4a69      	ldr	r2, [pc, #420]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80042fe:	430b      	orrs	r3, r1
 8004300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800431a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800431e:	460b      	mov	r3, r1
 8004320:	4313      	orrs	r3, r2
 8004322:	d00b      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004324:	4b5f      	ldr	r3, [pc, #380]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800432a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800432e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004334:	4a5b      	ldr	r2, [pc, #364]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004336:	430b      	orrs	r3, r1
 8004338:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800433c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004348:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004352:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004356:	460b      	mov	r3, r1
 8004358:	4313      	orrs	r3, r2
 800435a:	d00b      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800435c:	4b51      	ldr	r3, [pc, #324]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800435e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004362:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004366:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800436a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436c:	4a4d      	ldr	r2, [pc, #308]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800436e:	430b      	orrs	r3, r1
 8004370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004374:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800438a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800438e:	460b      	mov	r3, r1
 8004390:	4313      	orrs	r3, r2
 8004392:	d00b      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004394:	4b43      	ldr	r3, [pc, #268]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800439a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800439e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043a4:	4a3f      	ldr	r2, [pc, #252]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80043a6:	430b      	orrs	r3, r1
 80043a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80043b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d00b      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80043cc:	4b35      	ldr	r3, [pc, #212]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80043ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043d2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80043d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043dc:	4a31      	ldr	r2, [pc, #196]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80043de:	430b      	orrs	r3, r1
 80043e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80043e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80043f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043f2:	2300      	movs	r3, #0
 80043f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043f6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80043fa:	460b      	mov	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	d00c      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004400:	4b28      	ldr	r3, [pc, #160]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004406:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800440a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800440e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004412:	4a24      	ldr	r2, [pc, #144]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004414:	430b      	orrs	r3, r1
 8004416:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800441a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004426:	673b      	str	r3, [r7, #112]	@ 0x70
 8004428:	2300      	movs	r3, #0
 800442a:	677b      	str	r3, [r7, #116]	@ 0x74
 800442c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004430:	460b      	mov	r3, r1
 8004432:	4313      	orrs	r3, r2
 8004434:	d04f      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004436:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443e:	2b80      	cmp	r3, #128	@ 0x80
 8004440:	d02d      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004442:	2b80      	cmp	r3, #128	@ 0x80
 8004444:	d827      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004446:	2b60      	cmp	r3, #96	@ 0x60
 8004448:	d02e      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800444a:	2b60      	cmp	r3, #96	@ 0x60
 800444c:	d823      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800444e:	2b40      	cmp	r3, #64	@ 0x40
 8004450:	d006      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004452:	2b40      	cmp	r3, #64	@ 0x40
 8004454:	d81f      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d009      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800445a:	2b20      	cmp	r3, #32
 800445c:	d011      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800445e:	e01a      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004460:	4b10      	ldr	r3, [pc, #64]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	4a0f      	ldr	r2, [pc, #60]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800446a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800446c:	e01d      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800446e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004472:	3308      	adds	r3, #8
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fc0d 	bl	8004c94 <RCCEx_PLL2_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004480:	e013      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004482:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004486:	332c      	adds	r3, #44	@ 0x2c
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fc9b 	bl	8004dc4 <RCCEx_PLL3_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004494:	e009      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800449c:	e005      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800449e:	bf00      	nop
 80044a0:	e003      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80044a2:	bf00      	nop
 80044a4:	46020c00 	.word	0x46020c00
        break;
 80044a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044aa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10d      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80044b2:	4bb6      	ldr	r3, [pc, #728]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80044b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80044b8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80044bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c4:	4ab1      	ldr	r2, [pc, #708]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80044c6:	430b      	orrs	r3, r1
 80044c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80044cc:	e003      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80044d2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044de:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80044e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044e4:	2300      	movs	r3, #0
 80044e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80044ec:	460b      	mov	r3, r1
 80044ee:	4313      	orrs	r3, r2
 80044f0:	d053      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80044f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fe:	d033      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004504:	d82c      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800450a:	d02f      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800450c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004510:	d826      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004516:	d008      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800451c:	d820      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004526:	d011      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004528:	e01a      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800452a:	4b98      	ldr	r3, [pc, #608]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800452c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452e:	4a97      	ldr	r2, [pc, #604]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004534:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004536:	e01a      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800453c:	3308      	adds	r3, #8
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fba8 	bl	8004c94 <RCCEx_PLL2_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800454a:	e010      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800454c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004550:	332c      	adds	r3, #44	@ 0x2c
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fc36 	bl	8004dc4 <RCCEx_PLL3_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800455e:	e006      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004566:	e002      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004568:	bf00      	nop
 800456a:	e000      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800456c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10d      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004576:	4b85      	ldr	r3, [pc, #532]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004578:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800457c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004588:	4a80      	ldr	r2, [pc, #512]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800458a:	430b      	orrs	r3, r1
 800458c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004590:	e003      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004592:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004596:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800459a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80045a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80045a8:	2300      	movs	r3, #0
 80045aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80045b0:	460b      	mov	r3, r1
 80045b2:	4313      	orrs	r3, r2
 80045b4:	d046      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80045b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045be:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80045c2:	d028      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80045c4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80045c8:	d821      	bhi.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80045ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ce:	d022      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80045d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045d4:	d81b      	bhi.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80045d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045da:	d01c      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80045dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045e0:	d815      	bhi.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80045e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e6:	d008      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80045e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ec:	d80f      	bhi.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d011      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f6:	d00e      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80045f8:	e009      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045fe:	3308      	adds	r3, #8
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fb47 	bl	8004c94 <RCCEx_PLL2_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800460c:	e004      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004614:	e000      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8004616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004618:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10d      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004620:	4b5a      	ldr	r3, [pc, #360]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004626:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800462a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800462e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004632:	4a56      	ldr	r2, [pc, #344]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004634:	430b      	orrs	r3, r1
 8004636:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800463a:	e003      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004640:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004650:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004652:	2300      	movs	r3, #0
 8004654:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004656:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800465a:	460b      	mov	r3, r1
 800465c:	4313      	orrs	r3, r2
 800465e:	d03f      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004668:	2b04      	cmp	r3, #4
 800466a:	d81e      	bhi.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800466c:	a201      	add	r2, pc, #4	@ (adr r2, 8004674 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	080046b3 	.word	0x080046b3
 8004678:	08004689 	.word	0x08004689
 800467c:	08004697 	.word	0x08004697
 8004680:	080046b3 	.word	0x080046b3
 8004684:	080046b3 	.word	0x080046b3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004688:	4b40      	ldr	r3, [pc, #256]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800468a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468c:	4a3f      	ldr	r2, [pc, #252]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800468e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004692:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004694:	e00e      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800469a:	332c      	adds	r3, #44	@ 0x2c
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fb91 	bl	8004dc4 <RCCEx_PLL3_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80046a8:	e004      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80046b0:	e000      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80046b2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80046b4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10d      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80046bc:	4b33      	ldr	r3, [pc, #204]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80046be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046c2:	f023 0107 	bic.w	r1, r3, #7
 80046c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ce:	4a2f      	ldr	r2, [pc, #188]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80046d6:	e003      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80046dc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80046e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80046ee:	2300      	movs	r3, #0
 80046f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80046f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80046f6:	460b      	mov	r3, r1
 80046f8:	4313      	orrs	r3, r2
 80046fa:	d04d      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80046fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004704:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004708:	d028      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x610>
 800470a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800470e:	d821      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004710:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004714:	d024      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004716:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800471a:	d81b      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800471c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004720:	d00e      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004722:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004726:	d815      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01b      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004730:	d110      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004732:	4b16      	ldr	r3, [pc, #88]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004736:	4a15      	ldr	r2, [pc, #84]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800473c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800473e:	e012      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004744:	332c      	adds	r3, #44	@ 0x2c
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fb3c 	bl	8004dc4 <RCCEx_PLL3_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004752:	e008      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800475a:	e004      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800475c:	bf00      	nop
 800475e:	e002      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004760:	bf00      	nop
 8004762:	e000      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004764:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004766:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800476a:	2b00      	cmp	r3, #0
 800476c:	d110      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800476e:	4b07      	ldr	r3, [pc, #28]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004774:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004778:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800477c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004780:	4a02      	ldr	r2, [pc, #8]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004782:	430b      	orrs	r3, r1
 8004784:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004788:	e006      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800478a:	bf00      	nop
 800478c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004794:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80047a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047a6:	2300      	movs	r3, #0
 80047a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047aa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047ae:	460b      	mov	r3, r1
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f000 80b5 	beq.w	8004920 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b6:	2300      	movs	r3, #0
 80047b8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047bc:	4b9d      	ldr	r3, [pc, #628]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80047be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d113      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ca:	4b9a      	ldr	r3, [pc, #616]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80047cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d0:	4a98      	ldr	r2, [pc, #608]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80047da:	4b96      	ldr	r3, [pc, #600]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80047dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80047f2:	4b91      	ldr	r3, [pc, #580]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f6:	4a90      	ldr	r2, [pc, #576]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047fe:	f7fc fec9 	bl	8001594 <HAL_GetTick>
 8004802:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004806:	e00b      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004808:	f7fc fec4 	bl	8001594 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d903      	bls.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800481e:	e005      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004820:	4b85      	ldr	r3, [pc, #532]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ed      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800482c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004830:	2b00      	cmp	r3, #0
 8004832:	d165      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004834:	4b7f      	ldr	r3, [pc, #508]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800483a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004846:	2b00      	cmp	r3, #0
 8004848:	d023      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800484a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800484e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004856:	4293      	cmp	r3, r2
 8004858:	d01b      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800485a:	4b76      	ldr	r3, [pc, #472]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800485c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004860:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004864:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004868:	4b72      	ldr	r3, [pc, #456]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800486a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800486e:	4a71      	ldr	r2, [pc, #452]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004874:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004878:	4b6e      	ldr	r3, [pc, #440]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800487a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800487e:	4a6d      	ldr	r2, [pc, #436]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004884:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004888:	4a6a      	ldr	r2, [pc, #424]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800488a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800488e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d019      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7fc fe79 	bl	8001594 <HAL_GetTick>
 80048a2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a6:	e00d      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a8:	f7fc fe74 	bl	8001594 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d903      	bls.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80048c2:	e006      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80048c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0ea      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80048d2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10d      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80048da:	4b56      	ldr	r3, [pc, #344]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80048dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80048ec:	4a51      	ldr	r2, [pc, #324]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80048ee:	430b      	orrs	r3, r1
 80048f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80048f4:	e008      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048f6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80048fa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80048fe:	e003      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004904:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004908:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800490c:	2b01      	cmp	r3, #1
 800490e:	d107      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004910:	4b48      	ldr	r3, [pc, #288]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004916:	4a47      	ldr	r2, [pc, #284]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004918:	f023 0304 	bic.w	r3, r3, #4
 800491c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004920:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800492c:	643b      	str	r3, [r7, #64]	@ 0x40
 800492e:	2300      	movs	r3, #0
 8004930:	647b      	str	r3, [r7, #68]	@ 0x44
 8004932:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004936:	460b      	mov	r3, r1
 8004938:	4313      	orrs	r3, r2
 800493a:	d042      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800493c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004940:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004944:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004948:	d022      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800494a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800494e:	d81b      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004950:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004954:	d011      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8004956:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800495a:	d815      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d019      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004960:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004964:	d110      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004966:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800496a:	3308      	adds	r3, #8
 800496c:	4618      	mov	r0, r3
 800496e:	f000 f991 	bl	8004c94 <RCCEx_PLL2_Config>
 8004972:	4603      	mov	r3, r0
 8004974:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004978:	e00d      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800497a:	4b2e      	ldr	r3, [pc, #184]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497e:	4a2d      	ldr	r2, [pc, #180]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004984:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004986:	e006      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800498e:	e002      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004990:	bf00      	nop
 8004992:	e000      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004994:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004996:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10d      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800499e:	4b25      	ldr	r3, [pc, #148]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80049a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049a4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80049a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049b0:	4a20      	ldr	r2, [pc, #128]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80049b2:	430b      	orrs	r3, r1
 80049b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049b8:	e003      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80049be:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80049ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049d0:	2300      	movs	r3, #0
 80049d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049d8:	460b      	mov	r3, r1
 80049da:	4313      	orrs	r3, r2
 80049dc:	d032      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80049de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ea:	d00b      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80049ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049f0:	d804      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d008      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80049f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049fa:	d007      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004a02:	e004      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004a04:	bf00      	nop
 8004a06:	e002      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004a08:	bf00      	nop
 8004a0a:	e000      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004a0c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004a0e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d112      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004a16:	4b07      	ldr	r3, [pc, #28]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004a18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a1c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a28:	4a02      	ldr	r2, [pc, #8]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a30:	e008      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8004a32:	bf00      	nop
 8004a34:	46020c00 	.word	0x46020c00
 8004a38:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004a40:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004a44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a52:	2300      	movs	r3, #0
 8004a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a56:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	d019      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004a60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a6c:	d105      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a6e:	4b88      	ldr	r3, [pc, #544]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a72:	4a87      	ldr	r2, [pc, #540]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a78:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004a7a:	4b85      	ldr	r3, [pc, #532]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004a7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a80:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a8c:	4a80      	ldr	r2, [pc, #512]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004a94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4313      	orrs	r3, r2
 8004aae:	d00c      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004ab0:	4b77      	ldr	r3, [pc, #476]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ab6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004aba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004abe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ac2:	4973      	ldr	r1, [pc, #460]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004aca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ad6:	623b      	str	r3, [r7, #32]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8004adc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	d00c      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004ae6:	4b6a      	ldr	r3, [pc, #424]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004aec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004af0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004af4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004af8:	4965      	ldr	r1, [pc, #404]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b0c:	61bb      	str	r3, [r7, #24]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61fb      	str	r3, [r7, #28]
 8004b12:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b16:	460b      	mov	r3, r1
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	d00c      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004b1c:	4b5c      	ldr	r3, [pc, #368]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b22:	f023 0218 	bic.w	r2, r3, #24
 8004b26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b2e:	4958      	ldr	r1, [pc, #352]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	d032      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004b52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b5e:	d105      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b60:	4b4b      	ldr	r3, [pc, #300]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	4a4a      	ldr	r2, [pc, #296]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b6a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b78:	d108      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b7e:	3308      	adds	r3, #8
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 f887 	bl	8004c94 <RCCEx_PLL2_Config>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8004b8c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10d      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004b94:	4b3e      	ldr	r3, [pc, #248]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004b96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ba2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ba6:	493a      	ldr	r1, [pc, #232]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004bae:	e003      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004bb4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d03a      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004be0:	d00e      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004be2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004be6:	d815      	bhi.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d017      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8004bec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bf0:	d110      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf2:	4b27      	ldr	r3, [pc, #156]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	4a26      	ldr	r2, [pc, #152]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bfc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004bfe:	e00e      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c04:	3308      	adds	r3, #8
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f844 	bl	8004c94 <RCCEx_PLL2_Config>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004c12:	e004      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004c1a:	e000      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8004c1c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004c1e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10d      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004c26:	4b1a      	ldr	r3, [pc, #104]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c2c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c38:	4915      	ldr	r1, [pc, #84]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004c40:	e003      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c42:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004c46:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004c4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c60:	460b      	mov	r3, r1
 8004c62:	4313      	orrs	r3, r2
 8004c64:	d00c      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004c66:	4b0a      	ldr	r3, [pc, #40]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c6c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c78:	4905      	ldr	r1, [pc, #20]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004c80:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	37e0      	adds	r7, #224	@ 0xe0
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8e:	bf00      	nop
 8004c90:	46020c00 	.word	0x46020c00

08004c94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004c9c:	4b47      	ldr	r3, [pc, #284]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a46      	ldr	r2, [pc, #280]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004ca2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ca6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ca8:	f7fc fc74 	bl	8001594 <HAL_GetTick>
 8004cac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cae:	e008      	b.n	8004cc2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cb0:	f7fc fc70 	bl	8001594 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e077      	b.n	8004db2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004cce:	4b3b      	ldr	r3, [pc, #236]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6811      	ldr	r1, [r2, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6852      	ldr	r2, [r2, #4]
 8004ce2:	3a01      	subs	r2, #1
 8004ce4:	0212      	lsls	r2, r2, #8
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	4934      	ldr	r1, [pc, #208]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004cee:	4b33      	ldr	r3, [pc, #204]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004cf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cf2:	4b33      	ldr	r3, [pc, #204]	@ (8004dc0 <RCCEx_PLL2_Config+0x12c>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6892      	ldr	r2, [r2, #8]
 8004cfa:	3a01      	subs	r2, #1
 8004cfc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68d2      	ldr	r2, [r2, #12]
 8004d04:	3a01      	subs	r2, #1
 8004d06:	0252      	lsls	r2, r2, #9
 8004d08:	b292      	uxth	r2, r2
 8004d0a:	4311      	orrs	r1, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6912      	ldr	r2, [r2, #16]
 8004d10:	3a01      	subs	r2, #1
 8004d12:	0412      	lsls	r2, r2, #16
 8004d14:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004d18:	4311      	orrs	r1, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6952      	ldr	r2, [r2, #20]
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	0612      	lsls	r2, r2, #24
 8004d22:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004d26:	430a      	orrs	r2, r1
 8004d28:	4924      	ldr	r1, [pc, #144]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004d2e:	4b23      	ldr	r3, [pc, #140]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d32:	f023 020c 	bic.w	r2, r3, #12
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	4920      	ldr	r1, [pc, #128]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004d40:	4b1e      	ldr	r3, [pc, #120]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	491c      	ldr	r1, [pc, #112]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	4a1a      	ldr	r2, [pc, #104]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d54:	f023 0310 	bic.w	r3, r3, #16
 8004d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d5a:	4b18      	ldr	r3, [pc, #96]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d62:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	69d2      	ldr	r2, [r2, #28]
 8004d6a:	00d2      	lsls	r2, r2, #3
 8004d6c:	4913      	ldr	r1, [pc, #76]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004d72:	4b12      	ldr	r3, [pc, #72]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	4a11      	ldr	r2, [pc, #68]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d78:	f043 0310 	orr.w	r3, r3, #16
 8004d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a0e      	ldr	r2, [pc, #56]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004d84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d88:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d8a:	f7fc fc03 	bl	8001594 <HAL_GetTick>
 8004d8e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d90:	e008      	b.n	8004da4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d92:	f7fc fbff 	bl	8001594 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e006      	b.n	8004db2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004da4:	4b05      	ldr	r3, [pc, #20]	@ (8004dbc <RCCEx_PLL2_Config+0x128>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0

}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	46020c00 	.word	0x46020c00
 8004dc0:	80800000 	.word	0x80800000

08004dc4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004dcc:	4b47      	ldr	r3, [pc, #284]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a46      	ldr	r2, [pc, #280]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004dd8:	f7fc fbdc 	bl	8001594 <HAL_GetTick>
 8004ddc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dde:	e008      	b.n	8004df2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004de0:	f7fc fbd8 	bl	8001594 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e077      	b.n	8004ee2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004df2:	4b3e      	ldr	r3, [pc, #248]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6811      	ldr	r1, [r2, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6852      	ldr	r2, [r2, #4]
 8004e12:	3a01      	subs	r2, #1
 8004e14:	0212      	lsls	r2, r2, #8
 8004e16:	430a      	orrs	r2, r1
 8004e18:	4934      	ldr	r1, [pc, #208]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	630b      	str	r3, [r1, #48]	@ 0x30
 8004e1e:	4b33      	ldr	r3, [pc, #204]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e22:	4b33      	ldr	r3, [pc, #204]	@ (8004ef0 <RCCEx_PLL3_Config+0x12c>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6892      	ldr	r2, [r2, #8]
 8004e2a:	3a01      	subs	r2, #1
 8004e2c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	68d2      	ldr	r2, [r2, #12]
 8004e34:	3a01      	subs	r2, #1
 8004e36:	0252      	lsls	r2, r2, #9
 8004e38:	b292      	uxth	r2, r2
 8004e3a:	4311      	orrs	r1, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6912      	ldr	r2, [r2, #16]
 8004e40:	3a01      	subs	r2, #1
 8004e42:	0412      	lsls	r2, r2, #16
 8004e44:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004e48:	4311      	orrs	r1, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6952      	ldr	r2, [r2, #20]
 8004e4e:	3a01      	subs	r2, #1
 8004e50:	0612      	lsls	r2, r2, #24
 8004e52:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004e56:	430a      	orrs	r2, r1
 8004e58:	4924      	ldr	r1, [pc, #144]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004e5e:	4b23      	ldr	r3, [pc, #140]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e62:	f023 020c 	bic.w	r2, r3, #12
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	4920      	ldr	r1, [pc, #128]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004e70:	4b1e      	ldr	r3, [pc, #120]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004e72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	491c      	ldr	r1, [pc, #112]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e82:	4a1a      	ldr	r2, [pc, #104]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004e84:	f023 0310 	bic.w	r3, r3, #16
 8004e88:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e8a:	4b18      	ldr	r3, [pc, #96]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e92:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	69d2      	ldr	r2, [r2, #28]
 8004e9a:	00d2      	lsls	r2, r2, #3
 8004e9c:	4913      	ldr	r1, [pc, #76]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004ea2:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	4a11      	ldr	r2, [pc, #68]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004ea8:	f043 0310 	orr.w	r3, r3, #16
 8004eac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004eae:	4b0f      	ldr	r3, [pc, #60]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004eba:	f7fc fb6b 	bl	8001594 <HAL_GetTick>
 8004ebe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ec0:	e008      	b.n	8004ed4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ec2:	f7fc fb67 	bl	8001594 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e006      	b.n	8004ee2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <RCCEx_PLL3_Config+0x128>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	46020c00 	.word	0x46020c00
 8004ef0:	80800000 	.word	0x80800000

08004ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e049      	b.n	8004f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fb fe94 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	4610      	mov	r0, r2
 8004f34:	f000 fbfe 	bl	8005734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e049      	b.n	8005048 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f841 	bl	8005050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f000 fba7 	bl	8005734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <HAL_TIM_PWM_Start+0x24>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e03c      	b.n	8005102 <HAL_TIM_PWM_Start+0x9e>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b04      	cmp	r3, #4
 800508c:	d109      	bne.n	80050a2 <HAL_TIM_PWM_Start+0x3e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b01      	cmp	r3, #1
 8005098:	bf14      	ite	ne
 800509a:	2301      	movne	r3, #1
 800509c:	2300      	moveq	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	e02f      	b.n	8005102 <HAL_TIM_PWM_Start+0x9e>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d109      	bne.n	80050bc <HAL_TIM_PWM_Start+0x58>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	bf14      	ite	ne
 80050b4:	2301      	movne	r3, #1
 80050b6:	2300      	moveq	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	e022      	b.n	8005102 <HAL_TIM_PWM_Start+0x9e>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b0c      	cmp	r3, #12
 80050c0:	d109      	bne.n	80050d6 <HAL_TIM_PWM_Start+0x72>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	bf14      	ite	ne
 80050ce:	2301      	movne	r3, #1
 80050d0:	2300      	moveq	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	e015      	b.n	8005102 <HAL_TIM_PWM_Start+0x9e>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d109      	bne.n	80050f0 <HAL_TIM_PWM_Start+0x8c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	bf14      	ite	ne
 80050e8:	2301      	movne	r3, #1
 80050ea:	2300      	moveq	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	e008      	b.n	8005102 <HAL_TIM_PWM_Start+0x9e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	bf14      	ite	ne
 80050fc:	2301      	movne	r3, #1
 80050fe:	2300      	moveq	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0d8      	b.n	80052bc <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <HAL_TIM_PWM_Start+0xb6>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005118:	e023      	b.n	8005162 <HAL_TIM_PWM_Start+0xfe>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b04      	cmp	r3, #4
 800511e:	d104      	bne.n	800512a <HAL_TIM_PWM_Start+0xc6>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005128:	e01b      	b.n	8005162 <HAL_TIM_PWM_Start+0xfe>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d104      	bne.n	800513a <HAL_TIM_PWM_Start+0xd6>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005138:	e013      	b.n	8005162 <HAL_TIM_PWM_Start+0xfe>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b0c      	cmp	r3, #12
 800513e:	d104      	bne.n	800514a <HAL_TIM_PWM_Start+0xe6>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005148:	e00b      	b.n	8005162 <HAL_TIM_PWM_Start+0xfe>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b10      	cmp	r3, #16
 800514e:	d104      	bne.n	800515a <HAL_TIM_PWM_Start+0xf6>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005158:	e003      	b.n	8005162 <HAL_TIM_PWM_Start+0xfe>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2202      	movs	r2, #2
 800515e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2201      	movs	r2, #1
 8005168:	6839      	ldr	r1, [r7, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f001 f854 	bl	8006218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a53      	ldr	r2, [pc, #332]	@ (80052c4 <HAL_TIM_PWM_Start+0x260>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d02c      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x170>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a52      	ldr	r2, [pc, #328]	@ (80052c8 <HAL_TIM_PWM_Start+0x264>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d027      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x170>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a50      	ldr	r2, [pc, #320]	@ (80052cc <HAL_TIM_PWM_Start+0x268>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x170>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a4f      	ldr	r2, [pc, #316]	@ (80052d0 <HAL_TIM_PWM_Start+0x26c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d01d      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x170>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a4d      	ldr	r2, [pc, #308]	@ (80052d4 <HAL_TIM_PWM_Start+0x270>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x170>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a4c      	ldr	r2, [pc, #304]	@ (80052d8 <HAL_TIM_PWM_Start+0x274>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x170>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a4a      	ldr	r2, [pc, #296]	@ (80052dc <HAL_TIM_PWM_Start+0x278>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x170>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a49      	ldr	r2, [pc, #292]	@ (80052e0 <HAL_TIM_PWM_Start+0x27c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x170>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a47      	ldr	r2, [pc, #284]	@ (80052e4 <HAL_TIM_PWM_Start+0x280>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x170>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a46      	ldr	r2, [pc, #280]	@ (80052e8 <HAL_TIM_PWM_Start+0x284>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d101      	bne.n	80051d8 <HAL_TIM_PWM_Start+0x174>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <HAL_TIM_PWM_Start+0x176>
 80051d8:	2300      	movs	r3, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d007      	beq.n	80051ee <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a34      	ldr	r2, [pc, #208]	@ (80052c4 <HAL_TIM_PWM_Start+0x260>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d040      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a32      	ldr	r2, [pc, #200]	@ (80052c8 <HAL_TIM_PWM_Start+0x264>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d03b      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800520a:	d036      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005214:	d031      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a34      	ldr	r2, [pc, #208]	@ (80052ec <HAL_TIM_PWM_Start+0x288>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d02c      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a32      	ldr	r2, [pc, #200]	@ (80052f0 <HAL_TIM_PWM_Start+0x28c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d027      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a31      	ldr	r2, [pc, #196]	@ (80052f4 <HAL_TIM_PWM_Start+0x290>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d022      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a2f      	ldr	r2, [pc, #188]	@ (80052f8 <HAL_TIM_PWM_Start+0x294>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01d      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2e      	ldr	r2, [pc, #184]	@ (80052fc <HAL_TIM_PWM_Start+0x298>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d018      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2c      	ldr	r2, [pc, #176]	@ (8005300 <HAL_TIM_PWM_Start+0x29c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1d      	ldr	r2, [pc, #116]	@ (80052cc <HAL_TIM_PWM_Start+0x268>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00e      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1b      	ldr	r2, [pc, #108]	@ (80052d0 <HAL_TIM_PWM_Start+0x26c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d009      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1a      	ldr	r2, [pc, #104]	@ (80052d4 <HAL_TIM_PWM_Start+0x270>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <HAL_TIM_PWM_Start+0x216>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a18      	ldr	r2, [pc, #96]	@ (80052d8 <HAL_TIM_PWM_Start+0x274>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d115      	bne.n	80052a6 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	4b20      	ldr	r3, [pc, #128]	@ (8005304 <HAL_TIM_PWM_Start+0x2a0>)
 8005282:	4013      	ands	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b06      	cmp	r3, #6
 800528a:	d015      	beq.n	80052b8 <HAL_TIM_PWM_Start+0x254>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005292:	d011      	beq.n	80052b8 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a4:	e008      	b.n	80052b8 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e000      	b.n	80052ba <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	50012c00 	.word	0x50012c00
 80052cc:	40013400 	.word	0x40013400
 80052d0:	50013400 	.word	0x50013400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	50014000 	.word	0x50014000
 80052dc:	40014400 	.word	0x40014400
 80052e0:	50014400 	.word	0x50014400
 80052e4:	40014800 	.word	0x40014800
 80052e8:	50014800 	.word	0x50014800
 80052ec:	40000400 	.word	0x40000400
 80052f0:	50000400 	.word	0x50000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	50000800 	.word	0x50000800
 80052fc:	40000c00 	.word	0x40000c00
 8005300:	50000c00 	.word	0x50000c00
 8005304:	00010007 	.word	0x00010007

08005308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005322:	2302      	movs	r3, #2
 8005324:	e0ff      	b.n	8005526 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b14      	cmp	r3, #20
 8005332:	f200 80f0 	bhi.w	8005516 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005336:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005391 	.word	0x08005391
 8005340:	08005517 	.word	0x08005517
 8005344:	08005517 	.word	0x08005517
 8005348:	08005517 	.word	0x08005517
 800534c:	080053d1 	.word	0x080053d1
 8005350:	08005517 	.word	0x08005517
 8005354:	08005517 	.word	0x08005517
 8005358:	08005517 	.word	0x08005517
 800535c:	08005413 	.word	0x08005413
 8005360:	08005517 	.word	0x08005517
 8005364:	08005517 	.word	0x08005517
 8005368:	08005517 	.word	0x08005517
 800536c:	08005453 	.word	0x08005453
 8005370:	08005517 	.word	0x08005517
 8005374:	08005517 	.word	0x08005517
 8005378:	08005517 	.word	0x08005517
 800537c:	08005495 	.word	0x08005495
 8005380:	08005517 	.word	0x08005517
 8005384:	08005517 	.word	0x08005517
 8005388:	08005517 	.word	0x08005517
 800538c:	080054d5 	.word	0x080054d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 facc 	bl	8005934 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0208 	orr.w	r2, r2, #8
 80053aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0204 	bic.w	r2, r2, #4
 80053ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6999      	ldr	r1, [r3, #24]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	619a      	str	r2, [r3, #24]
      break;
 80053ce:	e0a5      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fb6e 	bl	8005ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	021a      	lsls	r2, r3, #8
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	619a      	str	r2, [r3, #24]
      break;
 8005410:	e084      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fbfd 	bl	8005c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0208 	orr.w	r2, r2, #8
 800542c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0204 	bic.w	r2, r2, #4
 800543c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69d9      	ldr	r1, [r3, #28]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	61da      	str	r2, [r3, #28]
      break;
 8005450:	e064      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fc8b 	bl	8005d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800546c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	021a      	lsls	r2, r3, #8
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	61da      	str	r2, [r3, #28]
      break;
 8005492:	e043      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fd1a 	bl	8005ed4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0208 	orr.w	r2, r2, #8
 80054ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0204 	bic.w	r2, r2, #4
 80054be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80054d2:	e023      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fd7c 	bl	8005fd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	021a      	lsls	r2, r3, #8
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005514:	e002      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
      break;
 800551a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005524:	7dfb      	ldrb	r3, [r7, #23]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop

08005530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIM_ConfigClockSource+0x1c>
 8005548:	2302      	movs	r3, #2
 800554a:	e0e6      	b.n	800571a <HAL_TIM_ConfigClockSource+0x1ea>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800556a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800556e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a67      	ldr	r2, [pc, #412]	@ (8005724 <HAL_TIM_ConfigClockSource+0x1f4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	f000 80b1 	beq.w	80056ee <HAL_TIM_ConfigClockSource+0x1be>
 800558c:	4a65      	ldr	r2, [pc, #404]	@ (8005724 <HAL_TIM_ConfigClockSource+0x1f4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	f200 80b6 	bhi.w	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 8005594:	4a64      	ldr	r2, [pc, #400]	@ (8005728 <HAL_TIM_ConfigClockSource+0x1f8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	f000 80a9 	beq.w	80056ee <HAL_TIM_ConfigClockSource+0x1be>
 800559c:	4a62      	ldr	r2, [pc, #392]	@ (8005728 <HAL_TIM_ConfigClockSource+0x1f8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	f200 80ae 	bhi.w	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 80055a4:	4a61      	ldr	r2, [pc, #388]	@ (800572c <HAL_TIM_ConfigClockSource+0x1fc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	f000 80a1 	beq.w	80056ee <HAL_TIM_ConfigClockSource+0x1be>
 80055ac:	4a5f      	ldr	r2, [pc, #380]	@ (800572c <HAL_TIM_ConfigClockSource+0x1fc>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	f200 80a6 	bhi.w	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 80055b4:	4a5e      	ldr	r2, [pc, #376]	@ (8005730 <HAL_TIM_ConfigClockSource+0x200>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	f000 8099 	beq.w	80056ee <HAL_TIM_ConfigClockSource+0x1be>
 80055bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005730 <HAL_TIM_ConfigClockSource+0x200>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	f200 809e 	bhi.w	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 80055c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055c8:	f000 8091 	beq.w	80056ee <HAL_TIM_ConfigClockSource+0x1be>
 80055cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055d0:	f200 8096 	bhi.w	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 80055d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055d8:	f000 8089 	beq.w	80056ee <HAL_TIM_ConfigClockSource+0x1be>
 80055dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055e0:	f200 808e 	bhi.w	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 80055e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e8:	d03e      	beq.n	8005668 <HAL_TIM_ConfigClockSource+0x138>
 80055ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ee:	f200 8087 	bhi.w	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f6:	f000 8086 	beq.w	8005706 <HAL_TIM_ConfigClockSource+0x1d6>
 80055fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055fe:	d87f      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 8005600:	2b70      	cmp	r3, #112	@ 0x70
 8005602:	d01a      	beq.n	800563a <HAL_TIM_ConfigClockSource+0x10a>
 8005604:	2b70      	cmp	r3, #112	@ 0x70
 8005606:	d87b      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 8005608:	2b60      	cmp	r3, #96	@ 0x60
 800560a:	d050      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x17e>
 800560c:	2b60      	cmp	r3, #96	@ 0x60
 800560e:	d877      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 8005610:	2b50      	cmp	r3, #80	@ 0x50
 8005612:	d03c      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x15e>
 8005614:	2b50      	cmp	r3, #80	@ 0x50
 8005616:	d873      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 8005618:	2b40      	cmp	r3, #64	@ 0x40
 800561a:	d058      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x19e>
 800561c:	2b40      	cmp	r3, #64	@ 0x40
 800561e:	d86f      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 8005620:	2b30      	cmp	r3, #48	@ 0x30
 8005622:	d064      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x1be>
 8005624:	2b30      	cmp	r3, #48	@ 0x30
 8005626:	d86b      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 8005628:	2b20      	cmp	r3, #32
 800562a:	d060      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x1be>
 800562c:	2b20      	cmp	r3, #32
 800562e:	d867      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d05c      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x1be>
 8005634:	2b10      	cmp	r3, #16
 8005636:	d05a      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x1be>
 8005638:	e062      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800564a:	f000 fdc5 	bl	80061d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800565c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	609a      	str	r2, [r3, #8]
      break;
 8005666:	e04f      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005678:	f000 fdae 	bl	80061d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800568a:	609a      	str	r2, [r3, #8]
      break;
 800568c:	e03c      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800569a:	461a      	mov	r2, r3
 800569c:	f000 fd20 	bl	80060e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2150      	movs	r1, #80	@ 0x50
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fd79 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 80056ac:	e02c      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ba:	461a      	mov	r2, r3
 80056bc:	f000 fd3f 	bl	800613e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2160      	movs	r1, #96	@ 0x60
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fd69 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 80056cc:	e01c      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056da:	461a      	mov	r2, r3
 80056dc:	f000 fd00 	bl	80060e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2140      	movs	r1, #64	@ 0x40
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fd59 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 80056ec:	e00c      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f000 fd50 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 80056fe:	e003      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
      break;
 8005704:	e000      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8005706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	00100070 	.word	0x00100070
 8005728:	00100040 	.word	0x00100040
 800572c:	00100030 	.word	0x00100030
 8005730:	00100020 	.word	0x00100020

08005734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a6b      	ldr	r2, [pc, #428]	@ (80058f4 <TIM_Base_SetConfig+0x1c0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d02b      	beq.n	80057a4 <TIM_Base_SetConfig+0x70>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a6a      	ldr	r2, [pc, #424]	@ (80058f8 <TIM_Base_SetConfig+0x1c4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d027      	beq.n	80057a4 <TIM_Base_SetConfig+0x70>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800575a:	d023      	beq.n	80057a4 <TIM_Base_SetConfig+0x70>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005762:	d01f      	beq.n	80057a4 <TIM_Base_SetConfig+0x70>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a65      	ldr	r2, [pc, #404]	@ (80058fc <TIM_Base_SetConfig+0x1c8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d01b      	beq.n	80057a4 <TIM_Base_SetConfig+0x70>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a64      	ldr	r2, [pc, #400]	@ (8005900 <TIM_Base_SetConfig+0x1cc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d017      	beq.n	80057a4 <TIM_Base_SetConfig+0x70>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a63      	ldr	r2, [pc, #396]	@ (8005904 <TIM_Base_SetConfig+0x1d0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <TIM_Base_SetConfig+0x70>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a62      	ldr	r2, [pc, #392]	@ (8005908 <TIM_Base_SetConfig+0x1d4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00f      	beq.n	80057a4 <TIM_Base_SetConfig+0x70>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a61      	ldr	r2, [pc, #388]	@ (800590c <TIM_Base_SetConfig+0x1d8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00b      	beq.n	80057a4 <TIM_Base_SetConfig+0x70>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a60      	ldr	r2, [pc, #384]	@ (8005910 <TIM_Base_SetConfig+0x1dc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d007      	beq.n	80057a4 <TIM_Base_SetConfig+0x70>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a5f      	ldr	r2, [pc, #380]	@ (8005914 <TIM_Base_SetConfig+0x1e0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_Base_SetConfig+0x70>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a5e      	ldr	r2, [pc, #376]	@ (8005918 <TIM_Base_SetConfig+0x1e4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d108      	bne.n	80057b6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a4e      	ldr	r2, [pc, #312]	@ (80058f4 <TIM_Base_SetConfig+0x1c0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d043      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a4d      	ldr	r2, [pc, #308]	@ (80058f8 <TIM_Base_SetConfig+0x1c4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d03f      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057cc:	d03b      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057d4:	d037      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a48      	ldr	r2, [pc, #288]	@ (80058fc <TIM_Base_SetConfig+0x1c8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d033      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a47      	ldr	r2, [pc, #284]	@ (8005900 <TIM_Base_SetConfig+0x1cc>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d02f      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a46      	ldr	r2, [pc, #280]	@ (8005904 <TIM_Base_SetConfig+0x1d0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d02b      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a45      	ldr	r2, [pc, #276]	@ (8005908 <TIM_Base_SetConfig+0x1d4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d027      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a44      	ldr	r2, [pc, #272]	@ (800590c <TIM_Base_SetConfig+0x1d8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d023      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a43      	ldr	r2, [pc, #268]	@ (8005910 <TIM_Base_SetConfig+0x1dc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d01f      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a42      	ldr	r2, [pc, #264]	@ (8005914 <TIM_Base_SetConfig+0x1e0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d01b      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a41      	ldr	r2, [pc, #260]	@ (8005918 <TIM_Base_SetConfig+0x1e4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d017      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a40      	ldr	r2, [pc, #256]	@ (800591c <TIM_Base_SetConfig+0x1e8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a3f      	ldr	r2, [pc, #252]	@ (8005920 <TIM_Base_SetConfig+0x1ec>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00f      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a3e      	ldr	r2, [pc, #248]	@ (8005924 <TIM_Base_SetConfig+0x1f0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00b      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a3d      	ldr	r2, [pc, #244]	@ (8005928 <TIM_Base_SetConfig+0x1f4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a3c      	ldr	r2, [pc, #240]	@ (800592c <TIM_Base_SetConfig+0x1f8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d003      	beq.n	8005846 <TIM_Base_SetConfig+0x112>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a3b      	ldr	r2, [pc, #236]	@ (8005930 <TIM_Base_SetConfig+0x1fc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d108      	bne.n	8005858 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800584c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a1e      	ldr	r2, [pc, #120]	@ (80058f4 <TIM_Base_SetConfig+0x1c0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d023      	beq.n	80058c6 <TIM_Base_SetConfig+0x192>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a1d      	ldr	r2, [pc, #116]	@ (80058f8 <TIM_Base_SetConfig+0x1c4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01f      	beq.n	80058c6 <TIM_Base_SetConfig+0x192>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a22      	ldr	r2, [pc, #136]	@ (8005914 <TIM_Base_SetConfig+0x1e0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01b      	beq.n	80058c6 <TIM_Base_SetConfig+0x192>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a21      	ldr	r2, [pc, #132]	@ (8005918 <TIM_Base_SetConfig+0x1e4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d017      	beq.n	80058c6 <TIM_Base_SetConfig+0x192>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a20      	ldr	r2, [pc, #128]	@ (800591c <TIM_Base_SetConfig+0x1e8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <TIM_Base_SetConfig+0x192>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005920 <TIM_Base_SetConfig+0x1ec>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00f      	beq.n	80058c6 <TIM_Base_SetConfig+0x192>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005924 <TIM_Base_SetConfig+0x1f0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00b      	beq.n	80058c6 <TIM_Base_SetConfig+0x192>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005928 <TIM_Base_SetConfig+0x1f4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d007      	beq.n	80058c6 <TIM_Base_SetConfig+0x192>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1c      	ldr	r2, [pc, #112]	@ (800592c <TIM_Base_SetConfig+0x1f8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d003      	beq.n	80058c6 <TIM_Base_SetConfig+0x192>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005930 <TIM_Base_SetConfig+0x1fc>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d103      	bne.n	80058ce <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f043 0204 	orr.w	r2, r3, #4
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	601a      	str	r2, [r3, #0]
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	50012c00 	.word	0x50012c00
 80058fc:	40000400 	.word	0x40000400
 8005900:	50000400 	.word	0x50000400
 8005904:	40000800 	.word	0x40000800
 8005908:	50000800 	.word	0x50000800
 800590c:	40000c00 	.word	0x40000c00
 8005910:	50000c00 	.word	0x50000c00
 8005914:	40013400 	.word	0x40013400
 8005918:	50013400 	.word	0x50013400
 800591c:	40014000 	.word	0x40014000
 8005920:	50014000 	.word	0x50014000
 8005924:	40014400 	.word	0x40014400
 8005928:	50014400 	.word	0x50014400
 800592c:	40014800 	.word	0x40014800
 8005930:	50014800 	.word	0x50014800

08005934 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	f023 0201 	bic.w	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0303 	bic.w	r3, r3, #3
 800596e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 0302 	bic.w	r3, r3, #2
 8005980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a40      	ldr	r2, [pc, #256]	@ (8005a90 <TIM_OC1_SetConfig+0x15c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d023      	beq.n	80059dc <TIM_OC1_SetConfig+0xa8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a3f      	ldr	r2, [pc, #252]	@ (8005a94 <TIM_OC1_SetConfig+0x160>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d01f      	beq.n	80059dc <TIM_OC1_SetConfig+0xa8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a98 <TIM_OC1_SetConfig+0x164>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d01b      	beq.n	80059dc <TIM_OC1_SetConfig+0xa8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a3d      	ldr	r2, [pc, #244]	@ (8005a9c <TIM_OC1_SetConfig+0x168>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d017      	beq.n	80059dc <TIM_OC1_SetConfig+0xa8>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a3c      	ldr	r2, [pc, #240]	@ (8005aa0 <TIM_OC1_SetConfig+0x16c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d013      	beq.n	80059dc <TIM_OC1_SetConfig+0xa8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a3b      	ldr	r2, [pc, #236]	@ (8005aa4 <TIM_OC1_SetConfig+0x170>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00f      	beq.n	80059dc <TIM_OC1_SetConfig+0xa8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a3a      	ldr	r2, [pc, #232]	@ (8005aa8 <TIM_OC1_SetConfig+0x174>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00b      	beq.n	80059dc <TIM_OC1_SetConfig+0xa8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a39      	ldr	r2, [pc, #228]	@ (8005aac <TIM_OC1_SetConfig+0x178>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d007      	beq.n	80059dc <TIM_OC1_SetConfig+0xa8>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a38      	ldr	r2, [pc, #224]	@ (8005ab0 <TIM_OC1_SetConfig+0x17c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d003      	beq.n	80059dc <TIM_OC1_SetConfig+0xa8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a37      	ldr	r2, [pc, #220]	@ (8005ab4 <TIM_OC1_SetConfig+0x180>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d10c      	bne.n	80059f6 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f023 0308 	bic.w	r3, r3, #8
 80059e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f023 0304 	bic.w	r3, r3, #4
 80059f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a25      	ldr	r2, [pc, #148]	@ (8005a90 <TIM_OC1_SetConfig+0x15c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d023      	beq.n	8005a46 <TIM_OC1_SetConfig+0x112>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a24      	ldr	r2, [pc, #144]	@ (8005a94 <TIM_OC1_SetConfig+0x160>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01f      	beq.n	8005a46 <TIM_OC1_SetConfig+0x112>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a23      	ldr	r2, [pc, #140]	@ (8005a98 <TIM_OC1_SetConfig+0x164>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01b      	beq.n	8005a46 <TIM_OC1_SetConfig+0x112>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a22      	ldr	r2, [pc, #136]	@ (8005a9c <TIM_OC1_SetConfig+0x168>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d017      	beq.n	8005a46 <TIM_OC1_SetConfig+0x112>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a21      	ldr	r2, [pc, #132]	@ (8005aa0 <TIM_OC1_SetConfig+0x16c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d013      	beq.n	8005a46 <TIM_OC1_SetConfig+0x112>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a20      	ldr	r2, [pc, #128]	@ (8005aa4 <TIM_OC1_SetConfig+0x170>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00f      	beq.n	8005a46 <TIM_OC1_SetConfig+0x112>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa8 <TIM_OC1_SetConfig+0x174>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00b      	beq.n	8005a46 <TIM_OC1_SetConfig+0x112>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1e      	ldr	r2, [pc, #120]	@ (8005aac <TIM_OC1_SetConfig+0x178>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <TIM_OC1_SetConfig+0x112>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab0 <TIM_OC1_SetConfig+0x17c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <TIM_OC1_SetConfig+0x112>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab4 <TIM_OC1_SetConfig+0x180>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d111      	bne.n	8005a6a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	621a      	str	r2, [r3, #32]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	50012c00 	.word	0x50012c00
 8005a98:	40013400 	.word	0x40013400
 8005a9c:	50013400 	.word	0x50013400
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	50014000 	.word	0x50014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	50014400 	.word	0x50014400
 8005ab0:	40014800 	.word	0x40014800
 8005ab4:	50014800 	.word	0x50014800

08005ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f023 0210 	bic.w	r2, r3, #16
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	021b      	lsls	r3, r3, #8
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0320 	bic.w	r3, r3, #32
 8005b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a36      	ldr	r2, [pc, #216]	@ (8005bf0 <TIM_OC2_SetConfig+0x138>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00b      	beq.n	8005b34 <TIM_OC2_SetConfig+0x7c>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a35      	ldr	r2, [pc, #212]	@ (8005bf4 <TIM_OC2_SetConfig+0x13c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_OC2_SetConfig+0x7c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a34      	ldr	r2, [pc, #208]	@ (8005bf8 <TIM_OC2_SetConfig+0x140>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_OC2_SetConfig+0x7c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a33      	ldr	r2, [pc, #204]	@ (8005bfc <TIM_OC2_SetConfig+0x144>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d10d      	bne.n	8005b50 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a27      	ldr	r2, [pc, #156]	@ (8005bf0 <TIM_OC2_SetConfig+0x138>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d023      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xe8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a26      	ldr	r2, [pc, #152]	@ (8005bf4 <TIM_OC2_SetConfig+0x13c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d01f      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xe8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a25      	ldr	r2, [pc, #148]	@ (8005bf8 <TIM_OC2_SetConfig+0x140>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d01b      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xe8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a24      	ldr	r2, [pc, #144]	@ (8005bfc <TIM_OC2_SetConfig+0x144>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d017      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xe8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a23      	ldr	r2, [pc, #140]	@ (8005c00 <TIM_OC2_SetConfig+0x148>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d013      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xe8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a22      	ldr	r2, [pc, #136]	@ (8005c04 <TIM_OC2_SetConfig+0x14c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00f      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xe8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a21      	ldr	r2, [pc, #132]	@ (8005c08 <TIM_OC2_SetConfig+0x150>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00b      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xe8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a20      	ldr	r2, [pc, #128]	@ (8005c0c <TIM_OC2_SetConfig+0x154>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d007      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xe8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a1f      	ldr	r2, [pc, #124]	@ (8005c10 <TIM_OC2_SetConfig+0x158>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xe8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c14 <TIM_OC2_SetConfig+0x15c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d113      	bne.n	8005bc8 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	50012c00 	.word	0x50012c00
 8005bf8:	40013400 	.word	0x40013400
 8005bfc:	50013400 	.word	0x50013400
 8005c00:	40014000 	.word	0x40014000
 8005c04:	50014000 	.word	0x50014000
 8005c08:	40014400 	.word	0x40014400
 8005c0c:	50014400 	.word	0x50014400
 8005c10:	40014800 	.word	0x40014800
 8005c14:	50014800 	.word	0x50014800

08005c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a35      	ldr	r2, [pc, #212]	@ (8005d4c <TIM_OC3_SetConfig+0x134>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00b      	beq.n	8005c92 <TIM_OC3_SetConfig+0x7a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a34      	ldr	r2, [pc, #208]	@ (8005d50 <TIM_OC3_SetConfig+0x138>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d007      	beq.n	8005c92 <TIM_OC3_SetConfig+0x7a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a33      	ldr	r2, [pc, #204]	@ (8005d54 <TIM_OC3_SetConfig+0x13c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_OC3_SetConfig+0x7a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a32      	ldr	r2, [pc, #200]	@ (8005d58 <TIM_OC3_SetConfig+0x140>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d10d      	bne.n	8005cae <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a26      	ldr	r2, [pc, #152]	@ (8005d4c <TIM_OC3_SetConfig+0x134>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d023      	beq.n	8005cfe <TIM_OC3_SetConfig+0xe6>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a25      	ldr	r2, [pc, #148]	@ (8005d50 <TIM_OC3_SetConfig+0x138>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01f      	beq.n	8005cfe <TIM_OC3_SetConfig+0xe6>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a24      	ldr	r2, [pc, #144]	@ (8005d54 <TIM_OC3_SetConfig+0x13c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d01b      	beq.n	8005cfe <TIM_OC3_SetConfig+0xe6>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a23      	ldr	r2, [pc, #140]	@ (8005d58 <TIM_OC3_SetConfig+0x140>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d017      	beq.n	8005cfe <TIM_OC3_SetConfig+0xe6>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a22      	ldr	r2, [pc, #136]	@ (8005d5c <TIM_OC3_SetConfig+0x144>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <TIM_OC3_SetConfig+0xe6>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a21      	ldr	r2, [pc, #132]	@ (8005d60 <TIM_OC3_SetConfig+0x148>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00f      	beq.n	8005cfe <TIM_OC3_SetConfig+0xe6>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a20      	ldr	r2, [pc, #128]	@ (8005d64 <TIM_OC3_SetConfig+0x14c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00b      	beq.n	8005cfe <TIM_OC3_SetConfig+0xe6>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8005d68 <TIM_OC3_SetConfig+0x150>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d007      	beq.n	8005cfe <TIM_OC3_SetConfig+0xe6>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d6c <TIM_OC3_SetConfig+0x154>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d003      	beq.n	8005cfe <TIM_OC3_SetConfig+0xe6>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d70 <TIM_OC3_SetConfig+0x158>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d113      	bne.n	8005d26 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	621a      	str	r2, [r3, #32]
}
 8005d40:	bf00      	nop
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	40012c00 	.word	0x40012c00
 8005d50:	50012c00 	.word	0x50012c00
 8005d54:	40013400 	.word	0x40013400
 8005d58:	50013400 	.word	0x50013400
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	50014000 	.word	0x50014000
 8005d64:	40014400 	.word	0x40014400
 8005d68:	50014400 	.word	0x50014400
 8005d6c:	40014800 	.word	0x40014800
 8005d70:	50014800 	.word	0x50014800

08005d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	031b      	lsls	r3, r3, #12
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a36      	ldr	r2, [pc, #216]	@ (8005eac <TIM_OC4_SetConfig+0x138>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00b      	beq.n	8005df0 <TIM_OC4_SetConfig+0x7c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a35      	ldr	r2, [pc, #212]	@ (8005eb0 <TIM_OC4_SetConfig+0x13c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d007      	beq.n	8005df0 <TIM_OC4_SetConfig+0x7c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a34      	ldr	r2, [pc, #208]	@ (8005eb4 <TIM_OC4_SetConfig+0x140>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_OC4_SetConfig+0x7c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a33      	ldr	r2, [pc, #204]	@ (8005eb8 <TIM_OC4_SetConfig+0x144>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10d      	bne.n	8005e0c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	031b      	lsls	r3, r3, #12
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a27      	ldr	r2, [pc, #156]	@ (8005eac <TIM_OC4_SetConfig+0x138>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d023      	beq.n	8005e5c <TIM_OC4_SetConfig+0xe8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a26      	ldr	r2, [pc, #152]	@ (8005eb0 <TIM_OC4_SetConfig+0x13c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d01f      	beq.n	8005e5c <TIM_OC4_SetConfig+0xe8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a25      	ldr	r2, [pc, #148]	@ (8005eb4 <TIM_OC4_SetConfig+0x140>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d01b      	beq.n	8005e5c <TIM_OC4_SetConfig+0xe8>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a24      	ldr	r2, [pc, #144]	@ (8005eb8 <TIM_OC4_SetConfig+0x144>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d017      	beq.n	8005e5c <TIM_OC4_SetConfig+0xe8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a23      	ldr	r2, [pc, #140]	@ (8005ebc <TIM_OC4_SetConfig+0x148>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d013      	beq.n	8005e5c <TIM_OC4_SetConfig+0xe8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a22      	ldr	r2, [pc, #136]	@ (8005ec0 <TIM_OC4_SetConfig+0x14c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00f      	beq.n	8005e5c <TIM_OC4_SetConfig+0xe8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a21      	ldr	r2, [pc, #132]	@ (8005ec4 <TIM_OC4_SetConfig+0x150>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00b      	beq.n	8005e5c <TIM_OC4_SetConfig+0xe8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a20      	ldr	r2, [pc, #128]	@ (8005ec8 <TIM_OC4_SetConfig+0x154>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d007      	beq.n	8005e5c <TIM_OC4_SetConfig+0xe8>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ecc <TIM_OC4_SetConfig+0x158>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_OC4_SetConfig+0xe8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed0 <TIM_OC4_SetConfig+0x15c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d113      	bne.n	8005e84 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e62:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e6a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	019b      	lsls	r3, r3, #6
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	019b      	lsls	r3, r3, #6
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40012c00 	.word	0x40012c00
 8005eb0:	50012c00 	.word	0x50012c00
 8005eb4:	40013400 	.word	0x40013400
 8005eb8:	50013400 	.word	0x50013400
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	50014000 	.word	0x50014000
 8005ec4:	40014400 	.word	0x40014400
 8005ec8:	50014400 	.word	0x50014400
 8005ecc:	40014800 	.word	0x40014800
 8005ed0:	50014800 	.word	0x50014800

08005ed4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	041b      	lsls	r3, r3, #16
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a21      	ldr	r2, [pc, #132]	@ (8005fb0 <TIM_OC5_SetConfig+0xdc>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d023      	beq.n	8005f76 <TIM_OC5_SetConfig+0xa2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a20      	ldr	r2, [pc, #128]	@ (8005fb4 <TIM_OC5_SetConfig+0xe0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01f      	beq.n	8005f76 <TIM_OC5_SetConfig+0xa2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb8 <TIM_OC5_SetConfig+0xe4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01b      	beq.n	8005f76 <TIM_OC5_SetConfig+0xa2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a1e      	ldr	r2, [pc, #120]	@ (8005fbc <TIM_OC5_SetConfig+0xe8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d017      	beq.n	8005f76 <TIM_OC5_SetConfig+0xa2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc0 <TIM_OC5_SetConfig+0xec>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <TIM_OC5_SetConfig+0xa2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a1c      	ldr	r2, [pc, #112]	@ (8005fc4 <TIM_OC5_SetConfig+0xf0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00f      	beq.n	8005f76 <TIM_OC5_SetConfig+0xa2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a1b      	ldr	r2, [pc, #108]	@ (8005fc8 <TIM_OC5_SetConfig+0xf4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00b      	beq.n	8005f76 <TIM_OC5_SetConfig+0xa2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a1a      	ldr	r2, [pc, #104]	@ (8005fcc <TIM_OC5_SetConfig+0xf8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d007      	beq.n	8005f76 <TIM_OC5_SetConfig+0xa2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a19      	ldr	r2, [pc, #100]	@ (8005fd0 <TIM_OC5_SetConfig+0xfc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d003      	beq.n	8005f76 <TIM_OC5_SetConfig+0xa2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a18      	ldr	r2, [pc, #96]	@ (8005fd4 <TIM_OC5_SetConfig+0x100>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d109      	bne.n	8005f8a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	621a      	str	r2, [r3, #32]
}
 8005fa4:	bf00      	nop
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	50012c00 	.word	0x50012c00
 8005fb8:	40013400 	.word	0x40013400
 8005fbc:	50013400 	.word	0x50013400
 8005fc0:	40014000 	.word	0x40014000
 8005fc4:	50014000 	.word	0x50014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	50014400 	.word	0x50014400
 8005fd0:	40014800 	.word	0x40014800
 8005fd4:	50014800 	.word	0x50014800

08005fd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800600a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	021b      	lsls	r3, r3, #8
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800601e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	051b      	lsls	r3, r3, #20
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a22      	ldr	r2, [pc, #136]	@ (80060b8 <TIM_OC6_SetConfig+0xe0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d023      	beq.n	800607c <TIM_OC6_SetConfig+0xa4>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a21      	ldr	r2, [pc, #132]	@ (80060bc <TIM_OC6_SetConfig+0xe4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d01f      	beq.n	800607c <TIM_OC6_SetConfig+0xa4>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a20      	ldr	r2, [pc, #128]	@ (80060c0 <TIM_OC6_SetConfig+0xe8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d01b      	beq.n	800607c <TIM_OC6_SetConfig+0xa4>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a1f      	ldr	r2, [pc, #124]	@ (80060c4 <TIM_OC6_SetConfig+0xec>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d017      	beq.n	800607c <TIM_OC6_SetConfig+0xa4>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a1e      	ldr	r2, [pc, #120]	@ (80060c8 <TIM_OC6_SetConfig+0xf0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <TIM_OC6_SetConfig+0xa4>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a1d      	ldr	r2, [pc, #116]	@ (80060cc <TIM_OC6_SetConfig+0xf4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00f      	beq.n	800607c <TIM_OC6_SetConfig+0xa4>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a1c      	ldr	r2, [pc, #112]	@ (80060d0 <TIM_OC6_SetConfig+0xf8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00b      	beq.n	800607c <TIM_OC6_SetConfig+0xa4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <TIM_OC6_SetConfig+0xfc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d007      	beq.n	800607c <TIM_OC6_SetConfig+0xa4>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a1a      	ldr	r2, [pc, #104]	@ (80060d8 <TIM_OC6_SetConfig+0x100>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_OC6_SetConfig+0xa4>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a19      	ldr	r2, [pc, #100]	@ (80060dc <TIM_OC6_SetConfig+0x104>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d109      	bne.n	8006090 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006082:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	029b      	lsls	r3, r3, #10
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	621a      	str	r2, [r3, #32]
}
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40012c00 	.word	0x40012c00
 80060bc:	50012c00 	.word	0x50012c00
 80060c0:	40013400 	.word	0x40013400
 80060c4:	50013400 	.word	0x50013400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	50014000 	.word	0x50014000
 80060d0:	40014400 	.word	0x40014400
 80060d4:	50014400 	.word	0x50014400
 80060d8:	40014800 	.word	0x40014800
 80060dc:	50014800 	.word	0x50014800

080060e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800610a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f023 030a 	bic.w	r3, r3, #10
 800611c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613e:	b480      	push	{r7}
 8006140:	b087      	sub	sp, #28
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f023 0210 	bic.w	r2, r3, #16
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	031b      	lsls	r3, r3, #12
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800617a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80061b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	f043 0307 	orr.w	r3, r3, #7
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	609a      	str	r2, [r3, #8]
}
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	021a      	lsls	r2, r3, #8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4313      	orrs	r3, r2
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2201      	movs	r2, #1
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1a      	ldr	r2, [r3, #32]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	43db      	mvns	r3, r3
 800623a:	401a      	ands	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1a      	ldr	r2, [r3, #32]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	fa01 f303 	lsl.w	r3, r1, r3
 8006250:	431a      	orrs	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006278:	2302      	movs	r3, #2
 800627a:	e097      	b.n	80063ac <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a45      	ldr	r2, [pc, #276]	@ (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00e      	beq.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a44      	ldr	r2, [pc, #272]	@ (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d009      	beq.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a42      	ldr	r2, [pc, #264]	@ (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d004      	beq.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a41      	ldr	r2, [pc, #260]	@ (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d108      	bne.n	80062d6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80062dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2f      	ldr	r2, [pc, #188]	@ (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d040      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a2e      	ldr	r2, [pc, #184]	@ (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d03b      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006310:	d036      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800631a:	d031      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a29      	ldr	r2, [pc, #164]	@ (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d02c      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a28      	ldr	r2, [pc, #160]	@ (80063cc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d027      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a26      	ldr	r2, [pc, #152]	@ (80063d0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d022      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a25      	ldr	r2, [pc, #148]	@ (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d01d      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a23      	ldr	r2, [pc, #140]	@ (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d018      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a22      	ldr	r2, [pc, #136]	@ (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d013      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a18      	ldr	r2, [pc, #96]	@ (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00e      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a17      	ldr	r2, [pc, #92]	@ (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d009      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1b      	ldr	r2, [pc, #108]	@ (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d004      	beq.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1a      	ldr	r2, [pc, #104]	@ (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d10c      	bne.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006386:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	4313      	orrs	r3, r2
 8006390:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	50012c00 	.word	0x50012c00
 80063c0:	40013400 	.word	0x40013400
 80063c4:	50013400 	.word	0x50013400
 80063c8:	40000400 	.word	0x40000400
 80063cc:	50000400 	.word	0x50000400
 80063d0:	40000800 	.word	0x40000800
 80063d4:	50000800 	.word	0x50000800
 80063d8:	40000c00 	.word	0x40000c00
 80063dc:	50000c00 	.word	0x50000c00
 80063e0:	40014000 	.word	0x40014000
 80063e4:	50014000 	.word	0x50014000

080063e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006400:	2302      	movs	r3, #2
 8006402:	e07d      	b.n	8006500 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	041b      	lsls	r3, r3, #16
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	4313      	orrs	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1e      	ldr	r2, [pc, #120]	@ (800650c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00e      	beq.n	80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1d      	ldr	r2, [pc, #116]	@ (8006510 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d009      	beq.n	80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006514 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006518 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d11c      	bne.n	80064ee <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064be:	051b      	lsls	r3, r3, #20
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	40012c00 	.word	0x40012c00
 8006510:	50012c00 	.word	0x50012c00
 8006514:	40013400 	.word	0x40013400
 8006518:	50013400 	.word	0x50013400

0800651c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800651c:	b084      	sub	sp, #16
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	f107 001c 	add.w	r0, r7, #28
 800652a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa6c 	bl	8006a18 <USB_CoreReset>
 8006540:	4603      	mov	r3, r0
 8006542:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006544:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006550:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	639a      	str	r2, [r3, #56]	@ 0x38
 8006558:	e005      	b.n	8006566 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800655e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006572:	b004      	add	sp, #16
 8006574:	4770      	bx	lr

08006576 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f023 0201 	bic.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d115      	bne.n	80065e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065c6:	200a      	movs	r0, #10
 80065c8:	f7fa fff0 	bl	80015ac <HAL_Delay>
      ms += 10U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	330a      	adds	r3, #10
 80065d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa12 	bl	80069fc <USB_GetMode>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d01e      	beq.n	800661c <USB_SetCurrentMode+0x84>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80065e2:	d9f0      	bls.n	80065c6 <USB_SetCurrentMode+0x2e>
 80065e4:	e01a      	b.n	800661c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d115      	bne.n	8006618 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065f8:	200a      	movs	r0, #10
 80065fa:	f7fa ffd7 	bl	80015ac <HAL_Delay>
      ms += 10U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	330a      	adds	r3, #10
 8006602:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f9f9 	bl	80069fc <USB_GetMode>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <USB_SetCurrentMode+0x84>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2bc7      	cmp	r3, #199	@ 0xc7
 8006614:	d9f0      	bls.n	80065f8 <USB_SetCurrentMode+0x60>
 8006616:	e001      	b.n	800661c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e005      	b.n	8006628 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006620:	d101      	bne.n	8006626 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e000      	b.n	8006628 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006630:	b084      	sub	sp, #16
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800663e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800664a:	2300      	movs	r3, #0
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	e009      	b.n	8006664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3340      	adds	r3, #64	@ 0x40
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	2200      	movs	r2, #0
 800665c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3301      	adds	r3, #1
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b0e      	cmp	r3, #14
 8006668:	d9f2      	bls.n	8006650 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800666a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800666e:	2b00      	cmp	r3, #0
 8006670:	d11c      	bne.n	80066ac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006680:	f043 0302 	orr.w	r3, r3, #2
 8006684:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	e005      	b.n	80066b8 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066be:	461a      	mov	r2, r3
 80066c0:	2300      	movs	r3, #0
 80066c2:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066c4:	2103      	movs	r1, #3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f95e 	bl	8006988 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066cc:	2110      	movs	r1, #16
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8fa 	bl	80068c8 <USB_FlushTxFifo>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f924 	bl	800692c <USB_FlushRxFifo>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f4:	461a      	mov	r2, r3
 80066f6:	2300      	movs	r3, #0
 80066f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006700:	461a      	mov	r2, r3
 8006702:	2300      	movs	r3, #0
 8006704:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800670c:	461a      	mov	r2, r3
 800670e:	2300      	movs	r3, #0
 8006710:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006712:	2300      	movs	r3, #0
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	e043      	b.n	80067a0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800672a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800672e:	d118      	bne.n	8006762 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006742:	461a      	mov	r2, r3
 8006744:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	e013      	b.n	8006774 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006758:	461a      	mov	r2, r3
 800675a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	e008      	b.n	8006774 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800676e:	461a      	mov	r2, r3
 8006770:	2300      	movs	r3, #0
 8006772:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006780:	461a      	mov	r2, r3
 8006782:	2300      	movs	r3, #0
 8006784:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006792:	461a      	mov	r2, r3
 8006794:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006798:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	3301      	adds	r3, #1
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067a4:	461a      	mov	r2, r3
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d3b5      	bcc.n	8006718 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ac:	2300      	movs	r3, #0
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	e043      	b.n	800683a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067c8:	d118      	bne.n	80067fc <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10a      	bne.n	80067e6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067dc:	461a      	mov	r2, r3
 80067de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	e013      	b.n	800680e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f2:	461a      	mov	r2, r3
 80067f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	e008      	b.n	800680e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006808:	461a      	mov	r2, r3
 800680a:	2300      	movs	r3, #0
 800680c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681a:	461a      	mov	r2, r3
 800681c:	2300      	movs	r3, #0
 800681e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800682c:	461a      	mov	r2, r3
 800682e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006832:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	3301      	adds	r3, #1
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800683e:	461a      	mov	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	4293      	cmp	r3, r2
 8006844:	d3b5      	bcc.n	80067b2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006858:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006866:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006868:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800686c:	2b00      	cmp	r3, #0
 800686e:	d105      	bne.n	800687c <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f043 0210 	orr.w	r2, r3, #16
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	4b10      	ldr	r3, [pc, #64]	@ (80068c4 <USB_DevInit+0x294>)
 8006882:	4313      	orrs	r3, r2
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006888:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f043 0208 	orr.w	r2, r3, #8
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800689c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d107      	bne.n	80068b4 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068ac:	f043 0304 	orr.w	r3, r3, #4
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068c0:	b004      	add	sp, #16
 80068c2:	4770      	bx	lr
 80068c4:	803c3800 	.word	0x803c3800

080068c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3301      	adds	r3, #1
 80068da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068e2:	d901      	bls.n	80068e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e01b      	b.n	8006920 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	daf2      	bge.n	80068d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	019b      	lsls	r3, r3, #6
 80068f8:	f043 0220 	orr.w	r2, r3, #32
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3301      	adds	r3, #1
 8006904:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800690c:	d901      	bls.n	8006912 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e006      	b.n	8006920 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b20      	cmp	r3, #32
 800691c:	d0f0      	beq.n	8006900 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3301      	adds	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006944:	d901      	bls.n	800694a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e018      	b.n	800697c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	daf2      	bge.n	8006938 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2210      	movs	r2, #16
 800695a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3301      	adds	r3, #1
 8006960:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006968:	d901      	bls.n	800696e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e006      	b.n	800697c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f003 0310 	and.w	r3, r3, #16
 8006976:	2b10      	cmp	r3, #16
 8006978:	d0f0      	beq.n	800695c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	68f9      	ldr	r1, [r7, #12]
 80069a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069a8:	4313      	orrs	r3, r2
 80069aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069d4:	f023 0303 	bic.w	r3, r3, #3
 80069d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069e8:	f043 0302 	orr.w	r3, r3, #2
 80069ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	f003 0301 	and.w	r3, r3, #1
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a30:	d901      	bls.n	8006a36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e01b      	b.n	8006a6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	daf2      	bge.n	8006a24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f043 0201 	orr.w	r2, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3301      	adds	r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a5a:	d901      	bls.n	8006a60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e006      	b.n	8006a6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d0f0      	beq.n	8006a4e <USB_CoreReset+0x36>

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <sbrk_aligned>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	4e0f      	ldr	r6, [pc, #60]	@ (8006abc <sbrk_aligned+0x40>)
 8006a80:	460c      	mov	r4, r1
 8006a82:	4605      	mov	r5, r0
 8006a84:	6831      	ldr	r1, [r6, #0]
 8006a86:	b911      	cbnz	r1, 8006a8e <sbrk_aligned+0x12>
 8006a88:	f000 faec 	bl	8007064 <_sbrk_r>
 8006a8c:	6030      	str	r0, [r6, #0]
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4628      	mov	r0, r5
 8006a92:	f000 fae7 	bl	8007064 <_sbrk_r>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	d103      	bne.n	8006aa2 <sbrk_aligned+0x26>
 8006a9a:	f04f 34ff 	mov.w	r4, #4294967295
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	bd70      	pop	{r4, r5, r6, pc}
 8006aa2:	1cc4      	adds	r4, r0, #3
 8006aa4:	f024 0403 	bic.w	r4, r4, #3
 8006aa8:	42a0      	cmp	r0, r4
 8006aaa:	d0f8      	beq.n	8006a9e <sbrk_aligned+0x22>
 8006aac:	1a21      	subs	r1, r4, r0
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 fad8 	bl	8007064 <_sbrk_r>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d1f2      	bne.n	8006a9e <sbrk_aligned+0x22>
 8006ab8:	e7ef      	b.n	8006a9a <sbrk_aligned+0x1e>
 8006aba:	bf00      	nop
 8006abc:	200006a8 	.word	0x200006a8

08006ac0 <_malloc_r>:
 8006ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac4:	1ccd      	adds	r5, r1, #3
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	f025 0503 	bic.w	r5, r5, #3
 8006acc:	3508      	adds	r5, #8
 8006ace:	2d0c      	cmp	r5, #12
 8006ad0:	bf38      	it	cc
 8006ad2:	250c      	movcc	r5, #12
 8006ad4:	2d00      	cmp	r5, #0
 8006ad6:	db01      	blt.n	8006adc <_malloc_r+0x1c>
 8006ad8:	42a9      	cmp	r1, r5
 8006ada:	d904      	bls.n	8006ae6 <_malloc_r+0x26>
 8006adc:	230c      	movs	r3, #12
 8006ade:	6033      	str	r3, [r6, #0]
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bbc <_malloc_r+0xfc>
 8006aea:	f000 f869 	bl	8006bc0 <__malloc_lock>
 8006aee:	f8d8 3000 	ldr.w	r3, [r8]
 8006af2:	461c      	mov	r4, r3
 8006af4:	bb44      	cbnz	r4, 8006b48 <_malloc_r+0x88>
 8006af6:	4629      	mov	r1, r5
 8006af8:	4630      	mov	r0, r6
 8006afa:	f7ff ffbf 	bl	8006a7c <sbrk_aligned>
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	4604      	mov	r4, r0
 8006b02:	d158      	bne.n	8006bb6 <_malloc_r+0xf6>
 8006b04:	f8d8 4000 	ldr.w	r4, [r8]
 8006b08:	4627      	mov	r7, r4
 8006b0a:	2f00      	cmp	r7, #0
 8006b0c:	d143      	bne.n	8006b96 <_malloc_r+0xd6>
 8006b0e:	2c00      	cmp	r4, #0
 8006b10:	d04b      	beq.n	8006baa <_malloc_r+0xea>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	4639      	mov	r1, r7
 8006b16:	4630      	mov	r0, r6
 8006b18:	eb04 0903 	add.w	r9, r4, r3
 8006b1c:	f000 faa2 	bl	8007064 <_sbrk_r>
 8006b20:	4581      	cmp	r9, r0
 8006b22:	d142      	bne.n	8006baa <_malloc_r+0xea>
 8006b24:	6821      	ldr	r1, [r4, #0]
 8006b26:	4630      	mov	r0, r6
 8006b28:	1a6d      	subs	r5, r5, r1
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f7ff ffa6 	bl	8006a7c <sbrk_aligned>
 8006b30:	3001      	adds	r0, #1
 8006b32:	d03a      	beq.n	8006baa <_malloc_r+0xea>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	442b      	add	r3, r5
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	bb62      	cbnz	r2, 8006b9c <_malloc_r+0xdc>
 8006b42:	f8c8 7000 	str.w	r7, [r8]
 8006b46:	e00f      	b.n	8006b68 <_malloc_r+0xa8>
 8006b48:	6822      	ldr	r2, [r4, #0]
 8006b4a:	1b52      	subs	r2, r2, r5
 8006b4c:	d420      	bmi.n	8006b90 <_malloc_r+0xd0>
 8006b4e:	2a0b      	cmp	r2, #11
 8006b50:	d917      	bls.n	8006b82 <_malloc_r+0xc2>
 8006b52:	1961      	adds	r1, r4, r5
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	6025      	str	r5, [r4, #0]
 8006b58:	bf18      	it	ne
 8006b5a:	6059      	strne	r1, [r3, #4]
 8006b5c:	6863      	ldr	r3, [r4, #4]
 8006b5e:	bf08      	it	eq
 8006b60:	f8c8 1000 	streq.w	r1, [r8]
 8006b64:	5162      	str	r2, [r4, r5]
 8006b66:	604b      	str	r3, [r1, #4]
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f000 f82f 	bl	8006bcc <__malloc_unlock>
 8006b6e:	f104 000b 	add.w	r0, r4, #11
 8006b72:	1d23      	adds	r3, r4, #4
 8006b74:	f020 0007 	bic.w	r0, r0, #7
 8006b78:	1ac2      	subs	r2, r0, r3
 8006b7a:	bf1c      	itt	ne
 8006b7c:	1a1b      	subne	r3, r3, r0
 8006b7e:	50a3      	strne	r3, [r4, r2]
 8006b80:	e7af      	b.n	8006ae2 <_malloc_r+0x22>
 8006b82:	6862      	ldr	r2, [r4, #4]
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	bf0c      	ite	eq
 8006b88:	f8c8 2000 	streq.w	r2, [r8]
 8006b8c:	605a      	strne	r2, [r3, #4]
 8006b8e:	e7eb      	b.n	8006b68 <_malloc_r+0xa8>
 8006b90:	4623      	mov	r3, r4
 8006b92:	6864      	ldr	r4, [r4, #4]
 8006b94:	e7ae      	b.n	8006af4 <_malloc_r+0x34>
 8006b96:	463c      	mov	r4, r7
 8006b98:	687f      	ldr	r7, [r7, #4]
 8006b9a:	e7b6      	b.n	8006b0a <_malloc_r+0x4a>
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	d1fb      	bne.n	8006b9c <_malloc_r+0xdc>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	6053      	str	r3, [r2, #4]
 8006ba8:	e7de      	b.n	8006b68 <_malloc_r+0xa8>
 8006baa:	230c      	movs	r3, #12
 8006bac:	4630      	mov	r0, r6
 8006bae:	6033      	str	r3, [r6, #0]
 8006bb0:	f000 f80c 	bl	8006bcc <__malloc_unlock>
 8006bb4:	e794      	b.n	8006ae0 <_malloc_r+0x20>
 8006bb6:	6005      	str	r5, [r0, #0]
 8006bb8:	e7d6      	b.n	8006b68 <_malloc_r+0xa8>
 8006bba:	bf00      	nop
 8006bbc:	200006ac 	.word	0x200006ac

08006bc0 <__malloc_lock>:
 8006bc0:	4801      	ldr	r0, [pc, #4]	@ (8006bc8 <__malloc_lock+0x8>)
 8006bc2:	f000 ba9c 	b.w	80070fe <__retarget_lock_acquire_recursive>
 8006bc6:	bf00      	nop
 8006bc8:	200007f0 	.word	0x200007f0

08006bcc <__malloc_unlock>:
 8006bcc:	4801      	ldr	r0, [pc, #4]	@ (8006bd4 <__malloc_unlock+0x8>)
 8006bce:	f000 ba97 	b.w	8007100 <__retarget_lock_release_recursive>
 8006bd2:	bf00      	nop
 8006bd4:	200007f0 	.word	0x200007f0

08006bd8 <std>:
 8006bd8:	2300      	movs	r3, #0
 8006bda:	b510      	push	{r4, lr}
 8006bdc:	4604      	mov	r4, r0
 8006bde:	6083      	str	r3, [r0, #8]
 8006be0:	8181      	strh	r1, [r0, #12]
 8006be2:	4619      	mov	r1, r3
 8006be4:	6643      	str	r3, [r0, #100]	@ 0x64
 8006be6:	81c2      	strh	r2, [r0, #14]
 8006be8:	2208      	movs	r2, #8
 8006bea:	6183      	str	r3, [r0, #24]
 8006bec:	e9c0 3300 	strd	r3, r3, [r0]
 8006bf0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bf4:	305c      	adds	r0, #92	@ 0x5c
 8006bf6:	f000 f9f9 	bl	8006fec <memset>
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006c30 <std+0x58>)
 8006bfc:	6224      	str	r4, [r4, #32]
 8006bfe:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c00:	4b0c      	ldr	r3, [pc, #48]	@ (8006c34 <std+0x5c>)
 8006c02:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c04:	4b0c      	ldr	r3, [pc, #48]	@ (8006c38 <std+0x60>)
 8006c06:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c08:	4b0c      	ldr	r3, [pc, #48]	@ (8006c3c <std+0x64>)
 8006c0a:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c40 <std+0x68>)
 8006c0e:	429c      	cmp	r4, r3
 8006c10:	d006      	beq.n	8006c20 <std+0x48>
 8006c12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c16:	4294      	cmp	r4, r2
 8006c18:	d002      	beq.n	8006c20 <std+0x48>
 8006c1a:	33d0      	adds	r3, #208	@ 0xd0
 8006c1c:	429c      	cmp	r4, r3
 8006c1e:	d105      	bne.n	8006c2c <std+0x54>
 8006c20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c28:	f000 ba68 	b.w	80070fc <__retarget_lock_init_recursive>
 8006c2c:	bd10      	pop	{r4, pc}
 8006c2e:	bf00      	nop
 8006c30:	08006e3d 	.word	0x08006e3d
 8006c34:	08006e5f 	.word	0x08006e5f
 8006c38:	08006e97 	.word	0x08006e97
 8006c3c:	08006ebb 	.word	0x08006ebb
 8006c40:	200006b0 	.word	0x200006b0

08006c44 <stdio_exit_handler>:
 8006c44:	4a02      	ldr	r2, [pc, #8]	@ (8006c50 <stdio_exit_handler+0xc>)
 8006c46:	4903      	ldr	r1, [pc, #12]	@ (8006c54 <stdio_exit_handler+0x10>)
 8006c48:	4803      	ldr	r0, [pc, #12]	@ (8006c58 <stdio_exit_handler+0x14>)
 8006c4a:	f000 b869 	b.w	8006d20 <_fwalk_sglue>
 8006c4e:	bf00      	nop
 8006c50:	2000000c 	.word	0x2000000c
 8006c54:	08007845 	.word	0x08007845
 8006c58:	2000001c 	.word	0x2000001c

08006c5c <cleanup_stdio>:
 8006c5c:	6841      	ldr	r1, [r0, #4]
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c90 <cleanup_stdio+0x34>)
 8006c60:	4299      	cmp	r1, r3
 8006c62:	b510      	push	{r4, lr}
 8006c64:	4604      	mov	r4, r0
 8006c66:	d001      	beq.n	8006c6c <cleanup_stdio+0x10>
 8006c68:	f000 fdec 	bl	8007844 <_fflush_r>
 8006c6c:	68a1      	ldr	r1, [r4, #8]
 8006c6e:	4b09      	ldr	r3, [pc, #36]	@ (8006c94 <cleanup_stdio+0x38>)
 8006c70:	4299      	cmp	r1, r3
 8006c72:	d002      	beq.n	8006c7a <cleanup_stdio+0x1e>
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 fde5 	bl	8007844 <_fflush_r>
 8006c7a:	68e1      	ldr	r1, [r4, #12]
 8006c7c:	4b06      	ldr	r3, [pc, #24]	@ (8006c98 <cleanup_stdio+0x3c>)
 8006c7e:	4299      	cmp	r1, r3
 8006c80:	d004      	beq.n	8006c8c <cleanup_stdio+0x30>
 8006c82:	4620      	mov	r0, r4
 8006c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c88:	f000 bddc 	b.w	8007844 <_fflush_r>
 8006c8c:	bd10      	pop	{r4, pc}
 8006c8e:	bf00      	nop
 8006c90:	200006b0 	.word	0x200006b0
 8006c94:	20000718 	.word	0x20000718
 8006c98:	20000780 	.word	0x20000780

08006c9c <global_stdio_init.part.0>:
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006ccc <global_stdio_init.part.0+0x30>)
 8006ca0:	2104      	movs	r1, #4
 8006ca2:	4c0b      	ldr	r4, [pc, #44]	@ (8006cd0 <global_stdio_init.part.0+0x34>)
 8006ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8006cd4 <global_stdio_init.part.0+0x38>)
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f7ff ff94 	bl	8006bd8 <std>
 8006cb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	2109      	movs	r1, #9
 8006cb8:	f7ff ff8e 	bl	8006bd8 <std>
 8006cbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	2112      	movs	r1, #18
 8006cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc8:	f7ff bf86 	b.w	8006bd8 <std>
 8006ccc:	200007e8 	.word	0x200007e8
 8006cd0:	200006b0 	.word	0x200006b0
 8006cd4:	08006c45 	.word	0x08006c45

08006cd8 <__sfp_lock_acquire>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	@ (8006ce0 <__sfp_lock_acquire+0x8>)
 8006cda:	f000 ba10 	b.w	80070fe <__retarget_lock_acquire_recursive>
 8006cde:	bf00      	nop
 8006ce0:	200007f1 	.word	0x200007f1

08006ce4 <__sfp_lock_release>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	@ (8006cec <__sfp_lock_release+0x8>)
 8006ce6:	f000 ba0b 	b.w	8007100 <__retarget_lock_release_recursive>
 8006cea:	bf00      	nop
 8006cec:	200007f1 	.word	0x200007f1

08006cf0 <__sinit>:
 8006cf0:	b510      	push	{r4, lr}
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	f7ff fff0 	bl	8006cd8 <__sfp_lock_acquire>
 8006cf8:	6a23      	ldr	r3, [r4, #32]
 8006cfa:	b11b      	cbz	r3, 8006d04 <__sinit+0x14>
 8006cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d00:	f7ff bff0 	b.w	8006ce4 <__sfp_lock_release>
 8006d04:	4b04      	ldr	r3, [pc, #16]	@ (8006d18 <__sinit+0x28>)
 8006d06:	6223      	str	r3, [r4, #32]
 8006d08:	4b04      	ldr	r3, [pc, #16]	@ (8006d1c <__sinit+0x2c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1f5      	bne.n	8006cfc <__sinit+0xc>
 8006d10:	f7ff ffc4 	bl	8006c9c <global_stdio_init.part.0>
 8006d14:	e7f2      	b.n	8006cfc <__sinit+0xc>
 8006d16:	bf00      	nop
 8006d18:	08006c5d 	.word	0x08006c5d
 8006d1c:	200007e8 	.word	0x200007e8

08006d20 <_fwalk_sglue>:
 8006d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d24:	4607      	mov	r7, r0
 8006d26:	4688      	mov	r8, r1
 8006d28:	4614      	mov	r4, r2
 8006d2a:	2600      	movs	r6, #0
 8006d2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d30:	f1b9 0901 	subs.w	r9, r9, #1
 8006d34:	d505      	bpl.n	8006d42 <_fwalk_sglue+0x22>
 8006d36:	6824      	ldr	r4, [r4, #0]
 8006d38:	2c00      	cmp	r4, #0
 8006d3a:	d1f7      	bne.n	8006d2c <_fwalk_sglue+0xc>
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d42:	89ab      	ldrh	r3, [r5, #12]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d907      	bls.n	8006d58 <_fwalk_sglue+0x38>
 8006d48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	d003      	beq.n	8006d58 <_fwalk_sglue+0x38>
 8006d50:	4629      	mov	r1, r5
 8006d52:	4638      	mov	r0, r7
 8006d54:	47c0      	blx	r8
 8006d56:	4306      	orrs	r6, r0
 8006d58:	3568      	adds	r5, #104	@ 0x68
 8006d5a:	e7e9      	b.n	8006d30 <_fwalk_sglue+0x10>

08006d5c <iprintf>:
 8006d5c:	b40f      	push	{r0, r1, r2, r3}
 8006d5e:	b507      	push	{r0, r1, r2, lr}
 8006d60:	4906      	ldr	r1, [pc, #24]	@ (8006d7c <iprintf+0x20>)
 8006d62:	ab04      	add	r3, sp, #16
 8006d64:	6808      	ldr	r0, [r1, #0]
 8006d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d6a:	6881      	ldr	r1, [r0, #8]
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	f000 fa3d 	bl	80071ec <_vfiprintf_r>
 8006d72:	b003      	add	sp, #12
 8006d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d78:	b004      	add	sp, #16
 8006d7a:	4770      	bx	lr
 8006d7c:	20000018 	.word	0x20000018

08006d80 <_puts_r>:
 8006d80:	6a03      	ldr	r3, [r0, #32]
 8006d82:	b570      	push	{r4, r5, r6, lr}
 8006d84:	4605      	mov	r5, r0
 8006d86:	460e      	mov	r6, r1
 8006d88:	6884      	ldr	r4, [r0, #8]
 8006d8a:	b90b      	cbnz	r3, 8006d90 <_puts_r+0x10>
 8006d8c:	f7ff ffb0 	bl	8006cf0 <__sinit>
 8006d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d92:	07db      	lsls	r3, r3, #31
 8006d94:	d405      	bmi.n	8006da2 <_puts_r+0x22>
 8006d96:	89a3      	ldrh	r3, [r4, #12]
 8006d98:	0598      	lsls	r0, r3, #22
 8006d9a:	d402      	bmi.n	8006da2 <_puts_r+0x22>
 8006d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d9e:	f000 f9ae 	bl	80070fe <__retarget_lock_acquire_recursive>
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	0719      	lsls	r1, r3, #28
 8006da6:	d502      	bpl.n	8006dae <_puts_r+0x2e>
 8006da8:	6923      	ldr	r3, [r4, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d135      	bne.n	8006e1a <_puts_r+0x9a>
 8006dae:	4621      	mov	r1, r4
 8006db0:	4628      	mov	r0, r5
 8006db2:	f000 f8c5 	bl	8006f40 <__swsetup_r>
 8006db6:	b380      	cbz	r0, 8006e1a <_puts_r+0x9a>
 8006db8:	f04f 35ff 	mov.w	r5, #4294967295
 8006dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dbe:	07da      	lsls	r2, r3, #31
 8006dc0:	d405      	bmi.n	8006dce <_puts_r+0x4e>
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	059b      	lsls	r3, r3, #22
 8006dc6:	d402      	bmi.n	8006dce <_puts_r+0x4e>
 8006dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dca:	f000 f999 	bl	8007100 <__retarget_lock_release_recursive>
 8006dce:	4628      	mov	r0, r5
 8006dd0:	bd70      	pop	{r4, r5, r6, pc}
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	da04      	bge.n	8006de0 <_puts_r+0x60>
 8006dd6:	69a2      	ldr	r2, [r4, #24]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	dc17      	bgt.n	8006e0c <_puts_r+0x8c>
 8006ddc:	290a      	cmp	r1, #10
 8006dde:	d015      	beq.n	8006e0c <_puts_r+0x8c>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	6022      	str	r2, [r4, #0]
 8006de6:	7019      	strb	r1, [r3, #0]
 8006de8:	68a3      	ldr	r3, [r4, #8]
 8006dea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dee:	3b01      	subs	r3, #1
 8006df0:	60a3      	str	r3, [r4, #8]
 8006df2:	2900      	cmp	r1, #0
 8006df4:	d1ed      	bne.n	8006dd2 <_puts_r+0x52>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da11      	bge.n	8006e1e <_puts_r+0x9e>
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	210a      	movs	r1, #10
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 f85f 	bl	8006ec2 <__swbuf_r>
 8006e04:	3001      	adds	r0, #1
 8006e06:	d0d7      	beq.n	8006db8 <_puts_r+0x38>
 8006e08:	250a      	movs	r5, #10
 8006e0a:	e7d7      	b.n	8006dbc <_puts_r+0x3c>
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f000 f857 	bl	8006ec2 <__swbuf_r>
 8006e14:	3001      	adds	r0, #1
 8006e16:	d1e7      	bne.n	8006de8 <_puts_r+0x68>
 8006e18:	e7ce      	b.n	8006db8 <_puts_r+0x38>
 8006e1a:	3e01      	subs	r6, #1
 8006e1c:	e7e4      	b.n	8006de8 <_puts_r+0x68>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	6022      	str	r2, [r4, #0]
 8006e24:	220a      	movs	r2, #10
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	e7ee      	b.n	8006e08 <_puts_r+0x88>
	...

08006e2c <puts>:
 8006e2c:	4b02      	ldr	r3, [pc, #8]	@ (8006e38 <puts+0xc>)
 8006e2e:	4601      	mov	r1, r0
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	f7ff bfa5 	b.w	8006d80 <_puts_r>
 8006e36:	bf00      	nop
 8006e38:	20000018 	.word	0x20000018

08006e3c <__sread>:
 8006e3c:	b510      	push	{r4, lr}
 8006e3e:	460c      	mov	r4, r1
 8006e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e44:	f000 f8fc 	bl	8007040 <_read_r>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	bfab      	itete	ge
 8006e4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e50:	181b      	addge	r3, r3, r0
 8006e52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e56:	bfac      	ite	ge
 8006e58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e5a:	81a3      	strhlt	r3, [r4, #12]
 8006e5c:	bd10      	pop	{r4, pc}

08006e5e <__swrite>:
 8006e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e62:	461f      	mov	r7, r3
 8006e64:	898b      	ldrh	r3, [r1, #12]
 8006e66:	4605      	mov	r5, r0
 8006e68:	460c      	mov	r4, r1
 8006e6a:	05db      	lsls	r3, r3, #23
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	d505      	bpl.n	8006e7c <__swrite+0x1e>
 8006e70:	2302      	movs	r3, #2
 8006e72:	2200      	movs	r2, #0
 8006e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e78:	f000 f8d0 	bl	800701c <_lseek_r>
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	4632      	mov	r2, r6
 8006e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e84:	4628      	mov	r0, r5
 8006e86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e92:	f000 b8f7 	b.w	8007084 <_write_r>

08006e96 <__sseek>:
 8006e96:	b510      	push	{r4, lr}
 8006e98:	460c      	mov	r4, r1
 8006e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9e:	f000 f8bd 	bl	800701c <_lseek_r>
 8006ea2:	1c43      	adds	r3, r0, #1
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	bf15      	itete	ne
 8006ea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006eaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eb2:	81a3      	strheq	r3, [r4, #12]
 8006eb4:	bf18      	it	ne
 8006eb6:	81a3      	strhne	r3, [r4, #12]
 8006eb8:	bd10      	pop	{r4, pc}

08006eba <__sclose>:
 8006eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebe:	f000 b89d 	b.w	8006ffc <_close_r>

08006ec2 <__swbuf_r>:
 8006ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec4:	460e      	mov	r6, r1
 8006ec6:	4614      	mov	r4, r2
 8006ec8:	4605      	mov	r5, r0
 8006eca:	b118      	cbz	r0, 8006ed4 <__swbuf_r+0x12>
 8006ecc:	6a03      	ldr	r3, [r0, #32]
 8006ece:	b90b      	cbnz	r3, 8006ed4 <__swbuf_r+0x12>
 8006ed0:	f7ff ff0e 	bl	8006cf0 <__sinit>
 8006ed4:	69a3      	ldr	r3, [r4, #24]
 8006ed6:	60a3      	str	r3, [r4, #8]
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	071a      	lsls	r2, r3, #28
 8006edc:	d501      	bpl.n	8006ee2 <__swbuf_r+0x20>
 8006ede:	6923      	ldr	r3, [r4, #16]
 8006ee0:	b943      	cbnz	r3, 8006ef4 <__swbuf_r+0x32>
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f000 f82b 	bl	8006f40 <__swsetup_r>
 8006eea:	b118      	cbz	r0, 8006ef4 <__swbuf_r+0x32>
 8006eec:	f04f 37ff 	mov.w	r7, #4294967295
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	b2f6      	uxtb	r6, r6
 8006ef8:	6922      	ldr	r2, [r4, #16]
 8006efa:	4637      	mov	r7, r6
 8006efc:	1a98      	subs	r0, r3, r2
 8006efe:	6963      	ldr	r3, [r4, #20]
 8006f00:	4283      	cmp	r3, r0
 8006f02:	dc05      	bgt.n	8006f10 <__swbuf_r+0x4e>
 8006f04:	4621      	mov	r1, r4
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 fc9c 	bl	8007844 <_fflush_r>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d1ed      	bne.n	8006eec <__swbuf_r+0x2a>
 8006f10:	68a3      	ldr	r3, [r4, #8]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	60a3      	str	r3, [r4, #8]
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	6022      	str	r2, [r4, #0]
 8006f1c:	701e      	strb	r6, [r3, #0]
 8006f1e:	1c43      	adds	r3, r0, #1
 8006f20:	6962      	ldr	r2, [r4, #20]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d004      	beq.n	8006f30 <__swbuf_r+0x6e>
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	07db      	lsls	r3, r3, #31
 8006f2a:	d5e1      	bpl.n	8006ef0 <__swbuf_r+0x2e>
 8006f2c:	2e0a      	cmp	r6, #10
 8006f2e:	d1df      	bne.n	8006ef0 <__swbuf_r+0x2e>
 8006f30:	4621      	mov	r1, r4
 8006f32:	4628      	mov	r0, r5
 8006f34:	f000 fc86 	bl	8007844 <_fflush_r>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d0d9      	beq.n	8006ef0 <__swbuf_r+0x2e>
 8006f3c:	e7d6      	b.n	8006eec <__swbuf_r+0x2a>
	...

08006f40 <__swsetup_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4b29      	ldr	r3, [pc, #164]	@ (8006fe8 <__swsetup_r+0xa8>)
 8006f44:	4605      	mov	r5, r0
 8006f46:	460c      	mov	r4, r1
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	b118      	cbz	r0, 8006f54 <__swsetup_r+0x14>
 8006f4c:	6a03      	ldr	r3, [r0, #32]
 8006f4e:	b90b      	cbnz	r3, 8006f54 <__swsetup_r+0x14>
 8006f50:	f7ff fece 	bl	8006cf0 <__sinit>
 8006f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f58:	0719      	lsls	r1, r3, #28
 8006f5a:	d422      	bmi.n	8006fa2 <__swsetup_r+0x62>
 8006f5c:	06da      	lsls	r2, r3, #27
 8006f5e:	d407      	bmi.n	8006f70 <__swsetup_r+0x30>
 8006f60:	2209      	movs	r2, #9
 8006f62:	602a      	str	r2, [r5, #0]
 8006f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f68:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	e033      	b.n	8006fd8 <__swsetup_r+0x98>
 8006f70:	0758      	lsls	r0, r3, #29
 8006f72:	d512      	bpl.n	8006f9a <__swsetup_r+0x5a>
 8006f74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f76:	b141      	cbz	r1, 8006f8a <__swsetup_r+0x4a>
 8006f78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f7c:	4299      	cmp	r1, r3
 8006f7e:	d002      	beq.n	8006f86 <__swsetup_r+0x46>
 8006f80:	4628      	mov	r0, r5
 8006f82:	f000 f8bf 	bl	8007104 <_free_r>
 8006f86:	2300      	movs	r3, #0
 8006f88:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	2300      	movs	r3, #0
 8006f94:	6063      	str	r3, [r4, #4]
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f043 0308 	orr.w	r3, r3, #8
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	b94b      	cbnz	r3, 8006fba <__swsetup_r+0x7a>
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fb0:	d003      	beq.n	8006fba <__swsetup_r+0x7a>
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f000 fc92 	bl	80078de <__smakebuf_r>
 8006fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fbe:	f013 0201 	ands.w	r2, r3, #1
 8006fc2:	d00a      	beq.n	8006fda <__swsetup_r+0x9a>
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	60a2      	str	r2, [r4, #8]
 8006fc8:	6962      	ldr	r2, [r4, #20]
 8006fca:	4252      	negs	r2, r2
 8006fcc:	61a2      	str	r2, [r4, #24]
 8006fce:	6922      	ldr	r2, [r4, #16]
 8006fd0:	b942      	cbnz	r2, 8006fe4 <__swsetup_r+0xa4>
 8006fd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006fd6:	d1c5      	bne.n	8006f64 <__swsetup_r+0x24>
 8006fd8:	bd38      	pop	{r3, r4, r5, pc}
 8006fda:	0799      	lsls	r1, r3, #30
 8006fdc:	bf58      	it	pl
 8006fde:	6962      	ldrpl	r2, [r4, #20]
 8006fe0:	60a2      	str	r2, [r4, #8]
 8006fe2:	e7f4      	b.n	8006fce <__swsetup_r+0x8e>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	e7f7      	b.n	8006fd8 <__swsetup_r+0x98>
 8006fe8:	20000018 	.word	0x20000018

08006fec <memset>:
 8006fec:	4402      	add	r2, r0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d100      	bne.n	8006ff6 <memset+0xa>
 8006ff4:	4770      	bx	lr
 8006ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8006ffa:	e7f9      	b.n	8006ff0 <memset+0x4>

08006ffc <_close_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	2300      	movs	r3, #0
 8007000:	4d05      	ldr	r5, [pc, #20]	@ (8007018 <_close_r+0x1c>)
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	602b      	str	r3, [r5, #0]
 8007008:	f7fa f93e 	bl	8001288 <_close>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_close_r+0x1a>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_close_r+0x1a>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	200007ec 	.word	0x200007ec

0800701c <_lseek_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4604      	mov	r4, r0
 8007020:	4d06      	ldr	r5, [pc, #24]	@ (800703c <_lseek_r+0x20>)
 8007022:	4608      	mov	r0, r1
 8007024:	4611      	mov	r1, r2
 8007026:	2200      	movs	r2, #0
 8007028:	602a      	str	r2, [r5, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	f7fa f953 	bl	80012d6 <_lseek>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_lseek_r+0x1e>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_lseek_r+0x1e>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	200007ec 	.word	0x200007ec

08007040 <_read_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4604      	mov	r4, r0
 8007044:	4d06      	ldr	r5, [pc, #24]	@ (8007060 <_read_r+0x20>)
 8007046:	4608      	mov	r0, r1
 8007048:	4611      	mov	r1, r2
 800704a:	2200      	movs	r2, #0
 800704c:	602a      	str	r2, [r5, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	f7fa f8fd 	bl	800124e <_read>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_read_r+0x1e>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_read_r+0x1e>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	200007ec 	.word	0x200007ec

08007064 <_sbrk_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	2300      	movs	r3, #0
 8007068:	4d05      	ldr	r5, [pc, #20]	@ (8007080 <_sbrk_r+0x1c>)
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	602b      	str	r3, [r5, #0]
 8007070:	f7fa f93e 	bl	80012f0 <_sbrk>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_sbrk_r+0x1a>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	b103      	cbz	r3, 800707e <_sbrk_r+0x1a>
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	200007ec 	.word	0x200007ec

08007084 <_write_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4604      	mov	r4, r0
 8007088:	4d06      	ldr	r5, [pc, #24]	@ (80070a4 <_write_r+0x20>)
 800708a:	4608      	mov	r0, r1
 800708c:	4611      	mov	r1, r2
 800708e:	2200      	movs	r2, #0
 8007090:	602a      	str	r2, [r5, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f7f9 fd34 	bl	8000b00 <_write>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_write_r+0x1e>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_write_r+0x1e>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	200007ec 	.word	0x200007ec

080070a8 <__errno>:
 80070a8:	4b01      	ldr	r3, [pc, #4]	@ (80070b0 <__errno+0x8>)
 80070aa:	6818      	ldr	r0, [r3, #0]
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	20000018 	.word	0x20000018

080070b4 <__libc_init_array>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	4d0d      	ldr	r5, [pc, #52]	@ (80070ec <__libc_init_array+0x38>)
 80070b8:	2600      	movs	r6, #0
 80070ba:	4c0d      	ldr	r4, [pc, #52]	@ (80070f0 <__libc_init_array+0x3c>)
 80070bc:	1b64      	subs	r4, r4, r5
 80070be:	10a4      	asrs	r4, r4, #2
 80070c0:	42a6      	cmp	r6, r4
 80070c2:	d109      	bne.n	80070d8 <__libc_init_array+0x24>
 80070c4:	4d0b      	ldr	r5, [pc, #44]	@ (80070f4 <__libc_init_array+0x40>)
 80070c6:	2600      	movs	r6, #0
 80070c8:	4c0b      	ldr	r4, [pc, #44]	@ (80070f8 <__libc_init_array+0x44>)
 80070ca:	f000 fc75 	bl	80079b8 <_init>
 80070ce:	1b64      	subs	r4, r4, r5
 80070d0:	10a4      	asrs	r4, r4, #2
 80070d2:	42a6      	cmp	r6, r4
 80070d4:	d105      	bne.n	80070e2 <__libc_init_array+0x2e>
 80070d6:	bd70      	pop	{r4, r5, r6, pc}
 80070d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070dc:	3601      	adds	r6, #1
 80070de:	4798      	blx	r3
 80070e0:	e7ee      	b.n	80070c0 <__libc_init_array+0xc>
 80070e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e6:	3601      	adds	r6, #1
 80070e8:	4798      	blx	r3
 80070ea:	e7f2      	b.n	80070d2 <__libc_init_array+0x1e>
 80070ec:	08007aff 	.word	0x08007aff
 80070f0:	08007aff 	.word	0x08007aff
 80070f4:	08007b00 	.word	0x08007b00
 80070f8:	08007b04 	.word	0x08007b04

080070fc <__retarget_lock_init_recursive>:
 80070fc:	4770      	bx	lr

080070fe <__retarget_lock_acquire_recursive>:
 80070fe:	4770      	bx	lr

08007100 <__retarget_lock_release_recursive>:
 8007100:	4770      	bx	lr
	...

08007104 <_free_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4605      	mov	r5, r0
 8007108:	2900      	cmp	r1, #0
 800710a:	d041      	beq.n	8007190 <_free_r+0x8c>
 800710c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007110:	1f0c      	subs	r4, r1, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	bfb8      	it	lt
 8007116:	18e4      	addlt	r4, r4, r3
 8007118:	f7ff fd52 	bl	8006bc0 <__malloc_lock>
 800711c:	4a1d      	ldr	r2, [pc, #116]	@ (8007194 <_free_r+0x90>)
 800711e:	6813      	ldr	r3, [r2, #0]
 8007120:	b933      	cbnz	r3, 8007130 <_free_r+0x2c>
 8007122:	6063      	str	r3, [r4, #4]
 8007124:	6014      	str	r4, [r2, #0]
 8007126:	4628      	mov	r0, r5
 8007128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800712c:	f7ff bd4e 	b.w	8006bcc <__malloc_unlock>
 8007130:	42a3      	cmp	r3, r4
 8007132:	d908      	bls.n	8007146 <_free_r+0x42>
 8007134:	6820      	ldr	r0, [r4, #0]
 8007136:	1821      	adds	r1, r4, r0
 8007138:	428b      	cmp	r3, r1
 800713a:	bf01      	itttt	eq
 800713c:	6819      	ldreq	r1, [r3, #0]
 800713e:	685b      	ldreq	r3, [r3, #4]
 8007140:	1809      	addeq	r1, r1, r0
 8007142:	6021      	streq	r1, [r4, #0]
 8007144:	e7ed      	b.n	8007122 <_free_r+0x1e>
 8007146:	461a      	mov	r2, r3
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	b10b      	cbz	r3, 8007150 <_free_r+0x4c>
 800714c:	42a3      	cmp	r3, r4
 800714e:	d9fa      	bls.n	8007146 <_free_r+0x42>
 8007150:	6811      	ldr	r1, [r2, #0]
 8007152:	1850      	adds	r0, r2, r1
 8007154:	42a0      	cmp	r0, r4
 8007156:	d10b      	bne.n	8007170 <_free_r+0x6c>
 8007158:	6820      	ldr	r0, [r4, #0]
 800715a:	4401      	add	r1, r0
 800715c:	1850      	adds	r0, r2, r1
 800715e:	6011      	str	r1, [r2, #0]
 8007160:	4283      	cmp	r3, r0
 8007162:	d1e0      	bne.n	8007126 <_free_r+0x22>
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	4408      	add	r0, r1
 800716a:	6053      	str	r3, [r2, #4]
 800716c:	6010      	str	r0, [r2, #0]
 800716e:	e7da      	b.n	8007126 <_free_r+0x22>
 8007170:	d902      	bls.n	8007178 <_free_r+0x74>
 8007172:	230c      	movs	r3, #12
 8007174:	602b      	str	r3, [r5, #0]
 8007176:	e7d6      	b.n	8007126 <_free_r+0x22>
 8007178:	6820      	ldr	r0, [r4, #0]
 800717a:	1821      	adds	r1, r4, r0
 800717c:	428b      	cmp	r3, r1
 800717e:	bf02      	ittt	eq
 8007180:	6819      	ldreq	r1, [r3, #0]
 8007182:	685b      	ldreq	r3, [r3, #4]
 8007184:	1809      	addeq	r1, r1, r0
 8007186:	6063      	str	r3, [r4, #4]
 8007188:	bf08      	it	eq
 800718a:	6021      	streq	r1, [r4, #0]
 800718c:	6054      	str	r4, [r2, #4]
 800718e:	e7ca      	b.n	8007126 <_free_r+0x22>
 8007190:	bd38      	pop	{r3, r4, r5, pc}
 8007192:	bf00      	nop
 8007194:	200006ac 	.word	0x200006ac

08007198 <__sfputc_r>:
 8007198:	6893      	ldr	r3, [r2, #8]
 800719a:	3b01      	subs	r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	b410      	push	{r4}
 80071a0:	6093      	str	r3, [r2, #8]
 80071a2:	da08      	bge.n	80071b6 <__sfputc_r+0x1e>
 80071a4:	6994      	ldr	r4, [r2, #24]
 80071a6:	42a3      	cmp	r3, r4
 80071a8:	db01      	blt.n	80071ae <__sfputc_r+0x16>
 80071aa:	290a      	cmp	r1, #10
 80071ac:	d103      	bne.n	80071b6 <__sfputc_r+0x1e>
 80071ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071b2:	f7ff be86 	b.w	8006ec2 <__swbuf_r>
 80071b6:	6813      	ldr	r3, [r2, #0]
 80071b8:	1c58      	adds	r0, r3, #1
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	4608      	mov	r0, r1
 80071be:	7019      	strb	r1, [r3, #0]
 80071c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <__sfputs_r>:
 80071c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c8:	4606      	mov	r6, r0
 80071ca:	460f      	mov	r7, r1
 80071cc:	4614      	mov	r4, r2
 80071ce:	18d5      	adds	r5, r2, r3
 80071d0:	42ac      	cmp	r4, r5
 80071d2:	d101      	bne.n	80071d8 <__sfputs_r+0x12>
 80071d4:	2000      	movs	r0, #0
 80071d6:	e007      	b.n	80071e8 <__sfputs_r+0x22>
 80071d8:	463a      	mov	r2, r7
 80071da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071de:	4630      	mov	r0, r6
 80071e0:	f7ff ffda 	bl	8007198 <__sfputc_r>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d1f3      	bne.n	80071d0 <__sfputs_r+0xa>
 80071e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071ec <_vfiprintf_r>:
 80071ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	460d      	mov	r5, r1
 80071f2:	b09d      	sub	sp, #116	@ 0x74
 80071f4:	4614      	mov	r4, r2
 80071f6:	4698      	mov	r8, r3
 80071f8:	4606      	mov	r6, r0
 80071fa:	b118      	cbz	r0, 8007204 <_vfiprintf_r+0x18>
 80071fc:	6a03      	ldr	r3, [r0, #32]
 80071fe:	b90b      	cbnz	r3, 8007204 <_vfiprintf_r+0x18>
 8007200:	f7ff fd76 	bl	8006cf0 <__sinit>
 8007204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007206:	07d9      	lsls	r1, r3, #31
 8007208:	d405      	bmi.n	8007216 <_vfiprintf_r+0x2a>
 800720a:	89ab      	ldrh	r3, [r5, #12]
 800720c:	059a      	lsls	r2, r3, #22
 800720e:	d402      	bmi.n	8007216 <_vfiprintf_r+0x2a>
 8007210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007212:	f7ff ff74 	bl	80070fe <__retarget_lock_acquire_recursive>
 8007216:	89ab      	ldrh	r3, [r5, #12]
 8007218:	071b      	lsls	r3, r3, #28
 800721a:	d501      	bpl.n	8007220 <_vfiprintf_r+0x34>
 800721c:	692b      	ldr	r3, [r5, #16]
 800721e:	b99b      	cbnz	r3, 8007248 <_vfiprintf_r+0x5c>
 8007220:	4629      	mov	r1, r5
 8007222:	4630      	mov	r0, r6
 8007224:	f7ff fe8c 	bl	8006f40 <__swsetup_r>
 8007228:	b170      	cbz	r0, 8007248 <_vfiprintf_r+0x5c>
 800722a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800722c:	07dc      	lsls	r4, r3, #31
 800722e:	d504      	bpl.n	800723a <_vfiprintf_r+0x4e>
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	b01d      	add	sp, #116	@ 0x74
 8007236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723a:	89ab      	ldrh	r3, [r5, #12]
 800723c:	0598      	lsls	r0, r3, #22
 800723e:	d4f7      	bmi.n	8007230 <_vfiprintf_r+0x44>
 8007240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007242:	f7ff ff5d 	bl	8007100 <__retarget_lock_release_recursive>
 8007246:	e7f3      	b.n	8007230 <_vfiprintf_r+0x44>
 8007248:	2300      	movs	r3, #0
 800724a:	f8cd 800c 	str.w	r8, [sp, #12]
 800724e:	f04f 0901 	mov.w	r9, #1
 8007252:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8007408 <_vfiprintf_r+0x21c>
 8007256:	9309      	str	r3, [sp, #36]	@ 0x24
 8007258:	2320      	movs	r3, #32
 800725a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800725e:	2330      	movs	r3, #48	@ 0x30
 8007260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007264:	4623      	mov	r3, r4
 8007266:	469a      	mov	sl, r3
 8007268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800726c:	b10a      	cbz	r2, 8007272 <_vfiprintf_r+0x86>
 800726e:	2a25      	cmp	r2, #37	@ 0x25
 8007270:	d1f9      	bne.n	8007266 <_vfiprintf_r+0x7a>
 8007272:	ebba 0b04 	subs.w	fp, sl, r4
 8007276:	d00b      	beq.n	8007290 <_vfiprintf_r+0xa4>
 8007278:	465b      	mov	r3, fp
 800727a:	4622      	mov	r2, r4
 800727c:	4629      	mov	r1, r5
 800727e:	4630      	mov	r0, r6
 8007280:	f7ff ffa1 	bl	80071c6 <__sfputs_r>
 8007284:	3001      	adds	r0, #1
 8007286:	f000 80a7 	beq.w	80073d8 <_vfiprintf_r+0x1ec>
 800728a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800728c:	445a      	add	r2, fp
 800728e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007290:	f89a 3000 	ldrb.w	r3, [sl]
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 809f 	beq.w	80073d8 <_vfiprintf_r+0x1ec>
 800729a:	2300      	movs	r3, #0
 800729c:	f04f 32ff 	mov.w	r2, #4294967295
 80072a0:	f10a 0a01 	add.w	sl, sl, #1
 80072a4:	9304      	str	r3, [sp, #16]
 80072a6:	9307      	str	r3, [sp, #28]
 80072a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80072ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072b2:	4654      	mov	r4, sl
 80072b4:	2205      	movs	r2, #5
 80072b6:	4854      	ldr	r0, [pc, #336]	@ (8007408 <_vfiprintf_r+0x21c>)
 80072b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072bc:	f000 fb6e 	bl	800799c <memchr>
 80072c0:	9a04      	ldr	r2, [sp, #16]
 80072c2:	b9d8      	cbnz	r0, 80072fc <_vfiprintf_r+0x110>
 80072c4:	06d1      	lsls	r1, r2, #27
 80072c6:	bf44      	itt	mi
 80072c8:	2320      	movmi	r3, #32
 80072ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072ce:	0713      	lsls	r3, r2, #28
 80072d0:	bf44      	itt	mi
 80072d2:	232b      	movmi	r3, #43	@ 0x2b
 80072d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072d8:	f89a 3000 	ldrb.w	r3, [sl]
 80072dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80072de:	d015      	beq.n	800730c <_vfiprintf_r+0x120>
 80072e0:	9a07      	ldr	r2, [sp, #28]
 80072e2:	4654      	mov	r4, sl
 80072e4:	2000      	movs	r0, #0
 80072e6:	f04f 0c0a 	mov.w	ip, #10
 80072ea:	4621      	mov	r1, r4
 80072ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072f0:	3b30      	subs	r3, #48	@ 0x30
 80072f2:	2b09      	cmp	r3, #9
 80072f4:	d94b      	bls.n	800738e <_vfiprintf_r+0x1a2>
 80072f6:	b1b0      	cbz	r0, 8007326 <_vfiprintf_r+0x13a>
 80072f8:	9207      	str	r2, [sp, #28]
 80072fa:	e014      	b.n	8007326 <_vfiprintf_r+0x13a>
 80072fc:	eba0 0308 	sub.w	r3, r0, r8
 8007300:	46a2      	mov	sl, r4
 8007302:	fa09 f303 	lsl.w	r3, r9, r3
 8007306:	4313      	orrs	r3, r2
 8007308:	9304      	str	r3, [sp, #16]
 800730a:	e7d2      	b.n	80072b2 <_vfiprintf_r+0xc6>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	1d19      	adds	r1, r3, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	9103      	str	r1, [sp, #12]
 8007316:	bfbb      	ittet	lt
 8007318:	425b      	neglt	r3, r3
 800731a:	f042 0202 	orrlt.w	r2, r2, #2
 800731e:	9307      	strge	r3, [sp, #28]
 8007320:	9307      	strlt	r3, [sp, #28]
 8007322:	bfb8      	it	lt
 8007324:	9204      	strlt	r2, [sp, #16]
 8007326:	7823      	ldrb	r3, [r4, #0]
 8007328:	2b2e      	cmp	r3, #46	@ 0x2e
 800732a:	d10a      	bne.n	8007342 <_vfiprintf_r+0x156>
 800732c:	7863      	ldrb	r3, [r4, #1]
 800732e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007330:	d132      	bne.n	8007398 <_vfiprintf_r+0x1ac>
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	3402      	adds	r4, #2
 8007336:	1d1a      	adds	r2, r3, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800733e:	9203      	str	r2, [sp, #12]
 8007340:	9305      	str	r3, [sp, #20]
 8007342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007418 <_vfiprintf_r+0x22c>
 8007346:	2203      	movs	r2, #3
 8007348:	7821      	ldrb	r1, [r4, #0]
 800734a:	4650      	mov	r0, sl
 800734c:	f000 fb26 	bl	800799c <memchr>
 8007350:	b138      	cbz	r0, 8007362 <_vfiprintf_r+0x176>
 8007352:	eba0 000a 	sub.w	r0, r0, sl
 8007356:	2240      	movs	r2, #64	@ 0x40
 8007358:	9b04      	ldr	r3, [sp, #16]
 800735a:	3401      	adds	r4, #1
 800735c:	4082      	lsls	r2, r0
 800735e:	4313      	orrs	r3, r2
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007366:	2206      	movs	r2, #6
 8007368:	4828      	ldr	r0, [pc, #160]	@ (800740c <_vfiprintf_r+0x220>)
 800736a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800736e:	f000 fb15 	bl	800799c <memchr>
 8007372:	2800      	cmp	r0, #0
 8007374:	d03f      	beq.n	80073f6 <_vfiprintf_r+0x20a>
 8007376:	4b26      	ldr	r3, [pc, #152]	@ (8007410 <_vfiprintf_r+0x224>)
 8007378:	bb1b      	cbnz	r3, 80073c2 <_vfiprintf_r+0x1d6>
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	3307      	adds	r3, #7
 800737e:	f023 0307 	bic.w	r3, r3, #7
 8007382:	3308      	adds	r3, #8
 8007384:	9303      	str	r3, [sp, #12]
 8007386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007388:	443b      	add	r3, r7
 800738a:	9309      	str	r3, [sp, #36]	@ 0x24
 800738c:	e76a      	b.n	8007264 <_vfiprintf_r+0x78>
 800738e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007392:	460c      	mov	r4, r1
 8007394:	2001      	movs	r0, #1
 8007396:	e7a8      	b.n	80072ea <_vfiprintf_r+0xfe>
 8007398:	2300      	movs	r3, #0
 800739a:	3401      	adds	r4, #1
 800739c:	f04f 0c0a 	mov.w	ip, #10
 80073a0:	4619      	mov	r1, r3
 80073a2:	9305      	str	r3, [sp, #20]
 80073a4:	4620      	mov	r0, r4
 80073a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073aa:	3a30      	subs	r2, #48	@ 0x30
 80073ac:	2a09      	cmp	r2, #9
 80073ae:	d903      	bls.n	80073b8 <_vfiprintf_r+0x1cc>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0c6      	beq.n	8007342 <_vfiprintf_r+0x156>
 80073b4:	9105      	str	r1, [sp, #20]
 80073b6:	e7c4      	b.n	8007342 <_vfiprintf_r+0x156>
 80073b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80073bc:	4604      	mov	r4, r0
 80073be:	2301      	movs	r3, #1
 80073c0:	e7f0      	b.n	80073a4 <_vfiprintf_r+0x1b8>
 80073c2:	ab03      	add	r3, sp, #12
 80073c4:	462a      	mov	r2, r5
 80073c6:	a904      	add	r1, sp, #16
 80073c8:	4630      	mov	r0, r6
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	4b11      	ldr	r3, [pc, #68]	@ (8007414 <_vfiprintf_r+0x228>)
 80073ce:	f3af 8000 	nop.w
 80073d2:	4607      	mov	r7, r0
 80073d4:	1c78      	adds	r0, r7, #1
 80073d6:	d1d6      	bne.n	8007386 <_vfiprintf_r+0x19a>
 80073d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073da:	07d9      	lsls	r1, r3, #31
 80073dc:	d405      	bmi.n	80073ea <_vfiprintf_r+0x1fe>
 80073de:	89ab      	ldrh	r3, [r5, #12]
 80073e0:	059a      	lsls	r2, r3, #22
 80073e2:	d402      	bmi.n	80073ea <_vfiprintf_r+0x1fe>
 80073e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073e6:	f7ff fe8b 	bl	8007100 <__retarget_lock_release_recursive>
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	065b      	lsls	r3, r3, #25
 80073ee:	f53f af1f 	bmi.w	8007230 <_vfiprintf_r+0x44>
 80073f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073f4:	e71e      	b.n	8007234 <_vfiprintf_r+0x48>
 80073f6:	ab03      	add	r3, sp, #12
 80073f8:	462a      	mov	r2, r5
 80073fa:	a904      	add	r1, sp, #16
 80073fc:	4630      	mov	r0, r6
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	4b04      	ldr	r3, [pc, #16]	@ (8007414 <_vfiprintf_r+0x228>)
 8007402:	f000 f87d 	bl	8007500 <_printf_i>
 8007406:	e7e4      	b.n	80073d2 <_vfiprintf_r+0x1e6>
 8007408:	08007acc 	.word	0x08007acc
 800740c:	08007ad6 	.word	0x08007ad6
 8007410:	00000000 	.word	0x00000000
 8007414:	080071c7 	.word	0x080071c7
 8007418:	08007ad2 	.word	0x08007ad2

0800741c <_printf_common>:
 800741c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007420:	4616      	mov	r6, r2
 8007422:	4698      	mov	r8, r3
 8007424:	688a      	ldr	r2, [r1, #8]
 8007426:	4607      	mov	r7, r0
 8007428:	690b      	ldr	r3, [r1, #16]
 800742a:	460c      	mov	r4, r1
 800742c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007430:	4293      	cmp	r3, r2
 8007432:	bfb8      	it	lt
 8007434:	4613      	movlt	r3, r2
 8007436:	6033      	str	r3, [r6, #0]
 8007438:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800743c:	b10a      	cbz	r2, 8007442 <_printf_common+0x26>
 800743e:	3301      	adds	r3, #1
 8007440:	6033      	str	r3, [r6, #0]
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	0699      	lsls	r1, r3, #26
 8007446:	bf42      	ittt	mi
 8007448:	6833      	ldrmi	r3, [r6, #0]
 800744a:	3302      	addmi	r3, #2
 800744c:	6033      	strmi	r3, [r6, #0]
 800744e:	6825      	ldr	r5, [r4, #0]
 8007450:	f015 0506 	ands.w	r5, r5, #6
 8007454:	d106      	bne.n	8007464 <_printf_common+0x48>
 8007456:	f104 0a19 	add.w	sl, r4, #25
 800745a:	68e3      	ldr	r3, [r4, #12]
 800745c:	6832      	ldr	r2, [r6, #0]
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	42ab      	cmp	r3, r5
 8007462:	dc2b      	bgt.n	80074bc <_printf_common+0xa0>
 8007464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007468:	6822      	ldr	r2, [r4, #0]
 800746a:	3b00      	subs	r3, #0
 800746c:	bf18      	it	ne
 800746e:	2301      	movne	r3, #1
 8007470:	0692      	lsls	r2, r2, #26
 8007472:	d430      	bmi.n	80074d6 <_printf_common+0xba>
 8007474:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007478:	4641      	mov	r1, r8
 800747a:	4638      	mov	r0, r7
 800747c:	47c8      	blx	r9
 800747e:	3001      	adds	r0, #1
 8007480:	d023      	beq.n	80074ca <_printf_common+0xae>
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	341a      	adds	r4, #26
 8007486:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800748a:	f003 0306 	and.w	r3, r3, #6
 800748e:	2b04      	cmp	r3, #4
 8007490:	bf0a      	itet	eq
 8007492:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8007496:	2500      	movne	r5, #0
 8007498:	6833      	ldreq	r3, [r6, #0]
 800749a:	f04f 0600 	mov.w	r6, #0
 800749e:	bf08      	it	eq
 80074a0:	1aed      	subeq	r5, r5, r3
 80074a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80074a6:	bf08      	it	eq
 80074a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074ac:	4293      	cmp	r3, r2
 80074ae:	bfc4      	itt	gt
 80074b0:	1a9b      	subgt	r3, r3, r2
 80074b2:	18ed      	addgt	r5, r5, r3
 80074b4:	42b5      	cmp	r5, r6
 80074b6:	d11a      	bne.n	80074ee <_printf_common+0xd2>
 80074b8:	2000      	movs	r0, #0
 80074ba:	e008      	b.n	80074ce <_printf_common+0xb2>
 80074bc:	2301      	movs	r3, #1
 80074be:	4652      	mov	r2, sl
 80074c0:	4641      	mov	r1, r8
 80074c2:	4638      	mov	r0, r7
 80074c4:	47c8      	blx	r9
 80074c6:	3001      	adds	r0, #1
 80074c8:	d103      	bne.n	80074d2 <_printf_common+0xb6>
 80074ca:	f04f 30ff 	mov.w	r0, #4294967295
 80074ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d2:	3501      	adds	r5, #1
 80074d4:	e7c1      	b.n	800745a <_printf_common+0x3e>
 80074d6:	18e1      	adds	r1, r4, r3
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	2030      	movs	r0, #48	@ 0x30
 80074dc:	3302      	adds	r3, #2
 80074de:	4422      	add	r2, r4
 80074e0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074ec:	e7c2      	b.n	8007474 <_printf_common+0x58>
 80074ee:	2301      	movs	r3, #1
 80074f0:	4622      	mov	r2, r4
 80074f2:	4641      	mov	r1, r8
 80074f4:	4638      	mov	r0, r7
 80074f6:	47c8      	blx	r9
 80074f8:	3001      	adds	r0, #1
 80074fa:	d0e6      	beq.n	80074ca <_printf_common+0xae>
 80074fc:	3601      	adds	r6, #1
 80074fe:	e7d9      	b.n	80074b4 <_printf_common+0x98>

08007500 <_printf_i>:
 8007500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007504:	7e0f      	ldrb	r7, [r1, #24]
 8007506:	4691      	mov	r9, r2
 8007508:	4680      	mov	r8, r0
 800750a:	460c      	mov	r4, r1
 800750c:	2f78      	cmp	r7, #120	@ 0x78
 800750e:	469a      	mov	sl, r3
 8007510:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007516:	d807      	bhi.n	8007528 <_printf_i+0x28>
 8007518:	2f62      	cmp	r7, #98	@ 0x62
 800751a:	d80a      	bhi.n	8007532 <_printf_i+0x32>
 800751c:	2f00      	cmp	r7, #0
 800751e:	f000 80d1 	beq.w	80076c4 <_printf_i+0x1c4>
 8007522:	2f58      	cmp	r7, #88	@ 0x58
 8007524:	f000 80b8 	beq.w	8007698 <_printf_i+0x198>
 8007528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800752c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007530:	e03a      	b.n	80075a8 <_printf_i+0xa8>
 8007532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007536:	2b15      	cmp	r3, #21
 8007538:	d8f6      	bhi.n	8007528 <_printf_i+0x28>
 800753a:	a101      	add	r1, pc, #4	@ (adr r1, 8007540 <_printf_i+0x40>)
 800753c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007540:	08007599 	.word	0x08007599
 8007544:	080075ad 	.word	0x080075ad
 8007548:	08007529 	.word	0x08007529
 800754c:	08007529 	.word	0x08007529
 8007550:	08007529 	.word	0x08007529
 8007554:	08007529 	.word	0x08007529
 8007558:	080075ad 	.word	0x080075ad
 800755c:	08007529 	.word	0x08007529
 8007560:	08007529 	.word	0x08007529
 8007564:	08007529 	.word	0x08007529
 8007568:	08007529 	.word	0x08007529
 800756c:	080076ab 	.word	0x080076ab
 8007570:	080075d7 	.word	0x080075d7
 8007574:	08007665 	.word	0x08007665
 8007578:	08007529 	.word	0x08007529
 800757c:	08007529 	.word	0x08007529
 8007580:	080076cd 	.word	0x080076cd
 8007584:	08007529 	.word	0x08007529
 8007588:	080075d7 	.word	0x080075d7
 800758c:	08007529 	.word	0x08007529
 8007590:	08007529 	.word	0x08007529
 8007594:	0800766d 	.word	0x0800766d
 8007598:	6833      	ldr	r3, [r6, #0]
 800759a:	1d1a      	adds	r2, r3, #4
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6032      	str	r2, [r6, #0]
 80075a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075a8:	2301      	movs	r3, #1
 80075aa:	e09c      	b.n	80076e6 <_printf_i+0x1e6>
 80075ac:	6833      	ldr	r3, [r6, #0]
 80075ae:	6820      	ldr	r0, [r4, #0]
 80075b0:	1d19      	adds	r1, r3, #4
 80075b2:	6031      	str	r1, [r6, #0]
 80075b4:	0606      	lsls	r6, r0, #24
 80075b6:	d501      	bpl.n	80075bc <_printf_i+0xbc>
 80075b8:	681d      	ldr	r5, [r3, #0]
 80075ba:	e003      	b.n	80075c4 <_printf_i+0xc4>
 80075bc:	0645      	lsls	r5, r0, #25
 80075be:	d5fb      	bpl.n	80075b8 <_printf_i+0xb8>
 80075c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075c4:	2d00      	cmp	r5, #0
 80075c6:	da03      	bge.n	80075d0 <_printf_i+0xd0>
 80075c8:	232d      	movs	r3, #45	@ 0x2d
 80075ca:	426d      	negs	r5, r5
 80075cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075d0:	4858      	ldr	r0, [pc, #352]	@ (8007734 <_printf_i+0x234>)
 80075d2:	230a      	movs	r3, #10
 80075d4:	e011      	b.n	80075fa <_printf_i+0xfa>
 80075d6:	6821      	ldr	r1, [r4, #0]
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	0608      	lsls	r0, r1, #24
 80075dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80075e0:	d402      	bmi.n	80075e8 <_printf_i+0xe8>
 80075e2:	0649      	lsls	r1, r1, #25
 80075e4:	bf48      	it	mi
 80075e6:	b2ad      	uxthmi	r5, r5
 80075e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80075ea:	6033      	str	r3, [r6, #0]
 80075ec:	4851      	ldr	r0, [pc, #324]	@ (8007734 <_printf_i+0x234>)
 80075ee:	bf14      	ite	ne
 80075f0:	230a      	movne	r3, #10
 80075f2:	2308      	moveq	r3, #8
 80075f4:	2100      	movs	r1, #0
 80075f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075fa:	6866      	ldr	r6, [r4, #4]
 80075fc:	2e00      	cmp	r6, #0
 80075fe:	60a6      	str	r6, [r4, #8]
 8007600:	db05      	blt.n	800760e <_printf_i+0x10e>
 8007602:	6821      	ldr	r1, [r4, #0]
 8007604:	432e      	orrs	r6, r5
 8007606:	f021 0104 	bic.w	r1, r1, #4
 800760a:	6021      	str	r1, [r4, #0]
 800760c:	d04b      	beq.n	80076a6 <_printf_i+0x1a6>
 800760e:	4616      	mov	r6, r2
 8007610:	fbb5 f1f3 	udiv	r1, r5, r3
 8007614:	fb03 5711 	mls	r7, r3, r1, r5
 8007618:	5dc7      	ldrb	r7, [r0, r7]
 800761a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800761e:	462f      	mov	r7, r5
 8007620:	460d      	mov	r5, r1
 8007622:	42bb      	cmp	r3, r7
 8007624:	d9f4      	bls.n	8007610 <_printf_i+0x110>
 8007626:	2b08      	cmp	r3, #8
 8007628:	d10b      	bne.n	8007642 <_printf_i+0x142>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	07df      	lsls	r7, r3, #31
 800762e:	d508      	bpl.n	8007642 <_printf_i+0x142>
 8007630:	6923      	ldr	r3, [r4, #16]
 8007632:	6861      	ldr	r1, [r4, #4]
 8007634:	4299      	cmp	r1, r3
 8007636:	bfde      	ittt	le
 8007638:	2330      	movle	r3, #48	@ 0x30
 800763a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800763e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007642:	1b92      	subs	r2, r2, r6
 8007644:	6122      	str	r2, [r4, #16]
 8007646:	464b      	mov	r3, r9
 8007648:	aa03      	add	r2, sp, #12
 800764a:	4621      	mov	r1, r4
 800764c:	4640      	mov	r0, r8
 800764e:	f8cd a000 	str.w	sl, [sp]
 8007652:	f7ff fee3 	bl	800741c <_printf_common>
 8007656:	3001      	adds	r0, #1
 8007658:	d14a      	bne.n	80076f0 <_printf_i+0x1f0>
 800765a:	f04f 30ff 	mov.w	r0, #4294967295
 800765e:	b004      	add	sp, #16
 8007660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	f043 0320 	orr.w	r3, r3, #32
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	2778      	movs	r7, #120	@ 0x78
 800766e:	4832      	ldr	r0, [pc, #200]	@ (8007738 <_printf_i+0x238>)
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007676:	061f      	lsls	r7, r3, #24
 8007678:	6831      	ldr	r1, [r6, #0]
 800767a:	f851 5b04 	ldr.w	r5, [r1], #4
 800767e:	d402      	bmi.n	8007686 <_printf_i+0x186>
 8007680:	065f      	lsls	r7, r3, #25
 8007682:	bf48      	it	mi
 8007684:	b2ad      	uxthmi	r5, r5
 8007686:	6031      	str	r1, [r6, #0]
 8007688:	07d9      	lsls	r1, r3, #31
 800768a:	bf44      	itt	mi
 800768c:	f043 0320 	orrmi.w	r3, r3, #32
 8007690:	6023      	strmi	r3, [r4, #0]
 8007692:	b11d      	cbz	r5, 800769c <_printf_i+0x19c>
 8007694:	2310      	movs	r3, #16
 8007696:	e7ad      	b.n	80075f4 <_printf_i+0xf4>
 8007698:	4826      	ldr	r0, [pc, #152]	@ (8007734 <_printf_i+0x234>)
 800769a:	e7e9      	b.n	8007670 <_printf_i+0x170>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	f023 0320 	bic.w	r3, r3, #32
 80076a2:	6023      	str	r3, [r4, #0]
 80076a4:	e7f6      	b.n	8007694 <_printf_i+0x194>
 80076a6:	4616      	mov	r6, r2
 80076a8:	e7bd      	b.n	8007626 <_printf_i+0x126>
 80076aa:	6833      	ldr	r3, [r6, #0]
 80076ac:	6825      	ldr	r5, [r4, #0]
 80076ae:	1d18      	adds	r0, r3, #4
 80076b0:	6961      	ldr	r1, [r4, #20]
 80076b2:	6030      	str	r0, [r6, #0]
 80076b4:	062e      	lsls	r6, r5, #24
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	d501      	bpl.n	80076be <_printf_i+0x1be>
 80076ba:	6019      	str	r1, [r3, #0]
 80076bc:	e002      	b.n	80076c4 <_printf_i+0x1c4>
 80076be:	0668      	lsls	r0, r5, #25
 80076c0:	d5fb      	bpl.n	80076ba <_printf_i+0x1ba>
 80076c2:	8019      	strh	r1, [r3, #0]
 80076c4:	2300      	movs	r3, #0
 80076c6:	4616      	mov	r6, r2
 80076c8:	6123      	str	r3, [r4, #16]
 80076ca:	e7bc      	b.n	8007646 <_printf_i+0x146>
 80076cc:	6833      	ldr	r3, [r6, #0]
 80076ce:	2100      	movs	r1, #0
 80076d0:	1d1a      	adds	r2, r3, #4
 80076d2:	6032      	str	r2, [r6, #0]
 80076d4:	681e      	ldr	r6, [r3, #0]
 80076d6:	6862      	ldr	r2, [r4, #4]
 80076d8:	4630      	mov	r0, r6
 80076da:	f000 f95f 	bl	800799c <memchr>
 80076de:	b108      	cbz	r0, 80076e4 <_printf_i+0x1e4>
 80076e0:	1b80      	subs	r0, r0, r6
 80076e2:	6060      	str	r0, [r4, #4]
 80076e4:	6863      	ldr	r3, [r4, #4]
 80076e6:	6123      	str	r3, [r4, #16]
 80076e8:	2300      	movs	r3, #0
 80076ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076ee:	e7aa      	b.n	8007646 <_printf_i+0x146>
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	4632      	mov	r2, r6
 80076f4:	4649      	mov	r1, r9
 80076f6:	4640      	mov	r0, r8
 80076f8:	47d0      	blx	sl
 80076fa:	3001      	adds	r0, #1
 80076fc:	d0ad      	beq.n	800765a <_printf_i+0x15a>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	079b      	lsls	r3, r3, #30
 8007702:	d413      	bmi.n	800772c <_printf_i+0x22c>
 8007704:	68e0      	ldr	r0, [r4, #12]
 8007706:	9b03      	ldr	r3, [sp, #12]
 8007708:	4298      	cmp	r0, r3
 800770a:	bfb8      	it	lt
 800770c:	4618      	movlt	r0, r3
 800770e:	e7a6      	b.n	800765e <_printf_i+0x15e>
 8007710:	2301      	movs	r3, #1
 8007712:	4632      	mov	r2, r6
 8007714:	4649      	mov	r1, r9
 8007716:	4640      	mov	r0, r8
 8007718:	47d0      	blx	sl
 800771a:	3001      	adds	r0, #1
 800771c:	d09d      	beq.n	800765a <_printf_i+0x15a>
 800771e:	3501      	adds	r5, #1
 8007720:	68e3      	ldr	r3, [r4, #12]
 8007722:	9903      	ldr	r1, [sp, #12]
 8007724:	1a5b      	subs	r3, r3, r1
 8007726:	42ab      	cmp	r3, r5
 8007728:	dcf2      	bgt.n	8007710 <_printf_i+0x210>
 800772a:	e7eb      	b.n	8007704 <_printf_i+0x204>
 800772c:	2500      	movs	r5, #0
 800772e:	f104 0619 	add.w	r6, r4, #25
 8007732:	e7f5      	b.n	8007720 <_printf_i+0x220>
 8007734:	08007add 	.word	0x08007add
 8007738:	08007aee 	.word	0x08007aee

0800773c <__sflush_r>:
 800773c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007744:	0716      	lsls	r6, r2, #28
 8007746:	4605      	mov	r5, r0
 8007748:	460c      	mov	r4, r1
 800774a:	d454      	bmi.n	80077f6 <__sflush_r+0xba>
 800774c:	684b      	ldr	r3, [r1, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	dc02      	bgt.n	8007758 <__sflush_r+0x1c>
 8007752:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	dd48      	ble.n	80077ea <__sflush_r+0xae>
 8007758:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800775a:	2e00      	cmp	r6, #0
 800775c:	d045      	beq.n	80077ea <__sflush_r+0xae>
 800775e:	2300      	movs	r3, #0
 8007760:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007764:	682f      	ldr	r7, [r5, #0]
 8007766:	6a21      	ldr	r1, [r4, #32]
 8007768:	602b      	str	r3, [r5, #0]
 800776a:	d030      	beq.n	80077ce <__sflush_r+0x92>
 800776c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	0759      	lsls	r1, r3, #29
 8007772:	d505      	bpl.n	8007780 <__sflush_r+0x44>
 8007774:	6863      	ldr	r3, [r4, #4]
 8007776:	1ad2      	subs	r2, r2, r3
 8007778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800777a:	b10b      	cbz	r3, 8007780 <__sflush_r+0x44>
 800777c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	2300      	movs	r3, #0
 8007782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007784:	6a21      	ldr	r1, [r4, #32]
 8007786:	4628      	mov	r0, r5
 8007788:	47b0      	blx	r6
 800778a:	1c43      	adds	r3, r0, #1
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	d106      	bne.n	800779e <__sflush_r+0x62>
 8007790:	6829      	ldr	r1, [r5, #0]
 8007792:	291d      	cmp	r1, #29
 8007794:	d82b      	bhi.n	80077ee <__sflush_r+0xb2>
 8007796:	4a2a      	ldr	r2, [pc, #168]	@ (8007840 <__sflush_r+0x104>)
 8007798:	40ca      	lsrs	r2, r1
 800779a:	07d6      	lsls	r6, r2, #31
 800779c:	d527      	bpl.n	80077ee <__sflush_r+0xb2>
 800779e:	2200      	movs	r2, #0
 80077a0:	04d9      	lsls	r1, r3, #19
 80077a2:	6062      	str	r2, [r4, #4]
 80077a4:	6922      	ldr	r2, [r4, #16]
 80077a6:	6022      	str	r2, [r4, #0]
 80077a8:	d504      	bpl.n	80077b4 <__sflush_r+0x78>
 80077aa:	1c42      	adds	r2, r0, #1
 80077ac:	d101      	bne.n	80077b2 <__sflush_r+0x76>
 80077ae:	682b      	ldr	r3, [r5, #0]
 80077b0:	b903      	cbnz	r3, 80077b4 <__sflush_r+0x78>
 80077b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80077b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077b6:	602f      	str	r7, [r5, #0]
 80077b8:	b1b9      	cbz	r1, 80077ea <__sflush_r+0xae>
 80077ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077be:	4299      	cmp	r1, r3
 80077c0:	d002      	beq.n	80077c8 <__sflush_r+0x8c>
 80077c2:	4628      	mov	r0, r5
 80077c4:	f7ff fc9e 	bl	8007104 <_free_r>
 80077c8:	2300      	movs	r3, #0
 80077ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80077cc:	e00d      	b.n	80077ea <__sflush_r+0xae>
 80077ce:	2301      	movs	r3, #1
 80077d0:	4628      	mov	r0, r5
 80077d2:	47b0      	blx	r6
 80077d4:	4602      	mov	r2, r0
 80077d6:	1c50      	adds	r0, r2, #1
 80077d8:	d1c9      	bne.n	800776e <__sflush_r+0x32>
 80077da:	682b      	ldr	r3, [r5, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0c6      	beq.n	800776e <__sflush_r+0x32>
 80077e0:	2b1d      	cmp	r3, #29
 80077e2:	d001      	beq.n	80077e8 <__sflush_r+0xac>
 80077e4:	2b16      	cmp	r3, #22
 80077e6:	d11d      	bne.n	8007824 <__sflush_r+0xe8>
 80077e8:	602f      	str	r7, [r5, #0]
 80077ea:	2000      	movs	r0, #0
 80077ec:	e021      	b.n	8007832 <__sflush_r+0xf6>
 80077ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077f2:	b21b      	sxth	r3, r3
 80077f4:	e01a      	b.n	800782c <__sflush_r+0xf0>
 80077f6:	690f      	ldr	r7, [r1, #16]
 80077f8:	2f00      	cmp	r7, #0
 80077fa:	d0f6      	beq.n	80077ea <__sflush_r+0xae>
 80077fc:	0793      	lsls	r3, r2, #30
 80077fe:	680e      	ldr	r6, [r1, #0]
 8007800:	600f      	str	r7, [r1, #0]
 8007802:	bf0c      	ite	eq
 8007804:	694b      	ldreq	r3, [r1, #20]
 8007806:	2300      	movne	r3, #0
 8007808:	eba6 0807 	sub.w	r8, r6, r7
 800780c:	608b      	str	r3, [r1, #8]
 800780e:	f1b8 0f00 	cmp.w	r8, #0
 8007812:	ddea      	ble.n	80077ea <__sflush_r+0xae>
 8007814:	4643      	mov	r3, r8
 8007816:	463a      	mov	r2, r7
 8007818:	6a21      	ldr	r1, [r4, #32]
 800781a:	4628      	mov	r0, r5
 800781c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800781e:	47b0      	blx	r6
 8007820:	2800      	cmp	r0, #0
 8007822:	dc08      	bgt.n	8007836 <__sflush_r+0xfa>
 8007824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800782c:	f04f 30ff 	mov.w	r0, #4294967295
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007836:	4407      	add	r7, r0
 8007838:	eba8 0800 	sub.w	r8, r8, r0
 800783c:	e7e7      	b.n	800780e <__sflush_r+0xd2>
 800783e:	bf00      	nop
 8007840:	20400001 	.word	0x20400001

08007844 <_fflush_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	690b      	ldr	r3, [r1, #16]
 8007848:	4605      	mov	r5, r0
 800784a:	460c      	mov	r4, r1
 800784c:	b913      	cbnz	r3, 8007854 <_fflush_r+0x10>
 800784e:	2500      	movs	r5, #0
 8007850:	4628      	mov	r0, r5
 8007852:	bd38      	pop	{r3, r4, r5, pc}
 8007854:	b118      	cbz	r0, 800785e <_fflush_r+0x1a>
 8007856:	6a03      	ldr	r3, [r0, #32]
 8007858:	b90b      	cbnz	r3, 800785e <_fflush_r+0x1a>
 800785a:	f7ff fa49 	bl	8006cf0 <__sinit>
 800785e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0f3      	beq.n	800784e <_fflush_r+0xa>
 8007866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007868:	07d0      	lsls	r0, r2, #31
 800786a:	d404      	bmi.n	8007876 <_fflush_r+0x32>
 800786c:	0599      	lsls	r1, r3, #22
 800786e:	d402      	bmi.n	8007876 <_fflush_r+0x32>
 8007870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007872:	f7ff fc44 	bl	80070fe <__retarget_lock_acquire_recursive>
 8007876:	4628      	mov	r0, r5
 8007878:	4621      	mov	r1, r4
 800787a:	f7ff ff5f 	bl	800773c <__sflush_r>
 800787e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007880:	4605      	mov	r5, r0
 8007882:	07da      	lsls	r2, r3, #31
 8007884:	d4e4      	bmi.n	8007850 <_fflush_r+0xc>
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	059b      	lsls	r3, r3, #22
 800788a:	d4e1      	bmi.n	8007850 <_fflush_r+0xc>
 800788c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800788e:	f7ff fc37 	bl	8007100 <__retarget_lock_release_recursive>
 8007892:	e7dd      	b.n	8007850 <_fflush_r+0xc>

08007894 <__swhatbuf_r>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	460c      	mov	r4, r1
 8007898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789c:	b096      	sub	sp, #88	@ 0x58
 800789e:	4615      	mov	r5, r2
 80078a0:	2900      	cmp	r1, #0
 80078a2:	461e      	mov	r6, r3
 80078a4:	da0c      	bge.n	80078c0 <__swhatbuf_r+0x2c>
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	2100      	movs	r1, #0
 80078aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078ae:	bf14      	ite	ne
 80078b0:	2340      	movne	r3, #64	@ 0x40
 80078b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078b6:	2000      	movs	r0, #0
 80078b8:	6031      	str	r1, [r6, #0]
 80078ba:	602b      	str	r3, [r5, #0]
 80078bc:	b016      	add	sp, #88	@ 0x58
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	466a      	mov	r2, sp
 80078c2:	f000 f849 	bl	8007958 <_fstat_r>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	dbed      	blt.n	80078a6 <__swhatbuf_r+0x12>
 80078ca:	9901      	ldr	r1, [sp, #4]
 80078cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80078d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80078d4:	4259      	negs	r1, r3
 80078d6:	4159      	adcs	r1, r3
 80078d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078dc:	e7eb      	b.n	80078b6 <__swhatbuf_r+0x22>

080078de <__smakebuf_r>:
 80078de:	898b      	ldrh	r3, [r1, #12]
 80078e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078e2:	079d      	lsls	r5, r3, #30
 80078e4:	4606      	mov	r6, r0
 80078e6:	460c      	mov	r4, r1
 80078e8:	d507      	bpl.n	80078fa <__smakebuf_r+0x1c>
 80078ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	6123      	str	r3, [r4, #16]
 80078f2:	2301      	movs	r3, #1
 80078f4:	6163      	str	r3, [r4, #20]
 80078f6:	b003      	add	sp, #12
 80078f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078fa:	ab01      	add	r3, sp, #4
 80078fc:	466a      	mov	r2, sp
 80078fe:	f7ff ffc9 	bl	8007894 <__swhatbuf_r>
 8007902:	9f00      	ldr	r7, [sp, #0]
 8007904:	4605      	mov	r5, r0
 8007906:	4630      	mov	r0, r6
 8007908:	4639      	mov	r1, r7
 800790a:	f7ff f8d9 	bl	8006ac0 <_malloc_r>
 800790e:	b948      	cbnz	r0, 8007924 <__smakebuf_r+0x46>
 8007910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007914:	059a      	lsls	r2, r3, #22
 8007916:	d4ee      	bmi.n	80078f6 <__smakebuf_r+0x18>
 8007918:	f023 0303 	bic.w	r3, r3, #3
 800791c:	f043 0302 	orr.w	r3, r3, #2
 8007920:	81a3      	strh	r3, [r4, #12]
 8007922:	e7e2      	b.n	80078ea <__smakebuf_r+0xc>
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	6020      	str	r0, [r4, #0]
 8007928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	9b01      	ldr	r3, [sp, #4]
 8007930:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007934:	b15b      	cbz	r3, 800794e <__smakebuf_r+0x70>
 8007936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800793a:	4630      	mov	r0, r6
 800793c:	f000 f81e 	bl	800797c <_isatty_r>
 8007940:	b128      	cbz	r0, 800794e <__smakebuf_r+0x70>
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	f023 0303 	bic.w	r3, r3, #3
 8007948:	f043 0301 	orr.w	r3, r3, #1
 800794c:	81a3      	strh	r3, [r4, #12]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	431d      	orrs	r5, r3
 8007952:	81a5      	strh	r5, [r4, #12]
 8007954:	e7cf      	b.n	80078f6 <__smakebuf_r+0x18>
	...

08007958 <_fstat_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	2300      	movs	r3, #0
 800795c:	4d06      	ldr	r5, [pc, #24]	@ (8007978 <_fstat_r+0x20>)
 800795e:	4604      	mov	r4, r0
 8007960:	4608      	mov	r0, r1
 8007962:	4611      	mov	r1, r2
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	f7f9 fc9b 	bl	80012a0 <_fstat>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	d102      	bne.n	8007974 <_fstat_r+0x1c>
 800796e:	682b      	ldr	r3, [r5, #0]
 8007970:	b103      	cbz	r3, 8007974 <_fstat_r+0x1c>
 8007972:	6023      	str	r3, [r4, #0]
 8007974:	bd38      	pop	{r3, r4, r5, pc}
 8007976:	bf00      	nop
 8007978:	200007ec 	.word	0x200007ec

0800797c <_isatty_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	2300      	movs	r3, #0
 8007980:	4d05      	ldr	r5, [pc, #20]	@ (8007998 <_isatty_r+0x1c>)
 8007982:	4604      	mov	r4, r0
 8007984:	4608      	mov	r0, r1
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	f7f9 fc9a 	bl	80012c0 <_isatty>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_isatty_r+0x1a>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_isatty_r+0x1a>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	200007ec 	.word	0x200007ec

0800799c <memchr>:
 800799c:	b2c9      	uxtb	r1, r1
 800799e:	4603      	mov	r3, r0
 80079a0:	4402      	add	r2, r0
 80079a2:	b510      	push	{r4, lr}
 80079a4:	4293      	cmp	r3, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	d101      	bne.n	80079ae <memchr+0x12>
 80079aa:	2000      	movs	r0, #0
 80079ac:	e003      	b.n	80079b6 <memchr+0x1a>
 80079ae:	7804      	ldrb	r4, [r0, #0]
 80079b0:	3301      	adds	r3, #1
 80079b2:	428c      	cmp	r4, r1
 80079b4:	d1f6      	bne.n	80079a4 <memchr+0x8>
 80079b6:	bd10      	pop	{r4, pc}

080079b8 <_init>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	bf00      	nop
 80079bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079be:	bc08      	pop	{r3}
 80079c0:	469e      	mov	lr, r3
 80079c2:	4770      	bx	lr

080079c4 <_fini>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	bf00      	nop
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr
