
Elproj1Testkod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08009370  08009370  0000a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800939c  0800939c  0000b088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800939c  0800939c  0000a39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093a4  080093a4  0000b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a4  080093a4  0000a3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093a8  080093a8  0000a3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080093ac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b088  2**0
                  CONTENTS
 10 .bss          00000a20  20000088  20000088  0000b088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000aa8  20000aa8  0000b088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015313  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ab7  00000000  00000000  000203cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00023e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da4  00000000  00000000  00025080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024adb  00000000  00000000  00025e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bef  00000000  00000000  0004a8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd5c2  00000000  00000000  000634ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130ab0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050dc  00000000  00000000  00130af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a8  00000000  00000000  00135bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009358 	.word	0x08009358

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08009358 	.word	0x08009358

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000500:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	2b00      	cmp	r3, #0
 800050a:	d013      	beq.n	8000534 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000510:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000514:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00b      	beq.n	8000534 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800051c:	e000      	b.n	8000520 <ITM_SendChar+0x2c>
    {
      __NOP();
 800051e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000520:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800052a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
	...

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fc74 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f81e 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f91a 	bl	8000788 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000554:	f000 f884 	bl	8000660 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000558:	f000 f8b0 	bl	80006bc <MX_I2S3_Init>
  MX_SPI1_Init();
 800055c:	f000 f8de 	bl	800071c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000560:	f007 ff34 	bl	80083cc <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000564:	f007 ff58 	bl	8008418 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000568:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800056c:	4805      	ldr	r0, [pc, #20]	@ (8000584 <main+0x40>)
 800056e:	f000 ffbe 	bl	80014ee <HAL_GPIO_TogglePin>
	 HAL_Delay(500);
 8000572:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000576:	f000 fccf 	bl	8000f18 <HAL_Delay>
	 printf("Hello World!\n");
 800057a:	4803      	ldr	r0, [pc, #12]	@ (8000588 <main+0x44>)
 800057c:	f008 fc06 	bl	8008d8c <puts>
    MX_USB_HOST_Process();
 8000580:	bf00      	nop
 8000582:	e7ef      	b.n	8000564 <main+0x20>
 8000584:	40020c00 	.word	0x40020c00
 8000588:	08009370 	.word	0x08009370

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	@ 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	@ 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f008 fcd6 	bl	8008f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b28      	ldr	r3, [pc, #160]	@ (8000658 <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	4a27      	ldr	r2, [pc, #156]	@ (8000658 <SystemClock_Config+0xcc>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c0:	4b25      	ldr	r3, [pc, #148]	@ (8000658 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b22      	ldr	r3, [pc, #136]	@ (800065c <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a21      	ldr	r2, [pc, #132]	@ (800065c <SystemClock_Config+0xd0>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000604:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fe9e 	bl	8004354 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800061e:	f000 f9cd 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2105      	movs	r1, #5
 8000640:	4618      	mov	r0, r3
 8000642:	f004 f8ff 	bl	8004844 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800064c:	f000 f9b6 	bl	80009bc <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	@ 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000666:	4a13      	ldr	r2, [pc, #76]	@ (80006b4 <MX_I2C1_Init+0x54>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_I2C1_Init+0x50>)
 800066c:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <MX_I2C1_Init+0x58>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_I2C1_Init+0x50>)
 800067e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000684:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <MX_I2C1_Init+0x50>)
 800069e:	f003 f875 	bl	800378c <HAL_I2C_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a8:	f000 f988 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000a4 	.word	0x200000a4
 80006b4:	40005400 	.word	0x40005400
 80006b8:	000186a0 	.word	0x000186a0

080006bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006c2:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <MX_I2S3_Init+0x58>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000718 <MX_I2S3_Init+0x5c>)
 80006e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006fc:	f003 f98a 	bl	8003a14 <HAL_I2S_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000706:	f000 f959 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000f8 	.word	0x200000f8
 8000714:	40003c00 	.word	0x40003c00
 8000718:	00017700 	.word	0x00017700

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000722:	4a18      	ldr	r2, [pc, #96]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000768:	220a      	movs	r2, #10
 800076a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_SPI1_Init+0x64>)
 800076e:	f004 fbb7 	bl	8004ee0 <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f920 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000140 	.word	0x20000140
 8000784:	40013000 	.word	0x40013000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	@ 0x30
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	4b72      	ldr	r3, [pc, #456]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a71      	ldr	r2, [pc, #452]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b6f      	ldr	r3, [pc, #444]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	4b6b      	ldr	r3, [pc, #428]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a6a      	ldr	r2, [pc, #424]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b68      	ldr	r3, [pc, #416]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b64      	ldr	r3, [pc, #400]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a63      	ldr	r2, [pc, #396]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b61      	ldr	r3, [pc, #388]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b5d      	ldr	r3, [pc, #372]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a5c      	ldr	r2, [pc, #368]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b5a      	ldr	r3, [pc, #360]	@ (800096c <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b56      	ldr	r3, [pc, #344]	@ (800096c <MX_GPIO_Init+0x1e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a55      	ldr	r2, [pc, #340]	@ (800096c <MX_GPIO_Init+0x1e4>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b53      	ldr	r3, [pc, #332]	@ (800096c <MX_GPIO_Init+0x1e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b4f      	ldr	r3, [pc, #316]	@ (800096c <MX_GPIO_Init+0x1e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a4e      	ldr	r2, [pc, #312]	@ (800096c <MX_GPIO_Init+0x1e4>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b4c      	ldr	r3, [pc, #304]	@ (800096c <MX_GPIO_Init+0x1e4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2108      	movs	r1, #8
 800084a:	4849      	ldr	r0, [pc, #292]	@ (8000970 <MX_GPIO_Init+0x1e8>)
 800084c:	f000 fe36 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2101      	movs	r1, #1
 8000854:	4847      	ldr	r0, [pc, #284]	@ (8000974 <MX_GPIO_Init+0x1ec>)
 8000856:	f000 fe31 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085a:	2200      	movs	r2, #0
 800085c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000860:	4845      	ldr	r0, [pc, #276]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 8000862:	f000 fe2b 	bl	80014bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	483c      	ldr	r0, [pc, #240]	@ (8000970 <MX_GPIO_Init+0x1e8>)
 800087e:	f000 fc81 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000882:	2301      	movs	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4836      	ldr	r0, [pc, #216]	@ (8000974 <MX_GPIO_Init+0x1ec>)
 800089a:	f000 fc73 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800089e:	2308      	movs	r3, #8
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ae:	2305      	movs	r3, #5
 80008b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	482e      	ldr	r0, [pc, #184]	@ (8000974 <MX_GPIO_Init+0x1ec>)
 80008ba:	f000 fc63 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	482a      	ldr	r0, [pc, #168]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80008d4:	f000 fc56 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d8:	2304      	movs	r3, #4
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4825      	ldr	r0, [pc, #148]	@ (8000980 <MX_GPIO_Init+0x1f8>)
 80008ec:	f000 fc4a 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000902:	2305      	movs	r3, #5
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	481c      	ldr	r0, [pc, #112]	@ (8000980 <MX_GPIO_Init+0x1f8>)
 800090e:	f000 fc39 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000912:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000916:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4813      	ldr	r0, [pc, #76]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 800092c:	f000 fc2a 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000930:	2320      	movs	r3, #32
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	480d      	ldr	r0, [pc, #52]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 8000944:	f000 fc1e 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000948:	2302      	movs	r3, #2
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_GPIO_Init+0x1e8>)
 800095e:	f000 fc11 	bl	8001184 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000962:	bf00      	nop
 8000964:	3730      	adds	r7, #48	@ 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40021000 	.word	0x40021000
 8000974:	40020800 	.word	0x40020800
 8000978:	40020c00 	.word	0x40020c00
 800097c:	40020000 	.word	0x40020000
 8000980:	40020400 	.word	0x40020400

08000984 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	e009      	b.n	80009aa <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	60ba      	str	r2, [r7, #8]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fda8 	bl	80004f4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	dbf1      	blt.n	8000996 <_write+0x12>
  }
  return len;
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a06:	2007      	movs	r0, #7
 8000a08:	f000 fb7a 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a19      	ldr	r2, [pc, #100]	@ (8000a9c <HAL_I2C_MspInit+0x84>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12c      	bne.n	8000a94 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_I2C_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a17      	ldr	r2, [pc, #92]	@ (8000aa0 <HAL_I2C_MspInit+0x88>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_I2C_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a56:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5c:	2312      	movs	r3, #18
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <HAL_I2C_MspInit+0x8c>)
 8000a74:	f000 fb86 	bl	8001184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <HAL_I2C_MspInit+0x88>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a07      	ldr	r2, [pc, #28]	@ (8000aa0 <HAL_I2C_MspInit+0x88>)
 8000a82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <HAL_I2C_MspInit+0x88>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	@ 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	@ 0x38
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a31      	ldr	r2, [pc, #196]	@ (8000b98 <HAL_I2S_MspInit+0xf0>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d15a      	bne.n	8000b8e <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000adc:	23c0      	movs	r3, #192	@ 0xc0
 8000ade:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 f8b7 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000af4:	f7ff ff62 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <HAL_I2S_MspInit+0xf4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	4a26      	ldr	r2, [pc, #152]	@ (8000b9c <HAL_I2S_MspInit+0xf4>)
 8000b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b08:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <HAL_I2S_MspInit+0xf4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <HAL_I2S_MspInit+0xf4>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000b9c <HAL_I2S_MspInit+0xf4>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b24:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <HAL_I2S_MspInit+0xf4>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_I2S_MspInit+0xf4>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	4a18      	ldr	r2, [pc, #96]	@ (8000b9c <HAL_I2S_MspInit+0xf4>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_I2S_MspInit+0xf4>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b5c:	2306      	movs	r3, #6
 8000b5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	480e      	ldr	r0, [pc, #56]	@ (8000ba0 <HAL_I2S_MspInit+0xf8>)
 8000b68:	f000 fb0c 	bl	8001184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b6c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b7e:	2306      	movs	r3, #6
 8000b80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <HAL_I2S_MspInit+0xfc>)
 8000b8a:	f000 fafb 	bl	8001184 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b8e:	bf00      	nop
 8000b90:	3738      	adds	r7, #56	@ 0x38
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40003c00 	.word	0x40003c00
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020800 	.word	0x40020800

08000ba8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	@ (8000c2c <HAL_SPI_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12b      	bne.n	8000c22 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	4a17      	ldr	r2, [pc, #92]	@ (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a10      	ldr	r2, [pc, #64]	@ (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c02:	23e0      	movs	r3, #224	@ 0xe0
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c12:	2305      	movs	r3, #5
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <HAL_SPI_MspInit+0x8c>)
 8000c1e:	f000 fab1 	bl	8001184 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	@ 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40013000 	.word	0x40013000
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <NMI_Handler+0x4>

08000c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <MemManage_Handler+0x4>

08000c50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8e:	f000 f923 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <OTG_FS_IRQHandler+0x10>)
 8000c9e:	f000 ff21 	bl	8001ae4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000057c 	.word	0x2000057c

08000cac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e00a      	b.n	8000cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cbe:	f3af 8000 	nop.w
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf0      	blt.n	8000cbe <_read+0x12>
  }

  return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <_isatty>:

int _isatty(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	@ (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	@ (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f008 f942 	bl	8009008 <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20020000 	.word	0x20020000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	20000198 	.word	0x20000198
 8000db8:	20000aa8 	.word	0x20000aa8

08000dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000de4:	f7ff ffea 	bl	8000dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	@ (8000e20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	@ (8000e24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	@ (8000e2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f008 f901 	bl	8009014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fb97 	bl	8000544 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000e24:	080093ac 	.word	0x080093ac
  ldr r2, =_sbss
 8000e28:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e2c:	20000aa8 	.word	0x20000aa8

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f94f 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fdae 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f967 	bl	800116a <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f92f 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	@ (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	2000019c 	.word	0x2000019c

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	2000019c 	.word	0x2000019c

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	@ (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	@ (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	@ 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff29 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff3e 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff31 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffa2 	bl	80010bc <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	@ 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	e16b      	b.n	8001478 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f040 815a 	bne.w	8001472 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d005      	beq.n	80011d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d130      	bne.n	8001238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800120c:	2201      	movs	r2, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 0201 	and.w	r2, r3, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d123      	bne.n	80012c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	69b9      	ldr	r1, [r7, #24]
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80b4 	beq.w	8001472 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b60      	ldr	r3, [pc, #384]	@ (8001490 <HAL_GPIO_Init+0x30c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	4a5f      	ldr	r2, [pc, #380]	@ (8001490 <HAL_GPIO_Init+0x30c>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001318:	6453      	str	r3, [r2, #68]	@ 0x44
 800131a:	4b5d      	ldr	r3, [pc, #372]	@ (8001490 <HAL_GPIO_Init+0x30c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001326:	4a5b      	ldr	r2, [pc, #364]	@ (8001494 <HAL_GPIO_Init+0x310>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a52      	ldr	r2, [pc, #328]	@ (8001498 <HAL_GPIO_Init+0x314>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d02b      	beq.n	80013aa <HAL_GPIO_Init+0x226>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a51      	ldr	r2, [pc, #324]	@ (800149c <HAL_GPIO_Init+0x318>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d025      	beq.n	80013a6 <HAL_GPIO_Init+0x222>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a50      	ldr	r2, [pc, #320]	@ (80014a0 <HAL_GPIO_Init+0x31c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d01f      	beq.n	80013a2 <HAL_GPIO_Init+0x21e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4f      	ldr	r2, [pc, #316]	@ (80014a4 <HAL_GPIO_Init+0x320>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d019      	beq.n	800139e <HAL_GPIO_Init+0x21a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4e      	ldr	r2, [pc, #312]	@ (80014a8 <HAL_GPIO_Init+0x324>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x216>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4d      	ldr	r2, [pc, #308]	@ (80014ac <HAL_GPIO_Init+0x328>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x212>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4c      	ldr	r2, [pc, #304]	@ (80014b0 <HAL_GPIO_Init+0x32c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x20e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	@ (80014b4 <HAL_GPIO_Init+0x330>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x20a>
 800138a:	2307      	movs	r3, #7
 800138c:	e00e      	b.n	80013ac <HAL_GPIO_Init+0x228>
 800138e:	2308      	movs	r3, #8
 8001390:	e00c      	b.n	80013ac <HAL_GPIO_Init+0x228>
 8001392:	2306      	movs	r3, #6
 8001394:	e00a      	b.n	80013ac <HAL_GPIO_Init+0x228>
 8001396:	2305      	movs	r3, #5
 8001398:	e008      	b.n	80013ac <HAL_GPIO_Init+0x228>
 800139a:	2304      	movs	r3, #4
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x228>
 800139e:	2303      	movs	r3, #3
 80013a0:	e004      	b.n	80013ac <HAL_GPIO_Init+0x228>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e002      	b.n	80013ac <HAL_GPIO_Init+0x228>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x228>
 80013aa:	2300      	movs	r3, #0
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	f002 0203 	and.w	r2, r2, #3
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	4093      	lsls	r3, r2
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013bc:	4935      	ldr	r1, [pc, #212]	@ (8001494 <HAL_GPIO_Init+0x310>)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ca:	4b3b      	ldr	r3, [pc, #236]	@ (80014b8 <HAL_GPIO_Init+0x334>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ee:	4a32      	ldr	r2, [pc, #200]	@ (80014b8 <HAL_GPIO_Init+0x334>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f4:	4b30      	ldr	r3, [pc, #192]	@ (80014b8 <HAL_GPIO_Init+0x334>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001418:	4a27      	ldr	r2, [pc, #156]	@ (80014b8 <HAL_GPIO_Init+0x334>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800141e:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <HAL_GPIO_Init+0x334>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001442:	4a1d      	ldr	r2, [pc, #116]	@ (80014b8 <HAL_GPIO_Init+0x334>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001448:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <HAL_GPIO_Init+0x334>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146c:	4a12      	ldr	r2, [pc, #72]	@ (80014b8 <HAL_GPIO_Init+0x334>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	f67f ae90 	bls.w	80011a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3724      	adds	r7, #36	@ 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40013800 	.word	0x40013800
 8001498:	40020000 	.word	0x40020000
 800149c:	40020400 	.word	0x40020400
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40021400 	.word	0x40021400
 80014b0:	40021800 	.word	0x40021800
 80014b4:	40021c00 	.word	0x40021c00
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001500:	887a      	ldrh	r2, [r7, #2]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	041a      	lsls	r2, r3, #16
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43d9      	mvns	r1, r3
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	400b      	ands	r3, r1
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af02      	add	r7, sp, #8
 8001528:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e059      	b.n	80015e8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d106      	bne.n	8001554 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f006 ff9a 	bl	8008488 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2203      	movs	r2, #3
 8001558:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001562:	d102      	bne.n	800156a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fdb4 	bl	80050dc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7c1a      	ldrb	r2, [r3, #16]
 800157c:	f88d 2000 	strb.w	r2, [sp]
 8001580:	3304      	adds	r3, #4
 8001582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001584:	f003 fd35 	bl	8004ff2 <USB_CoreInit>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2202      	movs	r2, #2
 8001592:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e026      	b.n	80015e8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2101      	movs	r1, #1
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fdac 	bl	80050fe <USB_SetCurrentMode>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e017      	b.n	80015e8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7c1a      	ldrb	r2, [r3, #16]
 80015c0:	f88d 2000 	strb.w	r2, [sp]
 80015c4:	3304      	adds	r3, #4
 80015c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c8:	f003 ff4e 	bl	8005468 <USB_HostInit>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2202      	movs	r2, #2
 80015d6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e004      	b.n	80015e8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b08b      	sub	sp, #44	@ 0x2c
 80015f4:	af04      	add	r7, sp, #16
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	4608      	mov	r0, r1
 80015fa:	4611      	mov	r1, r2
 80015fc:	461a      	mov	r2, r3
 80015fe:	4603      	mov	r3, r0
 8001600:	70fb      	strb	r3, [r7, #3]
 8001602:	460b      	mov	r3, r1
 8001604:	70bb      	strb	r3, [r7, #2]
 8001606:	4613      	mov	r3, r2
 8001608:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800160a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800160c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_HCD_HC_Init+0x2c>
 8001618:	2302      	movs	r3, #2
 800161a:	e09d      	b.n	8001758 <HAL_HCD_HC_Init+0x168>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	3319      	adds	r3, #25
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	3314      	adds	r3, #20
 8001648:	787a      	ldrb	r2, [r7, #1]
 800164a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800164c:	78fa      	ldrb	r2, [r7, #3]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3315      	adds	r3, #21
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	3326      	adds	r3, #38	@ 0x26
 8001670:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001674:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	78bb      	ldrb	r3, [r7, #2]
 800167a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800167e:	b2d8      	uxtb	r0, r3
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	1a9b      	subs	r3, r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	3316      	adds	r3, #22
 800168e:	4602      	mov	r2, r0
 8001690:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	4619      	mov	r1, r3
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fbc8 	bl	8001e2c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800169c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da0a      	bge.n	80016ba <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016a4:	78fa      	ldrb	r2, [r7, #3]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	1a9b      	subs	r3, r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	3317      	adds	r3, #23
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e009      	b.n	80016ce <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016ba:	78fa      	ldrb	r2, [r7, #3]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	3317      	adds	r3, #23
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 f82c 	bl	8005730 <USB_GetHostSpeed>
 80016d8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d10b      	bne.n	80016fa <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d107      	bne.n	80016fa <HAL_HCD_HC_Init+0x10a>
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d104      	bne.n	80016fa <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2bbc      	cmp	r3, #188	@ 0xbc
 80016f4:	d901      	bls.n	80016fa <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016f6:	23bc      	movs	r3, #188	@ 0xbc
 80016f8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016fa:	78fa      	ldrb	r2, [r7, #3]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	1a9b      	subs	r3, r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	3318      	adds	r3, #24
 800170a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800170e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001710:	78fa      	ldrb	r2, [r7, #3]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	b298      	uxth	r0, r3
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	1a9b      	subs	r3, r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	3328      	adds	r3, #40	@ 0x28
 8001724:	4602      	mov	r2, r0
 8001726:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	b29b      	uxth	r3, r3
 8001730:	787c      	ldrb	r4, [r7, #1]
 8001732:	78ba      	ldrb	r2, [r7, #2]
 8001734:	78f9      	ldrb	r1, [r7, #3]
 8001736:	9302      	str	r3, [sp, #8]
 8001738:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4623      	mov	r3, r4
 8001746:	f004 f81b 	bl	8005780 <USB_HC_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}

08001760 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_HCD_HC_Halt+0x1e>
 800177a:	2302      	movs	r3, #2
 800177c:	e00f      	b.n	800179e <HAL_HCD_HC_Halt+0x3e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f004 fbad 	bl	8005eee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800179c:	7bfb      	ldrb	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	70fb      	strb	r3, [r7, #3]
 80017ba:	460b      	mov	r3, r1
 80017bc:	70bb      	strb	r3, [r7, #2]
 80017be:	4613      	mov	r3, r2
 80017c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	1a9b      	subs	r3, r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	3317      	adds	r3, #23
 80017d2:	78ba      	ldrb	r2, [r7, #2]
 80017d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	1a9b      	subs	r3, r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	3326      	adds	r3, #38	@ 0x26
 80017e6:	787a      	ldrb	r2, [r7, #1]
 80017e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017ea:	7c3b      	ldrb	r3, [r7, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d114      	bne.n	800181a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	332a      	adds	r3, #42	@ 0x2a
 8001800:	2203      	movs	r2, #3
 8001802:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	3319      	adds	r3, #25
 8001814:	7f3a      	ldrb	r2, [r7, #28]
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	e009      	b.n	800182e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800181a:	78fa      	ldrb	r2, [r7, #3]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	332a      	adds	r3, #42	@ 0x2a
 800182a:	2202      	movs	r2, #2
 800182c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800182e:	787b      	ldrb	r3, [r7, #1]
 8001830:	2b03      	cmp	r3, #3
 8001832:	f200 8102 	bhi.w	8001a3a <HAL_HCD_HC_SubmitRequest+0x292>
 8001836:	a201      	add	r2, pc, #4	@ (adr r2, 800183c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800184d 	.word	0x0800184d
 8001840:	08001a25 	.word	0x08001a25
 8001844:	08001911 	.word	0x08001911
 8001848:	0800199b 	.word	0x0800199b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800184c:	7c3b      	ldrb	r3, [r7, #16]
 800184e:	2b01      	cmp	r3, #1
 8001850:	f040 80f5 	bne.w	8001a3e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001854:	78bb      	ldrb	r3, [r7, #2]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d12d      	bne.n	80018b6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800185a:	8b3b      	ldrh	r3, [r7, #24]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	333d      	adds	r3, #61	@ 0x3d
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	333d      	adds	r3, #61	@ 0x3d
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10a      	bne.n	80018a0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	332a      	adds	r3, #42	@ 0x2a
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800189e:	e0ce      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	332a      	adds	r3, #42	@ 0x2a
 80018b0:	2202      	movs	r2, #2
 80018b2:	701a      	strb	r2, [r3, #0]
      break;
 80018b4:	e0c3      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	331a      	adds	r3, #26
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	f040 80b8 	bne.w	8001a3e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	333c      	adds	r3, #60	@ 0x3c
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10a      	bne.n	80018fa <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	332a      	adds	r3, #42	@ 0x2a
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
      break;
 80018f8:	e0a1      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	332a      	adds	r3, #42	@ 0x2a
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]
      break;
 800190e:	e096      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001910:	78bb      	ldrb	r3, [r7, #2]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d120      	bne.n	8001958 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	333d      	adds	r3, #61	@ 0x3d
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10a      	bne.n	8001942 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	332a      	adds	r3, #42	@ 0x2a
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001940:	e07e      	b.n	8001a40 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	332a      	adds	r3, #42	@ 0x2a
 8001952:	2202      	movs	r2, #2
 8001954:	701a      	strb	r2, [r3, #0]
      break;
 8001956:	e073      	b.n	8001a40 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	333c      	adds	r3, #60	@ 0x3c
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10a      	bne.n	8001984 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	332a      	adds	r3, #42	@ 0x2a
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
      break;
 8001982:	e05d      	b.n	8001a40 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	332a      	adds	r3, #42	@ 0x2a
 8001994:	2202      	movs	r2, #2
 8001996:	701a      	strb	r2, [r3, #0]
      break;
 8001998:	e052      	b.n	8001a40 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800199a:	78bb      	ldrb	r3, [r7, #2]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d120      	bne.n	80019e2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	333d      	adds	r3, #61	@ 0x3d
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10a      	bne.n	80019cc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	332a      	adds	r3, #42	@ 0x2a
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019ca:	e039      	b.n	8001a40 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	332a      	adds	r3, #42	@ 0x2a
 80019dc:	2202      	movs	r2, #2
 80019de:	701a      	strb	r2, [r3, #0]
      break;
 80019e0:	e02e      	b.n	8001a40 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019e2:	78fa      	ldrb	r2, [r7, #3]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	333c      	adds	r3, #60	@ 0x3c
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10a      	bne.n	8001a0e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	332a      	adds	r3, #42	@ 0x2a
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
      break;
 8001a0c:	e018      	b.n	8001a40 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a0e:	78fa      	ldrb	r2, [r7, #3]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	332a      	adds	r3, #42	@ 0x2a
 8001a1e:	2202      	movs	r2, #2
 8001a20:	701a      	strb	r2, [r3, #0]
      break;
 8001a22:	e00d      	b.n	8001a40 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	332a      	adds	r3, #42	@ 0x2a
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
      break;
 8001a38:	e002      	b.n	8001a40 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a3a:	bf00      	nop
 8001a3c:	e000      	b.n	8001a40 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a3e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	332c      	adds	r3, #44	@ 0x2c
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	8b39      	ldrh	r1, [r7, #24]
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4403      	add	r3, r0
 8001a64:	3334      	adds	r3, #52	@ 0x34
 8001a66:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	334c      	adds	r3, #76	@ 0x4c
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	1a9b      	subs	r3, r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	3338      	adds	r3, #56	@ 0x38
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3315      	adds	r3, #21
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001aa4:	78fa      	ldrb	r2, [r7, #3]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	1a9b      	subs	r3, r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	334d      	adds	r3, #77	@ 0x4d
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	3310      	adds	r3, #16
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	1d19      	adds	r1, r3, #4
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	799b      	ldrb	r3, [r3, #6]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f003 ff80 	bl	80059d8 <USB_HC_StartXfer>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop

08001ae4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fc75 	bl	80053ea <USB_GetMode>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	f040 80fb 	bne.w	8001cfe <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 fc38 	bl	8005382 <USB_ReadInterrupts>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80f1 	beq.w	8001cfc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fc2f 	bl	8005382 <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b2e:	d104      	bne.n	8001b3a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 fc1f 	bl	8005382 <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b4e:	d104      	bne.n	8001b5a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fc0f 	bl	8005382 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b6e:	d104      	bne.n	8001b7a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fbff 	bl	8005382 <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d103      	bne.n	8001b96 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2202      	movs	r2, #2
 8001b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fbf1 	bl	8005382 <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001baa:	d120      	bne.n	8001bee <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001bb4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d113      	bne.n	8001bee <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	6938      	ldr	r0, [r7, #16]
 8001bca:	f003 fae4 	bl	8005196 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bce:	6938      	ldr	r0, [r7, #16]
 8001bd0:	f003 fb13 	bl	80051fa <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7a5b      	ldrb	r3, [r3, #9]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d105      	bne.n	8001be8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2101      	movs	r1, #1
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fd04 	bl	80055f0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f006 fccb 	bl	8008584 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fbc5 	bl	8005382 <USB_ReadInterrupts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c02:	d102      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f001 fd4d 	bl	80036a4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fbb7 	bl	8005382 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d106      	bne.n	8001c2c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f006 fc94 	bl	800854c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2208      	movs	r2, #8
 8001c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f003 fba6 	bl	8005382 <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c40:	d139      	bne.n	8001cb6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 f940 	bl	8005ecc <USB_HC_ReadInterrupt>
 8001c4c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e025      	b.n	8001ca0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d018      	beq.n	8001c9a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c7e:	d106      	bne.n	8001c8e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4619      	mov	r1, r3
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f905 	bl	8001e96 <HCD_HC_IN_IRQHandler>
 8001c8c:	e005      	b.n	8001c9a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 ff67 	bl	8002b68 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	795b      	ldrb	r3, [r3, #5]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d3d3      	bcc.n	8001c54 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fb61 	bl	8005382 <USB_ReadInterrupts>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d101      	bne.n	8001cce <HAL_HCD_IRQHandler+0x1ea>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_HCD_IRQHandler+0x1ec>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d014      	beq.n	8001cfe <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0210 	bic.w	r2, r2, #16
 8001ce2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f001 fbfe 	bl	80034e6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699a      	ldr	r2, [r3, #24]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0210 	orr.w	r2, r2, #16
 8001cf8:	619a      	str	r2, [r3, #24]
 8001cfa:	e000      	b.n	8001cfe <HAL_HCD_IRQHandler+0x21a>
      return;
 8001cfc:	bf00      	nop
    }
  }
}
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_HCD_Start+0x16>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e013      	b.n	8001d42 <HAL_HCD_Start+0x3e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2101      	movs	r1, #1
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 fcc8 	bl	80056be <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 f9c1 	bl	80050ba <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_HCD_Stop+0x16>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e00d      	b.n	8001d7c <HAL_HCD_Stop+0x32>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f004 fa1b 	bl	80061a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fc6a 	bl	800566a <USB_ResetPort>
 8001d96:	4603      	mov	r3, r0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	334c      	adds	r3, #76	@ 0x4c
 8001dbc:	781b      	ldrb	r3, [r3, #0]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	3338      	adds	r3, #56	@ 0x38
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 fcac 	bl	800575e <USB_GetCurrentFrame>
 8001e06:	4603      	mov	r3, r0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 fc87 	bl	8005730 <USB_GetHostSpeed>
 8001e22:	4603      	mov	r3, r0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e38:	78fa      	ldrb	r2, [r7, #3]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	331a      	adds	r3, #26
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	331b      	adds	r3, #27
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3325      	adds	r3, #37	@ 0x25
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3324      	adds	r3, #36	@ 0x24
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 fa77 	bl	80053a8 <USB_ReadChInterrupts>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d11a      	bne.n	8001efa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	334d      	adds	r3, #77	@ 0x4d
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 fffb 	bl	8005eee <USB_HC_Halt>
 8001ef8:	e09e      	b.n	8002038 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 fa50 	bl	80053a8 <USB_ReadChInterrupts>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f12:	d11b      	bne.n	8001f4c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f20:	461a      	mov	r2, r3
 8001f22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	334d      	adds	r3, #77	@ 0x4d
 8001f38:	2208      	movs	r2, #8
 8001f3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 ffd2 	bl	8005eee <USB_HC_Halt>
 8001f4a:	e075      	b.n	8002038 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fa27 	bl	80053a8 <USB_ReadChInterrupts>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d11a      	bne.n	8001f9a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f70:	461a      	mov	r2, r3
 8001f72:	2308      	movs	r3, #8
 8001f74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	334d      	adds	r3, #77	@ 0x4d
 8001f86:	2206      	movs	r2, #6
 8001f88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 ffab 	bl	8005eee <USB_HC_Halt>
 8001f98:	e04e      	b.n	8002038 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 fa00 	bl	80053a8 <USB_ReadChInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb2:	d11b      	bne.n	8001fec <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	334d      	adds	r3, #77	@ 0x4d
 8001fd8:	2209      	movs	r2, #9
 8001fda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 ff82 	bl	8005eee <USB_HC_Halt>
 8001fea:	e025      	b.n	8002038 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 f9d7 	bl	80053a8 <USB_ReadChInterrupts>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002000:	2b80      	cmp	r3, #128	@ 0x80
 8002002:	d119      	bne.n	8002038 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002010:	461a      	mov	r2, r3
 8002012:	2380      	movs	r3, #128	@ 0x80
 8002014:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	334d      	adds	r3, #77	@ 0x4d
 8002026:	2207      	movs	r2, #7
 8002028:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f003 ff5b 	bl	8005eee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f003 f9b1 	bl	80053a8 <USB_ReadChInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800204c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002050:	d112      	bne.n	8002078 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f003 ff47 	bl	8005eee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800206c:	461a      	mov	r2, r3
 800206e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002072:	6093      	str	r3, [r2, #8]
 8002074:	f000 bd75 	b.w	8002b62 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f003 f991 	bl	80053a8 <USB_ReadChInterrupts>
 8002086:	4603      	mov	r3, r0
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	f040 8128 	bne.w	80022e2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800209e:	461a      	mov	r2, r3
 80020a0:	2320      	movs	r3, #32
 80020a2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	331b      	adds	r3, #27
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d119      	bne.n	80020ee <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	331b      	adds	r3, #27
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	0151      	lsls	r1, r2, #5
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	440a      	add	r2, r1
 80020e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ec:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	799b      	ldrb	r3, [r3, #6]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01b      	beq.n	800212e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	3330      	adds	r3, #48	@ 0x30
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	1ac9      	subs	r1, r1, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4403      	add	r3, r0
 800212a:	3338      	adds	r3, #56	@ 0x38
 800212c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800212e:	78fa      	ldrb	r2, [r7, #3]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	334d      	adds	r3, #77	@ 0x4d
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3344      	adds	r3, #68	@ 0x44
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002162:	461a      	mov	r2, r3
 8002164:	2301      	movs	r3, #1
 8002166:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	3326      	adds	r3, #38	@ 0x26
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	3326      	adds	r3, #38	@ 0x26
 800218e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002190:	2b02      	cmp	r3, #2
 8002192:	d110      	bne.n	80021b6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f003 fea6 	bl	8005eee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ae:	461a      	mov	r2, r3
 80021b0:	2310      	movs	r3, #16
 80021b2:	6093      	str	r3, [r2, #8]
 80021b4:	e03d      	b.n	8002232 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3326      	adds	r3, #38	@ 0x26
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d00a      	beq.n	80021e2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3326      	adds	r3, #38	@ 0x26
 80021dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d127      	bne.n	8002232 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	0151      	lsls	r1, r2, #5
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	440a      	add	r2, r1
 80021f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002200:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	334c      	adds	r3, #76	@ 0x4c
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	334c      	adds	r3, #76	@ 0x4c
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	4619      	mov	r1, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f006 f9b7 	bl	80085a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	799b      	ldrb	r3, [r3, #6]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d13b      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3338      	adds	r3, #56	@ 0x38
 800224a:	6819      	ldr	r1, [r3, #0]
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4403      	add	r3, r0
 800225a:	3328      	adds	r3, #40	@ 0x28
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	440b      	add	r3, r1
 8002260:	1e59      	subs	r1, r3, #1
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4403      	add	r3, r0
 8002270:	3328      	adds	r3, #40	@ 0x28
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	fbb1 f3f3 	udiv	r3, r1, r3
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8470 	beq.w	8002b62 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	333c      	adds	r3, #60	@ 0x3c
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	f083 0301 	eor.w	r3, r3, #1
 800229a:	b2d8      	uxtb	r0, r3
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	333c      	adds	r3, #60	@ 0x3c
 80022aa:	4602      	mov	r2, r0
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	f000 bc58 	b.w	8002b62 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	333c      	adds	r3, #60	@ 0x3c
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	f083 0301 	eor.w	r3, r3, #1
 80022ca:	b2d8      	uxtb	r0, r3
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	333c      	adds	r3, #60	@ 0x3c
 80022da:	4602      	mov	r2, r0
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	f000 bc40 	b.w	8002b62 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 f85c 	bl	80053a8 <USB_ReadChInterrupts>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	d131      	bne.n	800235e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002306:	461a      	mov	r2, r3
 8002308:	2320      	movs	r3, #32
 800230a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	331a      	adds	r3, #26
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	f040 841f 	bne.w	8002b62 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	331b      	adds	r3, #27
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	334d      	adds	r3, #77	@ 0x4d
 8002348:	2203      	movs	r2, #3
 800234a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f003 fdca 	bl	8005eee <USB_HC_Halt>
 800235a:	f000 bc02 	b.w	8002b62 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f003 f81e 	bl	80053a8 <USB_ReadChInterrupts>
 800236c:	4603      	mov	r3, r0
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b02      	cmp	r3, #2
 8002374:	f040 8305 	bne.w	8002982 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002384:	461a      	mov	r2, r3
 8002386:	2302      	movs	r3, #2
 8002388:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	334d      	adds	r3, #77	@ 0x4d
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d114      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	334d      	adds	r3, #77	@ 0x4d
 80023b0:	2202      	movs	r2, #2
 80023b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	334c      	adds	r3, #76	@ 0x4c
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e2cc      	b.n	8002964 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	334d      	adds	r3, #77	@ 0x4d
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b06      	cmp	r3, #6
 80023de:	d114      	bne.n	800240a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	334d      	adds	r3, #77	@ 0x4d
 80023f0:	2202      	movs	r2, #2
 80023f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	334c      	adds	r3, #76	@ 0x4c
 8002404:	2205      	movs	r2, #5
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e2ac      	b.n	8002964 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	334d      	adds	r3, #77	@ 0x4d
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b07      	cmp	r3, #7
 800241e:	d00b      	beq.n	8002438 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	334d      	adds	r3, #77	@ 0x4d
 8002430:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002432:	2b09      	cmp	r3, #9
 8002434:	f040 80a6 	bne.w	8002584 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	334d      	adds	r3, #77	@ 0x4d
 8002448:	2202      	movs	r2, #2
 800244a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3344      	adds	r3, #68	@ 0x44
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1c59      	adds	r1, r3, #1
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4403      	add	r3, r0
 800246c:	3344      	adds	r3, #68	@ 0x44
 800246e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	3344      	adds	r3, #68	@ 0x44
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d943      	bls.n	800250e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	3344      	adds	r3, #68	@ 0x44
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	331a      	adds	r3, #26
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d123      	bne.n	80024f8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	331b      	adds	r3, #27
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	331c      	adds	r3, #28
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	0151      	lsls	r1, r2, #5
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	440a      	add	r2, r1
 80024ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	334c      	adds	r3, #76	@ 0x4c
 8002508:	2204      	movs	r2, #4
 800250a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800250c:	e229      	b.n	8002962 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	334c      	adds	r3, #76	@ 0x4c
 800251e:	2202      	movs	r2, #2
 8002520:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3326      	adds	r3, #38	@ 0x26
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3326      	adds	r3, #38	@ 0x26
 8002548:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800254a:	2b02      	cmp	r3, #2
 800254c:	f040 8209 	bne.w	8002962 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002566:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800256e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800257c:	461a      	mov	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002582:	e1ee      	b.n	8002962 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	334d      	adds	r3, #77	@ 0x4d
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b05      	cmp	r3, #5
 8002598:	f040 80c8 	bne.w	800272c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	334d      	adds	r3, #77	@ 0x4d
 80025ac:	2202      	movs	r2, #2
 80025ae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	331b      	adds	r3, #27
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	f040 81ce 	bne.w	8002964 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	3326      	adds	r3, #38	@ 0x26
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d16b      	bne.n	80026b6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3348      	adds	r3, #72	@ 0x48
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	1c59      	adds	r1, r3, #1
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4403      	add	r3, r0
 80025fe:	3348      	adds	r3, #72	@ 0x48
 8002600:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	3348      	adds	r3, #72	@ 0x48
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d943      	bls.n	80026a0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3348      	adds	r3, #72	@ 0x48
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	331b      	adds	r3, #27
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3344      	adds	r3, #68	@ 0x44
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d809      	bhi.n	800266a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	331c      	adds	r3, #28
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	0151      	lsls	r1, r2, #5
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	440a      	add	r2, r1
 8002680:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002688:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	334c      	adds	r3, #76	@ 0x4c
 800269a:	2204      	movs	r2, #4
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e014      	b.n	80026ca <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	334c      	adds	r3, #76	@ 0x4c
 80026b0:	2202      	movs	r2, #2
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	e009      	b.n	80026ca <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	334c      	adds	r3, #76	@ 0x4c
 80026c6:	2202      	movs	r2, #2
 80026c8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	3326      	adds	r3, #38	@ 0x26
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	3326      	adds	r3, #38	@ 0x26
 80026f0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	f040 8136 	bne.w	8002964 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800270e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002716:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e11b      	b.n	8002964 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	334d      	adds	r3, #77	@ 0x4d
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b03      	cmp	r3, #3
 8002740:	f040 8081 	bne.w	8002846 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	334d      	adds	r3, #77	@ 0x4d
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	331b      	adds	r3, #27
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	f040 80fa 	bne.w	8002964 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	334c      	adds	r3, #76	@ 0x4c
 8002780:	2202      	movs	r2, #2
 8002782:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	0151      	lsls	r1, r2, #5
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	440a      	add	r2, r1
 800279a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800279e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	0151      	lsls	r1, r2, #5
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	440a      	add	r2, r1
 80027ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027c2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	0151      	lsls	r1, r2, #5
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	440a      	add	r2, r1
 80027da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027de:	f023 0320 	bic.w	r3, r3, #32
 80027e2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	3326      	adds	r3, #38	@ 0x26
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	3326      	adds	r3, #38	@ 0x26
 800280a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800280c:	2b02      	cmp	r3, #2
 800280e:	f040 80a9 	bne.w	8002964 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002828:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002830:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800283e:	461a      	mov	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	e08e      	b.n	8002964 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	334d      	adds	r3, #77	@ 0x4d
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b04      	cmp	r3, #4
 800285a:	d143      	bne.n	80028e4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	334d      	adds	r3, #77	@ 0x4d
 800286c:	2202      	movs	r2, #2
 800286e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	334c      	adds	r3, #76	@ 0x4c
 8002880:	2202      	movs	r2, #2
 8002882:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3326      	adds	r3, #38	@ 0x26
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3326      	adds	r3, #38	@ 0x26
 80028aa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d159      	bne.n	8002964 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028c6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028ce:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028dc:	461a      	mov	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e03f      	b.n	8002964 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	334d      	adds	r3, #77	@ 0x4d
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d126      	bne.n	8002948 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	334d      	adds	r3, #77	@ 0x4d
 800290a:	2202      	movs	r2, #2
 800290c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3344      	adds	r3, #68	@ 0x44
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	1c59      	adds	r1, r3, #1
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4403      	add	r3, r0
 800292e:	3344      	adds	r3, #68	@ 0x44
 8002930:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	334c      	adds	r3, #76	@ 0x4c
 8002942:	2204      	movs	r2, #4
 8002944:	701a      	strb	r2, [r3, #0]
 8002946:	e00d      	b.n	8002964 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	334d      	adds	r3, #77	@ 0x4d
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b02      	cmp	r3, #2
 800295c:	f000 8100 	beq.w	8002b60 <HCD_HC_IN_IRQHandler+0xcca>
 8002960:	e000      	b.n	8002964 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002962:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	334c      	adds	r3, #76	@ 0x4c
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f005 fe10 	bl	80085a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002980:	e0ef      	b.n	8002b62 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f002 fd0c 	bl	80053a8 <USB_ReadChInterrupts>
 8002990:	4603      	mov	r3, r0
 8002992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002996:	2b40      	cmp	r3, #64	@ 0x40
 8002998:	d12f      	bne.n	80029fa <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029a6:	461a      	mov	r2, r3
 80029a8:	2340      	movs	r3, #64	@ 0x40
 80029aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	334d      	adds	r3, #77	@ 0x4d
 80029bc:	2205      	movs	r2, #5
 80029be:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	331a      	adds	r3, #26
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	3344      	adds	r3, #68	@ 0x44
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f003 fa7b 	bl	8005eee <USB_HC_Halt>
 80029f8:	e0b3      	b.n	8002b62 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 fcd0 	bl	80053a8 <USB_ReadChInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	f040 80a7 	bne.w	8002b62 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3326      	adds	r3, #38	@ 0x26
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d11b      	bne.n	8002a62 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3344      	adds	r3, #68	@ 0x44
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	334d      	adds	r3, #77	@ 0x4d
 8002a4e:	2204      	movs	r2, #4
 8002a50:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 fa47 	bl	8005eee <USB_HC_Halt>
 8002a60:	e03f      	b.n	8002ae2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	3326      	adds	r3, #38	@ 0x26
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	3326      	adds	r3, #38	@ 0x26
 8002a88:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d129      	bne.n	8002ae2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3344      	adds	r3, #68	@ 0x44
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	799b      	ldrb	r3, [r3, #6]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HCD_HC_IN_IRQHandler+0xc2a>
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	331b      	adds	r3, #27
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d110      	bne.n	8002ae2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	334d      	adds	r3, #77	@ 0x4d
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 fa06 	bl	8005eee <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	331b      	adds	r3, #27
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d129      	bne.n	8002b4c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	331b      	adds	r3, #27
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	0151      	lsls	r1, r2, #5
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	440a      	add	r2, r1
 8002b22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b2a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	0151      	lsls	r1, r2, #5
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	440a      	add	r2, r1
 8002b42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b46:	f043 0320 	orr.w	r3, r3, #32
 8002b4a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2310      	movs	r3, #16
 8002b5c:	6093      	str	r3, [r2, #8]
 8002b5e:	e000      	b.n	8002b62 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b60:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 fc0e 	bl	80053a8 <USB_ReadChInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d11b      	bne.n	8002bce <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	334d      	adds	r3, #77	@ 0x4d
 8002bb8:	2207      	movs	r2, #7
 8002bba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 f992 	bl	8005eee <USB_HC_Halt>
 8002bca:	f000 bc89 	b.w	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 fbe6 	bl	80053a8 <USB_ReadChInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	f040 8082 	bne.w	8002cec <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	3319      	adds	r3, #25
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d124      	bne.n	8002c5a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3319      	adds	r3, #25
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	334c      	adds	r3, #76	@ 0x4c
 8002c34:	2202      	movs	r2, #2
 8002c36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	334d      	adds	r3, #77	@ 0x4d
 8002c48:	2203      	movs	r2, #3
 8002c4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 f94a 	bl	8005eee <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	331a      	adds	r3, #26
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	f040 8437 	bne.w	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	331b      	adds	r3, #27
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 842b 	bne.w	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3326      	adds	r3, #38	@ 0x26
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d009      	beq.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	331b      	adds	r3, #27
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	334d      	adds	r3, #77	@ 0x4d
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 f90c 	bl	8005eee <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3344      	adds	r3, #68	@ 0x44
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e3f9      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f002 fb57 	bl	80053a8 <USB_ReadChInterrupts>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d04:	d111      	bne.n	8002d2a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d18:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 f8e3 	bl	8005eee <USB_HC_Halt>
 8002d28:	e3da      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f002 fb38 	bl	80053a8 <USB_ReadChInterrupts>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d168      	bne.n	8002e14 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	3344      	adds	r3, #68	@ 0x44
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 fb22 	bl	80053a8 <USB_ReadChInterrupts>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6a:	2b40      	cmp	r3, #64	@ 0x40
 8002d6c:	d112      	bne.n	8002d94 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3319      	adds	r3, #25
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2340      	movs	r3, #64	@ 0x40
 8002d92:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	331b      	adds	r3, #27
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d019      	beq.n	8002dde <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	331b      	adds	r3, #27
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	0151      	lsls	r1, r2, #5
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	440a      	add	r2, r1
 8002dd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ddc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dea:	461a      	mov	r2, r3
 8002dec:	2301      	movs	r3, #1
 8002dee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	334d      	adds	r3, #77	@ 0x4d
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 f86e 	bl	8005eee <USB_HC_Halt>
 8002e12:	e365      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 fac3 	bl	80053a8 <USB_ReadChInterrupts>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e28:	2b40      	cmp	r3, #64	@ 0x40
 8002e2a:	d139      	bne.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	334d      	adds	r3, #77	@ 0x4d
 8002e3c:	2205      	movs	r2, #5
 8002e3e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	331a      	adds	r3, #26
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	3319      	adds	r3, #25
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	3344      	adds	r3, #68	@ 0x44
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 f831 	bl	8005eee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2340      	movs	r3, #64	@ 0x40
 8002e9c:	6093      	str	r3, [r2, #8]
 8002e9e:	e31f      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f002 fa7d 	bl	80053a8 <USB_ReadChInterrupts>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d11a      	bne.n	8002eee <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	334d      	adds	r3, #77	@ 0x4d
 8002eda:	2206      	movs	r2, #6
 8002edc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 f801 	bl	8005eee <USB_HC_Halt>
 8002eec:	e2f8      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 fa56 	bl	80053a8 <USB_ReadChInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d144      	bne.n	8002f90 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	3344      	adds	r3, #68	@ 0x44
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	334d      	adds	r3, #77	@ 0x4d
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3319      	adds	r3, #25
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d114      	bne.n	8002f6e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	3318      	adds	r3, #24
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3319      	adds	r3, #25
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 ffb9 	bl	8005eee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	6093      	str	r3, [r2, #8]
 8002f8e:	e2a7      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f002 fa05 	bl	80053a8 <USB_ReadChInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa4:	2b80      	cmp	r3, #128	@ 0x80
 8002fa6:	f040 8083 	bne.w	80030b0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	799b      	ldrb	r3, [r3, #6]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d111      	bne.n	8002fd6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	334d      	adds	r3, #77	@ 0x4d
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f002 ff8d 	bl	8005eee <USB_HC_Halt>
 8002fd4:	e062      	b.n	800309c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3344      	adds	r3, #68	@ 0x44
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	1c59      	adds	r1, r3, #1
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4403      	add	r3, r0
 8002ff6:	3344      	adds	r3, #68	@ 0x44
 8002ff8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	3344      	adds	r3, #68	@ 0x44
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d922      	bls.n	8003056 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3344      	adds	r3, #68	@ 0x44
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	334c      	adds	r3, #76	@ 0x4c
 8003034:	2204      	movs	r2, #4
 8003036:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	334c      	adds	r3, #76	@ 0x4c
 8003048:	781a      	ldrb	r2, [r3, #0]
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	4619      	mov	r1, r3
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f005 faa6 	bl	80085a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003054:	e022      	b.n	800309c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	334c      	adds	r3, #76	@ 0x4c
 8003066:	2202      	movs	r2, #2
 8003068:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003080:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003088:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003096:	461a      	mov	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a8:	461a      	mov	r2, r3
 80030aa:	2380      	movs	r3, #128	@ 0x80
 80030ac:	6093      	str	r3, [r2, #8]
 80030ae:	e217      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f002 f975 	bl	80053a8 <USB_ReadChInterrupts>
 80030be:	4603      	mov	r3, r0
 80030c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c8:	d11b      	bne.n	8003102 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	334d      	adds	r3, #77	@ 0x4d
 80030da:	2209      	movs	r2, #9
 80030dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f002 ff01 	bl	8005eee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f8:	461a      	mov	r2, r3
 80030fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030fe:	6093      	str	r3, [r2, #8]
 8003100:	e1ee      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f002 f94c 	bl	80053a8 <USB_ReadChInterrupts>
 8003110:	4603      	mov	r3, r0
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	f040 81df 	bne.w	80034da <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003128:	461a      	mov	r2, r3
 800312a:	2302      	movs	r3, #2
 800312c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	334d      	adds	r3, #77	@ 0x4d
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	f040 8093 	bne.w	800326c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	334d      	adds	r3, #77	@ 0x4d
 8003156:	2202      	movs	r2, #2
 8003158:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	334c      	adds	r3, #76	@ 0x4c
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3326      	adds	r3, #38	@ 0x26
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d00b      	beq.n	800319c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	3326      	adds	r3, #38	@ 0x26
 8003194:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003196:	2b03      	cmp	r3, #3
 8003198:	f040 8190 	bne.w	80034bc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	799b      	ldrb	r3, [r3, #6]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d115      	bne.n	80031d0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	333d      	adds	r3, #61	@ 0x3d
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	f083 0301 	eor.w	r3, r3, #1
 80031bc:	b2d8      	uxtb	r0, r3
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	333d      	adds	r3, #61	@ 0x3d
 80031cc:	4602      	mov	r2, r0
 80031ce:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	799b      	ldrb	r3, [r3, #6]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f040 8171 	bne.w	80034bc <HCD_HC_OUT_IRQHandler+0x954>
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	3334      	adds	r3, #52	@ 0x34
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8165 	beq.w	80034bc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3334      	adds	r3, #52	@ 0x34
 8003202:	6819      	ldr	r1, [r3, #0]
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4403      	add	r3, r0
 8003212:	3328      	adds	r3, #40	@ 0x28
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	440b      	add	r3, r1
 8003218:	1e59      	subs	r1, r3, #1
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4403      	add	r3, r0
 8003228:	3328      	adds	r3, #40	@ 0x28
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003230:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 813f 	beq.w	80034bc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	333d      	adds	r3, #61	@ 0x3d
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	f083 0301 	eor.w	r3, r3, #1
 8003256:	b2d8      	uxtb	r0, r3
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	333d      	adds	r3, #61	@ 0x3d
 8003266:	4602      	mov	r2, r0
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e127      	b.n	80034bc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	334d      	adds	r3, #77	@ 0x4d
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d120      	bne.n	80032c4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	334d      	adds	r3, #77	@ 0x4d
 8003292:	2202      	movs	r2, #2
 8003294:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	331b      	adds	r3, #27
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	f040 8107 	bne.w	80034bc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	334c      	adds	r3, #76	@ 0x4c
 80032be:	2202      	movs	r2, #2
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e0fb      	b.n	80034bc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	334d      	adds	r3, #77	@ 0x4d
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d13a      	bne.n	8003350 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	334d      	adds	r3, #77	@ 0x4d
 80032ea:	2202      	movs	r2, #2
 80032ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	334c      	adds	r3, #76	@ 0x4c
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	331b      	adds	r3, #27
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	f040 80d1 	bne.w	80034bc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	331b      	adds	r3, #27
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	0151      	lsls	r1, r2, #5
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	440a      	add	r2, r1
 8003344:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800334c:	6053      	str	r3, [r2, #4]
 800334e:	e0b5      	b.n	80034bc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	334d      	adds	r3, #77	@ 0x4d
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b05      	cmp	r3, #5
 8003364:	d114      	bne.n	8003390 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	334d      	adds	r3, #77	@ 0x4d
 8003376:	2202      	movs	r2, #2
 8003378:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	334c      	adds	r3, #76	@ 0x4c
 800338a:	2202      	movs	r2, #2
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e095      	b.n	80034bc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	334d      	adds	r3, #77	@ 0x4d
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d114      	bne.n	80033d0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	334d      	adds	r3, #77	@ 0x4d
 80033b6:	2202      	movs	r2, #2
 80033b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	334c      	adds	r3, #76	@ 0x4c
 80033ca:	2205      	movs	r2, #5
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	e075      	b.n	80034bc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	334d      	adds	r3, #77	@ 0x4d
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b07      	cmp	r3, #7
 80033e4:	d00a      	beq.n	80033fc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	334d      	adds	r3, #77	@ 0x4d
 80033f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033f8:	2b09      	cmp	r3, #9
 80033fa:	d170      	bne.n	80034de <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334d      	adds	r3, #77	@ 0x4d
 800340c:	2202      	movs	r2, #2
 800340e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	3344      	adds	r3, #68	@ 0x44
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4403      	add	r3, r0
 8003430:	3344      	adds	r3, #68	@ 0x44
 8003432:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	3344      	adds	r3, #68	@ 0x44
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d914      	bls.n	8003474 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3344      	adds	r3, #68	@ 0x44
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	334c      	adds	r3, #76	@ 0x4c
 800346e:	2204      	movs	r2, #4
 8003470:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003472:	e022      	b.n	80034ba <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	334c      	adds	r3, #76	@ 0x4c
 8003484:	2202      	movs	r2, #2
 8003486:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800349e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034a6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b4:	461a      	mov	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034ba:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	334c      	adds	r3, #76	@ 0x4c
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	4619      	mov	r1, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f005 f864 	bl	80085a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034d8:	e002      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034da:	bf00      	nop
 80034dc:	e000      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80034de:	bf00      	nop
  }
}
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b08a      	sub	sp, #40	@ 0x28
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	0c5b      	lsrs	r3, r3, #17
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800351a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d004      	beq.n	800352c <HCD_RXQLVL_IRQHandler+0x46>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b05      	cmp	r3, #5
 8003526:	f000 80b6 	beq.w	8003696 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800352a:	e0b7      	b.n	800369c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80b3 	beq.w	800369a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	332c      	adds	r3, #44	@ 0x2c
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80a7 	beq.w	800369a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3338      	adds	r3, #56	@ 0x38
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	18d1      	adds	r1, r2, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4403      	add	r3, r0
 8003570:	3334      	adds	r3, #52	@ 0x34
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4299      	cmp	r1, r3
 8003576:	f200 8083 	bhi.w	8003680 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	332c      	adds	r3, #44	@ 0x2c
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	b292      	uxth	r2, r2
 8003594:	4619      	mov	r1, r3
 8003596:	f001 fe9c 	bl	80052d2 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	332c      	adds	r3, #44	@ 0x2c
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	18d1      	adds	r1, r2, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4403      	add	r3, r0
 80035be:	332c      	adds	r3, #44	@ 0x2c
 80035c0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3338      	adds	r3, #56	@ 0x38
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	18d1      	adds	r1, r2, r3
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4613      	mov	r3, r2
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4403      	add	r3, r0
 80035e6:	3338      	adds	r3, #56	@ 0x38
 80035e8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	0cdb      	lsrs	r3, r3, #19
 80035fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035fe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	3328      	adds	r3, #40	@ 0x28
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4293      	cmp	r3, r2
 8003618:	d13f      	bne.n	800369a <HCD_RXQLVL_IRQHandler+0x1b4>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d03c      	beq.n	800369a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003636:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800363e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	4413      	add	r3, r2
 8003648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	333c      	adds	r3, #60	@ 0x3c
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	f083 0301 	eor.w	r3, r3, #1
 8003668:	b2d8      	uxtb	r0, r3
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	333c      	adds	r3, #60	@ 0x3c
 800367a:	4602      	mov	r2, r0
 800367c:	701a      	strb	r2, [r3, #0]
      break;
 800367e:	e00c      	b.n	800369a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	334c      	adds	r3, #76	@ 0x4c
 8003690:	2204      	movs	r2, #4
 8003692:	701a      	strb	r2, [r3, #0]
      break;
 8003694:	e001      	b.n	800369a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800369a:	bf00      	nop
  }
}
 800369c:	bf00      	nop
 800369e:	3728      	adds	r7, #40	@ 0x28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036d0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d10b      	bne.n	80036f4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d102      	bne.n	80036ec <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f004 ff3e 	bl	8008568 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f043 0302 	orr.w	r3, r3, #2
 80036f2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d132      	bne.n	8003764 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f043 0308 	orr.w	r3, r3, #8
 8003704:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b04      	cmp	r3, #4
 800370e:	d126      	bne.n	800375e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7a5b      	ldrb	r3, [r3, #9]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d113      	bne.n	8003740 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800371e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003722:	d106      	bne.n	8003732 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2102      	movs	r1, #2
 800372a:	4618      	mov	r0, r3
 800372c:	f001 ff60 	bl	80055f0 <USB_InitFSLSPClkSel>
 8003730:	e011      	b.n	8003756 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2101      	movs	r1, #1
 8003738:	4618      	mov	r0, r3
 800373a:	f001 ff59 	bl	80055f0 <USB_InitFSLSPClkSel>
 800373e:	e00a      	b.n	8003756 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	79db      	ldrb	r3, [r3, #7]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d106      	bne.n	8003756 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800374e:	461a      	mov	r2, r3
 8003750:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003754:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f004 ff30 	bl	80085bc <HAL_HCD_PortEnabled_Callback>
 800375c:	e002      	b.n	8003764 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f004 ff3a 	bl	80085d8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b20      	cmp	r3, #32
 800376c:	d103      	bne.n	8003776 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f043 0320 	orr.w	r3, r3, #32
 8003774:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800377c:	461a      	mov	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	6013      	str	r3, [r2, #0]
}
 8003782:	bf00      	nop
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e12b      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd f930 	bl	8000a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	@ 0x24
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f0:	f001 fa20 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 80037f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a81      	ldr	r2, [pc, #516]	@ (8003a00 <HAL_I2C_Init+0x274>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d807      	bhi.n	8003810 <HAL_I2C_Init+0x84>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a80      	ldr	r2, [pc, #512]	@ (8003a04 <HAL_I2C_Init+0x278>)
 8003804:	4293      	cmp	r3, r2
 8003806:	bf94      	ite	ls
 8003808:	2301      	movls	r3, #1
 800380a:	2300      	movhi	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e006      	b.n	800381e <HAL_I2C_Init+0x92>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a7d      	ldr	r2, [pc, #500]	@ (8003a08 <HAL_I2C_Init+0x27c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	bf94      	ite	ls
 8003818:	2301      	movls	r3, #1
 800381a:	2300      	movhi	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0e7      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a78      	ldr	r2, [pc, #480]	@ (8003a0c <HAL_I2C_Init+0x280>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0c9b      	lsrs	r3, r3, #18
 8003830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a6a      	ldr	r2, [pc, #424]	@ (8003a00 <HAL_I2C_Init+0x274>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d802      	bhi.n	8003860 <HAL_I2C_Init+0xd4>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3301      	adds	r3, #1
 800385e:	e009      	b.n	8003874 <HAL_I2C_Init+0xe8>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	4a69      	ldr	r2, [pc, #420]	@ (8003a10 <HAL_I2C_Init+0x284>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	3301      	adds	r3, #1
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003886:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	495c      	ldr	r1, [pc, #368]	@ (8003a00 <HAL_I2C_Init+0x274>)
 8003890:	428b      	cmp	r3, r1
 8003892:	d819      	bhi.n	80038c8 <HAL_I2C_Init+0x13c>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e59      	subs	r1, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038a8:	400b      	ands	r3, r1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_I2C_Init+0x138>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1e59      	subs	r1, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c2:	e051      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e04f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d111      	bne.n	80038f4 <HAL_I2C_Init+0x168>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e58      	subs	r0, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e012      	b.n	800391a <HAL_I2C_Init+0x18e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	0099      	lsls	r1, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	fbb0 f3f3 	udiv	r3, r0, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Init+0x196>
 800391e:	2301      	movs	r3, #1
 8003920:	e022      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10e      	bne.n	8003948 <HAL_I2C_Init+0x1bc>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1e58      	subs	r0, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	440b      	add	r3, r1
 8003938:	fbb0 f3f3 	udiv	r3, r0, r3
 800393c:	3301      	adds	r3, #1
 800393e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003946:	e00f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	0099      	lsls	r1, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	fbb0 f3f3 	udiv	r3, r0, r3
 800395e:	3301      	adds	r3, #1
 8003960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003964:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	6809      	ldr	r1, [r1, #0]
 800396c:	4313      	orrs	r3, r2
 800396e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003996:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6911      	ldr	r1, [r2, #16]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	000186a0 	.word	0x000186a0
 8003a04:	001e847f 	.word	0x001e847f
 8003a08:	003d08ff 	.word	0x003d08ff
 8003a0c:	431bde83 	.word	0x431bde83
 8003a10:	10624dd3 	.word	0x10624dd3

08003a14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e128      	b.n	8003c78 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a90      	ldr	r2, [pc, #576]	@ (8003c80 <HAL_I2S_Init+0x26c>)
 8003a3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7fd f831 	bl	8000aa8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a5c:	f023 030f 	bic.w	r3, r3, #15
 8003a60:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2202      	movs	r2, #2
 8003a68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d060      	beq.n	8003b34 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a7a:	2310      	movs	r3, #16
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e001      	b.n	8003a84 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a80:	2320      	movs	r3, #32
 8003a82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d802      	bhi.n	8003a92 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a92:	2001      	movs	r0, #1
 8003a94:	f001 f9c4 	bl	8004e20 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a98:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa2:	d125      	bne.n	8003af0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d010      	beq.n	8003ace <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	461a      	mov	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	3305      	adds	r3, #5
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	e01f      	b.n	8003b0e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aea:	3305      	adds	r3, #5
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	e00e      	b.n	8003b0e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	461a      	mov	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0a:	3305      	adds	r3, #5
 8003b0c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4a5c      	ldr	r2, [pc, #368]	@ (8003c84 <HAL_I2S_Init+0x270>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	08db      	lsrs	r3, r3, #3
 8003b18:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	e003      	b.n	8003b3c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b34:	2302      	movs	r3, #2
 8003b36:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d902      	bls.n	8003b48 <HAL_I2S_Init+0x134>
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	2bff      	cmp	r3, #255	@ 0xff
 8003b46:	d907      	bls.n	8003b58 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4c:	f043 0210 	orr.w	r2, r3, #16
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e08f      	b.n	8003c78 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	ea42 0103 	orr.w	r1, r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b76:	f023 030f 	bic.w	r3, r3, #15
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6851      	ldr	r1, [r2, #4]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6892      	ldr	r2, [r2, #8]
 8003b82:	4311      	orrs	r1, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68d2      	ldr	r2, [r2, #12]
 8003b88:	4311      	orrs	r1, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6992      	ldr	r2, [r2, #24]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b9a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d161      	bne.n	8003c68 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a38      	ldr	r2, [pc, #224]	@ (8003c88 <HAL_I2S_Init+0x274>)
 8003ba8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a37      	ldr	r2, [pc, #220]	@ (8003c8c <HAL_I2S_Init+0x278>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_I2S_Init+0x1a4>
 8003bb4:	4b36      	ldr	r3, [pc, #216]	@ (8003c90 <HAL_I2S_Init+0x27c>)
 8003bb6:	e001      	b.n	8003bbc <HAL_I2S_Init+0x1a8>
 8003bb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	4932      	ldr	r1, [pc, #200]	@ (8003c8c <HAL_I2S_Init+0x278>)
 8003bc4:	428a      	cmp	r2, r1
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2S_Init+0x1b8>
 8003bc8:	4a31      	ldr	r2, [pc, #196]	@ (8003c90 <HAL_I2S_Init+0x27c>)
 8003bca:	e001      	b.n	8003bd0 <HAL_I2S_Init+0x1bc>
 8003bcc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003bd0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bd4:	f023 030f 	bic.w	r3, r3, #15
 8003bd8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2b      	ldr	r2, [pc, #172]	@ (8003c8c <HAL_I2S_Init+0x278>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d101      	bne.n	8003be8 <HAL_I2S_Init+0x1d4>
 8003be4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c90 <HAL_I2S_Init+0x27c>)
 8003be6:	e001      	b.n	8003bec <HAL_I2S_Init+0x1d8>
 8003be8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bec:	2202      	movs	r2, #2
 8003bee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a25      	ldr	r2, [pc, #148]	@ (8003c8c <HAL_I2S_Init+0x278>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_I2S_Init+0x1ea>
 8003bfa:	4b25      	ldr	r3, [pc, #148]	@ (8003c90 <HAL_I2S_Init+0x27c>)
 8003bfc:	e001      	b.n	8003c02 <HAL_I2S_Init+0x1ee>
 8003bfe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c0e:	d003      	beq.n	8003c18 <HAL_I2S_Init+0x204>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d103      	bne.n	8003c20 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	e001      	b.n	8003c24 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c42:	4313      	orrs	r3, r2
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	897b      	ldrh	r3, [r7, #10]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c50:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a0d      	ldr	r2, [pc, #52]	@ (8003c8c <HAL_I2S_Init+0x278>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2S_Init+0x24c>
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c90 <HAL_I2S_Init+0x27c>)
 8003c5e:	e001      	b.n	8003c64 <HAL_I2S_Init+0x250>
 8003c60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c64:	897a      	ldrh	r2, [r7, #10]
 8003c66:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	08003d8b 	.word	0x08003d8b
 8003c84:	cccccccd 	.word	0xcccccccd
 8003c88:	08003ea1 	.word	0x08003ea1
 8003c8c:	40003800 	.word	0x40003800
 8003c90:	40003400 	.word	0x40003400

08003c94 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	1c9a      	adds	r2, r3, #2
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10e      	bne.n	8003d24 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d14:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ffb8 	bl	8003c94 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d46:	1c9a      	adds	r2, r3, #2
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10e      	bne.n	8003d82 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d72:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff ff93 	bl	8003ca8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b086      	sub	sp, #24
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d13a      	bne.n	8003e1c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d109      	bne.n	8003dc4 <I2S_IRQHandler+0x3a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dba:	2b40      	cmp	r3, #64	@ 0x40
 8003dbc:	d102      	bne.n	8003dc4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ffb4 	bl	8003d2c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dca:	2b40      	cmp	r3, #64	@ 0x40
 8003dcc:	d126      	bne.n	8003e1c <I2S_IRQHandler+0x92>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d11f      	bne.n	8003e1c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dec:	2300      	movs	r3, #0
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	f043 0202 	orr.w	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ff50 	bl	8003cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d136      	bne.n	8003e96 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d109      	bne.n	8003e46 <I2S_IRQHandler+0xbc>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3c:	2b80      	cmp	r3, #128	@ 0x80
 8003e3e:	d102      	bne.n	8003e46 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff ff45 	bl	8003cd0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d122      	bne.n	8003e96 <I2S_IRQHandler+0x10c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d11b      	bne.n	8003e96 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e6c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e88:	f043 0204 	orr.w	r2, r3, #4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ff13 	bl	8003cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e96:	bf00      	nop
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a92      	ldr	r2, [pc, #584]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003eba:	4b92      	ldr	r3, [pc, #584]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ebc:	e001      	b.n	8003ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ebe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a8b      	ldr	r2, [pc, #556]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d101      	bne.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ed8:	4b8a      	ldr	r3, [pc, #552]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eda:	e001      	b.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003edc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eec:	d004      	beq.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 8099 	bne.w	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d107      	bne.n	8003f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f925 	bl	800415c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d107      	bne.n	8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f9c8 	bl	80042bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d13a      	bne.n	8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d035      	beq.n	8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a6e      	ldr	r2, [pc, #440]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f4a:	4b6e      	ldr	r3, [pc, #440]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f4c:	e001      	b.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4969      	ldr	r1, [pc, #420]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f5e:	4b69      	ldr	r3, [pc, #420]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f66:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f6a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0202 	orr.w	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fe88 	bl	8003cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	f040 80c3 	bne.w	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 80bd 	beq.w	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fd2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a49      	ldr	r2, [pc, #292]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fde:	4b49      	ldr	r3, [pc, #292]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fe0:	e001      	b.n	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fe2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4944      	ldr	r1, [pc, #272]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fee:	428b      	cmp	r3, r1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ff2:	4b44      	ldr	r3, [pc, #272]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff4:	e001      	b.n	8003ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ff6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ffa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ffe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004000:	2300      	movs	r3, #0
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	f043 0204 	orr.w	r2, r3, #4
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fe4a 	bl	8003cbc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004028:	e089      	b.n	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d107      	bne.n	8004044 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f8be 	bl	80041c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b01      	cmp	r3, #1
 800404c:	d107      	bne.n	800405e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f8fd 	bl	8004258 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004064:	2b40      	cmp	r3, #64	@ 0x40
 8004066:	d12f      	bne.n	80040c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d02a      	beq.n	80040c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004080:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1e      	ldr	r2, [pc, #120]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d101      	bne.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800408c:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800408e:	e001      	b.n	8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004090:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4919      	ldr	r1, [pc, #100]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800409c:	428b      	cmp	r3, r1
 800409e:	d101      	bne.n	80040a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040a0:	4b18      	ldr	r3, [pc, #96]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040a2:	e001      	b.n	80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ba:	f043 0202 	orr.w	r2, r3, #2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff fdfa 	bl	8003cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d136      	bne.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d031      	beq.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a07      	ldr	r2, [pc, #28]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d101      	bne.n	80040ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040e6:	4b07      	ldr	r3, [pc, #28]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040e8:	e001      	b.n	80040ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4902      	ldr	r1, [pc, #8]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040f6:	428b      	cmp	r3, r1
 80040f8:	d106      	bne.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040fa:	4b02      	ldr	r3, [pc, #8]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040fc:	e006      	b.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040fe:	bf00      	nop
 8004100:	40003800 	.word	0x40003800
 8004104:	40003400 	.word	0x40003400
 8004108:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800410c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004110:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004120:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f043 0204 	orr.w	r2, r3, #4
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fdc0 	bl	8003cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800413c:	e000      	b.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800413e:	bf00      	nop
}
 8004140:	bf00      	nop
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	1c99      	adds	r1, r3, #2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6251      	str	r1, [r2, #36]	@ 0x24
 800416e:	881a      	ldrh	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d113      	bne.n	80041b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800419c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ffc9 	bl	8004148 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	1c99      	adds	r1, r3, #2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6251      	str	r1, [r2, #36]	@ 0x24
 80041d2:	8819      	ldrh	r1, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004250 <I2SEx_TxISR_I2SExt+0x90>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <I2SEx_TxISR_I2SExt+0x22>
 80041de:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <I2SEx_TxISR_I2SExt+0x94>)
 80041e0:	e001      	b.n	80041e6 <I2SEx_TxISR_I2SExt+0x26>
 80041e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e6:	460a      	mov	r2, r1
 80041e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d121      	bne.n	8004246 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a12      	ldr	r2, [pc, #72]	@ (8004250 <I2SEx_TxISR_I2SExt+0x90>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d101      	bne.n	8004210 <I2SEx_TxISR_I2SExt+0x50>
 800420c:	4b11      	ldr	r3, [pc, #68]	@ (8004254 <I2SEx_TxISR_I2SExt+0x94>)
 800420e:	e001      	b.n	8004214 <I2SEx_TxISR_I2SExt+0x54>
 8004210:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	490d      	ldr	r1, [pc, #52]	@ (8004250 <I2SEx_TxISR_I2SExt+0x90>)
 800421c:	428b      	cmp	r3, r1
 800421e:	d101      	bne.n	8004224 <I2SEx_TxISR_I2SExt+0x64>
 8004220:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <I2SEx_TxISR_I2SExt+0x94>)
 8004222:	e001      	b.n	8004228 <I2SEx_TxISR_I2SExt+0x68>
 8004224:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004228:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800422c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ff81 	bl	8004148 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40003800 	.word	0x40003800
 8004254:	40003400 	.word	0x40003400

08004258 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68d8      	ldr	r0, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	1c99      	adds	r1, r3, #2
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004270:	b282      	uxth	r2, r0
 8004272:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d113      	bne.n	80042b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800429a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff4a 	bl	8004148 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a20      	ldr	r2, [pc, #128]	@ (800434c <I2SEx_RxISR_I2SExt+0x90>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d101      	bne.n	80042d2 <I2SEx_RxISR_I2SExt+0x16>
 80042ce:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <I2SEx_RxISR_I2SExt+0x94>)
 80042d0:	e001      	b.n	80042d6 <I2SEx_RxISR_I2SExt+0x1a>
 80042d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d6:	68d8      	ldr	r0, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	1c99      	adds	r1, r3, #2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042e2:	b282      	uxth	r2, r0
 80042e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d121      	bne.n	8004342 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a12      	ldr	r2, [pc, #72]	@ (800434c <I2SEx_RxISR_I2SExt+0x90>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <I2SEx_RxISR_I2SExt+0x50>
 8004308:	4b11      	ldr	r3, [pc, #68]	@ (8004350 <I2SEx_RxISR_I2SExt+0x94>)
 800430a:	e001      	b.n	8004310 <I2SEx_RxISR_I2SExt+0x54>
 800430c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	490d      	ldr	r1, [pc, #52]	@ (800434c <I2SEx_RxISR_I2SExt+0x90>)
 8004318:	428b      	cmp	r3, r1
 800431a:	d101      	bne.n	8004320 <I2SEx_RxISR_I2SExt+0x64>
 800431c:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <I2SEx_RxISR_I2SExt+0x94>)
 800431e:	e001      	b.n	8004324 <I2SEx_RxISR_I2SExt+0x68>
 8004320:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004324:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004328:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff ff03 	bl	8004148 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40003800 	.word	0x40003800
 8004350:	40003400 	.word	0x40003400

08004354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e267      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d075      	beq.n	800445e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004372:	4b88      	ldr	r3, [pc, #544]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b04      	cmp	r3, #4
 800437c:	d00c      	beq.n	8004398 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437e:	4b85      	ldr	r3, [pc, #532]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004386:	2b08      	cmp	r3, #8
 8004388:	d112      	bne.n	80043b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438a:	4b82      	ldr	r3, [pc, #520]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004392:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004396:	d10b      	bne.n	80043b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004398:	4b7e      	ldr	r3, [pc, #504]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d05b      	beq.n	800445c <HAL_RCC_OscConfig+0x108>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d157      	bne.n	800445c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e242      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b8:	d106      	bne.n	80043c8 <HAL_RCC_OscConfig+0x74>
 80043ba:	4b76      	ldr	r3, [pc, #472]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a75      	ldr	r2, [pc, #468]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e01d      	b.n	8004404 <HAL_RCC_OscConfig+0xb0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043d0:	d10c      	bne.n	80043ec <HAL_RCC_OscConfig+0x98>
 80043d2:	4b70      	ldr	r3, [pc, #448]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6f      	ldr	r2, [pc, #444]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b6d      	ldr	r3, [pc, #436]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a6c      	ldr	r2, [pc, #432]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e00b      	b.n	8004404 <HAL_RCC_OscConfig+0xb0>
 80043ec:	4b69      	ldr	r3, [pc, #420]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a68      	ldr	r2, [pc, #416]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b66      	ldr	r3, [pc, #408]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a65      	ldr	r2, [pc, #404]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d013      	beq.n	8004434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fc fd78 	bl	8000f00 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004414:	f7fc fd74 	bl	8000f00 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	@ 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e207      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004426:	4b5b      	ldr	r3, [pc, #364]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0xc0>
 8004432:	e014      	b.n	800445e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fc fd64 	bl	8000f00 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800443c:	f7fc fd60 	bl	8000f00 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	@ 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e1f3      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444e:	4b51      	ldr	r3, [pc, #324]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0xe8>
 800445a:	e000      	b.n	800445e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d063      	beq.n	8004532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800446a:	4b4a      	ldr	r3, [pc, #296]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004476:	4b47      	ldr	r3, [pc, #284]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800447e:	2b08      	cmp	r3, #8
 8004480:	d11c      	bne.n	80044bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004482:	4b44      	ldr	r3, [pc, #272]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d116      	bne.n	80044bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448e:	4b41      	ldr	r3, [pc, #260]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <HAL_RCC_OscConfig+0x152>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d001      	beq.n	80044a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e1c7      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4937      	ldr	r1, [pc, #220]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ba:	e03a      	b.n	8004532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d020      	beq.n	8004506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c4:	4b34      	ldr	r3, [pc, #208]	@ (8004598 <HAL_RCC_OscConfig+0x244>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ca:	f7fc fd19 	bl	8000f00 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d2:	f7fc fd15 	bl	8000f00 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e1a8      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f0:	4b28      	ldr	r3, [pc, #160]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4925      	ldr	r1, [pc, #148]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004500:	4313      	orrs	r3, r2
 8004502:	600b      	str	r3, [r1, #0]
 8004504:	e015      	b.n	8004532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004506:	4b24      	ldr	r3, [pc, #144]	@ (8004598 <HAL_RCC_OscConfig+0x244>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fc fcf8 	bl	8000f00 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004514:	f7fc fcf4 	bl	8000f00 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e187      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004526:	4b1b      	ldr	r3, [pc, #108]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d036      	beq.n	80045ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004546:	4b15      	ldr	r3, [pc, #84]	@ (800459c <HAL_RCC_OscConfig+0x248>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454c:	f7fc fcd8 	bl	8000f00 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004554:	f7fc fcd4 	bl	8000f00 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e167      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004566:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x200>
 8004572:	e01b      	b.n	80045ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004574:	4b09      	ldr	r3, [pc, #36]	@ (800459c <HAL_RCC_OscConfig+0x248>)
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457a:	f7fc fcc1 	bl	8000f00 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004580:	e00e      	b.n	80045a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004582:	f7fc fcbd 	bl	8000f00 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d907      	bls.n	80045a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e150      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
 8004594:	40023800 	.word	0x40023800
 8004598:	42470000 	.word	0x42470000
 800459c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a0:	4b88      	ldr	r3, [pc, #544]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1ea      	bne.n	8004582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8097 	beq.w	80046e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ba:	2300      	movs	r3, #0
 80045bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045be:	4b81      	ldr	r3, [pc, #516]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10f      	bne.n	80045ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	4b7d      	ldr	r3, [pc, #500]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	4a7c      	ldr	r2, [pc, #496]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045da:	4b7a      	ldr	r3, [pc, #488]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	60bb      	str	r3, [r7, #8]
 80045e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045e6:	2301      	movs	r3, #1
 80045e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ea:	4b77      	ldr	r3, [pc, #476]	@ (80047c8 <HAL_RCC_OscConfig+0x474>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d118      	bne.n	8004628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045f6:	4b74      	ldr	r3, [pc, #464]	@ (80047c8 <HAL_RCC_OscConfig+0x474>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a73      	ldr	r2, [pc, #460]	@ (80047c8 <HAL_RCC_OscConfig+0x474>)
 80045fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004602:	f7fc fc7d 	bl	8000f00 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460a:	f7fc fc79 	bl	8000f00 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e10c      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461c:	4b6a      	ldr	r3, [pc, #424]	@ (80047c8 <HAL_RCC_OscConfig+0x474>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d106      	bne.n	800463e <HAL_RCC_OscConfig+0x2ea>
 8004630:	4b64      	ldr	r3, [pc, #400]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004634:	4a63      	ldr	r2, [pc, #396]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	6713      	str	r3, [r2, #112]	@ 0x70
 800463c:	e01c      	b.n	8004678 <HAL_RCC_OscConfig+0x324>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b05      	cmp	r3, #5
 8004644:	d10c      	bne.n	8004660 <HAL_RCC_OscConfig+0x30c>
 8004646:	4b5f      	ldr	r3, [pc, #380]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464a:	4a5e      	ldr	r2, [pc, #376]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 800464c:	f043 0304 	orr.w	r3, r3, #4
 8004650:	6713      	str	r3, [r2, #112]	@ 0x70
 8004652:	4b5c      	ldr	r3, [pc, #368]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004656:	4a5b      	ldr	r2, [pc, #364]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	6713      	str	r3, [r2, #112]	@ 0x70
 800465e:	e00b      	b.n	8004678 <HAL_RCC_OscConfig+0x324>
 8004660:	4b58      	ldr	r3, [pc, #352]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004664:	4a57      	ldr	r2, [pc, #348]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	6713      	str	r3, [r2, #112]	@ 0x70
 800466c:	4b55      	ldr	r3, [pc, #340]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004670:	4a54      	ldr	r2, [pc, #336]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004672:	f023 0304 	bic.w	r3, r3, #4
 8004676:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d015      	beq.n	80046ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004680:	f7fc fc3e 	bl	8000f00 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004686:	e00a      	b.n	800469e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004688:	f7fc fc3a 	bl	8000f00 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e0cb      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469e:	4b49      	ldr	r3, [pc, #292]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0ee      	beq.n	8004688 <HAL_RCC_OscConfig+0x334>
 80046aa:	e014      	b.n	80046d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ac:	f7fc fc28 	bl	8000f00 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b4:	f7fc fc24 	bl	8000f00 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e0b5      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ca:	4b3e      	ldr	r3, [pc, #248]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1ee      	bne.n	80046b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d105      	bne.n	80046e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046dc:	4b39      	ldr	r3, [pc, #228]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e0:	4a38      	ldr	r2, [pc, #224]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80a1 	beq.w	8004834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046f2:	4b34      	ldr	r3, [pc, #208]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d05c      	beq.n	80047b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d141      	bne.n	800478a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004706:	4b31      	ldr	r3, [pc, #196]	@ (80047cc <HAL_RCC_OscConfig+0x478>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fc fbf8 	bl	8000f00 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004714:	f7fc fbf4 	bl	8000f00 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e087      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	4b27      	ldr	r3, [pc, #156]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	019b      	lsls	r3, r3, #6
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	3b01      	subs	r3, #1
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	491b      	ldr	r1, [pc, #108]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004758:	4313      	orrs	r3, r2
 800475a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475c:	4b1b      	ldr	r3, [pc, #108]	@ (80047cc <HAL_RCC_OscConfig+0x478>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fc fbcd 	bl	8000f00 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476a:	f7fc fbc9 	bl	8000f00 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e05c      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477c:	4b11      	ldr	r3, [pc, #68]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x416>
 8004788:	e054      	b.n	8004834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478a:	4b10      	ldr	r3, [pc, #64]	@ (80047cc <HAL_RCC_OscConfig+0x478>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fc fbb6 	bl	8000f00 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004798:	f7fc fbb2 	bl	8000f00 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e045      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047aa:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x444>
 80047b6:	e03d      	b.n	8004834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e038      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40007000 	.word	0x40007000
 80047cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004840 <HAL_RCC_OscConfig+0x4ec>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d028      	beq.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d121      	bne.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d11a      	bne.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004800:	4013      	ands	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004808:	4293      	cmp	r3, r2
 800480a:	d111      	bne.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	3b01      	subs	r3, #1
 800481a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d107      	bne.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40023800 	.word	0x40023800

08004844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0cc      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004858:	4b68      	ldr	r3, [pc, #416]	@ (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d90c      	bls.n	8004880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b65      	ldr	r3, [pc, #404]	@ (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b63      	ldr	r3, [pc, #396]	@ (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0b8      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004898:	4b59      	ldr	r3, [pc, #356]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a58      	ldr	r2, [pc, #352]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b0:	4b53      	ldr	r3, [pc, #332]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4a52      	ldr	r2, [pc, #328]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048bc:	4b50      	ldr	r3, [pc, #320]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	494d      	ldr	r1, [pc, #308]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d044      	beq.n	8004964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e2:	4b47      	ldr	r3, [pc, #284]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d119      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e07f      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d003      	beq.n	8004902 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004902:	4b3f      	ldr	r3, [pc, #252]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e06f      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004912:	4b3b      	ldr	r3, [pc, #236]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e067      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004922:	4b37      	ldr	r3, [pc, #220]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f023 0203 	bic.w	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4934      	ldr	r1, [pc, #208]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	4313      	orrs	r3, r2
 8004932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004934:	f7fc fae4 	bl	8000f00 <HAL_GetTick>
 8004938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	e00a      	b.n	8004952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800493c:	f7fc fae0 	bl	8000f00 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e04f      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	4b2b      	ldr	r3, [pc, #172]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 020c 	and.w	r2, r3, #12
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	429a      	cmp	r2, r3
 8004962:	d1eb      	bne.n	800493c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004964:	4b25      	ldr	r3, [pc, #148]	@ (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d20c      	bcs.n	800498c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b22      	ldr	r3, [pc, #136]	@ (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b20      	ldr	r3, [pc, #128]	@ (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e032      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004998:	4b19      	ldr	r3, [pc, #100]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4916      	ldr	r1, [pc, #88]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b6:	4b12      	ldr	r3, [pc, #72]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	490e      	ldr	r1, [pc, #56]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049ca:	f000 f821 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	490a      	ldr	r1, [pc, #40]	@ (8004a04 <HAL_RCC_ClockConfig+0x1c0>)
 80049dc:	5ccb      	ldrb	r3, [r1, r3]
 80049de:	fa22 f303 	lsr.w	r3, r2, r3
 80049e2:	4a09      	ldr	r2, [pc, #36]	@ (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049e6:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fc fa44 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40023c00 	.word	0x40023c00
 8004a00:	40023800 	.word	0x40023800
 8004a04:	08009384 	.word	0x08009384
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	20000004 	.word	0x20000004

08004a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a14:	b094      	sub	sp, #80	@ 0x50
 8004a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a28:	4b79      	ldr	r3, [pc, #484]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d00d      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x40>
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	f200 80e1 	bhi.w	8004bfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x34>
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d003      	beq.n	8004a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a42:	e0db      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a44:	4b73      	ldr	r3, [pc, #460]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a48:	e0db      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a4a:	4b73      	ldr	r3, [pc, #460]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a4e:	e0d8      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a50:	4b6f      	ldr	r3, [pc, #444]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d063      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a66:	4b6a      	ldr	r3, [pc, #424]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	099b      	lsrs	r3, r3, #6
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a82:	4622      	mov	r2, r4
 8004a84:	462b      	mov	r3, r5
 8004a86:	f04f 0000 	mov.w	r0, #0
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	0159      	lsls	r1, r3, #5
 8004a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a94:	0150      	lsls	r0, r2, #5
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	1a51      	subs	r1, r2, r1
 8004a9e:	6139      	str	r1, [r7, #16]
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	018b      	lsls	r3, r1, #6
 8004ab8:	4651      	mov	r1, sl
 8004aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004abe:	4651      	mov	r1, sl
 8004ac0:	018a      	lsls	r2, r1, #6
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ac8:	4659      	mov	r1, fp
 8004aca:	eb63 0901 	sbc.w	r9, r3, r1
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ae2:	4690      	mov	r8, r2
 8004ae4:	4699      	mov	r9, r3
 8004ae6:	4623      	mov	r3, r4
 8004ae8:	eb18 0303 	adds.w	r3, r8, r3
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	462b      	mov	r3, r5
 8004af0:	eb49 0303 	adc.w	r3, r9, r3
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b02:	4629      	mov	r1, r5
 8004b04:	024b      	lsls	r3, r1, #9
 8004b06:	4621      	mov	r1, r4
 8004b08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	024a      	lsls	r2, r1, #9
 8004b10:	4610      	mov	r0, r2
 8004b12:	4619      	mov	r1, r3
 8004b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b16:	2200      	movs	r2, #0
 8004b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b20:	f7fb fb52 	bl	80001c8 <__aeabi_uldivmod>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4613      	mov	r3, r2
 8004b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b2c:	e058      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2e:	4b38      	ldr	r3, [pc, #224]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	2200      	movs	r2, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	4611      	mov	r1, r2
 8004b3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b3e:	623b      	str	r3, [r7, #32]
 8004b40:	2300      	movs	r3, #0
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	f04f 0000 	mov.w	r0, #0
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	0159      	lsls	r1, r3, #5
 8004b56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b5a:	0150      	lsls	r0, r2, #5
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4641      	mov	r1, r8
 8004b62:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b66:	4649      	mov	r1, r9
 8004b68:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b80:	ebb2 040a 	subs.w	r4, r2, sl
 8004b84:	eb63 050b 	sbc.w	r5, r3, fp
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	00eb      	lsls	r3, r5, #3
 8004b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b96:	00e2      	lsls	r2, r4, #3
 8004b98:	4614      	mov	r4, r2
 8004b9a:	461d      	mov	r5, r3
 8004b9c:	4643      	mov	r3, r8
 8004b9e:	18e3      	adds	r3, r4, r3
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	eb45 0303 	adc.w	r3, r5, r3
 8004ba8:	607b      	str	r3, [r7, #4]
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	028b      	lsls	r3, r1, #10
 8004bba:	4621      	mov	r1, r4
 8004bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	028a      	lsls	r2, r1, #10
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bca:	2200      	movs	r2, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	61fa      	str	r2, [r7, #28]
 8004bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd4:	f7fb faf8 	bl	80001c8 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4613      	mov	r3, r2
 8004bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	3301      	adds	r3, #1
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3750      	adds	r7, #80	@ 0x50
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c0e:	bf00      	nop
 8004c10:	40023800 	.word	0x40023800
 8004c14:	00f42400 	.word	0x00f42400
 8004c18:	007a1200 	.word	0x007a1200

08004c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c20:	4b03      	ldr	r3, [pc, #12]	@ (8004c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c22:	681b      	ldr	r3, [r3, #0]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20000000 	.word	0x20000000

08004c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c38:	f7ff fff0 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	0a9b      	lsrs	r3, r3, #10
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	4903      	ldr	r1, [pc, #12]	@ (8004c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c4a:	5ccb      	ldrb	r3, [r1, r3]
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40023800 	.word	0x40023800
 8004c58:	08009394 	.word	0x08009394

08004c5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d035      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c84:	4b62      	ldr	r3, [pc, #392]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c8a:	f7fc f939 	bl	8000f00 <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c92:	f7fc f935 	bl	8000f00 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e0b0      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca4:	4b5b      	ldr	r3, [pc, #364]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f0      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	019a      	lsls	r2, r3, #6
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	071b      	lsls	r3, r3, #28
 8004cbc:	4955      	ldr	r1, [pc, #340]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cc4:	4b52      	ldr	r3, [pc, #328]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cca:	f7fc f919 	bl	8000f00 <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cd2:	f7fc f915 	bl	8000f00 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e090      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8083 	beq.w	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	4b44      	ldr	r3, [pc, #272]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	4a43      	ldr	r2, [pc, #268]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d0e:	4b41      	ldr	r3, [pc, #260]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a3e      	ldr	r2, [pc, #248]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d26:	f7fc f8eb 	bl	8000f00 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2e:	f7fc f8e7 	bl	8000f00 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e062      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d40:	4b35      	ldr	r3, [pc, #212]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f0      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d4c:	4b31      	ldr	r3, [pc, #196]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d54:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d02f      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d028      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d72:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d74:	4b29      	ldr	r3, [pc, #164]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d7a:	4b28      	ldr	r3, [pc, #160]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d80:	4a24      	ldr	r2, [pc, #144]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d86:	4b23      	ldr	r3, [pc, #140]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d114      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d92:	f7fc f8b5 	bl	8000f00 <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d98:	e00a      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9a:	f7fc f8b1 	bl	8000f00 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e02a      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db0:	4b18      	ldr	r3, [pc, #96]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0ee      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dc8:	d10d      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dca:	4b12      	ldr	r3, [pc, #72]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dde:	490d      	ldr	r1, [pc, #52]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	608b      	str	r3, [r1, #8]
 8004de4:	e005      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004de6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	4a0a      	ldr	r2, [pc, #40]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004df0:	6093      	str	r3, [r2, #8]
 8004df2:	4b08      	ldr	r3, [pc, #32]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfe:	4905      	ldr	r1, [pc, #20]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	42470068 	.word	0x42470068
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40007000 	.word	0x40007000
 8004e1c:	42470e40 	.word	0x42470e40

08004e20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d13f      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e46:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d006      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e54:	d12f      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e56:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e58:	617b      	str	r3, [r7, #20]
          break;
 8004e5a:	e02f      	b.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e68:	d108      	bne.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e6a:	4b19      	ldr	r3, [pc, #100]	@ (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e72:	4a19      	ldr	r2, [pc, #100]	@ (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	e007      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e7c:	4b14      	ldr	r3, [pc, #80]	@ (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e84:	4a15      	ldr	r2, [pc, #84]	@ (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e8c:	4b10      	ldr	r3, [pc, #64]	@ (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e92:	099b      	lsrs	r3, r3, #6
 8004e94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ea6:	0f1b      	lsrs	r3, r3, #28
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb2:	617b      	str	r3, [r7, #20]
          break;
 8004eb4:	e002      	b.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
          break;
 8004eba:	bf00      	nop
        }
      }
      break;
 8004ebc:	e000      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004ebe:	bf00      	nop
    }
  }
  return frequency;
 8004ec0:	697b      	ldr	r3, [r7, #20]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	00bb8000 	.word	0x00bb8000
 8004ed8:	007a1200 	.word	0x007a1200
 8004edc:	00f42400 	.word	0x00f42400

08004ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e07b      	b.n	8004fea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d108      	bne.n	8004f0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f02:	d009      	beq.n	8004f18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	61da      	str	r2, [r3, #28]
 8004f0a:	e005      	b.n	8004f18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fb fe38 	bl	8000ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9c:	ea42 0103 	orr.w	r1, r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	0c1b      	lsrs	r3, r3, #16
 8004fb6:	f003 0104 	and.w	r1, r3, #4
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	f003 0210 	and.w	r2, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	f107 001c 	add.w	r0, r7, #28
 8005000:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005004:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005008:	2b01      	cmp	r3, #1
 800500a:	d123      	bne.n	8005054 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005010:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005034:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005038:	2b01      	cmp	r3, #1
 800503a:	d105      	bne.n	8005048 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f9dc 	bl	8005406 <USB_CoreReset>
 800504e:	4603      	mov	r3, r0
 8005050:	73fb      	strb	r3, [r7, #15]
 8005052:	e01b      	b.n	800508c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f9d0 	bl	8005406 <USB_CoreReset>
 8005066:	4603      	mov	r3, r0
 8005068:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800506a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005076:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	639a      	str	r2, [r3, #56]	@ 0x38
 800507e:	e005      	b.n	800508c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800508c:	7fbb      	ldrb	r3, [r7, #30]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d10b      	bne.n	80050aa <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f043 0206 	orr.w	r2, r3, #6
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f043 0220 	orr.w	r2, r3, #32
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050b6:	b004      	add	sp, #16
 80050b8:	4770      	bx	lr

080050ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f043 0201 	orr.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f023 0201 	bic.w	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	460b      	mov	r3, r1
 8005108:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800511a:	78fb      	ldrb	r3, [r7, #3]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d115      	bne.n	800514c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800512c:	200a      	movs	r0, #10
 800512e:	f7fb fef3 	bl	8000f18 <HAL_Delay>
      ms += 10U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	330a      	adds	r3, #10
 8005136:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f956 	bl	80053ea <USB_GetMode>
 800513e:	4603      	mov	r3, r0
 8005140:	2b01      	cmp	r3, #1
 8005142:	d01e      	beq.n	8005182 <USB_SetCurrentMode+0x84>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2bc7      	cmp	r3, #199	@ 0xc7
 8005148:	d9f0      	bls.n	800512c <USB_SetCurrentMode+0x2e>
 800514a:	e01a      	b.n	8005182 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d115      	bne.n	800517e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800515e:	200a      	movs	r0, #10
 8005160:	f7fb feda 	bl	8000f18 <HAL_Delay>
      ms += 10U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	330a      	adds	r3, #10
 8005168:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f93d 	bl	80053ea <USB_GetMode>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <USB_SetCurrentMode+0x84>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2bc7      	cmp	r3, #199	@ 0xc7
 800517a:	d9f0      	bls.n	800515e <USB_SetCurrentMode+0x60>
 800517c:	e001      	b.n	8005182 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e005      	b.n	800518e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2bc8      	cmp	r3, #200	@ 0xc8
 8005186:	d101      	bne.n	800518c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e000      	b.n	800518e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3301      	adds	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051b0:	d901      	bls.n	80051b6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e01b      	b.n	80051ee <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	daf2      	bge.n	80051a4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	019b      	lsls	r3, r3, #6
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3301      	adds	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051da:	d901      	bls.n	80051e0 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e006      	b.n	80051ee <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d0f0      	beq.n	80051ce <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3301      	adds	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005212:	d901      	bls.n	8005218 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e018      	b.n	800524a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	daf2      	bge.n	8005206 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2210      	movs	r2, #16
 8005228:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3301      	adds	r3, #1
 800522e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005236:	d901      	bls.n	800523c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e006      	b.n	800524a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b10      	cmp	r3, #16
 8005246:	d0f0      	beq.n	800522a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005256:	b480      	push	{r7}
 8005258:	b089      	sub	sp, #36	@ 0x24
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	4611      	mov	r1, r2
 8005262:	461a      	mov	r2, r3
 8005264:	460b      	mov	r3, r1
 8005266:	71fb      	strb	r3, [r7, #7]
 8005268:	4613      	mov	r3, r2
 800526a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005274:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005278:	2b00      	cmp	r3, #0
 800527a:	d123      	bne.n	80052c4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800527c:	88bb      	ldrh	r3, [r7, #4]
 800527e:	3303      	adds	r3, #3
 8005280:	089b      	lsrs	r3, r3, #2
 8005282:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005284:	2300      	movs	r3, #0
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	e018      	b.n	80052bc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	031a      	lsls	r2, r3, #12
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	4413      	add	r3, r2
 8005292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005296:	461a      	mov	r2, r3
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3301      	adds	r3, #1
 80052a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	3301      	adds	r3, #1
 80052a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	3301      	adds	r3, #1
 80052ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	3301      	adds	r3, #1
 80052b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	3301      	adds	r3, #1
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d3e2      	bcc.n	800528a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3724      	adds	r7, #36	@ 0x24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b08b      	sub	sp, #44	@ 0x2c
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	4613      	mov	r3, r2
 80052de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	089b      	lsrs	r3, r3, #2
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052f8:	2300      	movs	r3, #0
 80052fa:	623b      	str	r3, [r7, #32]
 80052fc:	e014      	b.n	8005328 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	601a      	str	r2, [r3, #0]
    pDest++;
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	3301      	adds	r3, #1
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	3301      	adds	r3, #1
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	3301      	adds	r3, #1
 800531a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	3301      	adds	r3, #1
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	3301      	adds	r3, #1
 8005326:	623b      	str	r3, [r7, #32]
 8005328:	6a3a      	ldr	r2, [r7, #32]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	429a      	cmp	r2, r3
 800532e:	d3e6      	bcc.n	80052fe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005330:	8bfb      	ldrh	r3, [r7, #30]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01e      	beq.n	8005374 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005340:	461a      	mov	r2, r3
 8005342:	f107 0310 	add.w	r3, r7, #16
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	fa22 f303 	lsr.w	r3, r2, r3
 8005356:	b2da      	uxtb	r2, r3
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	701a      	strb	r2, [r3, #0]
      i++;
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	3301      	adds	r3, #1
 8005360:	623b      	str	r3, [r7, #32]
      pDest++;
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	3301      	adds	r3, #1
 8005366:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005368:	8bfb      	ldrh	r3, [r7, #30]
 800536a:	3b01      	subs	r3, #1
 800536c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800536e:	8bfb      	ldrh	r3, [r7, #30]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1ea      	bne.n	800534a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005376:	4618      	mov	r0, r3
 8005378:	372c      	adds	r7, #44	@ 0x2c
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4013      	ands	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800539a:	68fb      	ldr	r3, [r7, #12]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	4013      	ands	r3, r2
 80053da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053dc:	68bb      	ldr	r3, [r7, #8]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f003 0301 	and.w	r3, r3, #1
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3301      	adds	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800541e:	d901      	bls.n	8005424 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e01b      	b.n	800545c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	daf2      	bge.n	8005412 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005448:	d901      	bls.n	800544e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e006      	b.n	800545c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b01      	cmp	r3, #1
 8005458:	d0f0      	beq.n	800543c <USB_CoreReset+0x36>

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005468:	b084      	sub	sp, #16
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005488:	461a      	mov	r2, r3
 800548a:	2300      	movs	r3, #0
 800548c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005492:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054aa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d119      	bne.n	80054f2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80054be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d10a      	bne.n	80054dc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054d4:	f043 0304 	orr.w	r3, r3, #4
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e014      	b.n	8005506 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054ea:	f023 0304 	bic.w	r3, r3, #4
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	e009      	b.n	8005506 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005500:	f023 0304 	bic.w	r3, r3, #4
 8005504:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005506:	2110      	movs	r1, #16
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff fe44 	bl	8005196 <USB_FlushTxFifo>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff fe6e 	bl	80051fa <USB_FlushRxFifo>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	e015      	b.n	800555a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800553a:	461a      	mov	r2, r3
 800553c:	f04f 33ff 	mov.w	r3, #4294967295
 8005540:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800554e:	461a      	mov	r2, r3
 8005550:	2300      	movs	r3, #0
 8005552:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	3301      	adds	r3, #1
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800555e:	461a      	mov	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4293      	cmp	r3, r2
 8005564:	d3e3      	bcc.n	800552e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f04f 32ff 	mov.w	r2, #4294967295
 8005572:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a18      	ldr	r2, [pc, #96]	@ (80055d8 <USB_HostInit+0x170>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d10b      	bne.n	8005594 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005582:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a15      	ldr	r2, [pc, #84]	@ (80055dc <USB_HostInit+0x174>)
 8005588:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a14      	ldr	r2, [pc, #80]	@ (80055e0 <USB_HostInit+0x178>)
 800558e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005592:	e009      	b.n	80055a8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2280      	movs	r2, #128	@ 0x80
 8005598:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a11      	ldr	r2, [pc, #68]	@ (80055e4 <USB_HostInit+0x17c>)
 800559e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a11      	ldr	r2, [pc, #68]	@ (80055e8 <USB_HostInit+0x180>)
 80055a4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d105      	bne.n	80055bc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f043 0210 	orr.w	r2, r3, #16
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699a      	ldr	r2, [r3, #24]
 80055c0:	4b0a      	ldr	r3, [pc, #40]	@ (80055ec <USB_HostInit+0x184>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055d4:	b004      	add	sp, #16
 80055d6:	4770      	bx	lr
 80055d8:	40040000 	.word	0x40040000
 80055dc:	01000200 	.word	0x01000200
 80055e0:	00e00300 	.word	0x00e00300
 80055e4:	00600080 	.word	0x00600080
 80055e8:	004000e0 	.word	0x004000e0
 80055ec:	a3200008 	.word	0xa3200008

080055f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	68f9      	ldr	r1, [r7, #12]
 8005624:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d107      	bne.n	8005642 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005638:	461a      	mov	r2, r3
 800563a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800563e:	6053      	str	r3, [r2, #4]
 8005640:	e00c      	b.n	800565c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d107      	bne.n	8005658 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800564e:	461a      	mov	r2, r3
 8005650:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005654:	6053      	str	r3, [r2, #4]
 8005656:	e001      	b.n	800565c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800568a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005698:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800569a:	2064      	movs	r0, #100	@ 0x64
 800569c:	f7fb fc3c 	bl	8000f18 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80056a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80056ae:	200a      	movs	r0, #10
 80056b0:	f7fb fc32 	bl	8000f18 <HAL_Delay>

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	460b      	mov	r3, r1
 80056c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80056e2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <USB_DriveVbus+0x44>
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d106      	bne.n	8005702 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80056fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005700:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800570c:	d109      	bne.n	8005722 <USB_DriveVbus+0x64>
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800571c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005720:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	0c5b      	lsrs	r3, r3, #17
 800574e:	f003 0303 	and.w	r3, r3, #3
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	b29b      	uxth	r3, r3
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	4608      	mov	r0, r1
 800578a:	4611      	mov	r1, r2
 800578c:	461a      	mov	r2, r3
 800578e:	4603      	mov	r3, r0
 8005790:	70fb      	strb	r3, [r7, #3]
 8005792:	460b      	mov	r3, r1
 8005794:	70bb      	strb	r3, [r7, #2]
 8005796:	4613      	mov	r3, r2
 8005798:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ae:	461a      	mov	r2, r3
 80057b0:	f04f 33ff 	mov.w	r3, #4294967295
 80057b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80057b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d87c      	bhi.n	80058b8 <USB_HC_Init+0x138>
 80057be:	a201      	add	r2, pc, #4	@ (adr r2, 80057c4 <USB_HC_Init+0x44>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	080057d5 	.word	0x080057d5
 80057c8:	0800587b 	.word	0x0800587b
 80057cc:	080057d5 	.word	0x080057d5
 80057d0:	0800583d 	.word	0x0800583d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057e0:	461a      	mov	r2, r3
 80057e2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80057e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80057e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	da10      	bge.n	8005812 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	440a      	add	r2, r1
 8005806:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800580a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800580e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005810:	e055      	b.n	80058be <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a6f      	ldr	r2, [pc, #444]	@ (80059d4 <USB_HC_Init+0x254>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d151      	bne.n	80058be <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	440a      	add	r2, r1
 8005830:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005834:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005838:	60d3      	str	r3, [r2, #12]
      break;
 800583a:	e040      	b.n	80058be <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4413      	add	r3, r2
 8005844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005848:	461a      	mov	r2, r3
 800584a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800584e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005850:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005854:	2b00      	cmp	r3, #0
 8005856:	da34      	bge.n	80058c2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4413      	add	r3, r2
 8005860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	78fa      	ldrb	r2, [r7, #3]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	440a      	add	r2, r1
 800586e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005876:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005878:	e023      	b.n	80058c2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4413      	add	r3, r2
 8005882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005886:	461a      	mov	r2, r3
 8005888:	f240 2325 	movw	r3, #549	@ 0x225
 800588c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800588e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005892:	2b00      	cmp	r3, #0
 8005894:	da17      	bge.n	80058c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4413      	add	r3, r2
 800589e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	78fa      	ldrb	r2, [r7, #3]
 80058a6:	0151      	lsls	r1, r2, #5
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	440a      	add	r2, r1
 80058ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058b0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80058b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80058b6:	e006      	b.n	80058c6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	77fb      	strb	r3, [r7, #31]
      break;
 80058bc:	e004      	b.n	80058c8 <USB_HC_Init+0x148>
      break;
 80058be:	bf00      	nop
 80058c0:	e002      	b.n	80058c8 <USB_HC_Init+0x148>
      break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <USB_HC_Init+0x148>
      break;
 80058c6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058d4:	461a      	mov	r2, r3
 80058d6:	2300      	movs	r3, #0
 80058d8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	78fa      	ldrb	r2, [r7, #3]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058f4:	f043 0302 	orr.w	r3, r3, #2
 80058f8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	2101      	movs	r1, #1
 800590a:	fa01 f303 	lsl.w	r3, r1, r3
 800590e:	6939      	ldr	r1, [r7, #16]
 8005910:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005914:	4313      	orrs	r3, r2
 8005916:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005924:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005928:	2b00      	cmp	r3, #0
 800592a:	da03      	bge.n	8005934 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800592c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	e001      	b.n	8005938 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fef9 	bl	8005730 <USB_GetHostSpeed>
 800593e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005940:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005944:	2b02      	cmp	r3, #2
 8005946:	d106      	bne.n	8005956 <USB_HC_Init+0x1d6>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d003      	beq.n	8005956 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800594e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e001      	b.n	800595a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800595a:	787b      	ldrb	r3, [r7, #1]
 800595c:	059b      	lsls	r3, r3, #22
 800595e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005962:	78bb      	ldrb	r3, [r7, #2]
 8005964:	02db      	lsls	r3, r3, #11
 8005966:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800596a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800596c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005970:	049b      	lsls	r3, r3, #18
 8005972:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005976:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005978:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800597a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800597e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	431a      	orrs	r2, r3
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005988:	78fa      	ldrb	r2, [r7, #3]
 800598a:	0151      	lsls	r1, r2, #5
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	440a      	add	r2, r1
 8005990:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005994:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005998:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800599a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d003      	beq.n	80059aa <USB_HC_Init+0x22a>
 80059a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10f      	bne.n	80059ca <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	78fa      	ldrb	r2, [r7, #3]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80059ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3720      	adds	r7, #32
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40040000 	.word	0x40040000

080059d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08c      	sub	sp, #48	@ 0x30
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	4613      	mov	r3, r2
 80059e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	785b      	ldrb	r3, [r3, #1]
 80059ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80059f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059f4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a5d      	ldr	r2, [pc, #372]	@ (8005b70 <USB_HC_StartXfer+0x198>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d12f      	bne.n	8005a5e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d11c      	bne.n	8005a3e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	7c9b      	ldrb	r3, [r3, #18]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <USB_HC_StartXfer+0x3c>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	7c9b      	ldrb	r3, [r3, #18]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d124      	bne.n	8005a5e <USB_HC_StartXfer+0x86>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	799b      	ldrb	r3, [r3, #6]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d120      	bne.n	8005a5e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	6a3a      	ldr	r2, [r7, #32]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3a:	60d3      	str	r3, [r2, #12]
 8005a3c:	e00f      	b.n	8005a5e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	791b      	ldrb	r3, [r3, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <USB_HC_StartXfer+0x86>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	795b      	ldrb	r3, [r3, #5]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d107      	bne.n	8005a5e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	785b      	ldrb	r3, [r3, #1]
 8005a52:	4619      	mov	r1, r3
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fb6b 	bl	8006130 <USB_DoPing>
        return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e232      	b.n	8005ec4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	799b      	ldrb	r3, [r3, #6]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d158      	bne.n	8005b18 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005a66:	2301      	movs	r3, #1
 8005a68:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	78db      	ldrb	r3, [r3, #3]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	8a92      	ldrh	r2, [r2, #20]
 8005a78:	fb03 f202 	mul.w	r2, r3, r2
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	61da      	str	r2, [r3, #28]
 8005a80:	e07c      	b.n	8005b7c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	7c9b      	ldrb	r3, [r3, #18]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d130      	bne.n	8005aec <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005a90:	d918      	bls.n	8005ac4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	8a9b      	ldrh	r3, [r3, #20]
 8005a96:	461a      	mov	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d003      	beq.n	8005ab4 <USB_HC_StartXfer+0xdc>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d103      	bne.n	8005abc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	60da      	str	r2, [r3, #12]
 8005aba:	e05f      	b.n	8005b7c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	60da      	str	r2, [r3, #12]
 8005ac2:	e05b      	b.n	8005b7c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6a1a      	ldr	r2, [r3, #32]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d007      	beq.n	8005ae4 <USB_HC_StartXfer+0x10c>
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d003      	beq.n	8005ae4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2204      	movs	r2, #4
 8005ae0:	60da      	str	r2, [r3, #12]
 8005ae2:	e04b      	b.n	8005b7c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	60da      	str	r2, [r3, #12]
 8005aea:	e047      	b.n	8005b7c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005aec:	79fb      	ldrb	r3, [r7, #7]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d10d      	bne.n	8005b0e <USB_HC_StartXfer+0x136>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	8a92      	ldrh	r2, [r2, #20]
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d907      	bls.n	8005b0e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005afe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	8a92      	ldrh	r2, [r2, #20]
 8005b04:	fb03 f202 	mul.w	r2, r3, r2
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	61da      	str	r2, [r3, #28]
 8005b0c:	e036      	b.n	8005b7c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6a1a      	ldr	r2, [r3, #32]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	61da      	str	r2, [r3, #28]
 8005b16:	e031      	b.n	8005b7c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d018      	beq.n	8005b52 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	8a92      	ldrh	r2, [r2, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	8a92      	ldrh	r2, [r2, #20]
 8005b30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b34:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005b36:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005b38:	8b7b      	ldrh	r3, [r7, #26]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d90b      	bls.n	8005b56 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005b3e:	8b7b      	ldrh	r3, [r7, #26]
 8005b40:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	8a92      	ldrh	r2, [r2, #20]
 8005b48:	fb03 f202 	mul.w	r2, r3, r2
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	61da      	str	r2, [r3, #28]
 8005b50:	e001      	b.n	8005b56 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005b52:	2301      	movs	r3, #1
 8005b54:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	78db      	ldrb	r3, [r3, #3]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	8a92      	ldrh	r2, [r2, #20]
 8005b64:	fb03 f202 	mul.w	r2, r3, r2
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	61da      	str	r2, [r3, #28]
 8005b6c:	e006      	b.n	8005b7c <USB_HC_StartXfer+0x1a4>
 8005b6e:	bf00      	nop
 8005b70:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b84:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b86:	04d9      	lsls	r1, r3, #19
 8005b88:	4ba3      	ldr	r3, [pc, #652]	@ (8005e18 <USB_HC_StartXfer+0x440>)
 8005b8a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b8c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	7d9b      	ldrb	r3, [r3, #22]
 8005b92:	075b      	lsls	r3, r3, #29
 8005b94:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b98:	69f9      	ldr	r1, [r7, #28]
 8005b9a:	0148      	lsls	r0, r1, #5
 8005b9c:	6a39      	ldr	r1, [r7, #32]
 8005b9e:	4401      	add	r1, r0
 8005ba0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ba4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ba6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6999      	ldr	r1, [r3, #24]
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bbe:	460a      	mov	r2, r1
 8005bc0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bf0c      	ite	eq
 8005bd2:	2301      	moveq	r3, #1
 8005bd4:	2300      	movne	r3, #0
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	6a3a      	ldr	r2, [r7, #32]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bf4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005bf8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	7e7b      	ldrb	r3, [r7, #25]
 8005c0a:	075b      	lsls	r3, r3, #29
 8005c0c:	69f9      	ldr	r1, [r7, #28]
 8005c0e:	0148      	lsls	r0, r1, #5
 8005c10:	6a39      	ldr	r1, [r7, #32]
 8005c12:	4401      	add	r1, r0
 8005c14:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	799b      	ldrb	r3, [r3, #6]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	f040 80c3 	bne.w	8005dac <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	7c5b      	ldrb	r3, [r3, #17]
 8005c2a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005c30:	4313      	orrs	r3, r2
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	6a3a      	ldr	r2, [r7, #32]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005c3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005c42:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	6a3a      	ldr	r2, [r7, #32]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c5e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005c62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	79db      	ldrb	r3, [r3, #7]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d123      	bne.n	8005cb4 <USB_HC_StartXfer+0x2dc>
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	78db      	ldrb	r3, [r3, #3]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11f      	bne.n	8005cb4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	6a3a      	ldr	r2, [r7, #32]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c92:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	6a3a      	ldr	r2, [r7, #32]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cb2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	7c9b      	ldrb	r3, [r3, #18]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d003      	beq.n	8005cc4 <USB_HC_StartXfer+0x2ec>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	7c9b      	ldrb	r3, [r3, #18]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d117      	bne.n	8005cf4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d113      	bne.n	8005cf4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	78db      	ldrb	r3, [r3, #3]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d10f      	bne.n	8005cf4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	7c9b      	ldrb	r3, [r3, #18]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d162      	bne.n	8005dc2 <USB_HC_StartXfer+0x3ea>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	78db      	ldrb	r3, [r3, #3]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d15e      	bne.n	8005dc2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d858      	bhi.n	8005dc0 <USB_HC_StartXfer+0x3e8>
 8005d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d14 <USB_HC_StartXfer+0x33c>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d25 	.word	0x08005d25
 8005d18:	08005d47 	.word	0x08005d47
 8005d1c:	08005d69 	.word	0x08005d69
 8005d20:	08005d8b 	.word	0x08005d8b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	0151      	lsls	r1, r2, #5
 8005d36:	6a3a      	ldr	r2, [r7, #32]
 8005d38:	440a      	add	r2, r1
 8005d3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d42:	6053      	str	r3, [r2, #4]
          break;
 8005d44:	e03d      	b.n	8005dc2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	0151      	lsls	r1, r2, #5
 8005d58:	6a3a      	ldr	r2, [r7, #32]
 8005d5a:	440a      	add	r2, r1
 8005d5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d60:	f043 030e 	orr.w	r3, r3, #14
 8005d64:	6053      	str	r3, [r2, #4]
          break;
 8005d66:	e02c      	b.n	8005dc2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	6a3a      	ldr	r2, [r7, #32]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d86:	6053      	str	r3, [r2, #4]
          break;
 8005d88:	e01b      	b.n	8005dc2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	6a3a      	ldr	r2, [r7, #32]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005da4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005da8:	6053      	str	r3, [r2, #4]
          break;
 8005daa:	e00a      	b.n	8005dc2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005db8:	461a      	mov	r2, r3
 8005dba:	2300      	movs	r3, #0
 8005dbc:	6053      	str	r3, [r2, #4]
 8005dbe:	e000      	b.n	8005dc2 <USB_HC_StartXfer+0x3ea>
          break;
 8005dc0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005dd8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	78db      	ldrb	r3, [r3, #3]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d004      	beq.n	8005dec <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	e003      	b.n	8005df4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005df2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005dfa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e08:	461a      	mov	r2, r3
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	e055      	b.n	8005ec4 <USB_HC_StartXfer+0x4ec>
 8005e18:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	78db      	ldrb	r3, [r3, #3]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d14e      	bne.n	8005ec2 <USB_HC_StartXfer+0x4ea>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d04a      	beq.n	8005ec2 <USB_HC_StartXfer+0x4ea>
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	79db      	ldrb	r3, [r3, #7]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d146      	bne.n	8005ec2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	7c9b      	ldrb	r3, [r3, #18]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d831      	bhi.n	8005ea0 <USB_HC_StartXfer+0x4c8>
 8005e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e44 <USB_HC_StartXfer+0x46c>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e55 	.word	0x08005e55
 8005e48:	08005e79 	.word	0x08005e79
 8005e4c:	08005e55 	.word	0x08005e55
 8005e50:	08005e79 	.word	0x08005e79
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	3303      	adds	r3, #3
 8005e5a:	089b      	lsrs	r3, r3, #2
 8005e5c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e5e:	8afa      	ldrh	r2, [r7, #22]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d91c      	bls.n	8005ea4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	f043 0220 	orr.w	r2, r3, #32
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e76:	e015      	b.n	8005ea4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	3303      	adds	r3, #3
 8005e7e:	089b      	lsrs	r3, r3, #2
 8005e80:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e82:	8afa      	ldrh	r2, [r7, #22]
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d90a      	bls.n	8005ea8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e9e:	e003      	b.n	8005ea8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005ea0:	bf00      	nop
 8005ea2:	e002      	b.n	8005eaa <USB_HC_StartXfer+0x4d2>
        break;
 8005ea4:	bf00      	nop
 8005ea6:	e000      	b.n	8005eaa <USB_HC_StartXfer+0x4d2>
        break;
 8005ea8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	6999      	ldr	r1, [r3, #24]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	785a      	ldrb	r2, [r3, #1]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2000      	movs	r0, #0
 8005eba:	9000      	str	r0, [sp, #0]
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f7ff f9ca 	bl	8005256 <USB_WritePacket>
  }

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3728      	adds	r7, #40	@ 0x28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	b29b      	uxth	r3, r3
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b089      	sub	sp, #36	@ 0x24
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	0c9b      	lsrs	r3, r3, #18
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	0fdb      	lsrs	r3, r3, #31
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	0fdb      	lsrs	r3, r3, #31
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	d10d      	bne.n	8005f70 <USB_HC_Halt+0x82>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10a      	bne.n	8005f70 <USB_HC_Halt+0x82>
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d002      	beq.n	8005f6c <USB_HC_Halt+0x7e>
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d101      	bne.n	8005f70 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e0d8      	b.n	8006122 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <USB_HC_Halt+0x8e>
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d173      	bne.n	8006064 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f9a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d14a      	bne.n	800603e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d133      	bne.n	800601c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fd2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ff2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006000:	d82e      	bhi.n	8006060 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006014:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006018:	d0ec      	beq.n	8005ff4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800601a:	e081      	b.n	8006120 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	440a      	add	r2, r1
 8006032:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006036:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800603a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800603c:	e070      	b.n	8006120 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	69fa      	ldr	r2, [r7, #28]
 8006052:	440a      	add	r2, r1
 8006054:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006058:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800605c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800605e:	e05f      	b.n	8006120 <USB_HC_Halt+0x232>
            break;
 8006060:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006062:	e05d      	b.n	8006120 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	4413      	add	r3, r2
 800606c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	440a      	add	r2, r1
 800607a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800607e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006082:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d133      	bne.n	80060fc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060d2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060e0:	d81d      	bhi.n	800611e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060f8:	d0ec      	beq.n	80060d4 <USB_HC_Halt+0x1e6>
 80060fa:	e011      	b.n	8006120 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	4413      	add	r3, r2
 8006104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	0151      	lsls	r1, r2, #5
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	440a      	add	r2, r1
 8006112:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006116:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	e000      	b.n	8006120 <USB_HC_Halt+0x232>
          break;
 800611e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3724      	adds	r7, #36	@ 0x24
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006144:	2301      	movs	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	04da      	lsls	r2, r3, #19
 800614c:	4b15      	ldr	r3, [pc, #84]	@ (80061a4 <USB_DoPing+0x74>)
 800614e:	4013      	ands	r3, r2
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	440a      	add	r2, r1
 8006158:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800615c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006160:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	4413      	add	r3, r2
 800616a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006178:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006180:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	4413      	add	r3, r2
 800618a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800618e:	461a      	mov	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	1ff80000 	.word	0x1ff80000

080061a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7fe ff8d 	bl	80050dc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061c2:	2110      	movs	r1, #16
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7fe ffe6 	bl	8005196 <USB_FlushTxFifo>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff f810 	bl	80051fa <USB_FlushRxFifo>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80061e4:	2300      	movs	r3, #0
 80061e6:	61bb      	str	r3, [r7, #24]
 80061e8:	e01f      	b.n	800622a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006200:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006208:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006210:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	4413      	add	r3, r2
 800621a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800621e:	461a      	mov	r2, r3
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	3301      	adds	r3, #1
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b0f      	cmp	r3, #15
 800622e:	d9dc      	bls.n	80061ea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006230:	2300      	movs	r3, #0
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	e034      	b.n	80062a0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	4413      	add	r3, r2
 800623e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800624c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006254:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800625c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	4413      	add	r3, r2
 8006266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800626a:	461a      	mov	r2, r3
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800627c:	d80c      	bhi.n	8006298 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	4413      	add	r3, r2
 8006286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006290:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006294:	d0ec      	beq.n	8006270 <USB_StopHost+0xc8>
 8006296:	e000      	b.n	800629a <USB_StopHost+0xf2>
        break;
 8006298:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	3301      	adds	r3, #1
 800629e:	61bb      	str	r3, [r7, #24]
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	2b0f      	cmp	r3, #15
 80062a4:	d9c7      	bls.n	8006236 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062ac:	461a      	mov	r2, r3
 80062ae:	f04f 33ff 	mov.w	r3, #4294967295
 80062b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7fe fefc 	bl	80050ba <USB_EnableGlobalInt>

  return ret;
 80062c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3720      	adds	r7, #32
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b089      	sub	sp, #36	@ 0x24
 80062d0:	af04      	add	r7, sp, #16
 80062d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80062d4:	2301      	movs	r3, #1
 80062d6:	2202      	movs	r2, #2
 80062d8:	2102      	movs	r1, #2
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fc85 	bl	8006bea <USBH_FindInterface>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	2bff      	cmp	r3, #255	@ 0xff
 80062e8:	d002      	beq.n	80062f0 <USBH_CDC_InterfaceInit+0x24>
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d901      	bls.n	80062f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80062f0:	2302      	movs	r3, #2
 80062f2:	e13d      	b.n	8006570 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fc5a 	bl	8006bb2 <USBH_SelectInterface>
 80062fe:	4603      	mov	r3, r0
 8006300:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006302:	7bbb      	ldrb	r3, [r7, #14]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006308:	2302      	movs	r3, #2
 800630a:	e131      	b.n	8006570 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006312:	2050      	movs	r0, #80	@ 0x50
 8006314:	f002 fb64 	bl	80089e0 <malloc>
 8006318:	4603      	mov	r3, r0
 800631a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800632c:	2302      	movs	r3, #2
 800632e:	e11f      	b.n	8006570 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006330:	2250      	movs	r2, #80	@ 0x50
 8006332:	2100      	movs	r1, #0
 8006334:	68b8      	ldr	r0, [r7, #8]
 8006336:	f002 fe09 	bl	8008f4c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	211a      	movs	r1, #26
 8006340:	fb01 f303 	mul.w	r3, r1, r3
 8006344:	4413      	add	r3, r2
 8006346:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	b25b      	sxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	da15      	bge.n	800637e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	211a      	movs	r1, #26
 8006358:	fb01 f303 	mul.w	r3, r1, r3
 800635c:	4413      	add	r3, r2
 800635e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006362:	781a      	ldrb	r2, [r3, #0]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	211a      	movs	r1, #26
 800636e:	fb01 f303 	mul.w	r3, r1, r3
 8006372:	4413      	add	r3, r2
 8006374:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006378:	881a      	ldrh	r2, [r3, #0]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 ffbe 	bl	8008306 <USBH_AllocPipe>
 800638a:	4603      	mov	r3, r0
 800638c:	461a      	mov	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	7819      	ldrb	r1, [r3, #0]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	7858      	ldrb	r0, [r3, #1]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	8952      	ldrh	r2, [r2, #10]
 80063aa:	9202      	str	r2, [sp, #8]
 80063ac:	2203      	movs	r2, #3
 80063ae:	9201      	str	r2, [sp, #4]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	4623      	mov	r3, r4
 80063b4:	4602      	mov	r2, r0
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 ff76 	bl	80082a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2200      	movs	r2, #0
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f002 fa85 	bl	80088d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80063ca:	2300      	movs	r3, #0
 80063cc:	2200      	movs	r2, #0
 80063ce:	210a      	movs	r1, #10
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fc0a 	bl	8006bea <USBH_FindInterface>
 80063d6:	4603      	mov	r3, r0
 80063d8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	2bff      	cmp	r3, #255	@ 0xff
 80063de:	d002      	beq.n	80063e6 <USBH_CDC_InterfaceInit+0x11a>
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d901      	bls.n	80063ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80063e6:	2302      	movs	r3, #2
 80063e8:	e0c2      	b.n	8006570 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	211a      	movs	r1, #26
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	4413      	add	r3, r2
 80063f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	b25b      	sxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da16      	bge.n	8006430 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	211a      	movs	r1, #26
 8006408:	fb01 f303 	mul.w	r3, r1, r3
 800640c:	4413      	add	r3, r2
 800640e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006412:	781a      	ldrb	r2, [r3, #0]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	211a      	movs	r1, #26
 800641e:	fb01 f303 	mul.w	r3, r1, r3
 8006422:	4413      	add	r3, r2
 8006424:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006428:	881a      	ldrh	r2, [r3, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	835a      	strh	r2, [r3, #26]
 800642e:	e015      	b.n	800645c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	211a      	movs	r1, #26
 8006436:	fb01 f303 	mul.w	r3, r1, r3
 800643a:	4413      	add	r3, r2
 800643c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006440:	781a      	ldrb	r2, [r3, #0]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	211a      	movs	r1, #26
 800644c:	fb01 f303 	mul.w	r3, r1, r3
 8006450:	4413      	add	r3, r2
 8006452:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006456:	881a      	ldrh	r2, [r3, #0]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	211a      	movs	r1, #26
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	4413      	add	r3, r2
 8006468:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	b25b      	sxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	da16      	bge.n	80064a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	211a      	movs	r1, #26
 800647a:	fb01 f303 	mul.w	r3, r1, r3
 800647e:	4413      	add	r3, r2
 8006480:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006484:	781a      	ldrb	r2, [r3, #0]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	211a      	movs	r1, #26
 8006490:	fb01 f303 	mul.w	r3, r1, r3
 8006494:	4413      	add	r3, r2
 8006496:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800649a:	881a      	ldrh	r2, [r3, #0]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	835a      	strh	r2, [r3, #26]
 80064a0:	e015      	b.n	80064ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	211a      	movs	r1, #26
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	4413      	add	r3, r2
 80064ae:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80064b2:	781a      	ldrb	r2, [r3, #0]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	211a      	movs	r1, #26
 80064be:	fb01 f303 	mul.w	r3, r1, r3
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80064c8:	881a      	ldrh	r2, [r3, #0]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	7b9b      	ldrb	r3, [r3, #14]
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 ff16 	bl	8008306 <USBH_AllocPipe>
 80064da:	4603      	mov	r3, r0
 80064dc:	461a      	mov	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	7bdb      	ldrb	r3, [r3, #15]
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f001 ff0c 	bl	8008306 <USBH_AllocPipe>
 80064ee:	4603      	mov	r3, r0
 80064f0:	461a      	mov	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	7b59      	ldrb	r1, [r3, #13]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	7b98      	ldrb	r0, [r3, #14]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	8b12      	ldrh	r2, [r2, #24]
 800650e:	9202      	str	r2, [sp, #8]
 8006510:	2202      	movs	r2, #2
 8006512:	9201      	str	r2, [sp, #4]
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	4623      	mov	r3, r4
 8006518:	4602      	mov	r2, r0
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 fec4 	bl	80082a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	7b19      	ldrb	r1, [r3, #12]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	7bd8      	ldrb	r0, [r3, #15]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	8b52      	ldrh	r2, [r2, #26]
 8006538:	9202      	str	r2, [sp, #8]
 800653a:	2202      	movs	r2, #2
 800653c:	9201      	str	r2, [sp, #4]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	4623      	mov	r3, r4
 8006542:	4602      	mov	r2, r0
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 feaf 	bl	80082a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	7b5b      	ldrb	r3, [r3, #13]
 8006556:	2200      	movs	r2, #0
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f002 f9ba 	bl	80088d4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	7b1b      	ldrb	r3, [r3, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f002 f9b3 	bl	80088d4 <USBH_LL_SetToggle>

  return USBH_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	bd90      	pop	{r4, r7, pc}

08006578 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00e      	beq.n	80065b0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 fea4 	bl	80082e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 fecf 	bl	8008348 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	7b1b      	ldrb	r3, [r3, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00e      	beq.n	80065d6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	7b1b      	ldrb	r3, [r3, #12]
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 fe91 	bl	80082e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	7b1b      	ldrb	r3, [r3, #12]
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f001 febc 	bl	8008348 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	7b5b      	ldrb	r3, [r3, #13]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00e      	beq.n	80065fc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	7b5b      	ldrb	r3, [r3, #13]
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 fe7e 	bl	80082e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	7b5b      	ldrb	r3, [r3, #13]
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f001 fea9 	bl	8008348 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	4618      	mov	r0, r3
 8006612:	f002 f9ed 	bl	80089f0 <free>
    phost->pActiveClass->pData = 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800661c:	2200      	movs	r2, #0
 800661e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3340      	adds	r3, #64	@ 0x40
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f8b1 	bl	80067aa <GetLineCoding>
 8006648:	4603      	mov	r3, r0
 800664a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800664c:	7afb      	ldrb	r3, [r7, #11]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d105      	bne.n	800665e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006658:	2102      	movs	r1, #2
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800665e:	7afb      	ldrb	r3, [r7, #11]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006670:	2301      	movs	r3, #1
 8006672:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006688:	2b04      	cmp	r3, #4
 800668a:	d877      	bhi.n	800677c <USBH_CDC_Process+0x114>
 800668c:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <USBH_CDC_Process+0x2c>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066a9 	.word	0x080066a9
 8006698:	080066af 	.word	0x080066af
 800669c:	080066df 	.word	0x080066df
 80066a0:	08006753 	.word	0x08006753
 80066a4:	08006761 	.word	0x08006761
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]
      break;
 80066ac:	e06d      	b.n	800678a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f897 	bl	80067e8 <SetLineCoding>
 80066ba:	4603      	mov	r3, r0
 80066bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066be:	7bbb      	ldrb	r3, [r7, #14]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2202      	movs	r2, #2
 80066c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066cc:	e058      	b.n	8006780 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d055      	beq.n	8006780 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2204      	movs	r2, #4
 80066d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80066dc:	e050      	b.n	8006780 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	3340      	adds	r3, #64	@ 0x40
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f860 	bl	80067aa <GetLineCoding>
 80066ea:	4603      	mov	r3, r0
 80066ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d126      	bne.n	8006742 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006706:	791b      	ldrb	r3, [r3, #4]
 8006708:	429a      	cmp	r2, r3
 800670a:	d13b      	bne.n	8006784 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006716:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006718:	429a      	cmp	r2, r3
 800671a:	d133      	bne.n	8006784 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006726:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006728:	429a      	cmp	r2, r3
 800672a:	d12b      	bne.n	8006784 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006734:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006736:	429a      	cmp	r2, r3
 8006738:	d124      	bne.n	8006784 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f958 	bl	80069f0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006740:	e020      	b.n	8006784 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d01d      	beq.n	8006784 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2204      	movs	r2, #4
 800674c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006750:	e018      	b.n	8006784 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f867 	bl	8006826 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f8da 	bl	8006912 <CDC_ProcessReception>
      break;
 800675e:	e014      	b.n	800678a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006760:	2100      	movs	r1, #0
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 f81a 	bl	800779c <USBH_ClrFeature>
 8006768:	4603      	mov	r3, r0
 800676a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800677a:	e005      	b.n	8006788 <USBH_CDC_Process+0x120>

    default:
      break;
 800677c:	bf00      	nop
 800677e:	e004      	b.n	800678a <USBH_CDC_Process+0x122>
      break;
 8006780:	bf00      	nop
 8006782:	e002      	b.n	800678a <USBH_CDC_Process+0x122>
      break;
 8006784:	bf00      	nop
 8006786:	e000      	b.n	800678a <USBH_CDC_Process+0x122>
      break;
 8006788:	bf00      	nop

  }

  return status;
 800678a:	7bfb      	ldrb	r3, [r7, #15]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	22a1      	movs	r2, #161	@ 0xa1
 80067b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2221      	movs	r2, #33	@ 0x21
 80067be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2207      	movs	r2, #7
 80067d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2207      	movs	r2, #7
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fb14 	bl	8007e06 <USBH_CtlReq>
 80067de:	4603      	mov	r3, r0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2221      	movs	r2, #33	@ 0x21
 80067f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2220      	movs	r2, #32
 80067fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2207      	movs	r2, #7
 800680e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2207      	movs	r2, #7
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 faf5 	bl	8007e06 <USBH_CtlReq>
 800681c:	4603      	mov	r3, r0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b086      	sub	sp, #24
 800682a:	af02      	add	r7, sp, #8
 800682c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006838:	2300      	movs	r3, #0
 800683a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006842:	2b01      	cmp	r3, #1
 8006844:	d002      	beq.n	800684c <CDC_ProcessTransmission+0x26>
 8006846:	2b02      	cmp	r3, #2
 8006848:	d023      	beq.n	8006892 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800684a:	e05e      	b.n	800690a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	8b12      	ldrh	r2, [r2, #24]
 8006854:	4293      	cmp	r3, r2
 8006856:	d90b      	bls.n	8006870 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	69d9      	ldr	r1, [r3, #28]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8b1a      	ldrh	r2, [r3, #24]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	7b5b      	ldrb	r3, [r3, #13]
 8006864:	2001      	movs	r0, #1
 8006866:	9000      	str	r0, [sp, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 fcda 	bl	8008222 <USBH_BulkSendData>
 800686e:	e00b      	b.n	8006888 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	7b5b      	ldrb	r3, [r3, #13]
 800687e:	2001      	movs	r0, #1
 8006880:	9000      	str	r0, [sp, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 fccd 	bl	8008222 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006890:	e03b      	b.n	800690a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	7b5b      	ldrb	r3, [r3, #13]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fff1 	bl	8008880 <USBH_LL_GetURBState>
 800689e:	4603      	mov	r3, r0
 80068a0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80068a2:	7afb      	ldrb	r3, [r7, #11]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d128      	bne.n	80068fa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	8b12      	ldrh	r2, [r2, #24]
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d90e      	bls.n	80068d2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	8b12      	ldrh	r2, [r2, #24]
 80068bc:	1a9a      	subs	r2, r3, r2
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	8b12      	ldrh	r2, [r2, #24]
 80068ca:	441a      	add	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	61da      	str	r2, [r3, #28]
 80068d0:	e002      	b.n	80068d8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80068e8:	e00e      	b.n	8006908 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f868 	bl	80069c8 <USBH_CDC_TransmitCallback>
      break;
 80068f8:	e006      	b.n	8006908 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80068fa:	7afb      	ldrb	r3, [r7, #11]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d103      	bne.n	8006908 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006908:	bf00      	nop
  }
}
 800690a:	bf00      	nop
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b086      	sub	sp, #24
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006924:	2300      	movs	r3, #0
 8006926:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800692e:	2b03      	cmp	r3, #3
 8006930:	d002      	beq.n	8006938 <CDC_ProcessReception+0x26>
 8006932:	2b04      	cmp	r3, #4
 8006934:	d00e      	beq.n	8006954 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006936:	e043      	b.n	80069c0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	6a19      	ldr	r1, [r3, #32]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	8b5a      	ldrh	r2, [r3, #26]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	7b1b      	ldrb	r3, [r3, #12]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 fc91 	bl	800826c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2204      	movs	r2, #4
 800694e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006952:	e035      	b.n	80069c0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	7b1b      	ldrb	r3, [r3, #12]
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f001 ff90 	bl	8008880 <USBH_LL_GetURBState>
 8006960:	4603      	mov	r3, r0
 8006962:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006964:	7cfb      	ldrb	r3, [r7, #19]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d129      	bne.n	80069be <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	7b1b      	ldrb	r3, [r3, #12]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 fef3 	bl	800875c <USBH_LL_GetLastXferSize>
 8006976:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	429a      	cmp	r2, r3
 8006980:	d016      	beq.n	80069b0 <CDC_ProcessReception+0x9e>
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	8b5b      	ldrh	r3, [r3, #26]
 8006986:	461a      	mov	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4293      	cmp	r3, r2
 800698c:	d110      	bne.n	80069b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1ad2      	subs	r2, r2, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	6a1a      	ldr	r2, [r3, #32]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	441a      	add	r2, r3
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2203      	movs	r2, #3
 80069aa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80069ae:	e006      	b.n	80069be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f80f 	bl	80069dc <USBH_CDC_ReceiveCallback>
      break;
 80069be:	bf00      	nop
  }
}
 80069c0:	bf00      	nop
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e029      	b.n	8006a70 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	79fa      	ldrb	r2, [r7, #7]
 8006a20:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f81f 	bl	8006a78 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f001 fdc3 	bl	80085f4 <USBH_LL_Init>

  return USBH_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	e009      	b.n	8006a9e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	33e0      	adds	r3, #224	@ 0xe0
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	2200      	movs	r2, #0
 8006a96:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b0f      	cmp	r3, #15
 8006aa2:	d9f2      	bls.n	8006a8a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	e009      	b.n	8006abe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac4:	d3f1      	bcc.n	8006aaa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2240      	movs	r2, #64	@ 0x40
 8006aea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	331c      	adds	r3, #28
 8006b16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f002 fa15 	bl	8008f4c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f002 fa0c 	bl	8008f4c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006b3a:	2212      	movs	r2, #18
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f002 fa04 	bl	8008f4c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006b4a:	223e      	movs	r2, #62	@ 0x3e
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f002 f9fc 	bl	8008f4c <memset>

  return USBH_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b085      	sub	sp, #20
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d016      	beq.n	8006ba0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10e      	bne.n	8006b9a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006b82:	1c59      	adds	r1, r3, #1
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	33de      	adds	r3, #222	@ 0xde
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]
 8006b98:	e004      	b.n	8006ba4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	73fb      	strb	r3, [r7, #15]
 8006b9e:	e001      	b.n	8006ba4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006bc8:	78fa      	ldrb	r2, [r7, #3]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d204      	bcs.n	8006bd8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	78fa      	ldrb	r2, [r7, #3]
 8006bd2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006bd6:	e001      	b.n	8006bdc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b087      	sub	sp, #28
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	4608      	mov	r0, r1
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	70fb      	strb	r3, [r7, #3]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70bb      	strb	r3, [r7, #2]
 8006c00:	4613      	mov	r3, r2
 8006c02:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006c12:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c14:	e025      	b.n	8006c62 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	221a      	movs	r2, #26
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	3308      	adds	r3, #8
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	3302      	adds	r3, #2
 8006c26:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	795b      	ldrb	r3, [r3, #5]
 8006c2c:	78fa      	ldrb	r2, [r7, #3]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d002      	beq.n	8006c38 <USBH_FindInterface+0x4e>
 8006c32:	78fb      	ldrb	r3, [r7, #3]
 8006c34:	2bff      	cmp	r3, #255	@ 0xff
 8006c36:	d111      	bne.n	8006c5c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c3c:	78ba      	ldrb	r2, [r7, #2]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d002      	beq.n	8006c48 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c42:	78bb      	ldrb	r3, [r7, #2]
 8006c44:	2bff      	cmp	r3, #255	@ 0xff
 8006c46:	d109      	bne.n	8006c5c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c4c:	787a      	ldrb	r2, [r7, #1]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d002      	beq.n	8006c58 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c52:	787b      	ldrb	r3, [r7, #1]
 8006c54:	2bff      	cmp	r3, #255	@ 0xff
 8006c56:	d101      	bne.n	8006c5c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	e006      	b.n	8006c6a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d9d6      	bls.n	8006c16 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006c68:	23ff      	movs	r3, #255	@ 0xff
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fcf4 	bl	800866c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006c84:	2101      	movs	r1, #1
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 fe0d 	bl	80088a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af04      	add	r7, sp, #16
 8006c9e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d102      	bne.n	8006cba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2203      	movs	r2, #3
 8006cb8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b0b      	cmp	r3, #11
 8006cc2:	f200 81bb 	bhi.w	800703c <USBH_Process+0x3a4>
 8006cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ccc <USBH_Process+0x34>)
 8006cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ccc:	08006cfd 	.word	0x08006cfd
 8006cd0:	08006d2f 	.word	0x08006d2f
 8006cd4:	08006d97 	.word	0x08006d97
 8006cd8:	08006fd7 	.word	0x08006fd7
 8006cdc:	0800703d 	.word	0x0800703d
 8006ce0:	08006e37 	.word	0x08006e37
 8006ce4:	08006f7d 	.word	0x08006f7d
 8006ce8:	08006e6d 	.word	0x08006e6d
 8006cec:	08006e8d 	.word	0x08006e8d
 8006cf0:	08006eab 	.word	0x08006eab
 8006cf4:	08006eef 	.word	0x08006eef
 8006cf8:	08006fbf 	.word	0x08006fbf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 819b 	beq.w	8007040 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006d10:	20c8      	movs	r0, #200	@ 0xc8
 8006d12:	f001 fe12 	bl	800893a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 fd05 	bl	8008726 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d2c:	e188      	b.n	8007040 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d107      	bne.n	8006d48 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d46:	e18a      	b.n	800705e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006d4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d52:	d914      	bls.n	8006d7e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d903      	bls.n	8006d76 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	220d      	movs	r2, #13
 8006d72:	701a      	strb	r2, [r3, #0]
      break;
 8006d74:	e173      	b.n	800705e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	701a      	strb	r2, [r3, #0]
      break;
 8006d7c:	e16f      	b.n	800705e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006d84:	f103 020a 	add.w	r2, r3, #10
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006d8e:	200a      	movs	r0, #10
 8006d90:	f001 fdd3 	bl	800893a <USBH_Delay>
      break;
 8006d94:	e163      	b.n	800705e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006da6:	2104      	movs	r1, #4
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006dac:	2064      	movs	r0, #100	@ 0x64
 8006dae:	f001 fdc4 	bl	800893a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f001 fc90 	bl	80086d8 <USBH_LL_GetSpeed>
 8006db8:	4603      	mov	r3, r0
 8006dba:	461a      	mov	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2205      	movs	r2, #5
 8006dc6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006dc8:	2100      	movs	r1, #0
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fa9b 	bl	8008306 <USBH_AllocPipe>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006dd8:	2180      	movs	r1, #128	@ 0x80
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fa93 	bl	8008306 <USBH_AllocPipe>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	7919      	ldrb	r1, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006dfc:	9202      	str	r2, [sp, #8]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	9201      	str	r2, [sp, #4]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	4603      	mov	r3, r0
 8006e06:	2280      	movs	r2, #128	@ 0x80
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 fa4d 	bl	80082a8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7959      	ldrb	r1, [r3, #5]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e22:	9202      	str	r2, [sp, #8]
 8006e24:	2200      	movs	r2, #0
 8006e26:	9201      	str	r2, [sp, #4]
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 fa3a 	bl	80082a8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e34:	e113      	b.n	800705e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f916 	bl	8007068 <USBH_HandleEnum>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f040 80fd 	bne.w	8007044 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d103      	bne.n	8006e64 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2208      	movs	r2, #8
 8006e60:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e62:	e0ef      	b.n	8007044 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2207      	movs	r2, #7
 8006e68:	701a      	strb	r2, [r3, #0]
      break;
 8006e6a:	e0eb      	b.n	8007044 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 80e8 	beq.w	8007048 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e7e:	2101      	movs	r1, #1
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2208      	movs	r2, #8
 8006e88:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006e8a:	e0dd      	b.n	8007048 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fc3a 	bl	800770e <USBH_SetCfg>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f040 80d5 	bne.w	800704c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2209      	movs	r2, #9
 8006ea6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ea8:	e0d0      	b.n	800704c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d016      	beq.n	8006ee6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006eb8:	2101      	movs	r1, #1
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fc4a 	bl	8007754 <USBH_SetFeature>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d103      	bne.n	8006ed4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	220a      	movs	r2, #10
 8006ed0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ed2:	e0bd      	b.n	8007050 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	f040 80b9 	bne.w	8007050 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	220a      	movs	r2, #10
 8006ee2:	701a      	strb	r2, [r3, #0]
      break;
 8006ee4:	e0b4      	b.n	8007050 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	220a      	movs	r2, #10
 8006eea:	701a      	strb	r2, [r3, #0]
      break;
 8006eec:	e0b0      	b.n	8007050 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 80ad 	beq.w	8007054 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f02:	2300      	movs	r3, #0
 8006f04:	73fb      	strb	r3, [r7, #15]
 8006f06:	e016      	b.n	8006f36 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f08:	7bfa      	ldrb	r2, [r7, #15]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	32de      	adds	r2, #222	@ 0xde
 8006f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f12:	791a      	ldrb	r2, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d108      	bne.n	8006f30 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006f1e:	7bfa      	ldrb	r2, [r7, #15]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	32de      	adds	r2, #222	@ 0xde
 8006f24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006f2e:	e005      	b.n	8006f3c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	3301      	adds	r3, #1
 8006f34:	73fb      	strb	r3, [r7, #15]
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0e5      	beq.n	8006f08 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d016      	beq.n	8006f74 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d109      	bne.n	8006f6c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2206      	movs	r2, #6
 8006f5c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f64:	2103      	movs	r1, #3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f6a:	e073      	b.n	8007054 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	220d      	movs	r2, #13
 8006f70:	701a      	strb	r2, [r3, #0]
      break;
 8006f72:	e06f      	b.n	8007054 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	220d      	movs	r2, #13
 8006f78:	701a      	strb	r2, [r3, #0]
      break;
 8006f7a:	e06b      	b.n	8007054 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d017      	beq.n	8006fb6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d103      	bne.n	8006fa6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	220b      	movs	r2, #11
 8006fa2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fa4:	e058      	b.n	8007058 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d154      	bne.n	8007058 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	220d      	movs	r2, #13
 8006fb2:	701a      	strb	r2, [r3, #0]
      break;
 8006fb4:	e050      	b.n	8007058 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	220d      	movs	r2, #13
 8006fba:	701a      	strb	r2, [r3, #0]
      break;
 8006fbc:	e04c      	b.n	8007058 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d049      	beq.n	800705c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
      }
      break;
 8006fd4:	e042      	b.n	800705c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff fd4a 	bl	8006a78 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007012:	2105      	movs	r1, #5
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b01      	cmp	r3, #1
 8007022:	d107      	bne.n	8007034 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff fe22 	bl	8006c76 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007032:	e014      	b.n	800705e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fb19 	bl	800866c <USBH_LL_Start>
      break;
 800703a:	e010      	b.n	800705e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800703c:	bf00      	nop
 800703e:	e00e      	b.n	800705e <USBH_Process+0x3c6>
      break;
 8007040:	bf00      	nop
 8007042:	e00c      	b.n	800705e <USBH_Process+0x3c6>
      break;
 8007044:	bf00      	nop
 8007046:	e00a      	b.n	800705e <USBH_Process+0x3c6>
    break;
 8007048:	bf00      	nop
 800704a:	e008      	b.n	800705e <USBH_Process+0x3c6>
      break;
 800704c:	bf00      	nop
 800704e:	e006      	b.n	800705e <USBH_Process+0x3c6>
      break;
 8007050:	bf00      	nop
 8007052:	e004      	b.n	800705e <USBH_Process+0x3c6>
      break;
 8007054:	bf00      	nop
 8007056:	e002      	b.n	800705e <USBH_Process+0x3c6>
      break;
 8007058:	bf00      	nop
 800705a:	e000      	b.n	800705e <USBH_Process+0x3c6>
      break;
 800705c:	bf00      	nop
  }
  return USBH_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af04      	add	r7, sp, #16
 800706e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007070:	2301      	movs	r3, #1
 8007072:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007074:	2301      	movs	r3, #1
 8007076:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b07      	cmp	r3, #7
 800707e:	f200 81bd 	bhi.w	80073fc <USBH_HandleEnum+0x394>
 8007082:	a201      	add	r2, pc, #4	@ (adr r2, 8007088 <USBH_HandleEnum+0x20>)
 8007084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007088:	080070a9 	.word	0x080070a9
 800708c:	08007163 	.word	0x08007163
 8007090:	080071cd 	.word	0x080071cd
 8007094:	08007257 	.word	0x08007257
 8007098:	080072c1 	.word	0x080072c1
 800709c:	08007331 	.word	0x08007331
 80070a0:	08007377 	.word	0x08007377
 80070a4:	080073bd 	.word	0x080073bd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80070a8:	2108      	movs	r1, #8
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa4c 	bl	8007548 <USBH_Get_DevDesc>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d12e      	bne.n	8007118 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	7919      	ldrb	r1, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80070de:	9202      	str	r2, [sp, #8]
 80070e0:	2200      	movs	r2, #0
 80070e2:	9201      	str	r2, [sp, #4]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	4603      	mov	r3, r0
 80070e8:	2280      	movs	r2, #128	@ 0x80
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 f8dc 	bl	80082a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	7959      	ldrb	r1, [r3, #5]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007104:	9202      	str	r2, [sp, #8]
 8007106:	2200      	movs	r2, #0
 8007108:	9201      	str	r2, [sp, #4]
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	4603      	mov	r3, r0
 800710e:	2200      	movs	r2, #0
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 f8c9 	bl	80082a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007116:	e173      	b.n	8007400 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	2b03      	cmp	r3, #3
 800711c:	f040 8170 	bne.w	8007400 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007126:	3301      	adds	r3, #1
 8007128:	b2da      	uxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007136:	2b03      	cmp	r3, #3
 8007138:	d903      	bls.n	8007142 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	220d      	movs	r2, #13
 800713e:	701a      	strb	r2, [r3, #0]
      break;
 8007140:	e15e      	b.n	8007400 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	795b      	ldrb	r3, [r3, #5]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 f8fd 	bl	8008348 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	791b      	ldrb	r3, [r3, #4]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 f8f7 	bl	8008348 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]
      break;
 8007160:	e14e      	b.n	8007400 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007162:	2112      	movs	r1, #18
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f9ef 	bl	8007548 <USBH_Get_DevDesc>
 800716a:	4603      	mov	r3, r0
 800716c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800717a:	e143      	b.n	8007404 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b03      	cmp	r3, #3
 8007180:	f040 8140 	bne.w	8007404 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800718a:	3301      	adds	r3, #1
 800718c:	b2da      	uxtb	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800719a:	2b03      	cmp	r3, #3
 800719c:	d903      	bls.n	80071a6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	220d      	movs	r2, #13
 80071a2:	701a      	strb	r2, [r3, #0]
      break;
 80071a4:	e12e      	b.n	8007404 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	795b      	ldrb	r3, [r3, #5]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 f8cb 	bl	8008348 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	791b      	ldrb	r3, [r3, #4]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 f8c5 	bl	8008348 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	701a      	strb	r2, [r3, #0]
      break;
 80071ca:	e11b      	b.n	8007404 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80071cc:	2101      	movs	r1, #1
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa79 	bl	80076c6 <USBH_SetAddress>
 80071d4:	4603      	mov	r3, r0
 80071d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d130      	bne.n	8007240 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80071de:	2002      	movs	r0, #2
 80071e0:	f001 fbab 	bl	800893a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2203      	movs	r2, #3
 80071f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	7919      	ldrb	r1, [r3, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007206:	9202      	str	r2, [sp, #8]
 8007208:	2200      	movs	r2, #0
 800720a:	9201      	str	r2, [sp, #4]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	4603      	mov	r3, r0
 8007210:	2280      	movs	r2, #128	@ 0x80
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 f848 	bl	80082a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	7959      	ldrb	r1, [r3, #5]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800722c:	9202      	str	r2, [sp, #8]
 800722e:	2200      	movs	r2, #0
 8007230:	9201      	str	r2, [sp, #4]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	4603      	mov	r3, r0
 8007236:	2200      	movs	r2, #0
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 f835 	bl	80082a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800723e:	e0e3      	b.n	8007408 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	2b03      	cmp	r3, #3
 8007244:	f040 80e0 	bne.w	8007408 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	220d      	movs	r2, #13
 800724c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	705a      	strb	r2, [r3, #1]
      break;
 8007254:	e0d8      	b.n	8007408 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007256:	2109      	movs	r1, #9
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f9a1 	bl	80075a0 <USBH_Get_CfgDesc>
 800725e:	4603      	mov	r3, r0
 8007260:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2204      	movs	r2, #4
 800726c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800726e:	e0cd      	b.n	800740c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	2b03      	cmp	r3, #3
 8007274:	f040 80ca 	bne.w	800740c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800727e:	3301      	adds	r3, #1
 8007280:	b2da      	uxtb	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800728e:	2b03      	cmp	r3, #3
 8007290:	d903      	bls.n	800729a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	220d      	movs	r2, #13
 8007296:	701a      	strb	r2, [r3, #0]
      break;
 8007298:	e0b8      	b.n	800740c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	795b      	ldrb	r3, [r3, #5]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 f851 	bl	8008348 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	791b      	ldrb	r3, [r3, #4]
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f001 f84b 	bl	8008348 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	701a      	strb	r2, [r3, #0]
      break;
 80072be:	e0a5      	b.n	800740c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f969 	bl	80075a0 <USBH_Get_CfgDesc>
 80072ce:	4603      	mov	r3, r0
 80072d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d103      	bne.n	80072e0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2205      	movs	r2, #5
 80072dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072de:	e097      	b.n	8007410 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	f040 8094 	bne.w	8007410 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80072ee:	3301      	adds	r3, #1
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d903      	bls.n	800730a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	220d      	movs	r2, #13
 8007306:	701a      	strb	r2, [r3, #0]
      break;
 8007308:	e082      	b.n	8007410 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	795b      	ldrb	r3, [r3, #5]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 f819 	bl	8008348 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	791b      	ldrb	r3, [r3, #4]
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 f813 	bl	8008348 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	701a      	strb	r2, [r3, #0]
      break;
 800732e:	e06f      	b.n	8007410 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007336:	2b00      	cmp	r3, #0
 8007338:	d019      	beq.n	800736e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007346:	23ff      	movs	r3, #255	@ 0xff
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f953 	bl	80075f4 <USBH_Get_StringDesc>
 800734e:	4603      	mov	r3, r0
 8007350:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007352:	7bbb      	ldrb	r3, [r7, #14]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d103      	bne.n	8007360 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2206      	movs	r2, #6
 800735c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800735e:	e059      	b.n	8007414 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	2b03      	cmp	r3, #3
 8007364:	d156      	bne.n	8007414 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2206      	movs	r2, #6
 800736a:	705a      	strb	r2, [r3, #1]
      break;
 800736c:	e052      	b.n	8007414 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2206      	movs	r2, #6
 8007372:	705a      	strb	r2, [r3, #1]
      break;
 8007374:	e04e      	b.n	8007414 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800737c:	2b00      	cmp	r3, #0
 800737e:	d019      	beq.n	80073b4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800738c:	23ff      	movs	r3, #255	@ 0xff
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f930 	bl	80075f4 <USBH_Get_StringDesc>
 8007394:	4603      	mov	r3, r0
 8007396:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d103      	bne.n	80073a6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2207      	movs	r2, #7
 80073a2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073a4:	e038      	b.n	8007418 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d135      	bne.n	8007418 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2207      	movs	r2, #7
 80073b0:	705a      	strb	r2, [r3, #1]
      break;
 80073b2:	e031      	b.n	8007418 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2207      	movs	r2, #7
 80073b8:	705a      	strb	r2, [r3, #1]
      break;
 80073ba:	e02d      	b.n	8007418 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d017      	beq.n	80073f6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80073d2:	23ff      	movs	r3, #255	@ 0xff
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f90d 	bl	80075f4 <USBH_Get_StringDesc>
 80073da:	4603      	mov	r3, r0
 80073dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d102      	bne.n	80073ea <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80073e8:	e018      	b.n	800741c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d115      	bne.n	800741c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]
      break;
 80073f4:	e012      	b.n	800741c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
      break;
 80073fa:	e00f      	b.n	800741c <USBH_HandleEnum+0x3b4>

    default:
      break;
 80073fc:	bf00      	nop
 80073fe:	e00e      	b.n	800741e <USBH_HandleEnum+0x3b6>
      break;
 8007400:	bf00      	nop
 8007402:	e00c      	b.n	800741e <USBH_HandleEnum+0x3b6>
      break;
 8007404:	bf00      	nop
 8007406:	e00a      	b.n	800741e <USBH_HandleEnum+0x3b6>
      break;
 8007408:	bf00      	nop
 800740a:	e008      	b.n	800741e <USBH_HandleEnum+0x3b6>
      break;
 800740c:	bf00      	nop
 800740e:	e006      	b.n	800741e <USBH_HandleEnum+0x3b6>
      break;
 8007410:	bf00      	nop
 8007412:	e004      	b.n	800741e <USBH_HandleEnum+0x3b6>
      break;
 8007414:	bf00      	nop
 8007416:	e002      	b.n	800741e <USBH_HandleEnum+0x3b6>
      break;
 8007418:	bf00      	nop
 800741a:	e000      	b.n	800741e <USBH_HandleEnum+0x3b6>
      break;
 800741c:	bf00      	nop
  }
  return Status;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007454:	1c5a      	adds	r2, r3, #1
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f804 	bl	800746a <USBH_HandleSof>
}
 8007462:	bf00      	nop
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b0b      	cmp	r3, #11
 800747a:	d10a      	bne.n	8007492 <USBH_HandleSof+0x28>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d005      	beq.n	8007492 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	4798      	blx	r3
  }
}
 8007492:	bf00      	nop
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80074aa:	bf00      	nop
}
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80074c6:	bf00      	nop
}
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 f8be 	bl	80086a2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	791b      	ldrb	r3, [r3, #4]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 ff0b 	bl	8008348 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	795b      	ldrb	r3, [r3, #5]
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 ff05 	bl	8008348 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af02      	add	r7, sp, #8
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007554:	887b      	ldrh	r3, [r7, #2]
 8007556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800755a:	d901      	bls.n	8007560 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800755c:	2303      	movs	r3, #3
 800755e:	e01b      	b.n	8007598 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007566:	887b      	ldrh	r3, [r7, #2]
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	4613      	mov	r3, r2
 800756c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007570:	2100      	movs	r1, #0
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f872 	bl	800765c <USBH_GetDescriptor>
 8007578:	4603      	mov	r3, r0
 800757a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d109      	bne.n	8007596 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007588:	887a      	ldrh	r2, [r7, #2]
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f929 	bl	80077e4 <USBH_ParseDevDesc>
 8007592:	4603      	mov	r3, r0
 8007594:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007596:	7bfb      	ldrb	r3, [r7, #15]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af02      	add	r7, sp, #8
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	331c      	adds	r3, #28
 80075b0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80075b2:	887b      	ldrh	r3, [r7, #2]
 80075b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075b8:	d901      	bls.n	80075be <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e016      	b.n	80075ec <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80075be:	887b      	ldrh	r3, [r7, #2]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075c8:	2100      	movs	r1, #0
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f846 	bl	800765c <USBH_GetDescriptor>
 80075d0:	4603      	mov	r3, r0
 80075d2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d107      	bne.n	80075ea <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80075da:	887b      	ldrh	r3, [r7, #2]
 80075dc:	461a      	mov	r2, r3
 80075de:	68b9      	ldr	r1, [r7, #8]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f9af 	bl	8007944 <USBH_ParseCfgDesc>
 80075e6:	4603      	mov	r3, r0
 80075e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	607a      	str	r2, [r7, #4]
 80075fe:	461a      	mov	r2, r3
 8007600:	460b      	mov	r3, r1
 8007602:	72fb      	strb	r3, [r7, #11]
 8007604:	4613      	mov	r3, r2
 8007606:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007608:	893b      	ldrh	r3, [r7, #8]
 800760a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800760e:	d802      	bhi.n	8007616 <USBH_Get_StringDesc+0x22>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007616:	2303      	movs	r3, #3
 8007618:	e01c      	b.n	8007654 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800761a:	7afb      	ldrb	r3, [r7, #11]
 800761c:	b29b      	uxth	r3, r3
 800761e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007622:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800762a:	893b      	ldrh	r3, [r7, #8]
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	460b      	mov	r3, r1
 8007630:	2100      	movs	r1, #0
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 f812 	bl	800765c <USBH_GetDescriptor>
 8007638:	4603      	mov	r3, r0
 800763a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d107      	bne.n	8007652 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007648:	893a      	ldrh	r2, [r7, #8]
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fb8d 	bl	8007d6c <USBH_ParseStringDesc>
  }

  return status;
 8007652:	7dfb      	ldrb	r3, [r7, #23]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	607b      	str	r3, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	72fb      	strb	r3, [r7, #11]
 800766a:	4613      	mov	r3, r2
 800766c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	789b      	ldrb	r3, [r3, #2]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d11c      	bne.n	80076b0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007676:	7afb      	ldrb	r3, [r7, #11]
 8007678:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800767c:	b2da      	uxtb	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2206      	movs	r2, #6
 8007686:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	893a      	ldrh	r2, [r7, #8]
 800768c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800768e:	893b      	ldrh	r3, [r7, #8]
 8007690:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007694:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007698:	d104      	bne.n	80076a4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f240 4209 	movw	r2, #1033	@ 0x409
 80076a0:	829a      	strh	r2, [r3, #20]
 80076a2:	e002      	b.n	80076aa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8b3a      	ldrh	r2, [r7, #24]
 80076ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80076b0:	8b3b      	ldrh	r3, [r7, #24]
 80076b2:	461a      	mov	r2, r3
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fba5 	bl	8007e06 <USBH_CtlReq>
 80076bc:	4603      	mov	r3, r0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	789b      	ldrb	r3, [r3, #2]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d10f      	bne.n	80076fa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2205      	movs	r2, #5
 80076e4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076fa:	2200      	movs	r2, #0
 80076fc:	2100      	movs	r1, #0
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fb81 	bl	8007e06 <USBH_CtlReq>
 8007704:	4603      	mov	r3, r0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	789b      	ldrb	r3, [r3, #2]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d10e      	bne.n	8007740 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2209      	movs	r2, #9
 800772c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	887a      	ldrh	r2, [r7, #2]
 8007732:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007740:	2200      	movs	r2, #0
 8007742:	2100      	movs	r1, #0
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fb5e 	bl	8007e06 <USBH_CtlReq>
 800774a:	4603      	mov	r3, r0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	789b      	ldrb	r3, [r3, #2]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d10f      	bne.n	8007788 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2203      	movs	r2, #3
 8007772:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	b29a      	uxth	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007788:	2200      	movs	r2, #0
 800778a:	2100      	movs	r1, #0
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fb3a 	bl	8007e06 <USBH_CtlReq>
 8007792:	4603      	mov	r3, r0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	789b      	ldrb	r3, [r3, #2]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d10f      	bne.n	80077d0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80077d0:	2200      	movs	r2, #0
 80077d2:	2100      	movs	r1, #0
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fb16 	bl	8007e06 <USBH_CtlReq>
 80077da:	4603      	mov	r3, r0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80077f8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007804:	2302      	movs	r3, #2
 8007806:	e094      	b.n	8007932 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	781a      	ldrb	r2, [r3, #0]
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	785a      	ldrb	r2, [r3, #1]
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	3302      	adds	r3, #2
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	3303      	adds	r3, #3
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	021b      	lsls	r3, r3, #8
 8007828:	b29b      	uxth	r3, r3
 800782a:	4313      	orrs	r3, r2
 800782c:	b29a      	uxth	r2, r3
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	791a      	ldrb	r2, [r3, #4]
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	795a      	ldrb	r2, [r3, #5]
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	799a      	ldrb	r2, [r3, #6]
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	79da      	ldrb	r2, [r3, #7]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007858:	2b00      	cmp	r3, #0
 800785a:	d004      	beq.n	8007866 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007862:	2b01      	cmp	r3, #1
 8007864:	d11b      	bne.n	800789e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	79db      	ldrb	r3, [r3, #7]
 800786a:	2b20      	cmp	r3, #32
 800786c:	dc0f      	bgt.n	800788e <USBH_ParseDevDesc+0xaa>
 800786e:	2b08      	cmp	r3, #8
 8007870:	db0f      	blt.n	8007892 <USBH_ParseDevDesc+0xae>
 8007872:	3b08      	subs	r3, #8
 8007874:	4a32      	ldr	r2, [pc, #200]	@ (8007940 <USBH_ParseDevDesc+0x15c>)
 8007876:	fa22 f303 	lsr.w	r3, r2, r3
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	bf14      	ite	ne
 8007882:	2301      	movne	r3, #1
 8007884:	2300      	moveq	r3, #0
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d106      	bne.n	800789a <USBH_ParseDevDesc+0xb6>
 800788c:	e001      	b.n	8007892 <USBH_ParseDevDesc+0xae>
 800788e:	2b40      	cmp	r3, #64	@ 0x40
 8007890:	d003      	beq.n	800789a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2208      	movs	r2, #8
 8007896:	71da      	strb	r2, [r3, #7]
        break;
 8007898:	e000      	b.n	800789c <USBH_ParseDevDesc+0xb8>
        break;
 800789a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800789c:	e00e      	b.n	80078bc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d107      	bne.n	80078b8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	79db      	ldrb	r3, [r3, #7]
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d005      	beq.n	80078bc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2208      	movs	r2, #8
 80078b4:	71da      	strb	r2, [r3, #7]
 80078b6:	e001      	b.n	80078bc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80078b8:	2303      	movs	r3, #3
 80078ba:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80078bc:	88fb      	ldrh	r3, [r7, #6]
 80078be:	2b08      	cmp	r3, #8
 80078c0:	d936      	bls.n	8007930 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	3308      	adds	r3, #8
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	3309      	adds	r3, #9
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	4313      	orrs	r3, r2
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	330a      	adds	r3, #10
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	330b      	adds	r3, #11
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	4313      	orrs	r3, r2
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	330c      	adds	r3, #12
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	461a      	mov	r2, r3
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	330d      	adds	r3, #13
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	b29b      	uxth	r3, r3
 8007908:	4313      	orrs	r3, r2
 800790a:	b29a      	uxth	r2, r3
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	7b9a      	ldrb	r2, [r3, #14]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	7bda      	ldrb	r2, [r3, #15]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	7c1a      	ldrb	r2, [r3, #16]
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	7c5a      	ldrb	r2, [r3, #17]
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
}
 8007932:	4618      	mov	r0, r3
 8007934:	371c      	adds	r7, #28
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	01000101 	.word	0x01000101

08007944 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08c      	sub	sp, #48	@ 0x30
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	4613      	mov	r3, r2
 8007950:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007958:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007972:	2302      	movs	r3, #2
 8007974:	e0da      	b.n	8007b2c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800797a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b09      	cmp	r3, #9
 8007980:	d002      	beq.n	8007988 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007984:	2209      	movs	r2, #9
 8007986:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	781a      	ldrb	r2, [r3, #0]
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	785a      	ldrb	r2, [r3, #1]
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	3302      	adds	r3, #2
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	3303      	adds	r3, #3
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	4313      	orrs	r3, r2
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079b2:	bf28      	it	cs
 80079b4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	791a      	ldrb	r2, [r3, #4]
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	795a      	ldrb	r2, [r3, #5]
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	799a      	ldrb	r2, [r3, #6]
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	79da      	ldrb	r2, [r3, #7]
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	7a1a      	ldrb	r2, [r3, #8]
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80079e6:	88fb      	ldrh	r3, [r7, #6]
 80079e8:	2b09      	cmp	r3, #9
 80079ea:	f240 809d 	bls.w	8007b28 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80079ee:	2309      	movs	r3, #9
 80079f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079f6:	e081      	b.n	8007afc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079f8:	f107 0316 	add.w	r3, r7, #22
 80079fc:	4619      	mov	r1, r3
 80079fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a00:	f000 f9e7 	bl	8007dd2 <USBH_GetNextDesc>
 8007a04:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d176      	bne.n	8007afc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b09      	cmp	r3, #9
 8007a14:	d002      	beq.n	8007a1c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a18:	2209      	movs	r2, #9
 8007a1a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a20:	221a      	movs	r2, #26
 8007a22:	fb02 f303 	mul.w	r3, r2, r3
 8007a26:	3308      	adds	r3, #8
 8007a28:	6a3a      	ldr	r2, [r7, #32]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	3302      	adds	r3, #2
 8007a2e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007a30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a32:	69f8      	ldr	r0, [r7, #28]
 8007a34:	f000 f87e 	bl	8007b34 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a42:	e043      	b.n	8007acc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a44:	f107 0316 	add.w	r3, r7, #22
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a4c:	f000 f9c1 	bl	8007dd2 <USBH_GetNextDesc>
 8007a50:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a54:	785b      	ldrb	r3, [r3, #1]
 8007a56:	2b05      	cmp	r3, #5
 8007a58:	d138      	bne.n	8007acc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	795b      	ldrb	r3, [r3, #5]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d113      	bne.n	8007a8a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d003      	beq.n	8007a72 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	799b      	ldrb	r3, [r3, #6]
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d10b      	bne.n	8007a8a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	79db      	ldrb	r3, [r3, #7]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10b      	bne.n	8007a92 <USBH_ParseCfgDesc+0x14e>
 8007a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	2b09      	cmp	r3, #9
 8007a80:	d007      	beq.n	8007a92 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a84:	2209      	movs	r2, #9
 8007a86:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a88:	e003      	b.n	8007a92 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8c:	2207      	movs	r2, #7
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	e000      	b.n	8007a94 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a92:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a98:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a9c:	3201      	adds	r2, #1
 8007a9e:	00d2      	lsls	r2, r2, #3
 8007aa0:	211a      	movs	r1, #26
 8007aa2:	fb01 f303 	mul.w	r3, r1, r3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	6a3a      	ldr	r2, [r7, #32]
 8007aac:	4413      	add	r3, r2
 8007aae:	3304      	adds	r3, #4
 8007ab0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007ab2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ab4:	69b9      	ldr	r1, [r7, #24]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f870 	bl	8007b9c <USBH_ParseEPDesc>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	791b      	ldrb	r3, [r3, #4]
 8007ad0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d204      	bcs.n	8007ae2 <USBH_ParseCfgDesc+0x19e>
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	885a      	ldrh	r2, [r3, #2]
 8007adc:	8afb      	ldrh	r3, [r7, #22]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d8b0      	bhi.n	8007a44 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	791b      	ldrb	r3, [r3, #4]
 8007ae6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d201      	bcs.n	8007af2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e01c      	b.n	8007b2c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007af2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007af6:	3301      	adds	r3, #1
 8007af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d805      	bhi.n	8007b10 <USBH_ParseCfgDesc+0x1cc>
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	885a      	ldrh	r2, [r3, #2]
 8007b08:	8afb      	ldrh	r3, [r7, #22]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	f63f af74 	bhi.w	80079f8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	791b      	ldrb	r3, [r3, #4]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	bf28      	it	cs
 8007b18:	2302      	movcs	r3, #2
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d201      	bcs.n	8007b28 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e001      	b.n	8007b2c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007b28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3730      	adds	r7, #48	@ 0x30
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781a      	ldrb	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	785a      	ldrb	r2, [r3, #1]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	789a      	ldrb	r2, [r3, #2]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	78da      	ldrb	r2, [r3, #3]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	3304      	adds	r3, #4
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	bf28      	it	cs
 8007b68:	2302      	movcs	r3, #2
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	795a      	ldrb	r2, [r3, #5]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	799a      	ldrb	r2, [r3, #6]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	79da      	ldrb	r2, [r3, #7]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	7a1a      	ldrb	r2, [r3, #8]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	721a      	strb	r2, [r3, #8]
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	781a      	ldrb	r2, [r3, #0]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	785a      	ldrb	r2, [r3, #1]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	789a      	ldrb	r2, [r3, #2]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	78da      	ldrb	r2, [r3, #3]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3305      	adds	r3, #5
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	4313      	orrs	r3, r2
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	799a      	ldrb	r2, [r3, #6]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	889b      	ldrh	r3, [r3, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bfe:	d804      	bhi.n	8007c0a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c08:	d901      	bls.n	8007c0e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d136      	bne.n	8007c86 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	78db      	ldrb	r3, [r3, #3]
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d108      	bne.n	8007c36 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	889b      	ldrh	r3, [r3, #4]
 8007c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c2c:	f240 8097 	bls.w	8007d5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c30:	2303      	movs	r3, #3
 8007c32:	75fb      	strb	r3, [r7, #23]
 8007c34:	e093      	b.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	78db      	ldrb	r3, [r3, #3]
 8007c3a:	f003 0303 	and.w	r3, r3, #3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d107      	bne.n	8007c52 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	889b      	ldrh	r3, [r3, #4]
 8007c46:	2b40      	cmp	r3, #64	@ 0x40
 8007c48:	f240 8089 	bls.w	8007d5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	75fb      	strb	r3, [r7, #23]
 8007c50:	e085      	b.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	78db      	ldrb	r3, [r3, #3]
 8007c56:	f003 0303 	and.w	r3, r3, #3
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d005      	beq.n	8007c6a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	78db      	ldrb	r3, [r3, #3]
 8007c62:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d10a      	bne.n	8007c80 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	799b      	ldrb	r3, [r3, #6]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <USBH_ParseEPDesc+0xde>
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	799b      	ldrb	r3, [r3, #6]
 8007c76:	2b10      	cmp	r3, #16
 8007c78:	d970      	bls.n	8007d5c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c7e:	e06d      	b.n	8007d5c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c80:	2303      	movs	r3, #3
 8007c82:	75fb      	strb	r3, [r7, #23]
 8007c84:	e06b      	b.n	8007d5e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d13c      	bne.n	8007d0a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	78db      	ldrb	r3, [r3, #3]
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d005      	beq.n	8007ca8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	78db      	ldrb	r3, [r3, #3]
 8007ca0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d106      	bne.n	8007cb6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	889b      	ldrh	r3, [r3, #4]
 8007cac:	2b40      	cmp	r3, #64	@ 0x40
 8007cae:	d956      	bls.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007cb4:	e053      	b.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	78db      	ldrb	r3, [r3, #3]
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d10e      	bne.n	8007ce0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	799b      	ldrb	r3, [r3, #6]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007cce:	2b10      	cmp	r3, #16
 8007cd0:	d803      	bhi.n	8007cda <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007cd6:	2b40      	cmp	r3, #64	@ 0x40
 8007cd8:	d941      	bls.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	75fb      	strb	r3, [r7, #23]
 8007cde:	e03e      	b.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	78db      	ldrb	r3, [r3, #3]
 8007ce4:	f003 0303 	and.w	r3, r3, #3
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d10b      	bne.n	8007d04 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	799b      	ldrb	r3, [r3, #6]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d004      	beq.n	8007cfe <USBH_ParseEPDesc+0x162>
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	889b      	ldrh	r3, [r3, #4]
 8007cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cfc:	d32f      	bcc.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	75fb      	strb	r3, [r7, #23]
 8007d02:	e02c      	b.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007d04:	2303      	movs	r3, #3
 8007d06:	75fb      	strb	r3, [r7, #23]
 8007d08:	e029      	b.n	8007d5e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d120      	bne.n	8007d56 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	78db      	ldrb	r3, [r3, #3]
 8007d18:	f003 0303 	and.w	r3, r3, #3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d106      	bne.n	8007d2e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	889b      	ldrh	r3, [r3, #4]
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d01a      	beq.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	75fb      	strb	r3, [r7, #23]
 8007d2c:	e017      	b.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	78db      	ldrb	r3, [r3, #3]
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d10a      	bne.n	8007d50 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	799b      	ldrb	r3, [r3, #6]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <USBH_ParseEPDesc+0x1ae>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	889b      	ldrh	r3, [r3, #4]
 8007d46:	2b08      	cmp	r3, #8
 8007d48:	d909      	bls.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	75fb      	strb	r3, [r7, #23]
 8007d4e:	e006      	b.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007d50:	2303      	movs	r3, #3
 8007d52:	75fb      	strb	r3, [r7, #23]
 8007d54:	e003      	b.n	8007d5e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007d56:	2303      	movs	r3, #3
 8007d58:	75fb      	strb	r3, [r7, #23]
 8007d5a:	e000      	b.n	8007d5e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007d5c:	bf00      	nop
  }

  return status;
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	371c      	adds	r7, #28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	4613      	mov	r3, r2
 8007d78:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d120      	bne.n	8007dc6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	1e9a      	subs	r2, r3, #2
 8007d8a:	88fb      	ldrh	r3, [r7, #6]
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	bf28      	it	cs
 8007d90:	4613      	movcs	r3, r2
 8007d92:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3302      	adds	r3, #2
 8007d98:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	82fb      	strh	r3, [r7, #22]
 8007d9e:	e00b      	b.n	8007db8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007da0:	8afb      	ldrh	r3, [r7, #22]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	4413      	add	r3, r2
 8007da6:	781a      	ldrb	r2, [r3, #0]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	3301      	adds	r3, #1
 8007db0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007db2:	8afb      	ldrh	r3, [r7, #22]
 8007db4:	3302      	adds	r3, #2
 8007db6:	82fb      	strh	r3, [r7, #22]
 8007db8:	8afa      	ldrh	r2, [r7, #22]
 8007dba:	8abb      	ldrh	r3, [r7, #20]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d3ef      	bcc.n	8007da0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	701a      	strb	r2, [r3, #0]
  }
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	7812      	ldrb	r2, [r2, #0]
 8007de4:	4413      	add	r3, r2
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4413      	add	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007df8:	68fb      	ldr	r3, [r7, #12]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b086      	sub	sp, #24
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	60f8      	str	r0, [r7, #12]
 8007e0e:	60b9      	str	r1, [r7, #8]
 8007e10:	4613      	mov	r3, r2
 8007e12:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007e14:	2301      	movs	r3, #1
 8007e16:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	789b      	ldrb	r3, [r3, #2]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d002      	beq.n	8007e26 <USBH_CtlReq+0x20>
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d00f      	beq.n	8007e44 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007e24:	e027      	b.n	8007e76 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	88fa      	ldrh	r2, [r7, #6]
 8007e30:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	75fb      	strb	r3, [r7, #23]
      break;
 8007e42:	e018      	b.n	8007e76 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f81b 	bl	8007e80 <USBH_HandleControl>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <USBH_CtlReq+0x54>
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d106      	bne.n	8007e68 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	761a      	strb	r2, [r3, #24]
      break;
 8007e66:	e005      	b.n	8007e74 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d102      	bne.n	8007e74 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2201      	movs	r2, #1
 8007e72:	709a      	strb	r2, [r3, #2]
      break;
 8007e74:	bf00      	nop
  }
  return status;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af02      	add	r7, sp, #8
 8007e86:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	7e1b      	ldrb	r3, [r3, #24]
 8007e94:	3b01      	subs	r3, #1
 8007e96:	2b0a      	cmp	r3, #10
 8007e98:	f200 8156 	bhi.w	8008148 <USBH_HandleControl+0x2c8>
 8007e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea4 <USBH_HandleControl+0x24>)
 8007e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea2:	bf00      	nop
 8007ea4:	08007ed1 	.word	0x08007ed1
 8007ea8:	08007eeb 	.word	0x08007eeb
 8007eac:	08007f55 	.word	0x08007f55
 8007eb0:	08007f7b 	.word	0x08007f7b
 8007eb4:	08007fb3 	.word	0x08007fb3
 8007eb8:	08007fdd 	.word	0x08007fdd
 8007ebc:	0800802f 	.word	0x0800802f
 8007ec0:	08008051 	.word	0x08008051
 8007ec4:	0800808d 	.word	0x0800808d
 8007ec8:	080080b3 	.word	0x080080b3
 8007ecc:	080080f1 	.word	0x080080f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f103 0110 	add.w	r1, r3, #16
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	795b      	ldrb	r3, [r3, #5]
 8007eda:	461a      	mov	r2, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f943 	bl	8008168 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	761a      	strb	r2, [r3, #24]
      break;
 8007ee8:	e139      	b.n	800815e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	795b      	ldrb	r3, [r3, #5]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fcc5 	bl	8008880 <USBH_LL_GetURBState>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d11e      	bne.n	8007f3e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7c1b      	ldrb	r3, [r3, #16]
 8007f04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f08:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	8adb      	ldrh	r3, [r3, #22]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007f12:	7b7b      	ldrb	r3, [r7, #13]
 8007f14:	2b80      	cmp	r3, #128	@ 0x80
 8007f16:	d103      	bne.n	8007f20 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2203      	movs	r2, #3
 8007f1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f1e:	e115      	b.n	800814c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2205      	movs	r2, #5
 8007f24:	761a      	strb	r2, [r3, #24]
      break;
 8007f26:	e111      	b.n	800814c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007f28:	7b7b      	ldrb	r3, [r7, #13]
 8007f2a:	2b80      	cmp	r3, #128	@ 0x80
 8007f2c:	d103      	bne.n	8007f36 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2209      	movs	r2, #9
 8007f32:	761a      	strb	r2, [r3, #24]
      break;
 8007f34:	e10a      	b.n	800814c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2207      	movs	r2, #7
 8007f3a:	761a      	strb	r2, [r3, #24]
      break;
 8007f3c:	e106      	b.n	800814c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d003      	beq.n	8007f4c <USBH_HandleControl+0xcc>
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	f040 8100 	bne.w	800814c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	220b      	movs	r2, #11
 8007f50:	761a      	strb	r2, [r3, #24]
      break;
 8007f52:	e0fb      	b.n	800814c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6899      	ldr	r1, [r3, #8]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	899a      	ldrh	r2, [r3, #12]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	791b      	ldrb	r3, [r3, #4]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f93a 	bl	80081e6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2204      	movs	r2, #4
 8007f76:	761a      	strb	r2, [r3, #24]
      break;
 8007f78:	e0f1      	b.n	800815e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	791b      	ldrb	r3, [r3, #4]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fc7d 	bl	8008880 <USBH_LL_GetURBState>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d102      	bne.n	8007f96 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2209      	movs	r2, #9
 8007f94:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b05      	cmp	r3, #5
 8007f9a:	d102      	bne.n	8007fa2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fa0:	e0d6      	b.n	8008150 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	f040 80d3 	bne.w	8008150 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	220b      	movs	r2, #11
 8007fae:	761a      	strb	r2, [r3, #24]
      break;
 8007fb0:	e0ce      	b.n	8008150 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6899      	ldr	r1, [r3, #8]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	899a      	ldrh	r2, [r3, #12]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	795b      	ldrb	r3, [r3, #5]
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	9000      	str	r0, [sp, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f8ea 	bl	800819c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2206      	movs	r2, #6
 8007fd8:	761a      	strb	r2, [r3, #24]
      break;
 8007fda:	e0c0      	b.n	800815e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	795b      	ldrb	r3, [r3, #5]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fc4c 	bl	8008880 <USBH_LL_GetURBState>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d103      	bne.n	8007ffa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2207      	movs	r2, #7
 8007ff6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ff8:	e0ac      	b.n	8008154 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	2b05      	cmp	r3, #5
 8007ffe:	d105      	bne.n	800800c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	220c      	movs	r2, #12
 8008004:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008006:	2303      	movs	r3, #3
 8008008:	73fb      	strb	r3, [r7, #15]
      break;
 800800a:	e0a3      	b.n	8008154 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	2b02      	cmp	r3, #2
 8008010:	d103      	bne.n	800801a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2205      	movs	r2, #5
 8008016:	761a      	strb	r2, [r3, #24]
      break;
 8008018:	e09c      	b.n	8008154 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b04      	cmp	r3, #4
 800801e:	f040 8099 	bne.w	8008154 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	220b      	movs	r2, #11
 8008026:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008028:	2302      	movs	r3, #2
 800802a:	73fb      	strb	r3, [r7, #15]
      break;
 800802c:	e092      	b.n	8008154 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	791b      	ldrb	r3, [r3, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	2100      	movs	r1, #0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f8d5 	bl	80081e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008042:	b29a      	uxth	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2208      	movs	r2, #8
 800804c:	761a      	strb	r2, [r3, #24]

      break;
 800804e:	e086      	b.n	800815e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	791b      	ldrb	r3, [r3, #4]
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fc12 	bl	8008880 <USBH_LL_GetURBState>
 800805c:	4603      	mov	r3, r0
 800805e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d105      	bne.n	8008072 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	220d      	movs	r2, #13
 800806a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008070:	e072      	b.n	8008158 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	2b04      	cmp	r3, #4
 8008076:	d103      	bne.n	8008080 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	220b      	movs	r2, #11
 800807c:	761a      	strb	r2, [r3, #24]
      break;
 800807e:	e06b      	b.n	8008158 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	2b05      	cmp	r3, #5
 8008084:	d168      	bne.n	8008158 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008086:	2303      	movs	r3, #3
 8008088:	73fb      	strb	r3, [r7, #15]
      break;
 800808a:	e065      	b.n	8008158 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	795b      	ldrb	r3, [r3, #5]
 8008090:	2201      	movs	r2, #1
 8008092:	9200      	str	r2, [sp, #0]
 8008094:	2200      	movs	r2, #0
 8008096:	2100      	movs	r1, #0
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f87f 	bl	800819c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	220a      	movs	r2, #10
 80080ae:	761a      	strb	r2, [r3, #24]
      break;
 80080b0:	e055      	b.n	800815e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	795b      	ldrb	r3, [r3, #5]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fbe1 	bl	8008880 <USBH_LL_GetURBState>
 80080be:	4603      	mov	r3, r0
 80080c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d105      	bne.n	80080d4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	220d      	movs	r2, #13
 80080d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080d2:	e043      	b.n	800815c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d103      	bne.n	80080e2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2209      	movs	r2, #9
 80080de:	761a      	strb	r2, [r3, #24]
      break;
 80080e0:	e03c      	b.n	800815c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d139      	bne.n	800815c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	220b      	movs	r2, #11
 80080ec:	761a      	strb	r2, [r3, #24]
      break;
 80080ee:	e035      	b.n	800815c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	7e5b      	ldrb	r3, [r3, #25]
 80080f4:	3301      	adds	r3, #1
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	765a      	strb	r2, [r3, #25]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	7e5b      	ldrb	r3, [r3, #25]
 8008100:	2b02      	cmp	r3, #2
 8008102:	d806      	bhi.n	8008112 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008110:	e025      	b.n	800815e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008118:	2106      	movs	r1, #6
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	795b      	ldrb	r3, [r3, #5]
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f90c 	bl	8008348 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	791b      	ldrb	r3, [r3, #4]
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f906 	bl	8008348 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008142:	2302      	movs	r3, #2
 8008144:	73fb      	strb	r3, [r7, #15]
      break;
 8008146:	e00a      	b.n	800815e <USBH_HandleControl+0x2de>

    default:
      break;
 8008148:	bf00      	nop
 800814a:	e008      	b.n	800815e <USBH_HandleControl+0x2de>
      break;
 800814c:	bf00      	nop
 800814e:	e006      	b.n	800815e <USBH_HandleControl+0x2de>
      break;
 8008150:	bf00      	nop
 8008152:	e004      	b.n	800815e <USBH_HandleControl+0x2de>
      break;
 8008154:	bf00      	nop
 8008156:	e002      	b.n	800815e <USBH_HandleControl+0x2de>
      break;
 8008158:	bf00      	nop
 800815a:	e000      	b.n	800815e <USBH_HandleControl+0x2de>
      break;
 800815c:	bf00      	nop
  }

  return status;
 800815e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af04      	add	r7, sp, #16
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	4613      	mov	r3, r2
 8008174:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008176:	79f9      	ldrb	r1, [r7, #7]
 8008178:	2300      	movs	r3, #0
 800817a:	9303      	str	r3, [sp, #12]
 800817c:	2308      	movs	r3, #8
 800817e:	9302      	str	r3, [sp, #8]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	9301      	str	r3, [sp, #4]
 8008184:	2300      	movs	r3, #0
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	2300      	movs	r3, #0
 800818a:	2200      	movs	r2, #0
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 fb46 	bl	800881e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af04      	add	r7, sp, #16
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4611      	mov	r1, r2
 80081a8:	461a      	mov	r2, r3
 80081aa:	460b      	mov	r3, r1
 80081ac:	80fb      	strh	r3, [r7, #6]
 80081ae:	4613      	mov	r3, r2
 80081b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081c0:	7979      	ldrb	r1, [r7, #5]
 80081c2:	7e3b      	ldrb	r3, [r7, #24]
 80081c4:	9303      	str	r3, [sp, #12]
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	9302      	str	r3, [sp, #8]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	2301      	movs	r3, #1
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	2300      	movs	r3, #0
 80081d4:	2200      	movs	r2, #0
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 fb21 	bl	800881e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b088      	sub	sp, #32
 80081ea:	af04      	add	r7, sp, #16
 80081ec:	60f8      	str	r0, [r7, #12]
 80081ee:	60b9      	str	r1, [r7, #8]
 80081f0:	4611      	mov	r1, r2
 80081f2:	461a      	mov	r2, r3
 80081f4:	460b      	mov	r3, r1
 80081f6:	80fb      	strh	r3, [r7, #6]
 80081f8:	4613      	mov	r3, r2
 80081fa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081fc:	7979      	ldrb	r1, [r7, #5]
 80081fe:	2300      	movs	r3, #0
 8008200:	9303      	str	r3, [sp, #12]
 8008202:	88fb      	ldrh	r3, [r7, #6]
 8008204:	9302      	str	r3, [sp, #8]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	2301      	movs	r3, #1
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	2300      	movs	r3, #0
 8008210:	2201      	movs	r2, #1
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 fb03 	bl	800881e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008218:	2300      	movs	r3, #0

}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b088      	sub	sp, #32
 8008226:	af04      	add	r7, sp, #16
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	4611      	mov	r1, r2
 800822e:	461a      	mov	r2, r3
 8008230:	460b      	mov	r3, r1
 8008232:	80fb      	strh	r3, [r7, #6]
 8008234:	4613      	mov	r3, r2
 8008236:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008246:	7979      	ldrb	r1, [r7, #5]
 8008248:	7e3b      	ldrb	r3, [r7, #24]
 800824a:	9303      	str	r3, [sp, #12]
 800824c:	88fb      	ldrh	r3, [r7, #6]
 800824e:	9302      	str	r3, [sp, #8]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	9301      	str	r3, [sp, #4]
 8008254:	2301      	movs	r3, #1
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	2302      	movs	r3, #2
 800825a:	2200      	movs	r2, #0
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f000 fade 	bl	800881e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af04      	add	r7, sp, #16
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	4611      	mov	r1, r2
 8008278:	461a      	mov	r2, r3
 800827a:	460b      	mov	r3, r1
 800827c:	80fb      	strh	r3, [r7, #6]
 800827e:	4613      	mov	r3, r2
 8008280:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008282:	7979      	ldrb	r1, [r7, #5]
 8008284:	2300      	movs	r3, #0
 8008286:	9303      	str	r3, [sp, #12]
 8008288:	88fb      	ldrh	r3, [r7, #6]
 800828a:	9302      	str	r3, [sp, #8]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	2301      	movs	r3, #1
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	2302      	movs	r3, #2
 8008296:	2201      	movs	r2, #1
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 fac0 	bl	800881e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af04      	add	r7, sp, #16
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	4608      	mov	r0, r1
 80082b2:	4611      	mov	r1, r2
 80082b4:	461a      	mov	r2, r3
 80082b6:	4603      	mov	r3, r0
 80082b8:	70fb      	strb	r3, [r7, #3]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70bb      	strb	r3, [r7, #2]
 80082be:	4613      	mov	r3, r2
 80082c0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80082c2:	7878      	ldrb	r0, [r7, #1]
 80082c4:	78ba      	ldrb	r2, [r7, #2]
 80082c6:	78f9      	ldrb	r1, [r7, #3]
 80082c8:	8b3b      	ldrh	r3, [r7, #24]
 80082ca:	9302      	str	r3, [sp, #8]
 80082cc:	7d3b      	ldrb	r3, [r7, #20]
 80082ce:	9301      	str	r3, [sp, #4]
 80082d0:	7c3b      	ldrb	r3, [r7, #16]
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	4603      	mov	r3, r0
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fa53 	bl	8008782 <USBH_LL_OpenPipe>

  return USBH_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fa72 	bl	80087e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f836 	bl	8008384 <USBH_GetFreePipe>
 8008318:	4603      	mov	r3, r0
 800831a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800831c:	89fb      	ldrh	r3, [r7, #14]
 800831e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008322:	4293      	cmp	r3, r2
 8008324:	d00a      	beq.n	800833c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008326:	78fa      	ldrb	r2, [r7, #3]
 8008328:	89fb      	ldrh	r3, [r7, #14]
 800832a:	f003 030f 	and.w	r3, r3, #15
 800832e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	33e0      	adds	r3, #224	@ 0xe0
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	440b      	add	r3, r1
 800833a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800833c:	89fb      	ldrh	r3, [r7, #14]
 800833e:	b2db      	uxtb	r3, r3
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	2b0f      	cmp	r3, #15
 8008358:	d80d      	bhi.n	8008376 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	33e0      	adds	r3, #224	@ 0xe0
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	78fb      	ldrb	r3, [r7, #3]
 8008368:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	33e0      	adds	r3, #224	@ 0xe0
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	440b      	add	r3, r1
 8008374:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008390:	2300      	movs	r3, #0
 8008392:	73fb      	strb	r3, [r7, #15]
 8008394:	e00f      	b.n	80083b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	33e0      	adds	r3, #224	@ 0xe0
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d102      	bne.n	80083b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	e007      	b.n	80083c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	3301      	adds	r3, #1
 80083b4:	73fb      	strb	r3, [r7, #15]
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	2b0f      	cmp	r3, #15
 80083ba:	d9ec      	bls.n	8008396 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80083bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80083d0:	2201      	movs	r2, #1
 80083d2:	490e      	ldr	r1, [pc, #56]	@ (800840c <MX_USB_HOST_Init+0x40>)
 80083d4:	480e      	ldr	r0, [pc, #56]	@ (8008410 <MX_USB_HOST_Init+0x44>)
 80083d6:	f7fe fb15 	bl	8006a04 <USBH_Init>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80083e0:	f7f8 faec 	bl	80009bc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80083e4:	490b      	ldr	r1, [pc, #44]	@ (8008414 <MX_USB_HOST_Init+0x48>)
 80083e6:	480a      	ldr	r0, [pc, #40]	@ (8008410 <MX_USB_HOST_Init+0x44>)
 80083e8:	f7fe fbb9 	bl	8006b5e <USBH_RegisterClass>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80083f2:	f7f8 fae3 	bl	80009bc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80083f6:	4806      	ldr	r0, [pc, #24]	@ (8008410 <MX_USB_HOST_Init+0x44>)
 80083f8:	f7fe fc3d 	bl	8006c76 <USBH_Start>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008402:	f7f8 fadb 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008406:	bf00      	nop
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	0800842d 	.word	0x0800842d
 8008410:	200001a0 	.word	0x200001a0
 8008414:	2000000c 	.word	0x2000000c

08008418 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800841c:	4802      	ldr	r0, [pc, #8]	@ (8008428 <MX_USB_HOST_Process+0x10>)
 800841e:	f7fe fc3b 	bl	8006c98 <USBH_Process>
}
 8008422:	bf00      	nop
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	200001a0 	.word	0x200001a0

0800842c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	3b01      	subs	r3, #1
 800843c:	2b04      	cmp	r3, #4
 800843e:	d819      	bhi.n	8008474 <USBH_UserProcess+0x48>
 8008440:	a201      	add	r2, pc, #4	@ (adr r2, 8008448 <USBH_UserProcess+0x1c>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	08008475 	.word	0x08008475
 800844c:	08008465 	.word	0x08008465
 8008450:	08008475 	.word	0x08008475
 8008454:	0800846d 	.word	0x0800846d
 8008458:	0800845d 	.word	0x0800845d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800845c:	4b09      	ldr	r3, [pc, #36]	@ (8008484 <USBH_UserProcess+0x58>)
 800845e:	2203      	movs	r2, #3
 8008460:	701a      	strb	r2, [r3, #0]
  break;
 8008462:	e008      	b.n	8008476 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008464:	4b07      	ldr	r3, [pc, #28]	@ (8008484 <USBH_UserProcess+0x58>)
 8008466:	2202      	movs	r2, #2
 8008468:	701a      	strb	r2, [r3, #0]
  break;
 800846a:	e004      	b.n	8008476 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800846c:	4b05      	ldr	r3, [pc, #20]	@ (8008484 <USBH_UserProcess+0x58>)
 800846e:	2201      	movs	r2, #1
 8008470:	701a      	strb	r2, [r3, #0]
  break;
 8008472:	e000      	b.n	8008476 <USBH_UserProcess+0x4a>

  default:
  break;
 8008474:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	20000578 	.word	0x20000578

08008488 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08a      	sub	sp, #40	@ 0x28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008490:	f107 0314 	add.w	r3, r7, #20
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	605a      	str	r2, [r3, #4]
 800849a:	609a      	str	r2, [r3, #8]
 800849c:	60da      	str	r2, [r3, #12]
 800849e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084a8:	d147      	bne.n	800853a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084aa:	2300      	movs	r3, #0
 80084ac:	613b      	str	r3, [r7, #16]
 80084ae:	4b25      	ldr	r3, [pc, #148]	@ (8008544 <HAL_HCD_MspInit+0xbc>)
 80084b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b2:	4a24      	ldr	r2, [pc, #144]	@ (8008544 <HAL_HCD_MspInit+0xbc>)
 80084b4:	f043 0301 	orr.w	r3, r3, #1
 80084b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80084ba:	4b22      	ldr	r3, [pc, #136]	@ (8008544 <HAL_HCD_MspInit+0xbc>)
 80084bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	613b      	str	r3, [r7, #16]
 80084c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80084c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084cc:	2300      	movs	r3, #0
 80084ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80084d4:	f107 0314 	add.w	r3, r7, #20
 80084d8:	4619      	mov	r1, r3
 80084da:	481b      	ldr	r0, [pc, #108]	@ (8008548 <HAL_HCD_MspInit+0xc0>)
 80084dc:	f7f8 fe52 	bl	8001184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80084e0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80084e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084e6:	2302      	movs	r3, #2
 80084e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084ee:	2300      	movs	r3, #0
 80084f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084f2:	230a      	movs	r3, #10
 80084f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084f6:	f107 0314 	add.w	r3, r7, #20
 80084fa:	4619      	mov	r1, r3
 80084fc:	4812      	ldr	r0, [pc, #72]	@ (8008548 <HAL_HCD_MspInit+0xc0>)
 80084fe:	f7f8 fe41 	bl	8001184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008502:	4b10      	ldr	r3, [pc, #64]	@ (8008544 <HAL_HCD_MspInit+0xbc>)
 8008504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008506:	4a0f      	ldr	r2, [pc, #60]	@ (8008544 <HAL_HCD_MspInit+0xbc>)
 8008508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800850c:	6353      	str	r3, [r2, #52]	@ 0x34
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	4b0c      	ldr	r3, [pc, #48]	@ (8008544 <HAL_HCD_MspInit+0xbc>)
 8008514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008516:	4a0b      	ldr	r2, [pc, #44]	@ (8008544 <HAL_HCD_MspInit+0xbc>)
 8008518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800851c:	6453      	str	r3, [r2, #68]	@ 0x44
 800851e:	4b09      	ldr	r3, [pc, #36]	@ (8008544 <HAL_HCD_MspInit+0xbc>)
 8008520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800852a:	2200      	movs	r2, #0
 800852c:	2100      	movs	r1, #0
 800852e:	2043      	movs	r0, #67	@ 0x43
 8008530:	f7f8 fdf1 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008534:	2043      	movs	r0, #67	@ 0x43
 8008536:	f7f8 fe0a 	bl	800114e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800853a:	bf00      	nop
 800853c:	3728      	adds	r7, #40	@ 0x28
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	40023800 	.word	0x40023800
 8008548:	40020000 	.word	0x40020000

0800854c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe ff73 	bl	8007446 <USBH_LL_IncTimer>
}
 8008560:	bf00      	nop
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe ffab 	bl	80074d2 <USBH_LL_Connect>
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008592:	4618      	mov	r0, r3
 8008594:	f7fe ffb4 	bl	8007500 <USBH_LL_Disconnect>
}
 8008598:	bf00      	nop
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
 80085ac:	4613      	mov	r3, r2
 80085ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe ff65 	bl	800749a <USBH_LL_PortEnabled>
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe ff65 	bl	80074b6 <USBH_LL_PortDisabled>
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008602:	2b01      	cmp	r3, #1
 8008604:	d12a      	bne.n	800865c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008606:	4a18      	ldr	r2, [pc, #96]	@ (8008668 <USBH_LL_Init+0x74>)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a15      	ldr	r2, [pc, #84]	@ (8008668 <USBH_LL_Init+0x74>)
 8008612:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008616:	4b14      	ldr	r3, [pc, #80]	@ (8008668 <USBH_LL_Init+0x74>)
 8008618:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800861c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800861e:	4b12      	ldr	r3, [pc, #72]	@ (8008668 <USBH_LL_Init+0x74>)
 8008620:	2208      	movs	r2, #8
 8008622:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008624:	4b10      	ldr	r3, [pc, #64]	@ (8008668 <USBH_LL_Init+0x74>)
 8008626:	2201      	movs	r2, #1
 8008628:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800862a:	4b0f      	ldr	r3, [pc, #60]	@ (8008668 <USBH_LL_Init+0x74>)
 800862c:	2200      	movs	r2, #0
 800862e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008630:	4b0d      	ldr	r3, [pc, #52]	@ (8008668 <USBH_LL_Init+0x74>)
 8008632:	2202      	movs	r2, #2
 8008634:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008636:	4b0c      	ldr	r3, [pc, #48]	@ (8008668 <USBH_LL_Init+0x74>)
 8008638:	2200      	movs	r2, #0
 800863a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800863c:	480a      	ldr	r0, [pc, #40]	@ (8008668 <USBH_LL_Init+0x74>)
 800863e:	f7f8 ff70 	bl	8001522 <HAL_HCD_Init>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008648:	f7f8 f9b8 	bl	80009bc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800864c:	4806      	ldr	r0, [pc, #24]	@ (8008668 <USBH_LL_Init+0x74>)
 800864e:	f7f9 fbd1 	bl	8001df4 <HAL_HCD_GetCurrentFrame>
 8008652:	4603      	mov	r3, r0
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fe fee6 	bl	8007428 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	2000057c 	.word	0x2000057c

0800866c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008682:	4618      	mov	r0, r3
 8008684:	f7f9 fb3e 	bl	8001d04 <HAL_HCD_Start>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 f95e 	bl	8008950 <USBH_Get_USB_Status>
 8008694:	4603      	mov	r3, r0
 8008696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008698:	7bbb      	ldrb	r3, [r7, #14]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7f9 fb46 	bl	8001d4a <HAL_HCD_Stop>
 80086be:	4603      	mov	r3, r0
 80086c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 f943 	bl	8008950 <USBH_Get_USB_Status>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80086e0:	2301      	movs	r3, #1
 80086e2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7f9 fb90 	bl	8001e10 <HAL_HCD_GetCurrentSpeed>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d00c      	beq.n	8008710 <USBH_LL_GetSpeed+0x38>
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d80d      	bhi.n	8008716 <USBH_LL_GetSpeed+0x3e>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <USBH_LL_GetSpeed+0x2c>
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d003      	beq.n	800870a <USBH_LL_GetSpeed+0x32>
 8008702:	e008      	b.n	8008716 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]
    break;
 8008708:	e008      	b.n	800871c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800870a:	2301      	movs	r3, #1
 800870c:	73fb      	strb	r3, [r7, #15]
    break;
 800870e:	e005      	b.n	800871c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008710:	2302      	movs	r3, #2
 8008712:	73fb      	strb	r3, [r7, #15]
    break;
 8008714:	e002      	b.n	800871c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008716:	2301      	movs	r3, #1
 8008718:	73fb      	strb	r3, [r7, #15]
    break;
 800871a:	bf00      	nop
  }
  return  speed;
 800871c:	7bfb      	ldrb	r3, [r7, #15]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800873c:	4618      	mov	r0, r3
 800873e:	f7f9 fb21 	bl	8001d84 <HAL_HCD_ResetPort>
 8008742:	4603      	mov	r3, r0
 8008744:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	4618      	mov	r0, r3
 800874a:	f000 f901 	bl	8008950 <USBH_Get_USB_Status>
 800874e:	4603      	mov	r3, r0
 8008750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008752:	7bbb      	ldrb	r3, [r7, #14]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800876e:	78fa      	ldrb	r2, [r7, #3]
 8008770:	4611      	mov	r1, r2
 8008772:	4618      	mov	r0, r3
 8008774:	f7f9 fb29 	bl	8001dca <HAL_HCD_HC_GetXferCount>
 8008778:	4603      	mov	r3, r0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008782:	b590      	push	{r4, r7, lr}
 8008784:	b089      	sub	sp, #36	@ 0x24
 8008786:	af04      	add	r7, sp, #16
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	4608      	mov	r0, r1
 800878c:	4611      	mov	r1, r2
 800878e:	461a      	mov	r2, r3
 8008790:	4603      	mov	r3, r0
 8008792:	70fb      	strb	r3, [r7, #3]
 8008794:	460b      	mov	r3, r1
 8008796:	70bb      	strb	r3, [r7, #2]
 8008798:	4613      	mov	r3, r2
 800879a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80087aa:	787c      	ldrb	r4, [r7, #1]
 80087ac:	78ba      	ldrb	r2, [r7, #2]
 80087ae:	78f9      	ldrb	r1, [r7, #3]
 80087b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80087b2:	9302      	str	r3, [sp, #8]
 80087b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	4623      	mov	r3, r4
 80087c2:	f7f8 ff15 	bl	80015f0 <HAL_HCD_HC_Init>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 f8bf 	bl	8008950 <USBH_Get_USB_Status>
 80087d2:	4603      	mov	r3, r0
 80087d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd90      	pop	{r4, r7, pc}

080087e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087fa:	78fa      	ldrb	r2, [r7, #3]
 80087fc:	4611      	mov	r1, r2
 80087fe:	4618      	mov	r0, r3
 8008800:	f7f8 ffae 	bl	8001760 <HAL_HCD_HC_Halt>
 8008804:	4603      	mov	r3, r0
 8008806:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	4618      	mov	r0, r3
 800880c:	f000 f8a0 	bl	8008950 <USBH_Get_USB_Status>
 8008810:	4603      	mov	r3, r0
 8008812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008814:	7bbb      	ldrb	r3, [r7, #14]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800881e:	b590      	push	{r4, r7, lr}
 8008820:	b089      	sub	sp, #36	@ 0x24
 8008822:	af04      	add	r7, sp, #16
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	4608      	mov	r0, r1
 8008828:	4611      	mov	r1, r2
 800882a:	461a      	mov	r2, r3
 800882c:	4603      	mov	r3, r0
 800882e:	70fb      	strb	r3, [r7, #3]
 8008830:	460b      	mov	r3, r1
 8008832:	70bb      	strb	r3, [r7, #2]
 8008834:	4613      	mov	r3, r2
 8008836:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008846:	787c      	ldrb	r4, [r7, #1]
 8008848:	78ba      	ldrb	r2, [r7, #2]
 800884a:	78f9      	ldrb	r1, [r7, #3]
 800884c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008850:	9303      	str	r3, [sp, #12]
 8008852:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008854:	9302      	str	r3, [sp, #8]
 8008856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	4623      	mov	r3, r4
 8008862:	f7f8 ffa1 	bl	80017a8 <HAL_HCD_HC_SubmitRequest>
 8008866:	4603      	mov	r3, r0
 8008868:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	4618      	mov	r0, r3
 800886e:	f000 f86f 	bl	8008950 <USBH_Get_USB_Status>
 8008872:	4603      	mov	r3, r0
 8008874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008876:	7bbb      	ldrb	r3, [r7, #14]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	bd90      	pop	{r4, r7, pc}

08008880 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	460b      	mov	r3, r1
 800888a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008892:	78fa      	ldrb	r2, [r7, #3]
 8008894:	4611      	mov	r1, r2
 8008896:	4618      	mov	r0, r3
 8008898:	f7f9 fa82 	bl	8001da0 <HAL_HCD_HC_GetURBState>
 800889c:	4603      	mov	r3, r0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d103      	bne.n	80088c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80088bc:	78fb      	ldrb	r3, [r7, #3]
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f872 	bl	80089a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80088c4:	20c8      	movs	r0, #200	@ 0xc8
 80088c6:	f7f8 fb27 	bl	8000f18 <HAL_Delay>
  return USBH_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
 80088e0:	4613      	mov	r3, r2
 80088e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80088ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80088ec:	78fa      	ldrb	r2, [r7, #3]
 80088ee:	68f9      	ldr	r1, [r7, #12]
 80088f0:	4613      	mov	r3, r2
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	1a9b      	subs	r3, r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	440b      	add	r3, r1
 80088fa:	3317      	adds	r3, #23
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008902:	78fa      	ldrb	r2, [r7, #3]
 8008904:	68f9      	ldr	r1, [r7, #12]
 8008906:	4613      	mov	r3, r2
 8008908:	011b      	lsls	r3, r3, #4
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	440b      	add	r3, r1
 8008910:	333c      	adds	r3, #60	@ 0x3c
 8008912:	78ba      	ldrb	r2, [r7, #2]
 8008914:	701a      	strb	r2, [r3, #0]
 8008916:	e009      	b.n	800892c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	68f9      	ldr	r1, [r7, #12]
 800891c:	4613      	mov	r3, r2
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	1a9b      	subs	r3, r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	333d      	adds	r3, #61	@ 0x3d
 8008928:	78ba      	ldrb	r2, [r7, #2]
 800892a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7f8 fae8 	bl	8000f18 <HAL_Delay>
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	2b03      	cmp	r3, #3
 8008962:	d817      	bhi.n	8008994 <USBH_Get_USB_Status+0x44>
 8008964:	a201      	add	r2, pc, #4	@ (adr r2, 800896c <USBH_Get_USB_Status+0x1c>)
 8008966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896a:	bf00      	nop
 800896c:	0800897d 	.word	0x0800897d
 8008970:	08008983 	.word	0x08008983
 8008974:	08008989 	.word	0x08008989
 8008978:	0800898f 	.word	0x0800898f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	73fb      	strb	r3, [r7, #15]
    break;
 8008980:	e00b      	b.n	800899a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008982:	2302      	movs	r3, #2
 8008984:	73fb      	strb	r3, [r7, #15]
    break;
 8008986:	e008      	b.n	800899a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008988:	2301      	movs	r3, #1
 800898a:	73fb      	strb	r3, [r7, #15]
    break;
 800898c:	e005      	b.n	800899a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800898e:	2302      	movs	r3, #2
 8008990:	73fb      	strb	r3, [r7, #15]
    break;
 8008992:	e002      	b.n	800899a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008994:	2302      	movs	r3, #2
 8008996:	73fb      	strb	r3, [r7, #15]
    break;
 8008998:	bf00      	nop
  }
  return usb_status;
 800899a:	7bfb      	ldrb	r3, [r7, #15]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	4603      	mov	r3, r0
 80089b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d102      	bne.n	80089c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
 80089c0:	e001      	b.n	80089c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80089c2:	2301      	movs	r3, #1
 80089c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	461a      	mov	r2, r3
 80089ca:	2101      	movs	r1, #1
 80089cc:	4803      	ldr	r0, [pc, #12]	@ (80089dc <MX_DriverVbusFS+0x34>)
 80089ce:	f7f8 fd75 	bl	80014bc <HAL_GPIO_WritePin>
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	40020800 	.word	0x40020800

080089e0 <malloc>:
 80089e0:	4b02      	ldr	r3, [pc, #8]	@ (80089ec <malloc+0xc>)
 80089e2:	4601      	mov	r1, r0
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f000 b82d 	b.w	8008a44 <_malloc_r>
 80089ea:	bf00      	nop
 80089ec:	20000038 	.word	0x20000038

080089f0 <free>:
 80089f0:	4b02      	ldr	r3, [pc, #8]	@ (80089fc <free+0xc>)
 80089f2:	4601      	mov	r1, r0
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	f000 bb35 	b.w	8009064 <_free_r>
 80089fa:	bf00      	nop
 80089fc:	20000038 	.word	0x20000038

08008a00 <sbrk_aligned>:
 8008a00:	b570      	push	{r4, r5, r6, lr}
 8008a02:	4e0f      	ldr	r6, [pc, #60]	@ (8008a40 <sbrk_aligned+0x40>)
 8008a04:	460c      	mov	r4, r1
 8008a06:	6831      	ldr	r1, [r6, #0]
 8008a08:	4605      	mov	r5, r0
 8008a0a:	b911      	cbnz	r1, 8008a12 <sbrk_aligned+0x12>
 8008a0c:	f000 fada 	bl	8008fc4 <_sbrk_r>
 8008a10:	6030      	str	r0, [r6, #0]
 8008a12:	4621      	mov	r1, r4
 8008a14:	4628      	mov	r0, r5
 8008a16:	f000 fad5 	bl	8008fc4 <_sbrk_r>
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	d103      	bne.n	8008a26 <sbrk_aligned+0x26>
 8008a1e:	f04f 34ff 	mov.w	r4, #4294967295
 8008a22:	4620      	mov	r0, r4
 8008a24:	bd70      	pop	{r4, r5, r6, pc}
 8008a26:	1cc4      	adds	r4, r0, #3
 8008a28:	f024 0403 	bic.w	r4, r4, #3
 8008a2c:	42a0      	cmp	r0, r4
 8008a2e:	d0f8      	beq.n	8008a22 <sbrk_aligned+0x22>
 8008a30:	1a21      	subs	r1, r4, r0
 8008a32:	4628      	mov	r0, r5
 8008a34:	f000 fac6 	bl	8008fc4 <_sbrk_r>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d1f2      	bne.n	8008a22 <sbrk_aligned+0x22>
 8008a3c:	e7ef      	b.n	8008a1e <sbrk_aligned+0x1e>
 8008a3e:	bf00      	nop
 8008a40:	2000095c 	.word	0x2000095c

08008a44 <_malloc_r>:
 8008a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a48:	1ccd      	adds	r5, r1, #3
 8008a4a:	f025 0503 	bic.w	r5, r5, #3
 8008a4e:	3508      	adds	r5, #8
 8008a50:	2d0c      	cmp	r5, #12
 8008a52:	bf38      	it	cc
 8008a54:	250c      	movcc	r5, #12
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	4606      	mov	r6, r0
 8008a5a:	db01      	blt.n	8008a60 <_malloc_r+0x1c>
 8008a5c:	42a9      	cmp	r1, r5
 8008a5e:	d904      	bls.n	8008a6a <_malloc_r+0x26>
 8008a60:	230c      	movs	r3, #12
 8008a62:	6033      	str	r3, [r6, #0]
 8008a64:	2000      	movs	r0, #0
 8008a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b40 <_malloc_r+0xfc>
 8008a6e:	f000 f869 	bl	8008b44 <__malloc_lock>
 8008a72:	f8d8 3000 	ldr.w	r3, [r8]
 8008a76:	461c      	mov	r4, r3
 8008a78:	bb44      	cbnz	r4, 8008acc <_malloc_r+0x88>
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7ff ffbf 	bl	8008a00 <sbrk_aligned>
 8008a82:	1c43      	adds	r3, r0, #1
 8008a84:	4604      	mov	r4, r0
 8008a86:	d158      	bne.n	8008b3a <_malloc_r+0xf6>
 8008a88:	f8d8 4000 	ldr.w	r4, [r8]
 8008a8c:	4627      	mov	r7, r4
 8008a8e:	2f00      	cmp	r7, #0
 8008a90:	d143      	bne.n	8008b1a <_malloc_r+0xd6>
 8008a92:	2c00      	cmp	r4, #0
 8008a94:	d04b      	beq.n	8008b2e <_malloc_r+0xea>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	4639      	mov	r1, r7
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	eb04 0903 	add.w	r9, r4, r3
 8008aa0:	f000 fa90 	bl	8008fc4 <_sbrk_r>
 8008aa4:	4581      	cmp	r9, r0
 8008aa6:	d142      	bne.n	8008b2e <_malloc_r+0xea>
 8008aa8:	6821      	ldr	r1, [r4, #0]
 8008aaa:	1a6d      	subs	r5, r5, r1
 8008aac:	4629      	mov	r1, r5
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7ff ffa6 	bl	8008a00 <sbrk_aligned>
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d03a      	beq.n	8008b2e <_malloc_r+0xea>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	442b      	add	r3, r5
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	bb62      	cbnz	r2, 8008b20 <_malloc_r+0xdc>
 8008ac6:	f8c8 7000 	str.w	r7, [r8]
 8008aca:	e00f      	b.n	8008aec <_malloc_r+0xa8>
 8008acc:	6822      	ldr	r2, [r4, #0]
 8008ace:	1b52      	subs	r2, r2, r5
 8008ad0:	d420      	bmi.n	8008b14 <_malloc_r+0xd0>
 8008ad2:	2a0b      	cmp	r2, #11
 8008ad4:	d917      	bls.n	8008b06 <_malloc_r+0xc2>
 8008ad6:	1961      	adds	r1, r4, r5
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	6025      	str	r5, [r4, #0]
 8008adc:	bf18      	it	ne
 8008ade:	6059      	strne	r1, [r3, #4]
 8008ae0:	6863      	ldr	r3, [r4, #4]
 8008ae2:	bf08      	it	eq
 8008ae4:	f8c8 1000 	streq.w	r1, [r8]
 8008ae8:	5162      	str	r2, [r4, r5]
 8008aea:	604b      	str	r3, [r1, #4]
 8008aec:	4630      	mov	r0, r6
 8008aee:	f000 f82f 	bl	8008b50 <__malloc_unlock>
 8008af2:	f104 000b 	add.w	r0, r4, #11
 8008af6:	1d23      	adds	r3, r4, #4
 8008af8:	f020 0007 	bic.w	r0, r0, #7
 8008afc:	1ac2      	subs	r2, r0, r3
 8008afe:	bf1c      	itt	ne
 8008b00:	1a1b      	subne	r3, r3, r0
 8008b02:	50a3      	strne	r3, [r4, r2]
 8008b04:	e7af      	b.n	8008a66 <_malloc_r+0x22>
 8008b06:	6862      	ldr	r2, [r4, #4]
 8008b08:	42a3      	cmp	r3, r4
 8008b0a:	bf0c      	ite	eq
 8008b0c:	f8c8 2000 	streq.w	r2, [r8]
 8008b10:	605a      	strne	r2, [r3, #4]
 8008b12:	e7eb      	b.n	8008aec <_malloc_r+0xa8>
 8008b14:	4623      	mov	r3, r4
 8008b16:	6864      	ldr	r4, [r4, #4]
 8008b18:	e7ae      	b.n	8008a78 <_malloc_r+0x34>
 8008b1a:	463c      	mov	r4, r7
 8008b1c:	687f      	ldr	r7, [r7, #4]
 8008b1e:	e7b6      	b.n	8008a8e <_malloc_r+0x4a>
 8008b20:	461a      	mov	r2, r3
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	d1fb      	bne.n	8008b20 <_malloc_r+0xdc>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	6053      	str	r3, [r2, #4]
 8008b2c:	e7de      	b.n	8008aec <_malloc_r+0xa8>
 8008b2e:	230c      	movs	r3, #12
 8008b30:	6033      	str	r3, [r6, #0]
 8008b32:	4630      	mov	r0, r6
 8008b34:	f000 f80c 	bl	8008b50 <__malloc_unlock>
 8008b38:	e794      	b.n	8008a64 <_malloc_r+0x20>
 8008b3a:	6005      	str	r5, [r0, #0]
 8008b3c:	e7d6      	b.n	8008aec <_malloc_r+0xa8>
 8008b3e:	bf00      	nop
 8008b40:	20000960 	.word	0x20000960

08008b44 <__malloc_lock>:
 8008b44:	4801      	ldr	r0, [pc, #4]	@ (8008b4c <__malloc_lock+0x8>)
 8008b46:	f000 ba8a 	b.w	800905e <__retarget_lock_acquire_recursive>
 8008b4a:	bf00      	nop
 8008b4c:	20000aa4 	.word	0x20000aa4

08008b50 <__malloc_unlock>:
 8008b50:	4801      	ldr	r0, [pc, #4]	@ (8008b58 <__malloc_unlock+0x8>)
 8008b52:	f000 ba85 	b.w	8009060 <__retarget_lock_release_recursive>
 8008b56:	bf00      	nop
 8008b58:	20000aa4 	.word	0x20000aa4

08008b5c <std>:
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	b510      	push	{r4, lr}
 8008b60:	4604      	mov	r4, r0
 8008b62:	e9c0 3300 	strd	r3, r3, [r0]
 8008b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b6a:	6083      	str	r3, [r0, #8]
 8008b6c:	8181      	strh	r1, [r0, #12]
 8008b6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008b70:	81c2      	strh	r2, [r0, #14]
 8008b72:	6183      	str	r3, [r0, #24]
 8008b74:	4619      	mov	r1, r3
 8008b76:	2208      	movs	r2, #8
 8008b78:	305c      	adds	r0, #92	@ 0x5c
 8008b7a:	f000 f9e7 	bl	8008f4c <memset>
 8008b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb4 <std+0x58>)
 8008b80:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b82:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb8 <std+0x5c>)
 8008b84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008b86:	4b0d      	ldr	r3, [pc, #52]	@ (8008bbc <std+0x60>)
 8008b88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc0 <std+0x64>)
 8008b8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc4 <std+0x68>)
 8008b90:	6224      	str	r4, [r4, #32]
 8008b92:	429c      	cmp	r4, r3
 8008b94:	d006      	beq.n	8008ba4 <std+0x48>
 8008b96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008b9a:	4294      	cmp	r4, r2
 8008b9c:	d002      	beq.n	8008ba4 <std+0x48>
 8008b9e:	33d0      	adds	r3, #208	@ 0xd0
 8008ba0:	429c      	cmp	r4, r3
 8008ba2:	d105      	bne.n	8008bb0 <std+0x54>
 8008ba4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bac:	f000 ba56 	b.w	800905c <__retarget_lock_init_recursive>
 8008bb0:	bd10      	pop	{r4, pc}
 8008bb2:	bf00      	nop
 8008bb4:	08008d9d 	.word	0x08008d9d
 8008bb8:	08008dbf 	.word	0x08008dbf
 8008bbc:	08008df7 	.word	0x08008df7
 8008bc0:	08008e1b 	.word	0x08008e1b
 8008bc4:	20000964 	.word	0x20000964

08008bc8 <stdio_exit_handler>:
 8008bc8:	4a02      	ldr	r2, [pc, #8]	@ (8008bd4 <stdio_exit_handler+0xc>)
 8008bca:	4903      	ldr	r1, [pc, #12]	@ (8008bd8 <stdio_exit_handler+0x10>)
 8008bcc:	4803      	ldr	r0, [pc, #12]	@ (8008bdc <stdio_exit_handler+0x14>)
 8008bce:	f000 b869 	b.w	8008ca4 <_fwalk_sglue>
 8008bd2:	bf00      	nop
 8008bd4:	2000002c 	.word	0x2000002c
 8008bd8:	08009201 	.word	0x08009201
 8008bdc:	2000003c 	.word	0x2000003c

08008be0 <cleanup_stdio>:
 8008be0:	6841      	ldr	r1, [r0, #4]
 8008be2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c14 <cleanup_stdio+0x34>)
 8008be4:	4299      	cmp	r1, r3
 8008be6:	b510      	push	{r4, lr}
 8008be8:	4604      	mov	r4, r0
 8008bea:	d001      	beq.n	8008bf0 <cleanup_stdio+0x10>
 8008bec:	f000 fb08 	bl	8009200 <_fflush_r>
 8008bf0:	68a1      	ldr	r1, [r4, #8]
 8008bf2:	4b09      	ldr	r3, [pc, #36]	@ (8008c18 <cleanup_stdio+0x38>)
 8008bf4:	4299      	cmp	r1, r3
 8008bf6:	d002      	beq.n	8008bfe <cleanup_stdio+0x1e>
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f000 fb01 	bl	8009200 <_fflush_r>
 8008bfe:	68e1      	ldr	r1, [r4, #12]
 8008c00:	4b06      	ldr	r3, [pc, #24]	@ (8008c1c <cleanup_stdio+0x3c>)
 8008c02:	4299      	cmp	r1, r3
 8008c04:	d004      	beq.n	8008c10 <cleanup_stdio+0x30>
 8008c06:	4620      	mov	r0, r4
 8008c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c0c:	f000 baf8 	b.w	8009200 <_fflush_r>
 8008c10:	bd10      	pop	{r4, pc}
 8008c12:	bf00      	nop
 8008c14:	20000964 	.word	0x20000964
 8008c18:	200009cc 	.word	0x200009cc
 8008c1c:	20000a34 	.word	0x20000a34

08008c20 <global_stdio_init.part.0>:
 8008c20:	b510      	push	{r4, lr}
 8008c22:	4b0b      	ldr	r3, [pc, #44]	@ (8008c50 <global_stdio_init.part.0+0x30>)
 8008c24:	4c0b      	ldr	r4, [pc, #44]	@ (8008c54 <global_stdio_init.part.0+0x34>)
 8008c26:	4a0c      	ldr	r2, [pc, #48]	@ (8008c58 <global_stdio_init.part.0+0x38>)
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2104      	movs	r1, #4
 8008c30:	f7ff ff94 	bl	8008b5c <std>
 8008c34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c38:	2201      	movs	r2, #1
 8008c3a:	2109      	movs	r1, #9
 8008c3c:	f7ff ff8e 	bl	8008b5c <std>
 8008c40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c44:	2202      	movs	r2, #2
 8008c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c4a:	2112      	movs	r1, #18
 8008c4c:	f7ff bf86 	b.w	8008b5c <std>
 8008c50:	20000a9c 	.word	0x20000a9c
 8008c54:	20000964 	.word	0x20000964
 8008c58:	08008bc9 	.word	0x08008bc9

08008c5c <__sfp_lock_acquire>:
 8008c5c:	4801      	ldr	r0, [pc, #4]	@ (8008c64 <__sfp_lock_acquire+0x8>)
 8008c5e:	f000 b9fe 	b.w	800905e <__retarget_lock_acquire_recursive>
 8008c62:	bf00      	nop
 8008c64:	20000aa5 	.word	0x20000aa5

08008c68 <__sfp_lock_release>:
 8008c68:	4801      	ldr	r0, [pc, #4]	@ (8008c70 <__sfp_lock_release+0x8>)
 8008c6a:	f000 b9f9 	b.w	8009060 <__retarget_lock_release_recursive>
 8008c6e:	bf00      	nop
 8008c70:	20000aa5 	.word	0x20000aa5

08008c74 <__sinit>:
 8008c74:	b510      	push	{r4, lr}
 8008c76:	4604      	mov	r4, r0
 8008c78:	f7ff fff0 	bl	8008c5c <__sfp_lock_acquire>
 8008c7c:	6a23      	ldr	r3, [r4, #32]
 8008c7e:	b11b      	cbz	r3, 8008c88 <__sinit+0x14>
 8008c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c84:	f7ff bff0 	b.w	8008c68 <__sfp_lock_release>
 8008c88:	4b04      	ldr	r3, [pc, #16]	@ (8008c9c <__sinit+0x28>)
 8008c8a:	6223      	str	r3, [r4, #32]
 8008c8c:	4b04      	ldr	r3, [pc, #16]	@ (8008ca0 <__sinit+0x2c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1f5      	bne.n	8008c80 <__sinit+0xc>
 8008c94:	f7ff ffc4 	bl	8008c20 <global_stdio_init.part.0>
 8008c98:	e7f2      	b.n	8008c80 <__sinit+0xc>
 8008c9a:	bf00      	nop
 8008c9c:	08008be1 	.word	0x08008be1
 8008ca0:	20000a9c 	.word	0x20000a9c

08008ca4 <_fwalk_sglue>:
 8008ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca8:	4607      	mov	r7, r0
 8008caa:	4688      	mov	r8, r1
 8008cac:	4614      	mov	r4, r2
 8008cae:	2600      	movs	r6, #0
 8008cb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cb4:	f1b9 0901 	subs.w	r9, r9, #1
 8008cb8:	d505      	bpl.n	8008cc6 <_fwalk_sglue+0x22>
 8008cba:	6824      	ldr	r4, [r4, #0]
 8008cbc:	2c00      	cmp	r4, #0
 8008cbe:	d1f7      	bne.n	8008cb0 <_fwalk_sglue+0xc>
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc6:	89ab      	ldrh	r3, [r5, #12]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d907      	bls.n	8008cdc <_fwalk_sglue+0x38>
 8008ccc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	d003      	beq.n	8008cdc <_fwalk_sglue+0x38>
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	47c0      	blx	r8
 8008cda:	4306      	orrs	r6, r0
 8008cdc:	3568      	adds	r5, #104	@ 0x68
 8008cde:	e7e9      	b.n	8008cb4 <_fwalk_sglue+0x10>

08008ce0 <_puts_r>:
 8008ce0:	6a03      	ldr	r3, [r0, #32]
 8008ce2:	b570      	push	{r4, r5, r6, lr}
 8008ce4:	6884      	ldr	r4, [r0, #8]
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	460e      	mov	r6, r1
 8008cea:	b90b      	cbnz	r3, 8008cf0 <_puts_r+0x10>
 8008cec:	f7ff ffc2 	bl	8008c74 <__sinit>
 8008cf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cf2:	07db      	lsls	r3, r3, #31
 8008cf4:	d405      	bmi.n	8008d02 <_puts_r+0x22>
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	0598      	lsls	r0, r3, #22
 8008cfa:	d402      	bmi.n	8008d02 <_puts_r+0x22>
 8008cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cfe:	f000 f9ae 	bl	800905e <__retarget_lock_acquire_recursive>
 8008d02:	89a3      	ldrh	r3, [r4, #12]
 8008d04:	0719      	lsls	r1, r3, #28
 8008d06:	d502      	bpl.n	8008d0e <_puts_r+0x2e>
 8008d08:	6923      	ldr	r3, [r4, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d135      	bne.n	8008d7a <_puts_r+0x9a>
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4628      	mov	r0, r5
 8008d12:	f000 f8c5 	bl	8008ea0 <__swsetup_r>
 8008d16:	b380      	cbz	r0, 8008d7a <_puts_r+0x9a>
 8008d18:	f04f 35ff 	mov.w	r5, #4294967295
 8008d1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d1e:	07da      	lsls	r2, r3, #31
 8008d20:	d405      	bmi.n	8008d2e <_puts_r+0x4e>
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	059b      	lsls	r3, r3, #22
 8008d26:	d402      	bmi.n	8008d2e <_puts_r+0x4e>
 8008d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d2a:	f000 f999 	bl	8009060 <__retarget_lock_release_recursive>
 8008d2e:	4628      	mov	r0, r5
 8008d30:	bd70      	pop	{r4, r5, r6, pc}
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	da04      	bge.n	8008d40 <_puts_r+0x60>
 8008d36:	69a2      	ldr	r2, [r4, #24]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	dc17      	bgt.n	8008d6c <_puts_r+0x8c>
 8008d3c:	290a      	cmp	r1, #10
 8008d3e:	d015      	beq.n	8008d6c <_puts_r+0x8c>
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	6022      	str	r2, [r4, #0]
 8008d46:	7019      	strb	r1, [r3, #0]
 8008d48:	68a3      	ldr	r3, [r4, #8]
 8008d4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	60a3      	str	r3, [r4, #8]
 8008d52:	2900      	cmp	r1, #0
 8008d54:	d1ed      	bne.n	8008d32 <_puts_r+0x52>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	da11      	bge.n	8008d7e <_puts_r+0x9e>
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	210a      	movs	r1, #10
 8008d5e:	4628      	mov	r0, r5
 8008d60:	f000 f85f 	bl	8008e22 <__swbuf_r>
 8008d64:	3001      	adds	r0, #1
 8008d66:	d0d7      	beq.n	8008d18 <_puts_r+0x38>
 8008d68:	250a      	movs	r5, #10
 8008d6a:	e7d7      	b.n	8008d1c <_puts_r+0x3c>
 8008d6c:	4622      	mov	r2, r4
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f000 f857 	bl	8008e22 <__swbuf_r>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d1e7      	bne.n	8008d48 <_puts_r+0x68>
 8008d78:	e7ce      	b.n	8008d18 <_puts_r+0x38>
 8008d7a:	3e01      	subs	r6, #1
 8008d7c:	e7e4      	b.n	8008d48 <_puts_r+0x68>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	6022      	str	r2, [r4, #0]
 8008d84:	220a      	movs	r2, #10
 8008d86:	701a      	strb	r2, [r3, #0]
 8008d88:	e7ee      	b.n	8008d68 <_puts_r+0x88>
	...

08008d8c <puts>:
 8008d8c:	4b02      	ldr	r3, [pc, #8]	@ (8008d98 <puts+0xc>)
 8008d8e:	4601      	mov	r1, r0
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	f7ff bfa5 	b.w	8008ce0 <_puts_r>
 8008d96:	bf00      	nop
 8008d98:	20000038 	.word	0x20000038

08008d9c <__sread>:
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	460c      	mov	r4, r1
 8008da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da4:	f000 f8fc 	bl	8008fa0 <_read_r>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	bfab      	itete	ge
 8008dac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008dae:	89a3      	ldrhlt	r3, [r4, #12]
 8008db0:	181b      	addge	r3, r3, r0
 8008db2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008db6:	bfac      	ite	ge
 8008db8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008dba:	81a3      	strhlt	r3, [r4, #12]
 8008dbc:	bd10      	pop	{r4, pc}

08008dbe <__swrite>:
 8008dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc2:	461f      	mov	r7, r3
 8008dc4:	898b      	ldrh	r3, [r1, #12]
 8008dc6:	05db      	lsls	r3, r3, #23
 8008dc8:	4605      	mov	r5, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	4616      	mov	r6, r2
 8008dce:	d505      	bpl.n	8008ddc <__swrite+0x1e>
 8008dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f000 f8d0 	bl	8008f7c <_lseek_r>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008de2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008de6:	81a3      	strh	r3, [r4, #12]
 8008de8:	4632      	mov	r2, r6
 8008dea:	463b      	mov	r3, r7
 8008dec:	4628      	mov	r0, r5
 8008dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008df2:	f000 b8f7 	b.w	8008fe4 <_write_r>

08008df6 <__sseek>:
 8008df6:	b510      	push	{r4, lr}
 8008df8:	460c      	mov	r4, r1
 8008dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfe:	f000 f8bd 	bl	8008f7c <_lseek_r>
 8008e02:	1c43      	adds	r3, r0, #1
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	bf15      	itete	ne
 8008e08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e12:	81a3      	strheq	r3, [r4, #12]
 8008e14:	bf18      	it	ne
 8008e16:	81a3      	strhne	r3, [r4, #12]
 8008e18:	bd10      	pop	{r4, pc}

08008e1a <__sclose>:
 8008e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1e:	f000 b89d 	b.w	8008f5c <_close_r>

08008e22 <__swbuf_r>:
 8008e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e24:	460e      	mov	r6, r1
 8008e26:	4614      	mov	r4, r2
 8008e28:	4605      	mov	r5, r0
 8008e2a:	b118      	cbz	r0, 8008e34 <__swbuf_r+0x12>
 8008e2c:	6a03      	ldr	r3, [r0, #32]
 8008e2e:	b90b      	cbnz	r3, 8008e34 <__swbuf_r+0x12>
 8008e30:	f7ff ff20 	bl	8008c74 <__sinit>
 8008e34:	69a3      	ldr	r3, [r4, #24]
 8008e36:	60a3      	str	r3, [r4, #8]
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	071a      	lsls	r2, r3, #28
 8008e3c:	d501      	bpl.n	8008e42 <__swbuf_r+0x20>
 8008e3e:	6923      	ldr	r3, [r4, #16]
 8008e40:	b943      	cbnz	r3, 8008e54 <__swbuf_r+0x32>
 8008e42:	4621      	mov	r1, r4
 8008e44:	4628      	mov	r0, r5
 8008e46:	f000 f82b 	bl	8008ea0 <__swsetup_r>
 8008e4a:	b118      	cbz	r0, 8008e54 <__swbuf_r+0x32>
 8008e4c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e50:	4638      	mov	r0, r7
 8008e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	6922      	ldr	r2, [r4, #16]
 8008e58:	1a98      	subs	r0, r3, r2
 8008e5a:	6963      	ldr	r3, [r4, #20]
 8008e5c:	b2f6      	uxtb	r6, r6
 8008e5e:	4283      	cmp	r3, r0
 8008e60:	4637      	mov	r7, r6
 8008e62:	dc05      	bgt.n	8008e70 <__swbuf_r+0x4e>
 8008e64:	4621      	mov	r1, r4
 8008e66:	4628      	mov	r0, r5
 8008e68:	f000 f9ca 	bl	8009200 <_fflush_r>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d1ed      	bne.n	8008e4c <__swbuf_r+0x2a>
 8008e70:	68a3      	ldr	r3, [r4, #8]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	60a3      	str	r3, [r4, #8]
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	1c5a      	adds	r2, r3, #1
 8008e7a:	6022      	str	r2, [r4, #0]
 8008e7c:	701e      	strb	r6, [r3, #0]
 8008e7e:	6962      	ldr	r2, [r4, #20]
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d004      	beq.n	8008e90 <__swbuf_r+0x6e>
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	07db      	lsls	r3, r3, #31
 8008e8a:	d5e1      	bpl.n	8008e50 <__swbuf_r+0x2e>
 8008e8c:	2e0a      	cmp	r6, #10
 8008e8e:	d1df      	bne.n	8008e50 <__swbuf_r+0x2e>
 8008e90:	4621      	mov	r1, r4
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 f9b4 	bl	8009200 <_fflush_r>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d0d9      	beq.n	8008e50 <__swbuf_r+0x2e>
 8008e9c:	e7d6      	b.n	8008e4c <__swbuf_r+0x2a>
	...

08008ea0 <__swsetup_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	4b29      	ldr	r3, [pc, #164]	@ (8008f48 <__swsetup_r+0xa8>)
 8008ea4:	4605      	mov	r5, r0
 8008ea6:	6818      	ldr	r0, [r3, #0]
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	b118      	cbz	r0, 8008eb4 <__swsetup_r+0x14>
 8008eac:	6a03      	ldr	r3, [r0, #32]
 8008eae:	b90b      	cbnz	r3, 8008eb4 <__swsetup_r+0x14>
 8008eb0:	f7ff fee0 	bl	8008c74 <__sinit>
 8008eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb8:	0719      	lsls	r1, r3, #28
 8008eba:	d422      	bmi.n	8008f02 <__swsetup_r+0x62>
 8008ebc:	06da      	lsls	r2, r3, #27
 8008ebe:	d407      	bmi.n	8008ed0 <__swsetup_r+0x30>
 8008ec0:	2209      	movs	r2, #9
 8008ec2:	602a      	str	r2, [r5, #0]
 8008ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ec8:	81a3      	strh	r3, [r4, #12]
 8008eca:	f04f 30ff 	mov.w	r0, #4294967295
 8008ece:	e033      	b.n	8008f38 <__swsetup_r+0x98>
 8008ed0:	0758      	lsls	r0, r3, #29
 8008ed2:	d512      	bpl.n	8008efa <__swsetup_r+0x5a>
 8008ed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ed6:	b141      	cbz	r1, 8008eea <__swsetup_r+0x4a>
 8008ed8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008edc:	4299      	cmp	r1, r3
 8008ede:	d002      	beq.n	8008ee6 <__swsetup_r+0x46>
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f000 f8bf 	bl	8009064 <_free_r>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ef0:	81a3      	strh	r3, [r4, #12]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	6063      	str	r3, [r4, #4]
 8008ef6:	6923      	ldr	r3, [r4, #16]
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f043 0308 	orr.w	r3, r3, #8
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	6923      	ldr	r3, [r4, #16]
 8008f04:	b94b      	cbnz	r3, 8008f1a <__swsetup_r+0x7a>
 8008f06:	89a3      	ldrh	r3, [r4, #12]
 8008f08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f10:	d003      	beq.n	8008f1a <__swsetup_r+0x7a>
 8008f12:	4621      	mov	r1, r4
 8008f14:	4628      	mov	r0, r5
 8008f16:	f000 f9c1 	bl	800929c <__smakebuf_r>
 8008f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f1e:	f013 0201 	ands.w	r2, r3, #1
 8008f22:	d00a      	beq.n	8008f3a <__swsetup_r+0x9a>
 8008f24:	2200      	movs	r2, #0
 8008f26:	60a2      	str	r2, [r4, #8]
 8008f28:	6962      	ldr	r2, [r4, #20]
 8008f2a:	4252      	negs	r2, r2
 8008f2c:	61a2      	str	r2, [r4, #24]
 8008f2e:	6922      	ldr	r2, [r4, #16]
 8008f30:	b942      	cbnz	r2, 8008f44 <__swsetup_r+0xa4>
 8008f32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f36:	d1c5      	bne.n	8008ec4 <__swsetup_r+0x24>
 8008f38:	bd38      	pop	{r3, r4, r5, pc}
 8008f3a:	0799      	lsls	r1, r3, #30
 8008f3c:	bf58      	it	pl
 8008f3e:	6962      	ldrpl	r2, [r4, #20]
 8008f40:	60a2      	str	r2, [r4, #8]
 8008f42:	e7f4      	b.n	8008f2e <__swsetup_r+0x8e>
 8008f44:	2000      	movs	r0, #0
 8008f46:	e7f7      	b.n	8008f38 <__swsetup_r+0x98>
 8008f48:	20000038 	.word	0x20000038

08008f4c <memset>:
 8008f4c:	4402      	add	r2, r0
 8008f4e:	4603      	mov	r3, r0
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d100      	bne.n	8008f56 <memset+0xa>
 8008f54:	4770      	bx	lr
 8008f56:	f803 1b01 	strb.w	r1, [r3], #1
 8008f5a:	e7f9      	b.n	8008f50 <memset+0x4>

08008f5c <_close_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4d06      	ldr	r5, [pc, #24]	@ (8008f78 <_close_r+0x1c>)
 8008f60:	2300      	movs	r3, #0
 8008f62:	4604      	mov	r4, r0
 8008f64:	4608      	mov	r0, r1
 8008f66:	602b      	str	r3, [r5, #0]
 8008f68:	f7f7 febd 	bl	8000ce6 <_close>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	d102      	bne.n	8008f76 <_close_r+0x1a>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	b103      	cbz	r3, 8008f76 <_close_r+0x1a>
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	bd38      	pop	{r3, r4, r5, pc}
 8008f78:	20000aa0 	.word	0x20000aa0

08008f7c <_lseek_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4d07      	ldr	r5, [pc, #28]	@ (8008f9c <_lseek_r+0x20>)
 8008f80:	4604      	mov	r4, r0
 8008f82:	4608      	mov	r0, r1
 8008f84:	4611      	mov	r1, r2
 8008f86:	2200      	movs	r2, #0
 8008f88:	602a      	str	r2, [r5, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f7f7 fed2 	bl	8000d34 <_lseek>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d102      	bne.n	8008f9a <_lseek_r+0x1e>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	b103      	cbz	r3, 8008f9a <_lseek_r+0x1e>
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	20000aa0 	.word	0x20000aa0

08008fa0 <_read_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4d07      	ldr	r5, [pc, #28]	@ (8008fc0 <_read_r+0x20>)
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	4608      	mov	r0, r1
 8008fa8:	4611      	mov	r1, r2
 8008faa:	2200      	movs	r2, #0
 8008fac:	602a      	str	r2, [r5, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f7f7 fe7c 	bl	8000cac <_read>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d102      	bne.n	8008fbe <_read_r+0x1e>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b103      	cbz	r3, 8008fbe <_read_r+0x1e>
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	20000aa0 	.word	0x20000aa0

08008fc4 <_sbrk_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4d06      	ldr	r5, [pc, #24]	@ (8008fe0 <_sbrk_r+0x1c>)
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4604      	mov	r4, r0
 8008fcc:	4608      	mov	r0, r1
 8008fce:	602b      	str	r3, [r5, #0]
 8008fd0:	f7f7 febe 	bl	8000d50 <_sbrk>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_sbrk_r+0x1a>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_sbrk_r+0x1a>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	20000aa0 	.word	0x20000aa0

08008fe4 <_write_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d07      	ldr	r5, [pc, #28]	@ (8009004 <_write_r+0x20>)
 8008fe8:	4604      	mov	r4, r0
 8008fea:	4608      	mov	r0, r1
 8008fec:	4611      	mov	r1, r2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	602a      	str	r2, [r5, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f7f7 fcc6 	bl	8000984 <_write>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_write_r+0x1e>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_write_r+0x1e>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	20000aa0 	.word	0x20000aa0

08009008 <__errno>:
 8009008:	4b01      	ldr	r3, [pc, #4]	@ (8009010 <__errno+0x8>)
 800900a:	6818      	ldr	r0, [r3, #0]
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	20000038 	.word	0x20000038

08009014 <__libc_init_array>:
 8009014:	b570      	push	{r4, r5, r6, lr}
 8009016:	4d0d      	ldr	r5, [pc, #52]	@ (800904c <__libc_init_array+0x38>)
 8009018:	4c0d      	ldr	r4, [pc, #52]	@ (8009050 <__libc_init_array+0x3c>)
 800901a:	1b64      	subs	r4, r4, r5
 800901c:	10a4      	asrs	r4, r4, #2
 800901e:	2600      	movs	r6, #0
 8009020:	42a6      	cmp	r6, r4
 8009022:	d109      	bne.n	8009038 <__libc_init_array+0x24>
 8009024:	4d0b      	ldr	r5, [pc, #44]	@ (8009054 <__libc_init_array+0x40>)
 8009026:	4c0c      	ldr	r4, [pc, #48]	@ (8009058 <__libc_init_array+0x44>)
 8009028:	f000 f996 	bl	8009358 <_init>
 800902c:	1b64      	subs	r4, r4, r5
 800902e:	10a4      	asrs	r4, r4, #2
 8009030:	2600      	movs	r6, #0
 8009032:	42a6      	cmp	r6, r4
 8009034:	d105      	bne.n	8009042 <__libc_init_array+0x2e>
 8009036:	bd70      	pop	{r4, r5, r6, pc}
 8009038:	f855 3b04 	ldr.w	r3, [r5], #4
 800903c:	4798      	blx	r3
 800903e:	3601      	adds	r6, #1
 8009040:	e7ee      	b.n	8009020 <__libc_init_array+0xc>
 8009042:	f855 3b04 	ldr.w	r3, [r5], #4
 8009046:	4798      	blx	r3
 8009048:	3601      	adds	r6, #1
 800904a:	e7f2      	b.n	8009032 <__libc_init_array+0x1e>
 800904c:	080093a4 	.word	0x080093a4
 8009050:	080093a4 	.word	0x080093a4
 8009054:	080093a4 	.word	0x080093a4
 8009058:	080093a8 	.word	0x080093a8

0800905c <__retarget_lock_init_recursive>:
 800905c:	4770      	bx	lr

0800905e <__retarget_lock_acquire_recursive>:
 800905e:	4770      	bx	lr

08009060 <__retarget_lock_release_recursive>:
 8009060:	4770      	bx	lr
	...

08009064 <_free_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	4605      	mov	r5, r0
 8009068:	2900      	cmp	r1, #0
 800906a:	d041      	beq.n	80090f0 <_free_r+0x8c>
 800906c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009070:	1f0c      	subs	r4, r1, #4
 8009072:	2b00      	cmp	r3, #0
 8009074:	bfb8      	it	lt
 8009076:	18e4      	addlt	r4, r4, r3
 8009078:	f7ff fd64 	bl	8008b44 <__malloc_lock>
 800907c:	4a1d      	ldr	r2, [pc, #116]	@ (80090f4 <_free_r+0x90>)
 800907e:	6813      	ldr	r3, [r2, #0]
 8009080:	b933      	cbnz	r3, 8009090 <_free_r+0x2c>
 8009082:	6063      	str	r3, [r4, #4]
 8009084:	6014      	str	r4, [r2, #0]
 8009086:	4628      	mov	r0, r5
 8009088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800908c:	f7ff bd60 	b.w	8008b50 <__malloc_unlock>
 8009090:	42a3      	cmp	r3, r4
 8009092:	d908      	bls.n	80090a6 <_free_r+0x42>
 8009094:	6820      	ldr	r0, [r4, #0]
 8009096:	1821      	adds	r1, r4, r0
 8009098:	428b      	cmp	r3, r1
 800909a:	bf01      	itttt	eq
 800909c:	6819      	ldreq	r1, [r3, #0]
 800909e:	685b      	ldreq	r3, [r3, #4]
 80090a0:	1809      	addeq	r1, r1, r0
 80090a2:	6021      	streq	r1, [r4, #0]
 80090a4:	e7ed      	b.n	8009082 <_free_r+0x1e>
 80090a6:	461a      	mov	r2, r3
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	b10b      	cbz	r3, 80090b0 <_free_r+0x4c>
 80090ac:	42a3      	cmp	r3, r4
 80090ae:	d9fa      	bls.n	80090a6 <_free_r+0x42>
 80090b0:	6811      	ldr	r1, [r2, #0]
 80090b2:	1850      	adds	r0, r2, r1
 80090b4:	42a0      	cmp	r0, r4
 80090b6:	d10b      	bne.n	80090d0 <_free_r+0x6c>
 80090b8:	6820      	ldr	r0, [r4, #0]
 80090ba:	4401      	add	r1, r0
 80090bc:	1850      	adds	r0, r2, r1
 80090be:	4283      	cmp	r3, r0
 80090c0:	6011      	str	r1, [r2, #0]
 80090c2:	d1e0      	bne.n	8009086 <_free_r+0x22>
 80090c4:	6818      	ldr	r0, [r3, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	6053      	str	r3, [r2, #4]
 80090ca:	4408      	add	r0, r1
 80090cc:	6010      	str	r0, [r2, #0]
 80090ce:	e7da      	b.n	8009086 <_free_r+0x22>
 80090d0:	d902      	bls.n	80090d8 <_free_r+0x74>
 80090d2:	230c      	movs	r3, #12
 80090d4:	602b      	str	r3, [r5, #0]
 80090d6:	e7d6      	b.n	8009086 <_free_r+0x22>
 80090d8:	6820      	ldr	r0, [r4, #0]
 80090da:	1821      	adds	r1, r4, r0
 80090dc:	428b      	cmp	r3, r1
 80090de:	bf04      	itt	eq
 80090e0:	6819      	ldreq	r1, [r3, #0]
 80090e2:	685b      	ldreq	r3, [r3, #4]
 80090e4:	6063      	str	r3, [r4, #4]
 80090e6:	bf04      	itt	eq
 80090e8:	1809      	addeq	r1, r1, r0
 80090ea:	6021      	streq	r1, [r4, #0]
 80090ec:	6054      	str	r4, [r2, #4]
 80090ee:	e7ca      	b.n	8009086 <_free_r+0x22>
 80090f0:	bd38      	pop	{r3, r4, r5, pc}
 80090f2:	bf00      	nop
 80090f4:	20000960 	.word	0x20000960

080090f8 <__sflush_r>:
 80090f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009100:	0716      	lsls	r6, r2, #28
 8009102:	4605      	mov	r5, r0
 8009104:	460c      	mov	r4, r1
 8009106:	d454      	bmi.n	80091b2 <__sflush_r+0xba>
 8009108:	684b      	ldr	r3, [r1, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	dc02      	bgt.n	8009114 <__sflush_r+0x1c>
 800910e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009110:	2b00      	cmp	r3, #0
 8009112:	dd48      	ble.n	80091a6 <__sflush_r+0xae>
 8009114:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009116:	2e00      	cmp	r6, #0
 8009118:	d045      	beq.n	80091a6 <__sflush_r+0xae>
 800911a:	2300      	movs	r3, #0
 800911c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009120:	682f      	ldr	r7, [r5, #0]
 8009122:	6a21      	ldr	r1, [r4, #32]
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	d030      	beq.n	800918a <__sflush_r+0x92>
 8009128:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	0759      	lsls	r1, r3, #29
 800912e:	d505      	bpl.n	800913c <__sflush_r+0x44>
 8009130:	6863      	ldr	r3, [r4, #4]
 8009132:	1ad2      	subs	r2, r2, r3
 8009134:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009136:	b10b      	cbz	r3, 800913c <__sflush_r+0x44>
 8009138:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800913a:	1ad2      	subs	r2, r2, r3
 800913c:	2300      	movs	r3, #0
 800913e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009140:	6a21      	ldr	r1, [r4, #32]
 8009142:	4628      	mov	r0, r5
 8009144:	47b0      	blx	r6
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	d106      	bne.n	800915a <__sflush_r+0x62>
 800914c:	6829      	ldr	r1, [r5, #0]
 800914e:	291d      	cmp	r1, #29
 8009150:	d82b      	bhi.n	80091aa <__sflush_r+0xb2>
 8009152:	4a2a      	ldr	r2, [pc, #168]	@ (80091fc <__sflush_r+0x104>)
 8009154:	40ca      	lsrs	r2, r1
 8009156:	07d6      	lsls	r6, r2, #31
 8009158:	d527      	bpl.n	80091aa <__sflush_r+0xb2>
 800915a:	2200      	movs	r2, #0
 800915c:	6062      	str	r2, [r4, #4]
 800915e:	04d9      	lsls	r1, r3, #19
 8009160:	6922      	ldr	r2, [r4, #16]
 8009162:	6022      	str	r2, [r4, #0]
 8009164:	d504      	bpl.n	8009170 <__sflush_r+0x78>
 8009166:	1c42      	adds	r2, r0, #1
 8009168:	d101      	bne.n	800916e <__sflush_r+0x76>
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	b903      	cbnz	r3, 8009170 <__sflush_r+0x78>
 800916e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009172:	602f      	str	r7, [r5, #0]
 8009174:	b1b9      	cbz	r1, 80091a6 <__sflush_r+0xae>
 8009176:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800917a:	4299      	cmp	r1, r3
 800917c:	d002      	beq.n	8009184 <__sflush_r+0x8c>
 800917e:	4628      	mov	r0, r5
 8009180:	f7ff ff70 	bl	8009064 <_free_r>
 8009184:	2300      	movs	r3, #0
 8009186:	6363      	str	r3, [r4, #52]	@ 0x34
 8009188:	e00d      	b.n	80091a6 <__sflush_r+0xae>
 800918a:	2301      	movs	r3, #1
 800918c:	4628      	mov	r0, r5
 800918e:	47b0      	blx	r6
 8009190:	4602      	mov	r2, r0
 8009192:	1c50      	adds	r0, r2, #1
 8009194:	d1c9      	bne.n	800912a <__sflush_r+0x32>
 8009196:	682b      	ldr	r3, [r5, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d0c6      	beq.n	800912a <__sflush_r+0x32>
 800919c:	2b1d      	cmp	r3, #29
 800919e:	d001      	beq.n	80091a4 <__sflush_r+0xac>
 80091a0:	2b16      	cmp	r3, #22
 80091a2:	d11e      	bne.n	80091e2 <__sflush_r+0xea>
 80091a4:	602f      	str	r7, [r5, #0]
 80091a6:	2000      	movs	r0, #0
 80091a8:	e022      	b.n	80091f0 <__sflush_r+0xf8>
 80091aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ae:	b21b      	sxth	r3, r3
 80091b0:	e01b      	b.n	80091ea <__sflush_r+0xf2>
 80091b2:	690f      	ldr	r7, [r1, #16]
 80091b4:	2f00      	cmp	r7, #0
 80091b6:	d0f6      	beq.n	80091a6 <__sflush_r+0xae>
 80091b8:	0793      	lsls	r3, r2, #30
 80091ba:	680e      	ldr	r6, [r1, #0]
 80091bc:	bf08      	it	eq
 80091be:	694b      	ldreq	r3, [r1, #20]
 80091c0:	600f      	str	r7, [r1, #0]
 80091c2:	bf18      	it	ne
 80091c4:	2300      	movne	r3, #0
 80091c6:	eba6 0807 	sub.w	r8, r6, r7
 80091ca:	608b      	str	r3, [r1, #8]
 80091cc:	f1b8 0f00 	cmp.w	r8, #0
 80091d0:	dde9      	ble.n	80091a6 <__sflush_r+0xae>
 80091d2:	6a21      	ldr	r1, [r4, #32]
 80091d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80091d6:	4643      	mov	r3, r8
 80091d8:	463a      	mov	r2, r7
 80091da:	4628      	mov	r0, r5
 80091dc:	47b0      	blx	r6
 80091de:	2800      	cmp	r0, #0
 80091e0:	dc08      	bgt.n	80091f4 <__sflush_r+0xfc>
 80091e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ea:	81a3      	strh	r3, [r4, #12]
 80091ec:	f04f 30ff 	mov.w	r0, #4294967295
 80091f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f4:	4407      	add	r7, r0
 80091f6:	eba8 0800 	sub.w	r8, r8, r0
 80091fa:	e7e7      	b.n	80091cc <__sflush_r+0xd4>
 80091fc:	20400001 	.word	0x20400001

08009200 <_fflush_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	690b      	ldr	r3, [r1, #16]
 8009204:	4605      	mov	r5, r0
 8009206:	460c      	mov	r4, r1
 8009208:	b913      	cbnz	r3, 8009210 <_fflush_r+0x10>
 800920a:	2500      	movs	r5, #0
 800920c:	4628      	mov	r0, r5
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	b118      	cbz	r0, 800921a <_fflush_r+0x1a>
 8009212:	6a03      	ldr	r3, [r0, #32]
 8009214:	b90b      	cbnz	r3, 800921a <_fflush_r+0x1a>
 8009216:	f7ff fd2d 	bl	8008c74 <__sinit>
 800921a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0f3      	beq.n	800920a <_fflush_r+0xa>
 8009222:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009224:	07d0      	lsls	r0, r2, #31
 8009226:	d404      	bmi.n	8009232 <_fflush_r+0x32>
 8009228:	0599      	lsls	r1, r3, #22
 800922a:	d402      	bmi.n	8009232 <_fflush_r+0x32>
 800922c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800922e:	f7ff ff16 	bl	800905e <__retarget_lock_acquire_recursive>
 8009232:	4628      	mov	r0, r5
 8009234:	4621      	mov	r1, r4
 8009236:	f7ff ff5f 	bl	80090f8 <__sflush_r>
 800923a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800923c:	07da      	lsls	r2, r3, #31
 800923e:	4605      	mov	r5, r0
 8009240:	d4e4      	bmi.n	800920c <_fflush_r+0xc>
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	059b      	lsls	r3, r3, #22
 8009246:	d4e1      	bmi.n	800920c <_fflush_r+0xc>
 8009248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800924a:	f7ff ff09 	bl	8009060 <__retarget_lock_release_recursive>
 800924e:	e7dd      	b.n	800920c <_fflush_r+0xc>

08009250 <__swhatbuf_r>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	460c      	mov	r4, r1
 8009254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009258:	2900      	cmp	r1, #0
 800925a:	b096      	sub	sp, #88	@ 0x58
 800925c:	4615      	mov	r5, r2
 800925e:	461e      	mov	r6, r3
 8009260:	da0d      	bge.n	800927e <__swhatbuf_r+0x2e>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009268:	f04f 0100 	mov.w	r1, #0
 800926c:	bf14      	ite	ne
 800926e:	2340      	movne	r3, #64	@ 0x40
 8009270:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009274:	2000      	movs	r0, #0
 8009276:	6031      	str	r1, [r6, #0]
 8009278:	602b      	str	r3, [r5, #0]
 800927a:	b016      	add	sp, #88	@ 0x58
 800927c:	bd70      	pop	{r4, r5, r6, pc}
 800927e:	466a      	mov	r2, sp
 8009280:	f000 f848 	bl	8009314 <_fstat_r>
 8009284:	2800      	cmp	r0, #0
 8009286:	dbec      	blt.n	8009262 <__swhatbuf_r+0x12>
 8009288:	9901      	ldr	r1, [sp, #4]
 800928a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800928e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009292:	4259      	negs	r1, r3
 8009294:	4159      	adcs	r1, r3
 8009296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800929a:	e7eb      	b.n	8009274 <__swhatbuf_r+0x24>

0800929c <__smakebuf_r>:
 800929c:	898b      	ldrh	r3, [r1, #12]
 800929e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092a0:	079d      	lsls	r5, r3, #30
 80092a2:	4606      	mov	r6, r0
 80092a4:	460c      	mov	r4, r1
 80092a6:	d507      	bpl.n	80092b8 <__smakebuf_r+0x1c>
 80092a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	6123      	str	r3, [r4, #16]
 80092b0:	2301      	movs	r3, #1
 80092b2:	6163      	str	r3, [r4, #20]
 80092b4:	b003      	add	sp, #12
 80092b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b8:	ab01      	add	r3, sp, #4
 80092ba:	466a      	mov	r2, sp
 80092bc:	f7ff ffc8 	bl	8009250 <__swhatbuf_r>
 80092c0:	9f00      	ldr	r7, [sp, #0]
 80092c2:	4605      	mov	r5, r0
 80092c4:	4639      	mov	r1, r7
 80092c6:	4630      	mov	r0, r6
 80092c8:	f7ff fbbc 	bl	8008a44 <_malloc_r>
 80092cc:	b948      	cbnz	r0, 80092e2 <__smakebuf_r+0x46>
 80092ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d2:	059a      	lsls	r2, r3, #22
 80092d4:	d4ee      	bmi.n	80092b4 <__smakebuf_r+0x18>
 80092d6:	f023 0303 	bic.w	r3, r3, #3
 80092da:	f043 0302 	orr.w	r3, r3, #2
 80092de:	81a3      	strh	r3, [r4, #12]
 80092e0:	e7e2      	b.n	80092a8 <__smakebuf_r+0xc>
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	6020      	str	r0, [r4, #0]
 80092e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ea:	81a3      	strh	r3, [r4, #12]
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092f2:	b15b      	cbz	r3, 800930c <__smakebuf_r+0x70>
 80092f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092f8:	4630      	mov	r0, r6
 80092fa:	f000 f81d 	bl	8009338 <_isatty_r>
 80092fe:	b128      	cbz	r0, 800930c <__smakebuf_r+0x70>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	f023 0303 	bic.w	r3, r3, #3
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	81a3      	strh	r3, [r4, #12]
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	431d      	orrs	r5, r3
 8009310:	81a5      	strh	r5, [r4, #12]
 8009312:	e7cf      	b.n	80092b4 <__smakebuf_r+0x18>

08009314 <_fstat_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4d07      	ldr	r5, [pc, #28]	@ (8009334 <_fstat_r+0x20>)
 8009318:	2300      	movs	r3, #0
 800931a:	4604      	mov	r4, r0
 800931c:	4608      	mov	r0, r1
 800931e:	4611      	mov	r1, r2
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	f7f7 fcec 	bl	8000cfe <_fstat>
 8009326:	1c43      	adds	r3, r0, #1
 8009328:	d102      	bne.n	8009330 <_fstat_r+0x1c>
 800932a:	682b      	ldr	r3, [r5, #0]
 800932c:	b103      	cbz	r3, 8009330 <_fstat_r+0x1c>
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	bd38      	pop	{r3, r4, r5, pc}
 8009332:	bf00      	nop
 8009334:	20000aa0 	.word	0x20000aa0

08009338 <_isatty_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d06      	ldr	r5, [pc, #24]	@ (8009354 <_isatty_r+0x1c>)
 800933c:	2300      	movs	r3, #0
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	f7f7 fceb 	bl	8000d1e <_isatty>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_isatty_r+0x1a>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_isatty_r+0x1a>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	20000aa0 	.word	0x20000aa0

08009358 <_init>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	bf00      	nop
 800935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935e:	bc08      	pop	{r3}
 8009360:	469e      	mov	lr, r3
 8009362:	4770      	bx	lr

08009364 <_fini>:
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009366:	bf00      	nop
 8009368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936a:	bc08      	pop	{r3}
 800936c:	469e      	mov	lr, r3
 800936e:	4770      	bx	lr
